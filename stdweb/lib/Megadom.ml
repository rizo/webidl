module rec Array_buffer_view : sig
  type nonrec t = Js.any array

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Array_buffer_view

and Buffer_source : sig
  type nonrec t = Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Buffer_source

and Float32_array : sig
  type nonrec t = Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  struct
    type nonrec t = Js.any
    let of_any _ = assert false
    let to_any _ = assert false
  end

and Uint8_array : sig
  type nonrec t = Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  struct
    type nonrec t = Js.any
    let of_any _ = assert false
    let to_any _ = assert false
  end

and Array_buffer : sig
  type nonrec t = Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  struct
    type nonrec t = Js.any
    let of_any _ = assert false
    let to_any _ = assert false
  end

and Promise : sig
  type nonrec t = Js.any

  val of_any : (Js.any -> 'a) -> Js.any -> t
  val to_any : t -> Js.any
end =
  struct
    type nonrec t = Js.any
    let of_any _ = assert false
    let to_any _ = assert false
  end

and Angle_instanced_arrays : sig
  type t = [ `Angle_instanced_arrays ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ANGLEInstancedArrays} \
     [ANGLEInstancedArrays]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertex_attrib_array_divisor_angle : G_lenum.t

  val draw_arrays_instanced_angle :
    mode:G_lenum.t ->
    first:G_lint.t ->
    count:G_lsizei.t ->
    primcount:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ANGLEInstancedArrays/drawArraysInstancedANGLE} \
     [drawArraysInstancedANGLE] on MDN}."]

  val draw_elements_instanced_angle :
    mode:G_lenum.t ->
    count:G_lsizei.t ->
    type':G_lenum.t ->
    offset:G_lintptr.t ->
    primcount:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ANGLEInstancedArrays/drawElementsInstancedANGLE} \
     [drawElementsInstancedANGLE] on MDN}."]

  val vertex_attrib_divisor_angle :
    index:G_luint.t -> divisor:G_luint.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ANGLEInstancedArrays/vertexAttribDivisorANGLE} \
     [vertexAttribDivisorANGLE] on MDN}."]
end = struct
  type t = [ `Angle_instanced_arrays ] Js.t

  let t = Js.Ffi.constr "ANGLEInstancedArrays"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex_attrib_array_divisor_angle = 35070

  let draw_arrays_instanced_angle ~mode ~first ~count ~primcount this =
    let mode = G_lenum.to_any mode in
    let first = G_lint.to_any first in
    let count = G_lsizei.to_any count in
    let primcount = G_lsizei.to_any primcount in
    Js.to_unit
      (Js.Ffi.meth_call this "drawArraysInstancedANGLE"
         [| mode; first; count; primcount |]
      )

  let draw_elements_instanced_angle ~mode ~count ~type' ~offset ~primcount this
      =
    let mode = G_lenum.to_any mode in
    let count = G_lsizei.to_any count in
    let type' = G_lenum.to_any type' in
    let offset = G_lintptr.to_any offset in
    let primcount = G_lsizei.to_any primcount in
    Js.to_unit
      (Js.Ffi.meth_call this "drawElementsInstancedANGLE"
         [| mode; count; type'; offset; primcount |]
      )

  let vertex_attrib_divisor_angle ~index ~divisor this =
    let index = G_luint.to_any index in
    let divisor = G_luint.to_any divisor in
    Js.to_unit
      (Js.Ffi.meth_call this "vertexAttribDivisorANGLE" [| index; divisor |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ANGLEInstancedArrays} \
   [ANGLEInstancedArrays] on MDN}."]

and Abstract_range : sig
  type t = [ `Abstract_range ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange} \
     [AbstractRange]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val start_container : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startContainer} \
     [startContainer] on MDN}."]

  val start_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startOffset} \
     [startOffset] on MDN}."]

  val end_container : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endContainer} \
     [endContainer] on MDN}."]

  val end_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endOffset} \
     [endOffset] on MDN}."]

  val collapsed : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/collapsed} \
     [collapsed] on MDN}."]
end = struct
  type t = [ `Abstract_range ] Js.t

  let t = Js.Ffi.constr "AbstractRange"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let start_container this = Node.of_any (Js.Ffi.get this "startContainer")
  let start_offset this = Js.Any.to_int (Js.Ffi.get this "startOffset")
  let end_container this = Node.of_any (Js.Ffi.get this "endContainer")
  let end_offset this = Js.Any.to_int (Js.Ffi.get this "endOffset")
  let collapsed this = Js.Any.to_bool (Js.Ffi.get this "collapsed")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange} \
   [AbstractRange] on MDN}."]

and Analyser_options : sig
  type t [@@ocaml.doc "The type for the [AnalyserOptions] dictionary."]

  val make :
    ?fft_size:int ->
    ?max_decibels:float ->
    ?min_decibels:float ->
    ?smoothing_time_constant:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val fft_size : t -> int option
  val max_decibels : t -> float option
  val min_decibels : t -> float option
  val smoothing_time_constant : t -> float option
end = struct
  type t = Js.any

  let make ?fft_size ?max_decibels ?min_decibels ?smoothing_time_constant () =
    let fft_size = (Js.Any.nullable_of_option Js.Any.of_int) fft_size in
    let max_decibels =
      (Js.Any.nullable_of_option Js.Any.of_float) max_decibels
    in
    let min_decibels =
      (Js.Any.nullable_of_option Js.Any.of_float) min_decibels
    in
    let smoothing_time_constant =
      (Js.Any.nullable_of_option Js.Any.of_float) smoothing_time_constant
    in
    Js.Ffi.obj
      [|
        ("fftSize", fft_size);
        ("maxDecibels", max_decibels);
        ("minDecibels", min_decibels);
        ("smoothingTimeConstant", smoothing_time_constant);
      |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let fft_size this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "fftSize")

  let max_decibels this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "maxDecibels")

  let min_decibels this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "minDecibels")

  let smoothing_time_constant this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "smoothingTimeConstant")
end

and Analyser_node : sig
  type t = [ `Analyser_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode} \
     [AnalyserNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Analyser_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode} \
     [AnalyserNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Analyser_options.t ->
    unit ->
    'a super

  val get_float_frequency_data : array:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData} \
     [getFloatFrequencyData] on MDN}."]

  val get_byte_frequency_data : array:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData} \
     [getByteFrequencyData] on MDN}."]

  val get_float_time_domain_data : array:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData} \
     [getFloatTimeDomainData] on MDN}."]

  val get_byte_time_domain_data : array:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData} \
     [getByteTimeDomainData] on MDN}."]

  val fft_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize} \
     [fftSize] on MDN}."]

  val set_fft_size : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize} \
     [fftSize] on MDN}."]

  val frequency_bin_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount} \
     [frequencyBinCount] on MDN}."]

  val min_decibels : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels} \
     [minDecibels] on MDN}."]

  val set_min_decibels : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels} \
     [minDecibels] on MDN}."]

  val max_decibels : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels} \
     [maxDecibels] on MDN}."]

  val set_max_decibels : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels} \
     [maxDecibels] on MDN}."]

  val smoothing_time_constant : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant} \
     [smoothingTimeConstant] on MDN}."]

  val set_smoothing_time_constant : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant} \
     [smoothingTimeConstant] on MDN}."]
end = struct
  type t = [ `Analyser_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Analyser_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode} \
     [AnalyserNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AnalyserNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Analyser_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let get_float_frequency_data ~array this =
    let array = Float32_array.to_any array in
    Js.to_unit (Js.Ffi.meth_call this "getFloatFrequencyData" [| array |])

  let get_byte_frequency_data ~array this =
    let array = Uint8_array.to_any array in
    Js.to_unit (Js.Ffi.meth_call this "getByteFrequencyData" [| array |])

  let get_float_time_domain_data ~array this =
    let array = Float32_array.to_any array in
    Js.to_unit (Js.Ffi.meth_call this "getFloatTimeDomainData" [| array |])

  let get_byte_time_domain_data ~array this =
    let array = Uint8_array.to_any array in
    Js.to_unit (Js.Ffi.meth_call this "getByteTimeDomainData" [| array |])

  let fft_size this = Js.Any.to_int (Js.Ffi.get this "fftSize")
  let set_fft_size this x = Js.Ffi.set this "fftSize" (Js.Any.of_int x)

  let frequency_bin_count this =
    Js.Any.to_int (Js.Ffi.get this "frequencyBinCount")

  let min_decibels this = Js.Any.to_float (Js.Ffi.get this "minDecibels")
  let set_min_decibels this x = Js.Ffi.set this "minDecibels" (Js.Any.of_float x)
  let max_decibels this = Js.Any.to_float (Js.Ffi.get this "maxDecibels")
  let set_max_decibels this x = Js.Ffi.set this "maxDecibels" (Js.Any.of_float x)

  let smoothing_time_constant this =
    Js.Any.to_float (Js.Ffi.get this "smoothingTimeConstant")

  let set_smoothing_time_constant this x =
    Js.Ffi.set this "smoothingTimeConstant" (Js.Any.of_float x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode} \
   [AnalyserNode] on MDN}."]

and Animation_event : sig
  type t = [ `Animation_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent} \
     [AnimationEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Animation_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent} \
     [AnimationEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Animation_event_init.t -> unit -> 'a super

  val animation_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName} \
     [animationName] on MDN}."]

  val elapsed_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime} \
     [elapsedTime] on MDN}."]

  val pseudo_element : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement} \
     [pseudoElement] on MDN}."]
end = struct
  type t = [ `Animation_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Animation_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent} \
     [AnimationEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AnimationEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Animation_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let animation_name this = Js.Any.to_string (Js.Ffi.get this "animationName")
  let elapsed_time this = Js.Any.to_float (Js.Ffi.get this "elapsedTime")
  let pseudo_element this = Js.Any.to_string (Js.Ffi.get this "pseudoElement")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent} \
   [AnimationEvent] on MDN}."]

and Animation_event_init : sig
  type t [@@ocaml.doc "The type for the [AnimationEventInit] dictionary."]

  val make :
    ?animation_name:string ->
    ?elapsed_time:float ->
    ?pseudo_element:string ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val animation_name : t -> string option
  val elapsed_time : t -> float option
  val pseudo_element : t -> string option
end = struct
  type t = Js.any

  let make ?animation_name ?elapsed_time ?pseudo_element () =
    let animation_name =
      (Js.Any.nullable_of_option Js.Any.of_string) animation_name
    in
    let elapsed_time =
      (Js.Any.nullable_of_option Js.Any.of_float) elapsed_time
    in
    let pseudo_element =
      (Js.Any.nullable_of_option Js.Any.of_string) pseudo_element
    in
    Js.Ffi.obj
      [|
        ("animationName", animation_name);
        ("elapsedTime", elapsed_time);
        ("pseudoElement", pseudo_element);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let animation_name this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "animationName")

  let elapsed_time this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "elapsedTime")

  let pseudo_element this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "pseudoElement")
end

and Attr : sig
  type t = [ `Attr ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Attr} [Attr]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Attr | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Attr} [Attr]} interface \
     or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val namespace_uri : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI} \
     [namespaceURI] on MDN}."]

  val prefix : t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/prefix} \
     [prefix] on MDN}."]

  val local_name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/localName} \
     [localName] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/name} \
     [name] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/value} \
     [value] on MDN}."]

  val owner_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Attr/ownerElement} \
     [ownerElement] on MDN}."]

  val specified : t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr/specified} \
     [specified] on MDN}."]
end = struct
  type t = [ `Attr ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Attr | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Attr} [Attr]} interface \
     or any base interface that it inherits."]

  let t = Js.Ffi.constr "Attr"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this

  let namespace_uri this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "namespaceURI")

  let prefix this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "prefix")

  let local_name this = Js.Any.to_string (Js.Ffi.get this "localName")
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)

  let owner_element this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "ownerElement")

  let specified this = Js.Any.to_bool (Js.Ffi.get this "specified")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Attr} [Attr] on \
   MDN}."]

and Audio_buffer_options : sig
  type t [@@ocaml.doc "The type for the [AudioBufferOptions] dictionary."]

  val make :
    ?number_of_channels:int -> length:int -> sample_rate:float -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val number_of_channels : t -> int option
  val length : t -> int
  val sample_rate : t -> float
end = struct
  type t = Js.any

  let make ?number_of_channels ~length ~sample_rate () =
    let number_of_channels =
      (Js.Any.nullable_of_option Js.Any.of_int) number_of_channels
    in
    let length = Js.Any.of_int length in
    let sample_rate = Js.Any.of_float sample_rate in
    Js.Ffi.obj
      [|
        ("numberOfChannels", number_of_channels);
        ("length", length);
        ("sampleRate", sample_rate);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let number_of_channels this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "numberOfChannels")

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let sample_rate this = Js.Any.to_float (Js.Ffi.get this "sampleRate")
end

and Audio_buffer : sig
  type t = [ `Audio_buffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer} \
     [AudioBuffer]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : options:Audio_buffer_options.t -> unit -> t

  val sample_rate : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate} \
     [sampleRate] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length} \
     [length] on MDN}."]

  val duration : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration} \
     [duration] on MDN}."]

  val number_of_channels : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels} \
     [numberOfChannels] on MDN}."]

  val get_channel_data : channel:int -> t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData} \
     [getChannelData] on MDN}."]

  val copy_from_channel :
    destination:'todo_buffer ->
    channel_number:int ->
    ?start_in_channel:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel} \
     [copyFromChannel] on MDN}."]

  val copy_to_channel :
    source:'todo_buffer ->
    channel_number:int ->
    ?start_in_channel:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel} \
     [copyToChannel] on MDN}."]
end = struct
  type t = [ `Audio_buffer ] Js.t

  let t = Js.Ffi.constr "AudioBuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~options () =
    let options = Audio_buffer_options.to_any options in
    Js.Ffi.obj_new t [| options |]

  let sample_rate this = Js.Any.to_float (Js.Ffi.get this "sampleRate")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let duration this = Js.Any.to_float (Js.Ffi.get this "duration")

  let number_of_channels this =
    Js.Any.to_int (Js.Ffi.get this "numberOfChannels")

  let get_channel_data ~channel this =
    let channel = Js.Any.of_int channel in
    Float32_array.of_any (Js.Ffi.meth_call this "getChannelData" [| channel |])

  let copy_from_channel ~destination ~channel_number ?start_in_channel this =
    let destination = Float32_array.to_any destination in
    let channel_number = Js.Any.of_int channel_number in
    let start_in_channel =
      (Js.Any.undefined_of_option Js.Any.of_int) start_in_channel
    in
    Js.to_unit
      (Js.Ffi.meth_call this "copyFromChannel"
         [| destination; channel_number; start_in_channel |]
      )

  let copy_to_channel ~source ~channel_number ?start_in_channel this =
    let source = Float32_array.to_any source in
    let channel_number = Js.Any.of_int channel_number in
    let start_in_channel =
      (Js.Any.undefined_of_option Js.Any.of_int) start_in_channel
    in
    Js.to_unit
      (Js.Ffi.meth_call this "copyToChannel"
         [| source; channel_number; start_in_channel |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer} \
   [AudioBuffer] on MDN}."]

and Audio_buffer_source_options : sig
  type t [@@ocaml.doc "The type for the [AudioBufferSourceOptions] dictionary."]

  val make :
    ?buffer:Audio_buffer.t option ->
    ?detune:float ->
    ?loop:bool ->
    ?loop_end:float ->
    ?loop_start:float ->
    ?playback_rate:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val buffer : t -> Audio_buffer.t option option
  val detune : t -> float option
  val loop : t -> bool option
  val loop_end : t -> float option
  val loop_start : t -> float option
  val playback_rate : t -> float option
end = struct
  type t = Js.any

  let make ?buffer ?detune ?loop ?loop_end ?loop_start ?playback_rate () =
    let buffer =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Audio_buffer.to_any))
        buffer
    in
    let detune = (Js.Any.nullable_of_option Js.Any.of_float) detune in
    let loop = (Js.Any.nullable_of_option Js.Any.of_bool) loop in
    let loop_end = (Js.Any.nullable_of_option Js.Any.of_float) loop_end in
    let loop_start = (Js.Any.nullable_of_option Js.Any.of_float) loop_start in
    let playback_rate =
      (Js.Any.nullable_of_option Js.Any.of_float) playback_rate
    in
    Js.Ffi.obj
      [|
        ("buffer", buffer);
        ("detune", detune);
        ("loop", loop);
        ("loopEnd", loop_end);
        ("loopStart", loop_start);
        ("playbackRate", playback_rate);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let buffer this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Audio_buffer.of_any))
      (Js.Ffi.get this "buffer")

  let detune this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "detune")

  let loop this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "loop")

  let loop_end this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "loopEnd")

  let loop_start this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "loopStart")

  let playback_rate this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "playbackRate")
end

and Audio_buffer_source_node : sig
  type t = [ `Audio_buffer_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode} \
     [AudioBufferSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Audio_buffer_source_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode} \
     [AudioBufferSourceNode]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Audio_buffer_source_options.t ->
    unit ->
    'a super

  val buffer : t -> Audio_buffer.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer} \
     [buffer] on MDN}."]

  val set_buffer : t -> Audio_buffer.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer} \
     [buffer] on MDN}."]

  val playback_rate : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate} \
     [playbackRate] on MDN}."]

  val detune : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune} \
     [detune] on MDN}."]

  val loop : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop} \
     [loop] on MDN}."]

  val set_loop : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop} \
     [loop] on MDN}."]

  val loop_start : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart} \
     [loopStart] on MDN}."]

  val set_loop_start : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart} \
     [loopStart] on MDN}."]

  val loop_end : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd} \
     [loopEnd] on MDN}."]

  val set_loop_end : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd} \
     [loopEnd] on MDN}."]

  val start : ?when':float -> ?offset:float -> ?duration:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start} \
     [start] on MDN}."]
end = struct
  type t = [ `Audio_buffer_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Audio_buffer_source_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode} \
     [AudioBufferSourceNode]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "AudioBufferSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_scheduled_source_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Audio_buffer_source_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let buffer this =
    (Js.Any.nullable_to_option Audio_buffer.of_any) (Js.Ffi.get this "buffer")

  let set_buffer this x =
    Js.Ffi.set this "buffer" ((Js.Any.nullable_of_option Audio_buffer.to_any) x)

  let playback_rate this = Audio_param.of_any (Js.Ffi.get this "playbackRate")
  let detune this = Audio_param.of_any (Js.Ffi.get this "detune")
  let loop this = Js.Any.to_bool (Js.Ffi.get this "loop")
  let set_loop this x = Js.Ffi.set this "loop" (Js.Any.of_bool x)
  let loop_start this = Js.Any.to_float (Js.Ffi.get this "loopStart")
  let set_loop_start this x = Js.Ffi.set this "loopStart" (Js.Any.of_float x)
  let loop_end this = Js.Any.to_float (Js.Ffi.get this "loopEnd")
  let set_loop_end this x = Js.Ffi.set this "loopEnd" (Js.Any.of_float x)

  let start ?when' ?offset ?duration this =
    let when' = (Js.Any.undefined_of_option Js.Any.of_float) when' in
    let offset = (Js.Any.undefined_of_option Js.Any.of_float) offset in
    let duration = (Js.Any.undefined_of_option Js.Any.of_float) duration in
    Js.to_unit (Js.Ffi.meth_call this "start" [| when'; offset; duration |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode} \
   [AudioBufferSourceNode] on MDN}."]

and Audio_context_latency_category : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val balanced : t
  val interactive : t
  val playback : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let balanced = Js.of_string "balanced"
  let interactive = Js.of_string "interactive"
  let playback = Js.of_string "playback"
end

and Audio_context_options : sig
  type t [@@ocaml.doc "The type for the [AudioContextOptions] dictionary."]

  val make :
    ?latency_hint:[< `Audio_context_latency_category | `Double ] Js.t ->
    ?sample_rate:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val latency_hint :
    t -> [< `Audio_context_latency_category | `Double ] Js.t option

  val sample_rate : t -> float option
end = struct
  type t = Js.any

  let make ?latency_hint ?sample_rate () =
    let latency_hint = (Js.Any.nullable_of_option Js.to_any) latency_hint in
    let sample_rate = (Js.Any.nullable_of_option Js.Any.of_float) sample_rate in
    Js.Ffi.obj [| ("latencyHint", latency_hint); ("sampleRate", sample_rate) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let latency_hint this =
    (Js.Any.nullable_to_option Js.of_any) (Js.Ffi.get this "latencyHint")

  let sample_rate this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "sampleRate")
end

and Audio_timestamp : sig
  type t [@@ocaml.doc "The type for the [AudioTimestamp] dictionary."]

  val make :
    ?context_time:float ->
    ?performance_time:Dom_high_res_time_stamp.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val context_time : t -> float option
  val performance_time : t -> Dom_high_res_time_stamp.t option
end = struct
  type t = Js.any

  let make ?context_time ?performance_time () =
    let context_time =
      (Js.Any.nullable_of_option Js.Any.of_float) context_time
    in
    let performance_time =
      (Js.Any.nullable_of_option Dom_high_res_time_stamp.to_any)
        performance_time
    in
    Js.Ffi.obj
      [| ("contextTime", context_time); ("performanceTime", performance_time) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let context_time this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "contextTime")

  let performance_time this =
    (Js.Any.nullable_to_option Dom_high_res_time_stamp.of_any)
      (Js.Ffi.get this "performanceTime")
end

and Audio_context : sig
  type t = [ `Audio_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext} \
     [AudioContext]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Audio_context | `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext} \
     [AudioContext]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : ?context_options:Audio_context_options.t -> unit -> 'a super

  val base_latency : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency} \
     [baseLatency] on MDN}."]

  val output_latency : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency} \
     [outputLatency] on MDN}."]

  val get_output_timestamp : t -> Audio_timestamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp} \
     [getOutputTimestamp] on MDN}."]

  val suspend : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend} \
     [suspend] on MDN}."]

  val close : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close} \
     [close] on MDN}."]

  val create_media_element_source :
    media_element:Html_media_element.t ->
    t ->
    'a Media_element_audio_source_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource} \
     [createMediaElementSource] on MDN}."]

  val create_media_stream_source :
    media_stream:Media_stream.t -> t -> 'a Media_stream_audio_source_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource} \
     [createMediaStreamSource] on MDN}."]

  val create_media_stream_track_source :
    media_stream_track:Media_stream_track.t ->
    t ->
    'a Media_stream_track_audio_source_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource} \
     [createMediaStreamTrackSource] on MDN}."]

  val create_media_stream_destination :
    t -> 'a Media_stream_audio_destination_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination} \
     [createMediaStreamDestination] on MDN}."]
end = struct
  type t = [ `Audio_context ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Audio_context | `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioContext} \
     [AudioContext]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AudioContext"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_base_audio_context this = Js.Ffi.magic this

  let make ?context_options () =
    let context_options =
      (Js.Any.undefined_of_option Audio_context_options.to_any) context_options
    in
    Js.Ffi.obj_new t [| context_options |]

  let base_latency this = Js.Any.to_float (Js.Ffi.get this "baseLatency")
  let output_latency this = Js.Any.to_float (Js.Ffi.get this "outputLatency")

  let get_output_timestamp this =
    Audio_timestamp.of_any (Js.Ffi.meth_call this "getOutputTimestamp" [||])

  let suspend this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "suspend" [||])

  let close this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "close" [||])

  let create_media_element_source ~media_element this =
    let media_element = Html_media_element.to_any media_element in
    Media_element_audio_source_node.of_any
      (Js.Ffi.meth_call this "createMediaElementSource" [| media_element |])

  let create_media_stream_source ~media_stream this =
    let media_stream = Media_stream.to_any media_stream in
    Media_stream_audio_source_node.of_any
      (Js.Ffi.meth_call this "createMediaStreamSource" [| media_stream |])

  let create_media_stream_track_source ~media_stream_track this =
    let media_stream_track = Media_stream_track.to_any media_stream_track in
    Media_stream_track_audio_source_node.of_any
      (Js.Ffi.meth_call this "createMediaStreamTrackSource"
         [| media_stream_track |]
      )

  let create_media_stream_destination this =
    Media_stream_audio_destination_node.of_any
      (Js.Ffi.meth_call this "createMediaStreamDestination" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext} \
   [AudioContext] on MDN}."]

and Audio_destination_node : sig
  type t = [ `Audio_destination_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode} \
     [AudioDestinationNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Audio_destination_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode} \
     [AudioDestinationNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val max_channel_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount} \
     [maxChannelCount] on MDN}."]
end = struct
  type t = [ `Audio_destination_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Audio_destination_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode} \
     [AudioDestinationNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AudioDestinationNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this
  let max_channel_count this = Js.Any.to_int (Js.Ffi.get this "maxChannelCount")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode} \
   [AudioDestinationNode] on MDN}."]

and Audio_listener : sig
  type t = [ `Audio_listener ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener} \
     [AudioListener]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val position_x : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionX} \
     [positionX] on MDN}."]

  val position_y : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionY} \
     [positionY] on MDN}."]

  val position_z : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionZ} \
     [positionZ] on MDN}."]

  val forward_x : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardX} \
     [forwardX] on MDN}."]

  val forward_y : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardY} \
     [forwardY] on MDN}."]

  val forward_z : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardZ} \
     [forwardZ] on MDN}."]

  val up_x : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upX} [upX] \
     on MDN}."]

  val up_y : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upY} [upY] \
     on MDN}."]

  val up_z : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upZ} [upZ] \
     on MDN}."]

  val set_position : x:float -> y:float -> z:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition} \
     [setPosition] on MDN}."]

  val set_orientation :
    x:float ->
    y:float ->
    z:float ->
    x_up:float ->
    y_up:float ->
    z_up:float ->
    t ->
    t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setOrientation} \
     [setOrientation] on MDN}."]
end = struct
  type t = [ `Audio_listener ] Js.t

  let t = Js.Ffi.constr "AudioListener"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let position_x this = Audio_param.of_any (Js.Ffi.get this "positionX")
  let position_y this = Audio_param.of_any (Js.Ffi.get this "positionY")
  let position_z this = Audio_param.of_any (Js.Ffi.get this "positionZ")
  let forward_x this = Audio_param.of_any (Js.Ffi.get this "forwardX")
  let forward_y this = Audio_param.of_any (Js.Ffi.get this "forwardY")
  let forward_z this = Audio_param.of_any (Js.Ffi.get this "forwardZ")
  let up_x this = Audio_param.of_any (Js.Ffi.get this "upX")
  let up_y this = Audio_param.of_any (Js.Ffi.get this "upY")
  let up_z this = Audio_param.of_any (Js.Ffi.get this "upZ")

  let set_position ~x ~y ~z this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let z = Js.Any.of_float z in
    of_any (Js.Ffi.meth_call this "setPosition" [| x; y; z |])

  let set_orientation ~x ~y ~z ~x_up ~y_up ~z_up this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let z = Js.Any.of_float z in
    let x_up = Js.Any.of_float x_up in
    let y_up = Js.Any.of_float y_up in
    let z_up = Js.Any.of_float z_up in
    of_any
      (Js.Ffi.meth_call this "setOrientation" [| x; y; z; x_up; y_up; z_up |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioListener} \
   [AudioListener] on MDN}."]

and Channel_count_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val max : t
  val clamped_max : t
  val explicit : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let max = Js.of_string "max"
  let clamped_max = Js.of_string "clamped-max"
  let explicit = Js.of_string "explicit"
end

and Channel_interpretation : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val speakers : t
  val discrete : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let speakers = Js.of_string "speakers"
  let discrete = Js.of_string "discrete"
end

and Audio_node_options : sig
  type t [@@ocaml.doc "The type for the [AudioNodeOptions] dictionary."]

  val make :
    ?channel_count:int ->
    ?channel_count_mode:Channel_count_mode.t ->
    ?channel_interpretation:Channel_interpretation.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val channel_count : t -> int option
  val channel_count_mode : t -> Channel_count_mode.t option
  val channel_interpretation : t -> Channel_interpretation.t option
end = struct
  type t = Js.any

  let make ?channel_count ?channel_count_mode ?channel_interpretation () =
    let channel_count =
      (Js.Any.nullable_of_option Js.Any.of_int) channel_count
    in
    let channel_count_mode =
      (Js.Any.nullable_of_option Channel_count_mode.to_any) channel_count_mode
    in
    let channel_interpretation =
      (Js.Any.nullable_of_option Channel_interpretation.to_any)
        channel_interpretation
    in
    Js.Ffi.obj
      [|
        ("channelCount", channel_count);
        ("channelCountMode", channel_count_mode);
        ("channelInterpretation", channel_interpretation);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let channel_count this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "channelCount")

  let channel_count_mode this =
    (Js.Any.nullable_to_option Channel_count_mode.of_any)
      (Js.Ffi.get this "channelCountMode")

  let channel_interpretation this =
    (Js.Any.nullable_to_option Channel_interpretation.of_any)
      (Js.Ffi.get this "channelInterpretation")
end

and Audio_node : sig
  type t = [ `Audio_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode} [AudioNode]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode} [AudioNode]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val connect : destination_node:t -> ?output:int -> ?input:int -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect} \
     [connect] on MDN}."]

  val connect : destination_param:Audio_param.t -> ?output:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect} \
     [connect] on MDN}."]

  val disconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : output:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : destination:t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : destination:t -> output:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : destination:t -> output:int -> input:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : destination:Audio_param.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val disconnect : destination:Audio_param.t -> output:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect} \
     [disconnect] on MDN}."]

  val context : t -> 'a Base_audio_context.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context} \
     [context] on MDN}."]

  val number_of_inputs : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs} \
     [numberOfInputs] on MDN}."]

  val number_of_outputs : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs} \
     [numberOfOutputs] on MDN}."]

  val channel_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount} \
     [channelCount] on MDN}."]

  val set_channel_count : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount} \
     [channelCount] on MDN}."]

  val channel_count_mode : t -> Channel_count_mode.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode} \
     [channelCountMode] on MDN}."]

  val set_channel_count_mode : t -> Channel_count_mode.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode} \
     [channelCountMode] on MDN}."]

  val channel_interpretation : t -> Channel_interpretation.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation} \
     [channelInterpretation] on MDN}."]

  val set_channel_interpretation : t -> Channel_interpretation.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation} \
     [channelInterpretation] on MDN}."]
end = struct
  type t = [ `Audio_node ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioNode} [AudioNode]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AudioNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let connect ~destination_node ?output ?input this =
    let destination_node = to_any destination_node in
    let output = (Js.Any.undefined_of_option Js.Any.of_int) output in
    let input = (Js.Any.undefined_of_option Js.Any.of_int) input in
    of_any
      (Js.Ffi.meth_call this "connect" [| destination_node; output; input |])

  let connect ~destination_param ?output this =
    let destination_param = Audio_param.to_any destination_param in
    let output = (Js.Any.undefined_of_option Js.Any.of_int) output in
    Js.to_unit (Js.Ffi.meth_call this "connect" [| destination_param; output |])

  let disconnect this = Js.to_unit (Js.Ffi.meth_call this "disconnect" [||])

  let disconnect ~output this =
    let output = Js.Any.of_int output in
    Js.to_unit (Js.Ffi.meth_call this "disconnect" [| output |])

  let disconnect ~destination this =
    let destination = to_any destination in
    Js.to_unit (Js.Ffi.meth_call this "disconnect" [| destination |])

  let disconnect ~destination ~output this =
    let destination = to_any destination in
    let output = Js.Any.of_int output in
    Js.to_unit (Js.Ffi.meth_call this "disconnect" [| destination; output |])

  let disconnect ~destination ~output ~input this =
    let destination = to_any destination in
    let output = Js.Any.of_int output in
    let input = Js.Any.of_int input in
    Js.to_unit
      (Js.Ffi.meth_call this "disconnect" [| destination; output; input |])

  let disconnect ~destination this =
    let destination = Audio_param.to_any destination in
    Js.to_unit (Js.Ffi.meth_call this "disconnect" [| destination |])

  let disconnect ~destination ~output this =
    let destination = Audio_param.to_any destination in
    let output = Js.Any.of_int output in
    Js.to_unit (Js.Ffi.meth_call this "disconnect" [| destination; output |])

  let context this = Base_audio_context.of_any (Js.Ffi.get this "context")
  let number_of_inputs this = Js.Any.to_int (Js.Ffi.get this "numberOfInputs")
  let number_of_outputs this = Js.Any.to_int (Js.Ffi.get this "numberOfOutputs")
  let channel_count this = Js.Any.to_int (Js.Ffi.get this "channelCount")
  let set_channel_count this x = Js.Ffi.set this "channelCount" (Js.Any.of_int x)

  let channel_count_mode this =
    Channel_count_mode.of_any (Js.Ffi.get this "channelCountMode")

  let set_channel_count_mode this x =
    Js.Ffi.set this "channelCountMode" (Channel_count_mode.to_any x)

  let channel_interpretation this =
    Channel_interpretation.of_any (Js.Ffi.get this "channelInterpretation")

  let set_channel_interpretation this x =
    Js.Ffi.set this "channelInterpretation" (Channel_interpretation.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioNode} \
   [AudioNode] on MDN}."]

and Automation_rate : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val a_rate : t
  val k_rate : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let a_rate = Js.of_string "a-rate"
  let k_rate = Js.of_string "k-rate"
end

and Audio_param : sig
  type t = [ `Audio_param ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam} \
     [AudioParam]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value} \
     [value] on MDN}."]

  val set_value : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value} \
     [value] on MDN}."]

  val automation_rate : t -> Automation_rate.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/automationRate} \
     [automationRate] on MDN}."]

  val set_automation_rate : t -> Automation_rate.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/automationRate} \
     [automationRate] on MDN}."]

  val default_value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue} \
     [defaultValue] on MDN}."]

  val min_value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/minValue} \
     [minValue] on MDN}."]

  val max_value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/maxValue} \
     [maxValue] on MDN}."]

  val set_value_at_time : value:float -> start_time:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime} \
     [setValueAtTime] on MDN}."]

  val linear_ramp_to_value_at_time : value:float -> end_time:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime} \
     [linearRampToValueAtTime] on MDN}."]

  val exponential_ramp_to_value_at_time :
    value:float -> end_time:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime} \
     [exponentialRampToValueAtTime] on MDN}."]

  val set_target_at_time :
    target:float -> start_time:float -> time_constant:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime} \
     [setTargetAtTime] on MDN}."]

  val set_value_curve_at_time :
    values:float array -> start_time:float -> duration:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime} \
     [setValueCurveAtTime] on MDN}."]

  val cancel_scheduled_values : cancel_time:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues} \
     [cancelScheduledValues] on MDN}."]

  val cancel_and_hold_at_time : cancel_time:float -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime} \
     [cancelAndHoldAtTime] on MDN}."]
end = struct
  type t = [ `Audio_param ] Js.t

  let t = Js.Ffi.constr "AudioParam"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let value this = Js.Any.to_float (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_float x)

  let automation_rate this =
    Automation_rate.of_any (Js.Ffi.get this "automationRate")

  let set_automation_rate this x =
    Js.Ffi.set this "automationRate" (Automation_rate.to_any x)

  let default_value this = Js.Any.to_float (Js.Ffi.get this "defaultValue")
  let min_value this = Js.Any.to_float (Js.Ffi.get this "minValue")
  let max_value this = Js.Any.to_float (Js.Ffi.get this "maxValue")

  let set_value_at_time ~value ~start_time this =
    let value = Js.Any.of_float value in
    let start_time = Js.Any.of_float start_time in
    of_any (Js.Ffi.meth_call this "setValueAtTime" [| value; start_time |])

  let linear_ramp_to_value_at_time ~value ~end_time this =
    let value = Js.Any.of_float value in
    let end_time = Js.Any.of_float end_time in
    of_any
      (Js.Ffi.meth_call this "linearRampToValueAtTime" [| value; end_time |])

  let exponential_ramp_to_value_at_time ~value ~end_time this =
    let value = Js.Any.of_float value in
    let end_time = Js.Any.of_float end_time in
    of_any
      (Js.Ffi.meth_call this "exponentialRampToValueAtTime"
         [| value; end_time |]
      )

  let set_target_at_time ~target ~start_time ~time_constant this =
    let target = Js.Any.of_float target in
    let start_time = Js.Any.of_float start_time in
    let time_constant = Js.Any.of_float time_constant in
    of_any
      (Js.Ffi.meth_call this "setTargetAtTime"
         [| target; start_time; time_constant |]
      )

  let set_value_curve_at_time ~values ~start_time ~duration this =
    let values = (Js.Any.of_array Js.Any.of_float) values in
    let start_time = Js.Any.of_float start_time in
    let duration = Js.Any.of_float duration in
    of_any
      (Js.Ffi.meth_call this "setValueCurveAtTime"
         [| values; start_time; duration |]
      )

  let cancel_scheduled_values ~cancel_time this =
    let cancel_time = Js.Any.of_float cancel_time in
    of_any (Js.Ffi.meth_call this "cancelScheduledValues" [| cancel_time |])

  let cancel_and_hold_at_time ~cancel_time this =
    let cancel_time = Js.Any.of_float cancel_time in
    of_any (Js.Ffi.meth_call this "cancelAndHoldAtTime" [| cancel_time |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioParam} \
   [AudioParam] on MDN}."]

and Audio_scheduled_source_node : sig
  type t = [ `Audio_scheduled_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode} \
     [AudioScheduledSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Audio_scheduled_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode} \
     [AudioScheduledSourceNode]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val onended : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended} \
     [onended] on MDN}."]

  val set_onended : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended} \
     [onended] on MDN}."]

  val start : ?when':float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start} \
     [start] on MDN}."]

  val stop : ?when':float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop} \
     [stop] on MDN}."]
end = struct
  type t = [ `Audio_scheduled_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Audio_scheduled_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode} \
     [AudioScheduledSourceNode]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "AudioScheduledSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this
  let onended this = Event_handler.of_any (Js.Ffi.get this "onended")
  let set_onended this x = Js.Ffi.set this "onended" (Event_handler.to_any x)

  let start ?when' this =
    let when' = (Js.Any.undefined_of_option Js.Any.of_float) when' in
    Js.to_unit (Js.Ffi.meth_call this "start" [| when' |])

  let stop ?when' this =
    let when' = (Js.Any.undefined_of_option Js.Any.of_float) when' in
    Js.to_unit (Js.Ffi.meth_call this "stop" [| when' |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode} \
   [AudioScheduledSourceNode] on MDN}."]

and Audio_track : sig
  type t = [ `Audio_track ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack} \
     [AudioTrack]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/id} \
     [id] on MDN}."]

  val kind : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/kind} \
     [kind] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/label} \
     [label] on MDN}."]

  val language : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/language} \
     [language] on MDN}."]

  val enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/enabled} \
     [enabled] on MDN}."]

  val set_enabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/enabled} \
     [enabled] on MDN}."]
end = struct
  type t = [ `Audio_track ] Js.t

  let t = Js.Ffi.constr "AudioTrack"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let kind this = Js.Any.to_string (Js.Ffi.get this "kind")
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let language this = Js.Any.to_string (Js.Ffi.get this "language")
  let enabled this = Js.Any.to_bool (Js.Ffi.get this "enabled")
  let set_enabled this x = Js.Ffi.set this "enabled" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack} \
   [AudioTrack] on MDN}."]

and Audio_track_list : sig
  type t = [ `Audio_track_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList} \
     [AudioTrackList]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Audio_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList} \
     [AudioTrackList]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/length} \
     [length] on MDN}."]

  val get : index:int -> t -> Audio_track.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/get} \
     [get] on MDN}."]

  val get_track_by_id : id:string -> t -> Audio_track.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/getTrackById} \
     [getTrackById] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onchange} \
     [onchange] on MDN}."]

  val onaddtrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val set_onaddtrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val onremovetrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]

  val set_onremovetrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]
end = struct
  type t = [ `Audio_track_list ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Audio_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList} \
     [AudioTrackList]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "AudioTrackList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Audio_track.of_any (Js.Ffi.meth_call this "get" [| index |])

  let get_track_by_id ~id this =
    let id = Js.Any.of_string id in
    (Js.Any.nullable_to_option Audio_track.of_any)
      (Js.Ffi.meth_call this "getTrackById" [| id |])

  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)
  let onaddtrack this = Event_handler.of_any (Js.Ffi.get this "onaddtrack")

  let set_onaddtrack this x =
    Js.Ffi.set this "onaddtrack" (Event_handler.to_any x)

  let onremovetrack this = Event_handler.of_any (Js.Ffi.get this "onremovetrack")

  let set_onremovetrack this x =
    Js.Ffi.set this "onremovetrack" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList} \
   [AudioTrackList] on MDN}."]

and Audio_context_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val suspended : t
  val running : t
  val closed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let suspended = Js.of_string "suspended"
  let running = Js.of_string "running"
  let closed = Js.of_string "closed"
end

and Decode_error_callback : sig
  type t = Dom_exception.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Decode_error_callback

and Decode_success_callback : sig
  type t = Audio_buffer.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Decode_success_callback

and Base_audio_context : sig
  type t = [ `Base_audio_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext} \
     [BaseAudioContext]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext} \
     [BaseAudioContext]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val destination : t -> 'a Audio_destination_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination} \
     [destination] on MDN}."]

  val sample_rate : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate} \
     [sampleRate] on MDN}."]

  val current_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime} \
     [currentTime] on MDN}."]

  val listener : t -> Audio_listener.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener} \
     [listener] on MDN}."]

  val state : t -> Audio_context_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state} \
     [state] on MDN}."]

  val resume : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/resume} \
     [resume] on MDN}."]

  val onstatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange} \
     [onstatechange] on MDN}."]

  val set_onstatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange} \
     [onstatechange] on MDN}."]

  val create_buffer :
    number_of_channels:int ->
    length:int ->
    sample_rate:float ->
    t ->
    Audio_buffer.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer} \
     [createBuffer] on MDN}."]

  val decode_audio_data :
    audio_data:'todo_buffer ->
    ?success_callback:Decode_success_callback.t ->
    ?error_callback:Decode_error_callback.t ->
    t ->
    Audio_buffer.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData} \
     [decodeAudioData] on MDN}."]

  val create_buffer_source : t -> 'a Audio_buffer_source_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource} \
     [createBufferSource] on MDN}."]

  val create_constant_source : t -> 'a Constant_source_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConstantSource} \
     [createConstantSource] on MDN}."]

  val create_analyser : t -> 'a Analyser_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser} \
     [createAnalyser] on MDN}."]

  val create_gain : t -> 'a Gain_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain} \
     [createGain] on MDN}."]

  val create_biquad_filter : t -> 'a Biquad_filter_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter} \
     [createBiquadFilter] on MDN}."]

  val create_panner : t -> 'a Panner_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPanner} \
     [createPanner] on MDN}."]

  val create_stereo_panner : t -> 'a Stereo_panner_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createStereoPanner} \
     [createStereoPanner] on MDN}."]

  val create_channel_splitter :
    ?number_of_outputs:int -> t -> 'a Channel_splitter_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelSplitter} \
     [createChannelSplitter] on MDN}."]

  val create_channel_merger :
    ?number_of_inputs:int -> t -> 'a Channel_merger_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelMerger} \
     [createChannelMerger] on MDN}."]

  val create_oscillator : t -> 'a Oscillator_node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createOscillator} \
     [createOscillator] on MDN}."]
end = struct
  type t = [ `Base_audio_context ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext} \
     [BaseAudioContext]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "BaseAudioContext"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let destination this =
    Audio_destination_node.of_any (Js.Ffi.get this "destination")

  let sample_rate this = Js.Any.to_float (Js.Ffi.get this "sampleRate")
  let current_time this = Js.Any.to_float (Js.Ffi.get this "currentTime")
  let listener this = Audio_listener.of_any (Js.Ffi.get this "listener")
  let state this = Audio_context_state.of_any (Js.Ffi.get this "state")

  let resume this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "resume" [||])

  let onstatechange this = Event_handler.of_any (Js.Ffi.get this "onstatechange")

  let set_onstatechange this x =
    Js.Ffi.set this "onstatechange" (Event_handler.to_any x)

  let create_buffer ~number_of_channels ~length ~sample_rate this =
    let number_of_channels = Js.Any.of_int number_of_channels in
    let length = Js.Any.of_int length in
    let sample_rate = Js.Any.of_float sample_rate in
    Audio_buffer.of_any
      (Js.Ffi.meth_call this "createBuffer"
         [| number_of_channels; length; sample_rate |]
      )

  let decode_audio_data ~audio_data ?success_callback ?error_callback this =
    let audio_data = Array_buffer.to_any audio_data in
    let success_callback =
      (Js.Any.undefined_of_option Decode_success_callback.to_any)
        success_callback
    in
    let error_callback =
      (Js.Any.undefined_of_option Decode_error_callback.to_any) error_callback
    in
    (Promise.of_any Audio_buffer.of_any)
      (Js.Ffi.meth_call this "decodeAudioData"
         [| audio_data; success_callback; error_callback |]
      )

  let create_buffer_source this =
    Audio_buffer_source_node.of_any
      (Js.Ffi.meth_call this "createBufferSource" [||])

  let create_constant_source this =
    Constant_source_node.of_any
      (Js.Ffi.meth_call this "createConstantSource" [||])

  let create_analyser this =
    Analyser_node.of_any (Js.Ffi.meth_call this "createAnalyser" [||])

  let create_gain this =
    Gain_node.of_any (Js.Ffi.meth_call this "createGain" [||])

  let create_biquad_filter this =
    Biquad_filter_node.of_any (Js.Ffi.meth_call this "createBiquadFilter" [||])

  let create_panner this =
    Panner_node.of_any (Js.Ffi.meth_call this "createPanner" [||])

  let create_stereo_panner this =
    Stereo_panner_node.of_any (Js.Ffi.meth_call this "createStereoPanner" [||])

  let create_channel_splitter ?number_of_outputs this =
    let number_of_outputs =
      (Js.Any.undefined_of_option Js.Any.of_int) number_of_outputs
    in
    Channel_splitter_node.of_any
      (Js.Ffi.meth_call this "createChannelSplitter" [| number_of_outputs |])

  let create_channel_merger ?number_of_inputs this =
    let number_of_inputs =
      (Js.Any.undefined_of_option Js.Any.of_int) number_of_inputs
    in
    Channel_merger_node.of_any
      (Js.Ffi.meth_call this "createChannelMerger" [| number_of_inputs |])

  let create_oscillator this =
    Oscillator_node.of_any (Js.Ffi.meth_call this "createOscillator" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext} \
   [BaseAudioContext] on MDN}."]

and Before_unload_event : sig
  type t = [ `Before_unload_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent} \
     [BeforeUnloadEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Before_unload_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent} \
     [BeforeUnloadEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val return_value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent/returnValue} \
     [returnValue] on MDN}."]

  val set_return_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent/returnValue} \
     [returnValue] on MDN}."]
end = struct
  type t = [ `Before_unload_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Before_unload_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent} \
     [BeforeUnloadEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "BeforeUnloadEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this
  let return_value this = Js.Any.to_string (Js.Ffi.get this "returnValue")

  let set_return_value this x =
    Js.Ffi.set this "returnValue" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent} \
   [BeforeUnloadEvent] on MDN}."]

and Biquad_filter_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val lowpass : t
  val highpass : t
  val bandpass : t
  val lowshelf : t
  val highshelf : t
  val peaking : t
  val notch : t
  val allpass : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let lowpass = Js.of_string "lowpass"
  let highpass = Js.of_string "highpass"
  let bandpass = Js.of_string "bandpass"
  let lowshelf = Js.of_string "lowshelf"
  let highshelf = Js.of_string "highshelf"
  let peaking = Js.of_string "peaking"
  let notch = Js.of_string "notch"
  let allpass = Js.of_string "allpass"
end

and Biquad_filter_options : sig
  type t [@@ocaml.doc "The type for the [BiquadFilterOptions] dictionary."]

  val make :
    ?type':Biquad_filter_type.t ->
    ?q:float ->
    ?detune:float ->
    ?frequency:float ->
    ?gain:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val type' : t -> Biquad_filter_type.t option
  val q : t -> float option
  val detune : t -> float option
  val frequency : t -> float option
  val gain : t -> float option
end = struct
  type t = Js.any

  let make ?type' ?q ?detune ?frequency ?gain () =
    let type' = (Js.Any.nullable_of_option Biquad_filter_type.to_any) type' in
    let q = (Js.Any.nullable_of_option Js.Any.of_float) q in
    let detune = (Js.Any.nullable_of_option Js.Any.of_float) detune in
    let frequency = (Js.Any.nullable_of_option Js.Any.of_float) frequency in
    let gain = (Js.Any.nullable_of_option Js.Any.of_float) gain in
    Js.Ffi.obj
      [|
        ("type", type');
        ("Q", q);
        ("detune", detune);
        ("frequency", frequency);
        ("gain", gain);
      |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Biquad_filter_type.of_any)
      (Js.Ffi.get this "type")

  let q this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "Q")

  let detune this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "detune")

  let frequency this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "frequency")

  let gain this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "gain")
end

and Biquad_filter_node : sig
  type t = [ `Biquad_filter_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode} \
     [BiquadFilterNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Biquad_filter_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode} \
     [BiquadFilterNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Biquad_filter_options.t ->
    unit ->
    'a super

  val type' : t -> Biquad_filter_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type} \
     [type] on MDN}."]

  val set_type : t -> Biquad_filter_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type} \
     [type] on MDN}."]

  val frequency : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency} \
     [frequency] on MDN}."]

  val detune : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune} \
     [detune] on MDN}."]

  val q : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q} [Q] \
     on MDN}."]

  val gain : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain} \
     [gain] on MDN}."]
end = struct
  type t = [ `Biquad_filter_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Biquad_filter_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode} \
     [BiquadFilterNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "BiquadFilterNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Biquad_filter_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let type' this = Biquad_filter_type.of_any (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Biquad_filter_type.to_any x)
  let frequency this = Audio_param.of_any (Js.Ffi.get this "frequency")
  let detune this = Audio_param.of_any (Js.Ffi.get this "detune")
  let q this = Audio_param.of_any (Js.Ffi.get this "Q")
  let gain this = Audio_param.of_any (Js.Ffi.get this "gain")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode} \
   [BiquadFilterNode] on MDN}."]

and Blob : sig
  type t = [ `Blob ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Blob} [Blob]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_blob_parts_and_options :
    ?blob_parts:Blob_part.t array -> ?options:Blob_property_bag.t -> unit -> t

  val size : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob/size} \
     [size] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob/type} \
     [type] on MDN}."]

  val slice : ?start:int -> ?end':int -> ?content_type:string -> t -> t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice} \
     [slice] on MDN}."]

  val stream : t -> Js.any
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream} \
     [stream] on MDN}."]

  val text : t -> string Js.promise
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob/text} \
     [text] on MDN}."]

  val array_buffer : t -> 'todo_buffer Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer} \
     [arrayBuffer] on MDN}."]
end = struct
  type t = [ `Blob ] Js.t

  let t = Js.Ffi.constr "Blob"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_blob_parts_and_options ?blob_parts ?options () =
    let blob_parts =
      (Js.Any.undefined_of_option (Js.Any.of_array Blob_part.to_any)) blob_parts
    in
    let options =
      (Js.Any.undefined_of_option Blob_property_bag.to_any) options
    in
    Js.Ffi.obj_new t [| blob_parts; options |]

  let size this = Js.Any.to_int (Js.Ffi.get this "size")
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")

  let slice ?start ?end' ?content_type this =
    let start = (Js.Any.undefined_of_option Js.Any.of_int) start in
    let end' = (Js.Any.undefined_of_option Js.Any.of_int) end' in
    let content_type =
      (Js.Any.undefined_of_option Js.Any.of_string) content_type
    in
    of_any (Js.Ffi.meth_call this "slice" [| start; end'; content_type |])

  let stream this = Js.of_any (Js.Ffi.meth_call this "stream" [||])

  let text this =
    (Promise.of_any Js.Any.to_string) (Js.Ffi.meth_call this "text" [||])

  let array_buffer this =
    (Promise.of_any Array_buffer.of_any)
      (Js.Ffi.meth_call this "arrayBuffer" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Blob} [Blob] on \
   MDN}."]

and Blob_property_bag : sig
  type t [@@ocaml.doc "The type for the [BlobPropertyBag] dictionary."]

  val make : ?type':string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> string option
end = struct
  type t = Js.any

  let make ?type' () =
    let type' = (Js.Any.nullable_of_option Js.Any.of_string) type' in
    Js.Ffi.obj [| ("type", type') |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "type")
end

and Blob_part : sig
  type t

  val with_arraybuffer : 'todo_buffer -> t
  val with_array_buffer_view : Array_buffer_view.t -> t
  val with_blob : Blob.t -> t
  val with_string : string -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [`Any] Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_arraybuffer = Js.Ffi.magic
  let with_array_buffer_view = Js.Ffi.magic
  let with_blob = Js.Ffi.magic
  let with_string = Js.Ffi.magic
end

and Bluetooth_data_filter_init : sig
  type t [@@ocaml.doc "The type for the [BluetoothDataFilterInit] dictionary."]

  val make : ?data_prefix:Buffer_source.t -> ?mask:Buffer_source.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val data_prefix : t -> Buffer_source.t option
  val mask : t -> Buffer_source.t option
end = struct
  type t = Js.any

  let make ?data_prefix ?mask () =
    let data_prefix =
      (Js.Any.nullable_of_option Buffer_source.to_any) data_prefix
    in
    let mask = (Js.Any.nullable_of_option Buffer_source.to_any) mask in
    Js.Ffi.obj [| ("dataPrefix", data_prefix); ("mask", mask) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let data_prefix this =
    (Js.Any.nullable_to_option Buffer_source.of_any)
      (Js.Ffi.get this "dataPrefix")

  let mask this =
    (Js.Any.nullable_to_option Buffer_source.of_any) (Js.Ffi.get this "mask")
end

and Bluetooth_le_scan_filter_init : sig
  type t
  [@@ocaml.doc "The type for the [BluetoothLEScanFilterInit] dictionary."]

  val make :
    ?services:Bluetooth_service_uuid.t array ->
    ?name:string ->
    ?name_prefix:string ->
    ?manufacturer_data:'todo_record ->
    ?service_data:'todo_record ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val services : t -> Bluetooth_service_uuid.t array option
  val name : t -> string option
  val name_prefix : t -> string option
  val manufacturer_data : t -> 'todo_record option
  val service_data : t -> 'todo_record option
end = struct
  type t = Js.any

  let make ?services ?name ?name_prefix ?manufacturer_data ?service_data () =
    let services =
      (Js.Any.nullable_of_option (Js.Any.of_array Bluetooth_service_uuid.to_any))
        services
    in
    let name = (Js.Any.nullable_of_option Js.Any.of_string) name in
    let name_prefix =
      (Js.Any.nullable_of_option Js.Any.of_string) name_prefix
    in
    let manufacturer_data =
      (Js.Any.nullable_of_option Record_todo.to_any) manufacturer_data
    in
    let service_data =
      (Js.Any.nullable_of_option Record_todo.to_any) service_data
    in
    Js.Ffi.obj
      [|
        ("services", services);
        ("name", name);
        ("namePrefix", name_prefix);
        ("manufacturerData", manufacturer_data);
        ("serviceData", service_data);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let services this =
    (Js.Any.nullable_to_option (Js.Any.to_array Bluetooth_service_uuid.of_any))
      (Js.Ffi.get this "services")

  let name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "name")

  let name_prefix this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "namePrefix")

  let manufacturer_data this =
    (Js.Any.nullable_to_option Record_todo.of_any)
      (Js.Ffi.get this "manufacturerData")

  let service_data this =
    (Js.Any.nullable_to_option Record_todo.of_any)
      (Js.Ffi.get this "serviceData")
end

and Request_device_options : sig
  type t [@@ocaml.doc "The type for the [RequestDeviceOptions] dictionary."]

  val make :
    ?filters:Bluetooth_le_scan_filter_init.t array ->
    ?optional_services:Bluetooth_service_uuid.t array ->
    ?accept_all_devices:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val filters : t -> Bluetooth_le_scan_filter_init.t array option
  val optional_services : t -> Bluetooth_service_uuid.t array option
  val accept_all_devices : t -> bool option
end = struct
  type t = Js.any

  let make ?filters ?optional_services ?accept_all_devices () =
    let filters =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Bluetooth_le_scan_filter_init.to_any)
      )
        filters
    in
    let optional_services =
      (Js.Any.nullable_of_option (Js.Any.of_array Bluetooth_service_uuid.to_any))
        optional_services
    in
    let accept_all_devices =
      (Js.Any.nullable_of_option Js.Any.of_bool) accept_all_devices
    in
    Js.Ffi.obj
      [|
        ("filters", filters);
        ("optionalServices", optional_services);
        ("acceptAllDevices", accept_all_devices);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let filters this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Bluetooth_le_scan_filter_init.of_any)
    )
      (Js.Ffi.get this "filters")

  let optional_services this =
    (Js.Any.nullable_to_option (Js.Any.to_array Bluetooth_service_uuid.of_any))
      (Js.Ffi.get this "optionalServices")

  let accept_all_devices this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "acceptAllDevices")
end

and Bluetooth : sig
  type t = [ `Bluetooth ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth} [Bluetooth]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Bluetooth | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth} [Bluetooth]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val get_availability : t -> bool Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getAvailability} \
     [getAvailability] on MDN}."]

  val onavailabilitychanged : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/onavailabilitychanged} \
     [onavailabilitychanged] on MDN}."]

  val set_onavailabilitychanged : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/onavailabilitychanged} \
     [onavailabilitychanged] on MDN}."]

  val request_device :
    ?options:Request_device_options.t -> t -> Bluetooth_device.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/requestDevice} \
     [requestDevice] on MDN}."]
end = struct
  type t = [ `Bluetooth ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Bluetooth | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth} [Bluetooth]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Bluetooth"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let get_availability this =
    (Promise.of_any Js.Any.to_bool)
      (Js.Ffi.meth_call this "getAvailability" [||])

  let onavailabilitychanged this =
    Event_handler.of_any (Js.Ffi.get this "onavailabilitychanged")

  let set_onavailabilitychanged this x =
    Js.Ffi.set this "onavailabilitychanged" (Event_handler.to_any x)

  let request_device ?options this =
    let options =
      (Js.Any.undefined_of_option Request_device_options.to_any) options
    in
    (Promise.of_any Bluetooth_device.of_any)
      (Js.Ffi.meth_call this "requestDevice" [| options |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth} \
   [Bluetooth] on MDN}."]

and Bluetooth_advertising_event : sig
  type t = [ `Bluetooth_advertising_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent} \
     [BluetoothAdvertisingEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_advertising_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent} \
     [BluetoothAdvertisingEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_init :
    type':string -> init:Bluetooth_advertising_event_init.t -> unit -> 'a super

  val device : t -> 'a Bluetooth_device.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent/device} \
     [device] on MDN}."]

  val name : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent/name} \
     [name] on MDN}."]

  val appearance : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent/appearance} \
     [appearance] on MDN}."]

  val tx_power : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent/txPower} \
     [txPower] on MDN}."]

  val rssi : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent/rssi} \
     [rssi] on MDN}."]
end = struct
  type t = [ `Bluetooth_advertising_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_advertising_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent} \
     [BluetoothAdvertisingEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "BluetoothAdvertisingEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_init ~type' ~init () =
    let type' = Js.Any.of_string type' in
    let init = Bluetooth_advertising_event_init.to_any init in
    Js.Ffi.obj_new t [| type'; init |]

  let device this = Bluetooth_device.of_any (Js.Ffi.get this "device")

  let name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "name")

  let appearance this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "appearance")

  let tx_power this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "txPower")

  let rssi this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "rssi")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingEvent} \
   [BluetoothAdvertisingEvent] on MDN}."]

and Bluetooth_advertising_event_init : sig
  type t
  [@@ocaml.doc "The type for the [BluetoothAdvertisingEventInit] dictionary."]

  val make :
    device:Bluetooth_device.t ->
    ?name:string ->
    ?appearance:int ->
    ?tx_power:char ->
    ?rssi:char ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val device : t -> Bluetooth_device.t
  val name : t -> string option
  val appearance : t -> int option
  val tx_power : t -> char option
  val rssi : t -> char option
end = struct
  type t = Js.any

  let make ~device ?name ?appearance ?tx_power ?rssi () =
    let device = Bluetooth_device.to_any device in
    let name = (Js.Any.nullable_of_option Js.Any.of_string) name in
    let appearance = (Js.Any.nullable_of_option Js.Any.of_int) appearance in
    let tx_power = (Js.Any.nullable_of_option Js.Any.of_char) tx_power in
    let rssi = (Js.Any.nullable_of_option Js.Any.of_char) rssi in
    Js.Ffi.obj
      [|
        ("device", device);
        ("name", name);
        ("appearance", appearance);
        ("txPower", tx_power);
        ("rssi", rssi);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let device this = Bluetooth_device.of_any (Js.Ffi.get this "device")

  let name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "name")

  let appearance this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "appearance")

  let tx_power this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "txPower")

  let rssi this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "rssi")
end

and Bluetooth_characteristic_properties : sig
  type t = [ `Bluetooth_characteristic_properties ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties} \
     [BluetoothCharacteristicProperties]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val broadcast : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/broadcast} \
     [broadcast] on MDN}."]

  val read : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/read} \
     [read] on MDN}."]

  val write_without_response : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/writeWithoutResponse} \
     [writeWithoutResponse] on MDN}."]

  val write : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/write} \
     [write] on MDN}."]

  val notify : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/notify} \
     [notify] on MDN}."]

  val indicate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/indicate} \
     [indicate] on MDN}."]

  val authenticated_signed_writes : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/authenticatedSignedWrites} \
     [authenticatedSignedWrites] on MDN}."]

  val reliable_write : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/reliableWrite} \
     [reliableWrite] on MDN}."]

  val writable_auxiliaries : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/writableAuxiliaries} \
     [writableAuxiliaries] on MDN}."]
end = struct
  type t = [ `Bluetooth_characteristic_properties ] Js.t

  let t = Js.Ffi.constr "BluetoothCharacteristicProperties"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let broadcast this = Js.Any.to_bool (Js.Ffi.get this "broadcast")
  let read this = Js.Any.to_bool (Js.Ffi.get this "read")

  let write_without_response this =
    Js.Any.to_bool (Js.Ffi.get this "writeWithoutResponse")

  let write this = Js.Any.to_bool (Js.Ffi.get this "write")
  let notify this = Js.Any.to_bool (Js.Ffi.get this "notify")
  let indicate this = Js.Any.to_bool (Js.Ffi.get this "indicate")

  let authenticated_signed_writes this =
    Js.Any.to_bool (Js.Ffi.get this "authenticatedSignedWrites")

  let reliable_write this = Js.Any.to_bool (Js.Ffi.get this "reliableWrite")

  let writable_auxiliaries this =
    Js.Any.to_bool (Js.Ffi.get this "writableAuxiliaries")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties} \
   [BluetoothCharacteristicProperties] on MDN}."]

and Bluetooth_device : sig
  type t = [ `Bluetooth_device ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice} \
     [BluetoothDevice]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Bluetooth_device | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice} \
     [BluetoothDevice]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/id} [id] \
     on MDN}."]

  val name : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name} \
     [name] on MDN}."]

  val gatt : t -> Bluetooth_remote_gatt_server.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/gatt} \
     [gatt] on MDN}."]

  val watch_advertisements : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/watchAdvertisements} \
     [watchAdvertisements] on MDN}."]

  val unwatch_advertisements : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/unwatchAdvertisements} \
     [unwatchAdvertisements] on MDN}."]

  val watching_advertisements : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/watchingAdvertisements} \
     [watchingAdvertisements] on MDN}."]
end = struct
  type t = [ `Bluetooth_device ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Bluetooth_device | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice} \
     [BluetoothDevice]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "BluetoothDevice"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let id this = Js.Any.to_string (Js.Ffi.get this "id")

  let name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "name")

  let gatt this =
    (Js.Any.nullable_to_option Bluetooth_remote_gatt_server.of_any)
      (Js.Ffi.get this "gatt")

  let watch_advertisements this =
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "watchAdvertisements" [||])

  let unwatch_advertisements this =
    Js.to_unit (Js.Ffi.meth_call this "unwatchAdvertisements" [||])

  let watching_advertisements this =
    Js.Any.to_bool (Js.Ffi.get this "watchingAdvertisements")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice} \
   [BluetoothDevice] on MDN}."]

and Bluetooth_permission_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [BluetoothPermissionDescriptor] dictionary."]

  val make :
    ?device_id:string ->
    ?filters:Bluetooth_le_scan_filter_init.t array ->
    ?optional_services:Bluetooth_service_uuid.t array ->
    ?accept_all_devices:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_permission_descriptor : t -> Permission_descriptor.t
  val device_id : t -> string option
  val filters : t -> Bluetooth_le_scan_filter_init.t array option
  val optional_services : t -> Bluetooth_service_uuid.t array option
  val accept_all_devices : t -> bool option
end = struct
  type t = Js.any

  let make ?device_id ?filters ?optional_services ?accept_all_devices () =
    let device_id = (Js.Any.nullable_of_option Js.Any.of_string) device_id in
    let filters =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Bluetooth_le_scan_filter_init.to_any)
      )
        filters
    in
    let optional_services =
      (Js.Any.nullable_of_option (Js.Any.of_array Bluetooth_service_uuid.to_any))
        optional_services
    in
    let accept_all_devices =
      (Js.Any.nullable_of_option Js.Any.of_bool) accept_all_devices
    in
    Js.Ffi.obj
      [|
        ("deviceId", device_id);
        ("filters", filters);
        ("optionalServices", optional_services);
        ("acceptAllDevices", accept_all_devices);
      |]

  let to_permission_descriptor this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let device_id this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "deviceId")

  let filters this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Bluetooth_le_scan_filter_init.of_any)
    )
      (Js.Ffi.get this "filters")

  let optional_services this =
    (Js.Any.nullable_to_option (Js.Any.to_array Bluetooth_service_uuid.of_any))
      (Js.Ffi.get this "optionalServices")

  let accept_all_devices this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "acceptAllDevices")
end

and Bluetooth_permission_result : sig
  type t = [ `Bluetooth_permission_result ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothPermissionResult} \
     [BluetoothPermissionResult]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Bluetooth_permission_result | `Permission_status | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothPermissionResult} \
     [BluetoothPermissionResult]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val devices : t -> Bluetooth_device.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothPermissionResult/devices} \
     [devices] on MDN}."]
end = struct
  type t = [ `Bluetooth_permission_result ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Bluetooth_permission_result | `Permission_status | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothPermissionResult} \
     [BluetoothPermissionResult]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "BluetoothPermissionResult"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_permission_status this = Js.Ffi.magic this

  let devices this =
    (Js.Any.to_array Bluetooth_device.of_any)
      (Js.Ffi.meth_call this "devices" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothPermissionResult} \
   [BluetoothPermissionResult] on MDN}."]

and Bluetooth_remote_gatt_characteristic : sig
  type t = [ `Bluetooth_remote_gatt_characteristic ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic} \
     [BluetoothRemoteGATTCharacteristic]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_remote_gatt_characteristic | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic} \
     [BluetoothRemoteGATTCharacteristic]} interface or any base interface that \
     it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val service : t -> 'a Bluetooth_remote_gatt_service.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/service} \
     [service] on MDN}."]

  val uuid : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/uuid} \
     [uuid] on MDN}."]

  val properties : t -> Bluetooth_characteristic_properties.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/properties} \
     [properties] on MDN}."]

  val value : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/value} \
     [value] on MDN}."]

  val get_descriptor :
    descriptor:Bluetooth_descriptor_uuid.t ->
    t ->
    Bluetooth_remote_gatt_descriptor.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptor} \
     [getDescriptor] on MDN}."]

  val get_descriptors :
    ?descriptor:Bluetooth_descriptor_uuid.t ->
    t ->
    Bluetooth_remote_gatt_descriptor.t array Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptors} \
     [getDescriptors] on MDN}."]

  val read_value : t -> string Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/readValue} \
     [readValue] on MDN}."]

  val write_value : value:Buffer_source.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/writeValue} \
     [writeValue] on MDN}."]

  val start_notifications :
    t -> Bluetooth_remote_gatt_characteristic.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/startNotifications} \
     [startNotifications] on MDN}."]

  val stop_notifications :
    t -> Bluetooth_remote_gatt_characteristic.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/stopNotifications} \
     [stopNotifications] on MDN}."]
end = struct
  type t = [ `Bluetooth_remote_gatt_characteristic ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_remote_gatt_characteristic | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic} \
     [BluetoothRemoteGATTCharacteristic]} interface or any base interface that \
     it inherits."]

  let t = Js.Ffi.constr "BluetoothRemoteGATTCharacteristic"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let service this =
    Bluetooth_remote_gatt_service.of_any (Js.Ffi.get this "service")

  let uuid this = Js.Any.to_string (Js.Ffi.get this "uuid")

  let properties this =
    Bluetooth_characteristic_properties.of_any (Js.Ffi.get this "properties")

  let value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "value")

  let get_descriptor ~descriptor this =
    let descriptor = Bluetooth_descriptor_uuid.to_any descriptor in
    (Promise.of_any Bluetooth_remote_gatt_descriptor.of_any)
      (Js.Ffi.meth_call this "getDescriptor" [| descriptor |])

  let get_descriptors ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Bluetooth_descriptor_uuid.to_any) descriptor
    in
    (Promise.of_any (Js.Any.to_array Bluetooth_remote_gatt_descriptor.of_any))
      (Js.Ffi.meth_call this "getDescriptors" [| descriptor |])

  let read_value this =
    (Promise.of_any Js.Any.to_string) (Js.Ffi.meth_call this "readValue" [||])

  let write_value ~value this =
    let value = Buffer_source.to_any value in
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "writeValue" [| value |])

  let start_notifications this =
    (Promise.of_any of_any) (Js.Ffi.meth_call this "startNotifications" [||])

  let stop_notifications this =
    (Promise.of_any of_any) (Js.Ffi.meth_call this "stopNotifications" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic} \
   [BluetoothRemoteGATTCharacteristic] on MDN}."]

and Bluetooth_remote_gatt_descriptor : sig
  type t = [ `Bluetooth_remote_gatt_descriptor ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor} \
     [BluetoothRemoteGATTDescriptor]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val characteristic : t -> 'a Bluetooth_remote_gatt_characteristic.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/characteristic} \
     [characteristic] on MDN}."]

  val uuid : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/uuid} \
     [uuid] on MDN}."]

  val value : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/value} \
     [value] on MDN}."]

  val read_value : t -> string Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/readValue} \
     [readValue] on MDN}."]

  val write_value : value:Buffer_source.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/writeValue} \
     [writeValue] on MDN}."]
end = struct
  type t = [ `Bluetooth_remote_gatt_descriptor ] Js.t

  let t = Js.Ffi.constr "BluetoothRemoteGATTDescriptor"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let characteristic this =
    Bluetooth_remote_gatt_characteristic.of_any
      (Js.Ffi.get this "characteristic")

  let uuid this = Js.Any.to_string (Js.Ffi.get this "uuid")

  let value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "value")

  let read_value this =
    (Promise.of_any Js.Any.to_string) (Js.Ffi.meth_call this "readValue" [||])

  let write_value ~value this =
    let value = Buffer_source.to_any value in
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "writeValue" [| value |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor} \
   [BluetoothRemoteGATTDescriptor] on MDN}."]

and Bluetooth_remote_gatt_server : sig
  type t = [ `Bluetooth_remote_gatt_server ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer} \
     [BluetoothRemoteGATTServer]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val device : t -> 'a Bluetooth_device.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/device} \
     [device] on MDN}."]

  val connected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connected} \
     [connected] on MDN}."]

  val connect : t -> Bluetooth_remote_gatt_server.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connect} \
     [connect] on MDN}."]

  val disconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/disconnect} \
     [disconnect] on MDN}."]

  val get_primary_service :
    service:Bluetooth_service_uuid.t ->
    t ->
    Bluetooth_remote_gatt_service.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryService} \
     [getPrimaryService] on MDN}."]

  val get_primary_services :
    ?service:Bluetooth_service_uuid.t ->
    t ->
    Bluetooth_remote_gatt_service.t array Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryServices} \
     [getPrimaryServices] on MDN}."]
end = struct
  type t = [ `Bluetooth_remote_gatt_server ] Js.t

  let t = Js.Ffi.constr "BluetoothRemoteGATTServer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let device this = Bluetooth_device.of_any (Js.Ffi.get this "device")
  let connected this = Js.Any.to_bool (Js.Ffi.get this "connected")

  let connect this =
    (Promise.of_any of_any) (Js.Ffi.meth_call this "connect" [||])

  let disconnect this = Js.to_unit (Js.Ffi.meth_call this "disconnect" [||])

  let get_primary_service ~service this =
    let service = Bluetooth_service_uuid.to_any service in
    (Promise.of_any Bluetooth_remote_gatt_service.of_any)
      (Js.Ffi.meth_call this "getPrimaryService" [| service |])

  let get_primary_services ?service this =
    let service =
      (Js.Any.undefined_of_option Bluetooth_service_uuid.to_any) service
    in
    (Promise.of_any (Js.Any.to_array Bluetooth_remote_gatt_service.of_any))
      (Js.Ffi.meth_call this "getPrimaryServices" [| service |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer} \
   [BluetoothRemoteGATTServer] on MDN}."]

and Bluetooth_remote_gatt_service : sig
  type t = [ `Bluetooth_remote_gatt_service ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService} \
     [BluetoothRemoteGATTService]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_remote_gatt_service | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService} \
     [BluetoothRemoteGATTService]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val device : t -> 'a Bluetooth_device.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/device} \
     [device] on MDN}."]

  val uuid : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/uuid} \
     [uuid] on MDN}."]

  val is_primary : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/isPrimary} \
     [isPrimary] on MDN}."]

  val get_characteristic :
    characteristic:Bluetooth_characteristic_uuid.t ->
    t ->
    Bluetooth_remote_gatt_characteristic.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getCharacteristic} \
     [getCharacteristic] on MDN}."]

  val get_characteristics :
    ?characteristic:Bluetooth_characteristic_uuid.t ->
    t ->
    Bluetooth_remote_gatt_characteristic.t array Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getCharacteristics} \
     [getCharacteristics] on MDN}."]

  val get_included_service :
    service:Bluetooth_service_uuid.t ->
    t ->
    Bluetooth_remote_gatt_service.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getIncludedService} \
     [getIncludedService] on MDN}."]

  val get_included_services :
    ?service:Bluetooth_service_uuid.t ->
    t ->
    Bluetooth_remote_gatt_service.t array Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getIncludedServices} \
     [getIncludedServices] on MDN}."]
end = struct
  type t = [ `Bluetooth_remote_gatt_service ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Bluetooth_remote_gatt_service | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService} \
     [BluetoothRemoteGATTService]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "BluetoothRemoteGATTService"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let device this = Bluetooth_device.of_any (Js.Ffi.get this "device")
  let uuid this = Js.Any.to_string (Js.Ffi.get this "uuid")
  let is_primary this = Js.Any.to_bool (Js.Ffi.get this "isPrimary")

  let get_characteristic ~characteristic this =
    let characteristic = Bluetooth_characteristic_uuid.to_any characteristic in
    (Promise.of_any Bluetooth_remote_gatt_characteristic.of_any)
      (Js.Ffi.meth_call this "getCharacteristic" [| characteristic |])

  let get_characteristics ?characteristic this =
    let characteristic =
      (Js.Any.undefined_of_option Bluetooth_characteristic_uuid.to_any)
        characteristic
    in
    (Promise.of_any
       (Js.Any.to_array Bluetooth_remote_gatt_characteristic.of_any)
    )
      (Js.Ffi.meth_call this "getCharacteristics" [| characteristic |])

  let get_included_service ~service this =
    let service = Bluetooth_service_uuid.to_any service in
    (Promise.of_any of_any)
      (Js.Ffi.meth_call this "getIncludedService" [| service |])

  let get_included_services ?service this =
    let service =
      (Js.Any.undefined_of_option Bluetooth_service_uuid.to_any) service
    in
    (Promise.of_any (Js.Any.to_array of_any))
      (Js.Ffi.meth_call this "getIncludedServices" [| service |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService} \
   [BluetoothRemoteGATTService] on MDN}."]

and Bluetooth_uuid : sig
  type t = [ `Bluetooth_uuid ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID} \
     [BluetoothUUID]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_service : name:Bluetooth_service_uuid.t -> unit -> Uuid.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID/getService} \
     [getService] on MDN}."]

  val get_characteristic :
    name:Bluetooth_characteristic_uuid.t -> unit -> Uuid.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID/getCharacteristic} \
     [getCharacteristic] on MDN}."]

  val get_descriptor : name:Bluetooth_descriptor_uuid.t -> unit -> Uuid.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID/getDescriptor} \
     [getDescriptor] on MDN}."]

  val canonical_uuid : alias:int -> unit -> Uuid.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID/canonicalUUID} \
     [canonicalUUID] on MDN}."]
end = struct
  type t = [ `Bluetooth_uuid ] Js.t

  let t = Js.Ffi.constr "BluetoothUUID"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_service ~name () =
    let name = Bluetooth_service_uuid.to_any name in
    Uuid.of_any (Js.Ffi.meth_call t "getService" [| name |])

  let get_characteristic ~name () =
    let name = Bluetooth_characteristic_uuid.to_any name in
    Uuid.of_any (Js.Ffi.meth_call t "getCharacteristic" [| name |])

  let get_descriptor ~name () =
    let name = Bluetooth_descriptor_uuid.to_any name in
    Uuid.of_any (Js.Ffi.meth_call t "getDescriptor" [| name |])

  let canonical_uuid ~alias () =
    let alias = Js.Any.of_int alias in
    Uuid.of_any (Js.Ffi.meth_call t "canonicalUUID" [| alias |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID} \
   [BluetoothUUID] on MDN}."]

and Uuid : sig
  type nonrec t = string

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Uuid

and Bluetooth_service_uuid : sig
  type t

  val with_string : string -> t
  val with_unsigned_long : int -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_unsigned_long = Js.repr
end

and Bluetooth_characteristic_uuid : sig
  type t

  val with_string : string -> t
  val with_unsigned_long : int -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_unsigned_long = Js.repr
end

and Bluetooth_descriptor_uuid : sig
  type t

  val with_string : string -> t
  val with_unsigned_long : int -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_unsigned_long = Js.repr
end

and Broadcast_channel : sig
  type t = [ `Broadcast_channel ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel} \
     [BroadcastChannel]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Broadcast_channel | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel} \
     [BroadcastChannel]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : name:string -> unit -> 'a super

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name} \
     [name] on MDN}."]

  val post_message : message:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage} \
     [postMessage] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close} \
     [close] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage} \
     [onmessage] on MDN}."]

  val onmessageerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror} \
     [onmessageerror] on MDN}."]

  val set_onmessageerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror} \
     [onmessageerror] on MDN}."]
end = struct
  type t = [ `Broadcast_channel ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Broadcast_channel | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel} \
     [BroadcastChannel]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "BroadcastChannel"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let make ~name () =
    let name = Js.Any.of_string name in
    Js.Ffi.obj_new t [| name |]

  let name this = Js.Any.to_string (Js.Ffi.get this "name")

  let post_message ~message this =
    let message = Js.of_any message in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message |])

  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)

  let onmessageerror this =
    Event_handler.of_any (Js.Ffi.get this "onmessageerror")

  let set_onmessageerror this x =
    Js.Ffi.set this "onmessageerror" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel} \
   [BroadcastChannel] on MDN}."]

and Cdata_section : sig
  type t = [ `Cdata_section ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CDATASection} \
     [CDATASection]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Cdata_section | `Text | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CDATASection} \
     [CDATASection]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Cdata_section ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Cdata_section | `Text | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CDATASection} \
     [CDATASection]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CDATASection"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_text this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CDATASection} \
   [CDATASection] on MDN}."]

and Css : sig
  type t = [ `Css ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSS} [CSS]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val escape : ident:string -> unit -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape} \
     [escape] on MDN}."]

  val paint_worklet : t -> Worklet.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet} \
     [paintWorklet] on MDN}."]

  val supports : property:string -> value:string -> unit -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports} \
     [supports] on MDN}."]

  val supports : condition_text:string -> unit -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports} \
     [supports] on MDN}."]
end = struct
  type t = [ `Css ] Js.t

  let t = Js.Ffi.constr "CSS"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let escape ~ident () =
    let ident = Js.Any.of_string ident in
    Js.Any.to_string (Js.Ffi.meth_call t "escape" [| ident |])

  let paint_worklet this = Worklet.of_any (Js.Ffi.get this "paintWorklet")

  let supports ~property ~value () =
    let property = Js.Any.of_string property in
    let value = Js.Any.of_string value in
    Js.Any.to_bool (Js.Ffi.meth_call t "supports" [| property; value |])

  let supports ~condition_text () =
    let condition_text = Js.Any.of_string condition_text in
    Js.Any.to_bool (Js.Ffi.meth_call t "supports" [| condition_text |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSS} [CSS] on MDN}."]

and Css_condition_rule : sig
  type t = [ `Css_condition_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule} \
     [CSSConditionRule]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_condition_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule} \
     [CSSConditionRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val condition_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule/conditionText} \
     [conditionText] on MDN}."]
end = struct
  type t = [ `Css_condition_rule ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_condition_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule} \
     [CSSConditionRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSConditionRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_grouping_rule this = Js.Ffi.magic this
  let condition_text this = Js.Any.to_string (Js.Ffi.get this "conditionText")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule} \
   [CSSConditionRule] on MDN}."]

and Css_font_face_rule : sig
  type t = [ `Css_font_face_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule} \
     [CSSFontFaceRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_font_face_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule} \
     [CSSFontFaceRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Css_font_face_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_font_face_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule} \
     [CSSFontFaceRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSFontFaceRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule} \
   [CSSFontFaceRule] on MDN}."]

and Css_grouping_rule : sig
  type t = [ `Css_grouping_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule} \
     [CSSGroupingRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule} \
     [CSSGroupingRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val css_rules : t -> Css_rule_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule/cssRules} \
     [cssRules] on MDN}."]

  val insert_rule : rule:string -> index:int -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule/insertRule} \
     [insertRule] on MDN}."]

  val delete_rule : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule/deleteRule} \
     [deleteRule] on MDN}."]
end = struct
  type t = [ `Css_grouping_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule} \
     [CSSGroupingRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSGroupingRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let css_rules this = Css_rule_list.of_any (Js.Ffi.get this "cssRules")

  let insert_rule ~rule ~index this =
    let rule = Js.Any.of_string rule in
    let index = Js.Any.of_int index in
    Js.Any.to_int (Js.Ffi.meth_call this "insertRule" [| rule; index |])

  let delete_rule ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "deleteRule" [| index |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule} \
   [CSSGroupingRule] on MDN}."]

and Css_import_rule : sig
  type t = [ `Css_import_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule} \
     [CSSImportRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_import_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule} \
     [CSSImportRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val layer_name : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule/layerName} \
     [layerName] on MDN}."]
end = struct
  type t = [ `Css_import_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_import_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule} \
     [CSSImportRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSImportRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this

  let layer_name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "layerName")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule} \
   [CSSImportRule] on MDN}."]

and Css_keyframe_rule : sig
  type t = [ `Css_keyframe_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule} \
     [CSSKeyframeRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_keyframe_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule} \
     [CSSKeyframeRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val style : t -> Css_style_declaration.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule/style} \
     [style] on MDN}."]
end = struct
  type t = [ `Css_keyframe_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_keyframe_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule} \
     [CSSKeyframeRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSKeyframeRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let style this = Css_style_declaration.of_any (Js.Ffi.get this "style")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule} \
   [CSSKeyframeRule] on MDN}."]

and Css_keyframes_rule : sig
  type t = [ `Css_keyframes_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule} \
     [CSSKeyframesRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_keyframes_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule} \
     [CSSKeyframesRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/name} \
     [name] on MDN}."]

  val css_rules : t -> Css_rule_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/cssRules} \
     [cssRules] on MDN}."]

  val append_rule : rule:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/appendRule} \
     [appendRule] on MDN}."]

  val delete_rule : select:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/deleteRule} \
     [deleteRule] on MDN}."]

  val find_rule : select:string -> t -> 'a Css_keyframe_rule.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/findRule} \
     [findRule] on MDN}."]
end = struct
  type t = [ `Css_keyframes_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_keyframes_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule} \
     [CSSKeyframesRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSKeyframesRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let css_rules this = Css_rule_list.of_any (Js.Ffi.get this "cssRules")

  let append_rule ~rule this =
    let rule = Js.Any.of_string rule in
    Js.to_unit (Js.Ffi.meth_call this "appendRule" [| rule |])

  let delete_rule ~select this =
    let select = Js.Any.of_string select in
    Js.to_unit (Js.Ffi.meth_call this "deleteRule" [| select |])

  let find_rule ~select this =
    let select = Js.Any.of_string select in
    (Js.Any.nullable_to_option Css_keyframe_rule.of_any)
      (Js.Ffi.meth_call this "findRule" [| select |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule} \
   [CSSKeyframesRule] on MDN}."]

and Css_layer_block_rule : sig
  type t = [ `Css_layer_block_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule} \
     [CSSLayerBlockRule]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_layer_block_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule} \
     [CSSLayerBlockRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule/name} \
     [name] on MDN}."]
end = struct
  type t = [ `Css_layer_block_rule ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_layer_block_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule} \
     [CSSLayerBlockRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSLayerBlockRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_grouping_rule this = Js.Ffi.magic this
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule} \
   [CSSLayerBlockRule] on MDN}."]

and Css_layer_statement_rule : sig
  type t = [ `Css_layer_statement_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule} \
     [CSSLayerStatementRule]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_layer_statement_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule} \
     [CSSLayerStatementRule]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val name_list : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule/nameList} \
     [nameList] on MDN}."]
end = struct
  type t = [ `Css_layer_statement_rule ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Css_layer_statement_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule} \
     [CSSLayerStatementRule]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "CSSLayerStatementRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let name_list this = Js.to_any (Js.Ffi.get this "nameList")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule} \
   [CSSLayerStatementRule] on MDN}."]

and Css_media_rule : sig
  type t = [ `Css_media_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule} \
     [CSSMediaRule]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Css_media_rule | `Css_condition_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule} \
     [CSSMediaRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val media : t -> Media_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule/media} \
     [media] on MDN}."]
end = struct
  type t = [ `Css_media_rule ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Css_media_rule | `Css_condition_rule | `Css_grouping_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule} \
     [CSSMediaRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSMediaRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_condition_rule this = Js.Ffi.magic this
  let media this = Media_list.of_any (Js.Ffi.get this "media")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule} \
   [CSSMediaRule] on MDN}."]

and Css_namespace_rule : sig
  type t = [ `Css_namespace_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule} \
     [CSSNamespaceRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_namespace_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule} \
     [CSSNamespaceRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val namespace_uri : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/namespaceURI} \
     [namespaceURI] on MDN}."]

  val prefix : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/prefix} \
     [prefix] on MDN}."]
end = struct
  type t = [ `Css_namespace_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_namespace_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule} \
     [CSSNamespaceRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSNamespaceRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let namespace_uri this = Js.Any.to_string (Js.Ffi.get this "namespaceURI")
  let prefix this = Js.Any.to_string (Js.Ffi.get this "prefix")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule} \
   [CSSNamespaceRule] on MDN}."]

and Css_rule : sig
  type t = [ `Css_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSRule} [CSSRule]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val style_rule : int
  val charset_rule : int
  val import_rule : int
  val media_rule : int
  val font_face_rule : int
  val page_rule : int
  val margin_rule : int
  val namespace_rule : int

  val type' : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/type} \
     [type] on MDN}."]

  val css_text : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText} \
     [cssText] on MDN}."]

  val set_css_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText} \
     [cssText] on MDN}."]

  val parent_style_sheet : t -> 'a Css_style_sheet.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/parentStyleSheet} \
     [parentStyleSheet] on MDN}."]

  val supports_rule : int
  val keyframes_rule : int
  val keyframe_rule : int
end = struct
  type t = [ `Css_rule ] Js.t

  let t = Js.Ffi.constr "CSSRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let style_rule = 1
  let charset_rule = 2
  let import_rule = 3
  let media_rule = 4
  let font_face_rule = 5
  let page_rule = 6
  let margin_rule = 9
  let namespace_rule = 10
  let type' this = Js.Any.to_int (Js.Ffi.get this "type")
  let css_text this = Js.Any.to_string (Js.Ffi.get this "cssText")
  let set_css_text this x = Js.Ffi.set this "cssText" (Js.Any.of_string x)

  let parent_style_sheet this =
    (Js.Any.nullable_to_option Css_style_sheet.of_any)
      (Js.Ffi.get this "parentStyleSheet")

  let supports_rule = 12
  let keyframes_rule = 7
  let keyframe_rule = 8
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule} [CSSRule] \
   on MDN}."]

and Css_rule_list : sig
  type t = [ `Css_rule_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList} \
     [CSSRuleList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val item : index:int -> t -> Css_rule.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList/item} [item] \
     on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList/length} \
     [length] on MDN}."]
end = struct
  type t = [ `Css_rule_list ] Js.t

  let t = Js.Ffi.constr "CSSRuleList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Css_rule.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList} \
   [CSSRuleList] on MDN}."]

and Css_style_declaration : sig
  type t = [ `Css_style_declaration ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration} \
     [CSSStyleDeclaration]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val css_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText} \
     [cssText] on MDN}."]

  val set_css_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText} \
     [cssText] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/length} \
     [length] on MDN}."]

  val item : index:int -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/item} \
     [item] on MDN}."]

  val get_property_value : property:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyValue} \
     [getPropertyValue] on MDN}."]

  val get_property_priority : property:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyPriority} \
     [getPropertyPriority] on MDN}."]

  val set_property :
    property:string -> value:string -> ?priority:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty} \
     [setProperty] on MDN}."]

  val remove_property : property:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/removeProperty} \
     [removeProperty] on MDN}."]

  val css_float : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssFloat} \
     [cssFloat] on MDN}."]

  val set_css_float : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssFloat} \
     [cssFloat] on MDN}."]
end = struct
  type t = [ `Css_style_declaration ] Js.t

  let t = Js.Ffi.constr "CSSStyleDeclaration"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let css_text this = Js.Any.to_string (Js.Ffi.get this "cssText")
  let set_css_text this x = Js.Ffi.set this "cssText" (Js.Any.of_string x)
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    Js.Any.to_string (Js.Ffi.meth_call this "item" [| index |])

  let get_property_value ~property this =
    let property = Js.Any.of_string property in
    Js.Any.to_string (Js.Ffi.meth_call this "getPropertyValue" [| property |])

  let get_property_priority ~property this =
    let property = Js.Any.of_string property in
    Js.Any.to_string (Js.Ffi.meth_call this "getPropertyPriority" [| property |])

  let set_property ~property ~value ?priority this =
    let property = Js.Any.of_string property in
    let value = Js.Any.of_string value in
    let priority = (Js.Any.undefined_of_option Js.Any.of_string) priority in
    Js.to_unit
      (Js.Ffi.meth_call this "setProperty" [| property; value; priority |])

  let remove_property ~property this =
    let property = Js.Any.of_string property in
    Js.Any.to_string (Js.Ffi.meth_call this "removeProperty" [| property |])

  let css_float this = Js.Any.to_string (Js.Ffi.get this "cssFloat")
  let set_css_float this x = Js.Ffi.set this "cssFloat" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration} \
   [CSSStyleDeclaration] on MDN}."]

and Css_style_rule : sig
  type t = [ `Css_style_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule} \
     [CSSStyleRule]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_style_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule} \
     [CSSStyleRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val selector_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText} \
     [selectorText] on MDN}."]

  val set_selector_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText} \
     [selectorText] on MDN}."]

  val style : t -> Css_style_declaration.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/style} \
     [style] on MDN}."]
end = struct
  type t = [ `Css_style_rule ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_style_rule | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule} \
     [CSSStyleRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSStyleRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_rule this = Js.Ffi.magic this
  let selector_text this = Js.Any.to_string (Js.Ffi.get this "selectorText")

  let set_selector_text this x =
    Js.Ffi.set this "selectorText" (Js.Any.of_string x)

  let style this = Css_style_declaration.of_any (Js.Ffi.get this "style")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule} \
   [CSSStyleRule] on MDN}."]

and Css_style_sheet : sig
  type t = [ `Css_style_sheet ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet} \
     [CSSStyleSheet]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Css_style_sheet | `Style_sheet ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet} \
     [CSSStyleSheet]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val css_rules : t -> Css_rule_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/cssRules} \
     [cssRules] on MDN}."]

  val insert_rule : rule:string -> ?index:int -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule} \
     [insertRule] on MDN}."]

  val delete_rule : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule} \
     [deleteRule] on MDN}."]
end = struct
  type t = [ `Css_style_sheet ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Css_style_sheet | `Style_sheet ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet} \
     [CSSStyleSheet]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSStyleSheet"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_style_sheet this = Js.Ffi.magic this
  let css_rules this = Css_rule_list.of_any (Js.Ffi.get this "cssRules")

  let insert_rule ~rule ?index this =
    let rule = Js.Any.of_string rule in
    let index = (Js.Any.undefined_of_option Js.Any.of_int) index in
    Js.Any.to_int (Js.Ffi.meth_call this "insertRule" [| rule; index |])

  let delete_rule ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "deleteRule" [| index |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet} \
   [CSSStyleSheet] on MDN}."]

and Css_style_value : sig
  type t = [ `Css_style_value ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue} \
     [CSSStyleValue]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Css_style_value ] Js.t

  let t = Js.Ffi.constr "CSSStyleValue"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue} \
   [CSSStyleValue] on MDN}."]

and Css_supports_rule : sig
  type t = [ `Css_supports_rule ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule} \
     [CSSSupportsRule]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Css_supports_rule
      | `Css_condition_rule
      | `Css_grouping_rule
      | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule} \
     [CSSSupportsRule]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Css_supports_rule ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Css_supports_rule
      | `Css_condition_rule
      | `Css_grouping_rule
      | `Css_rule ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule} \
     [CSSSupportsRule]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CSSSupportsRule"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_css_condition_rule this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule} \
   [CSSSupportsRule] on MDN}."]

and Htmlor_svg_image_element : sig
  type nonrec t = Html_image_element.t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Htmlor_svg_image_element

and Canvas_image_source : sig
  type t

  val with_htmlor_svg_image_element : Htmlor_svg_image_element.t -> t
  val with_html_canvas_element : Html_canvas_element.t -> t
  val with_offscreen_canvas : Offscreen_canvas.t -> t
  val with_css_style_value : Css_style_value.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_htmlor_svg_image_element = Js.repr
  let with_html_canvas_element = Js.repr
  let with_offscreen_canvas = Js.repr
  let with_css_style_value = Js.repr
end

and Canvas_fill_rule : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val nonzero : t
  val evenodd : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let nonzero = Js.of_string "nonzero"
  let evenodd = Js.of_string "evenodd"
end

and Canvas_rendering_context2_d : sig
  type t = [ `Canvas_rendering_context2_d ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D} \
     [CanvasRenderingContext2D]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val canvas : t -> 'a Html_canvas_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas} \
     [canvas] on MDN}."]

  val reset_transform : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform} \
     [resetTransform] on MDN}."]

  val set_transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform} \
     [setTransform] on MDN}."]

  val get_transform : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform} \
     [getTransform] on MDN}."]

  val transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform} \
     [transform] on MDN}."]

  val translate : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate} \
     [translate] on MDN}."]

  val rotate : angle:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate} \
     [rotate] on MDN}."]

  val scale : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale} \
     [scale] on MDN}."]

  val direction : t -> Canvas_direction.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction} \
     [direction] on MDN}."]

  val set_direction : t -> Canvas_direction.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction} \
     [direction] on MDN}."]

  val text_baseline : t -> Canvas_text_baseline.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline} \
     [textBaseline] on MDN}."]

  val set_text_baseline : t -> Canvas_text_baseline.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline} \
     [textBaseline] on MDN}."]

  val text_align : t -> Canvas_text_align.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign} \
     [textAlign] on MDN}."]

  val set_text_align : t -> Canvas_text_align.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign} \
     [textAlign] on MDN}."]

  val font : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font} \
     [font] on MDN}."]

  val set_font : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font} \
     [font] on MDN}."]

  val measure_text : text:string -> t -> Text_metrics.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText} \
     [measureText] on MDN}."]

  val fill_text :
    text:string -> x:float -> y:float -> ?max_width:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText} \
     [fillText] on MDN}."]

  val shadow_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val set_shadow_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val shadow_blur : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val set_shadow_blur : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val shadow_offset_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val set_shadow_offset_y : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val shadow_offset_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val set_shadow_offset_x : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val stroke_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect} \
     [strokeRect] on MDN}."]

  val fill_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect} \
     [fillRect] on MDN}."]

  val clear_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect} \
     [clearRect] on MDN}."]

  val miter_limit : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val set_miter_limit : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val line_join : t -> Canvas_line_join.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val set_line_join : t -> Canvas_line_join.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val line_cap : t -> Canvas_line_cap.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val set_line_cap : t -> Canvas_line_cap.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val line_width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val set_line_width : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val ellipse :
    x:float ->
    y:float ->
    radius_x:float ->
    radius_y:float ->
    rotation:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse} \
     [ellipse] on MDN}."]

  val arc :
    x:float ->
    y:float ->
    radius:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc} \
     [arc] on MDN}."]

  val rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect} \
     [rect] on MDN}."]

  val arc_to :
    x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo} \
     [arcTo] on MDN}."]

  val bezier_curve_to :
    cp1x:float ->
    cp1y:float ->
    cp2x:float ->
    cp2y:float ->
    x:float ->
    y:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo} \
     [bezierCurveTo] on MDN}."]

  val quadratic_curve_to :
    cpx:float -> cpy:float -> x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo} \
     [quadraticCurveTo] on MDN}."]

  val line_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo} \
     [lineTo] on MDN}."]

  val move_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo} \
     [moveTo] on MDN}."]

  val close_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath} \
     [closePath] on MDN}."]

  val image_smoothing_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val set_image_smoothing_enabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val put_image_data :
    imagedata:Image_data.t ->
    dx:int ->
    dy:int ->
    dirty_x:int ->
    dirty_y:int ->
    dirty_width:int ->
    dirty_height:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData} \
     [putImageData] on MDN}."]

  val put_image_data : imagedata:Image_data.t -> dx:int -> dy:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData} \
     [putImageData] on MDN}."]

  val get_image_data : sx:int -> sy:int -> sw:int -> sh:int -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData} \
     [getImageData] on MDN}."]

  val create_image_data : imagedata:Image_data.t -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData} \
     [createImageData] on MDN}."]

  val create_image_data : sw:int -> sh:int -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData} \
     [createImageData] on MDN}."]

  val create_pattern :
    image:Canvas_image_source.t ->
    repetition:string ->
    t ->
    Canvas_pattern.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern} \
     [createPattern] on MDN}."]

  val create_radial_gradient :
    x0:float ->
    y0:float ->
    r0:float ->
    x1:float ->
    y1:float ->
    r1:float ->
    t ->
    Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient} \
     [createRadialGradient] on MDN}."]

  val create_linear_gradient :
    x0:float -> y0:float -> x1:float -> y1:float -> t -> Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient} \
     [createLinearGradient] on MDN}."]

  val fill_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val set_fill_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val stroke_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val set_stroke_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val is_point_in_path :
    x:float -> y:float -> ?fill_rule:Canvas_fill_rule.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath} \
     [isPointInPath] on MDN}."]

  val clip : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip} \
     [clip] on MDN}."]

  val stroke : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke} \
     [stroke] on MDN}."]

  val fill : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill} \
     [fill] on MDN}."]

  val begin_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath} \
     [beginPath] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    sx:float ->
    sy:float ->
    sw:float ->
    sh:float ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t -> dx:float -> dy:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val global_composite_operation : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val set_global_composite_operation : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val global_alpha : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]

  val set_global_alpha : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]
end = struct
  type t = [ `Canvas_rendering_context2_d ] Js.t

  let t = Js.Ffi.constr "CanvasRenderingContext2D"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let canvas this = Html_canvas_element.of_any (Js.Ffi.get this "canvas")

  let reset_transform this =
    Js.to_unit (Js.Ffi.meth_call this "resetTransform" [||])

  let set_transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "setTransform" [| a; b; c; d; e; f |])

  let get_transform this =
    Dom_matrix.of_any (Js.Ffi.meth_call this "getTransform" [||])

  let transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "transform" [| a; b; c; d; e; f |])

  let translate ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "translate" [| x; y |])

  let rotate ~angle this =
    let angle = Js.Any.of_float angle in
    Js.to_unit (Js.Ffi.meth_call this "rotate" [| angle |])

  let scale ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scale" [| x; y |])

  let direction this = Canvas_direction.of_any (Js.Ffi.get this "direction")

  let set_direction this x =
    Js.Ffi.set this "direction" (Canvas_direction.to_any x)

  let text_baseline this =
    Canvas_text_baseline.of_any (Js.Ffi.get this "textBaseline")

  let set_text_baseline this x =
    Js.Ffi.set this "textBaseline" (Canvas_text_baseline.to_any x)

  let text_align this = Canvas_text_align.of_any (Js.Ffi.get this "textAlign")

  let set_text_align this x =
    Js.Ffi.set this "textAlign" (Canvas_text_align.to_any x)

  let font this = Js.Any.to_string (Js.Ffi.get this "font")
  let set_font this x = Js.Ffi.set this "font" (Js.Any.of_string x)

  let measure_text ~text this =
    let text = Js.Any.of_string text in
    Text_metrics.of_any (Js.Ffi.meth_call this "measureText" [| text |])

  let fill_text ~text ~x ~y ?max_width this =
    let text = Js.Any.of_string text in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let max_width = (Js.Any.undefined_of_option Js.Any.of_float) max_width in
    Js.to_unit (Js.Ffi.meth_call this "fillText" [| text; x; y; max_width |])

  let shadow_color this = Js.Any.to_string (Js.Ffi.get this "shadowColor")

  let set_shadow_color this x =
    Js.Ffi.set this "shadowColor" (Js.Any.of_string x)

  let shadow_blur this = Js.Any.to_float (Js.Ffi.get this "shadowBlur")
  let set_shadow_blur this x = Js.Ffi.set this "shadowBlur" (Js.Any.of_float x)
  let shadow_offset_y this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetY")

  let set_shadow_offset_y this x =
    Js.Ffi.set this "shadowOffsetY" (Js.Any.of_float x)

  let shadow_offset_x this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetX")

  let set_shadow_offset_x this x =
    Js.Ffi.set this "shadowOffsetX" (Js.Any.of_float x)

  let stroke_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "strokeRect" [| x; y; w; h |])

  let fill_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "fillRect" [| x; y; w; h |])

  let clear_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "clearRect" [| x; y; w; h |])

  let miter_limit this = Js.Any.to_float (Js.Ffi.get this "miterLimit")
  let set_miter_limit this x = Js.Ffi.set this "miterLimit" (Js.Any.of_float x)
  let line_join this = Canvas_line_join.of_any (Js.Ffi.get this "lineJoin")

  let set_line_join this x =
    Js.Ffi.set this "lineJoin" (Canvas_line_join.to_any x)

  let line_cap this = Canvas_line_cap.of_any (Js.Ffi.get this "lineCap")
  let set_line_cap this x = Js.Ffi.set this "lineCap" (Canvas_line_cap.to_any x)
  let line_width this = Js.Any.to_float (Js.Ffi.get this "lineWidth")
  let set_line_width this x = Js.Ffi.set this "lineWidth" (Js.Any.of_float x)

  let ellipse ~x ~y ~radius_x ~radius_y ~rotation ~start_angle ~end_angle
      ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius_x = Js.Any.of_float radius_x in
    let radius_y = Js.Any.of_float radius_y in
    let rotation = Js.Any.of_float rotation in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "ellipse"
         [|
           x;
           y;
           radius_x;
           radius_y;
           rotation;
           start_angle;
           end_angle;
           anticlockwise;
         |]
      )

  let arc ~x ~y ~radius ~start_angle ~end_angle ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius = Js.Any.of_float radius in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "arc"
         [| x; y; radius; start_angle; end_angle; anticlockwise |]
      )

  let rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "rect" [| x; y; w; h |])

  let arc_to ~x1 ~y1 ~x2 ~y2 ~radius this =
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let x2 = Js.Any.of_float x2 in
    let y2 = Js.Any.of_float y2 in
    let radius = Js.Any.of_float radius in
    Js.to_unit (Js.Ffi.meth_call this "arcTo" [| x1; y1; x2; y2; radius |])

  let bezier_curve_to ~cp1x ~cp1y ~cp2x ~cp2y ~x ~y this =
    let cp1x = Js.Any.of_float cp1x in
    let cp1y = Js.Any.of_float cp1y in
    let cp2x = Js.Any.of_float cp2x in
    let cp2y = Js.Any.of_float cp2y in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit
      (Js.Ffi.meth_call this "bezierCurveTo" [| cp1x; cp1y; cp2x; cp2y; x; y |])

  let quadratic_curve_to ~cpx ~cpy ~x ~y this =
    let cpx = Js.Any.of_float cpx in
    let cpy = Js.Any.of_float cpy in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "quadraticCurveTo" [| cpx; cpy; x; y |])

  let line_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "lineTo" [| x; y |])

  let move_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "moveTo" [| x; y |])

  let close_path this = Js.to_unit (Js.Ffi.meth_call this "closePath" [||])

  let image_smoothing_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "imageSmoothingEnabled")

  let set_image_smoothing_enabled this x =
    Js.Ffi.set this "imageSmoothingEnabled" (Js.Any.of_bool x)

  let put_image_data ~imagedata ~dx ~dy ~dirty_x ~dirty_y ~dirty_width
      ~dirty_height this =
    let imagedata = Image_data.to_any imagedata in
    let dx = Js.Any.of_int dx in
    let dy = Js.Any.of_int dy in
    let dirty_x = Js.Any.of_int dirty_x in
    let dirty_y = Js.Any.of_int dirty_y in
    let dirty_width = Js.Any.of_int dirty_width in
    let dirty_height = Js.Any.of_int dirty_height in
    Js.to_unit
      (Js.Ffi.meth_call this "putImageData"
         [| imagedata; dx; dy; dirty_x; dirty_y; dirty_width; dirty_height |]
      )

  let put_image_data ~imagedata ~dx ~dy this =
    let imagedata = Image_data.to_any imagedata in
    let dx = Js.Any.of_int dx in
    let dy = Js.Any.of_int dy in
    Js.to_unit (Js.Ffi.meth_call this "putImageData" [| imagedata; dx; dy |])

  let get_image_data ~sx ~sy ~sw ~sh this =
    let sx = Js.Any.of_int sx in
    let sy = Js.Any.of_int sy in
    let sw = Js.Any.of_int sw in
    let sh = Js.Any.of_int sh in
    Image_data.of_any (Js.Ffi.meth_call this "getImageData" [| sx; sy; sw; sh |])

  let create_image_data ~imagedata this =
    let imagedata = Image_data.to_any imagedata in
    Image_data.of_any (Js.Ffi.meth_call this "createImageData" [| imagedata |])

  let create_image_data ~sw ~sh this =
    let sw = Js.Any.of_int sw in
    let sh = Js.Any.of_int sh in
    Image_data.of_any (Js.Ffi.meth_call this "createImageData" [| sw; sh |])

  let create_pattern ~image ~repetition this =
    let image = Canvas_image_source.to_any image in
    let repetition = Js.Any.of_string repetition in
    (Js.Any.nullable_to_option Canvas_pattern.of_any)
      (Js.Ffi.meth_call this "createPattern" [| image; repetition |])

  let create_radial_gradient ~x0 ~y0 ~r0 ~x1 ~y1 ~r1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let r0 = Js.Any.of_float r0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let r1 = Js.Any.of_float r1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createRadialGradient" [| x0; y0; r0; x1; y1; r1 |])

  let create_linear_gradient ~x0 ~y0 ~x1 ~y1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createLinearGradient" [| x0; y0; x1; y1 |])

  let fill_style this = Js.of_any (Js.Ffi.get this "fillStyle")
  let set_fill_style this x = Js.Ffi.set this "fillStyle" (Js.to_any x)
  let stroke_style this = Js.of_any (Js.Ffi.get this "strokeStyle")
  let set_stroke_style this x = Js.Ffi.set this "strokeStyle" (Js.to_any x)

  let is_point_in_path ~x ~y ?fill_rule this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.Any.to_bool (Js.Ffi.meth_call this "isPointInPath" [| x; y; fill_rule |])

  let clip ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "clip" [| fill_rule |])

  let stroke this = Js.to_unit (Js.Ffi.meth_call this "stroke" [||])

  let fill ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "fill" [| fill_rule |])

  let begin_path this = Js.to_unit (Js.Ffi.meth_call this "beginPath" [||])

  let draw_image ~image ~sx ~sy ~sw ~sh ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let sx = Js.Any.of_float sx in
    let sy = Js.Any.of_float sy in
    let sw = Js.Any.of_float sw in
    let sh = Js.Any.of_float sh in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit
      (Js.Ffi.meth_call this "drawImage"
         [| image; sx; sy; sw; sh; dx; dy; dw; dh |]
      )

  let draw_image ~image ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy; dw; dh |])

  let draw_image ~image ~dx ~dy this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy |])

  let global_composite_operation this =
    Js.Any.to_string (Js.Ffi.get this "globalCompositeOperation")

  let set_global_composite_operation this x =
    Js.Ffi.set this "globalCompositeOperation" (Js.Any.of_string x)

  let global_alpha this = Js.Any.to_float (Js.Ffi.get this "globalAlpha")
  let set_global_alpha this x = Js.Ffi.set this "globalAlpha" (Js.Any.of_float x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D} \
   [CanvasRenderingContext2D] on MDN}."]

and Canvas_line_cap : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val butt : t
  val round : t
  val square : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let butt = Js.of_string "butt"
  let round = Js.of_string "round"
  let square = Js.of_string "square"
end

and Canvas_line_join : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val round : t
  val bevel : t
  val miter : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let round = Js.of_string "round"
  let bevel = Js.of_string "bevel"
  let miter = Js.of_string "miter"
end

and Canvas_text_align : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val start : t
  val end' : t
  val left : t
  val right : t
  val center : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let start = Js.of_string "start"
  let end' = Js.of_string "end"
  let left = Js.of_string "left"
  let right = Js.of_string "right"
  let center = Js.of_string "center"
end

and Canvas_text_baseline : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val top : t
  val hanging : t
  val middle : t
  val alphabetic : t
  val ideographic : t
  val bottom : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let top = Js.of_string "top"
  let hanging = Js.of_string "hanging"
  let middle = Js.of_string "middle"
  let alphabetic = Js.of_string "alphabetic"
  let ideographic = Js.of_string "ideographic"
  let bottom = Js.of_string "bottom"
end

and Canvas_direction : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val ltr : t
  val rtl : t
  val inherit' : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let ltr = Js.of_string "ltr"
  let rtl = Js.of_string "rtl"
  let inherit' = Js.of_string "inherit"
end

and Canvas_gradient : sig
  type t = [ `Canvas_gradient ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient} \
     [CanvasGradient]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val add_color_stop : offset:float -> color:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop} \
     [addColorStop] on MDN}."]
end = struct
  type t = [ `Canvas_gradient ] Js.t

  let t = Js.Ffi.constr "CanvasGradient"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let add_color_stop ~offset ~color this =
    let offset = Js.Any.of_float offset in
    let color = Js.Any.of_string color in
    Js.to_unit (Js.Ffi.meth_call this "addColorStop" [| offset; color |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient} \
   [CanvasGradient] on MDN}."]

and Canvas_pattern : sig
  type t = [ `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern} \
     [CanvasPattern]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Canvas_pattern ] Js.t

  let t = Js.Ffi.constr "CanvasPattern"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern} \
   [CanvasPattern] on MDN}."]

and Image_data : sig
  type t = [ `Image_data ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ImageData} [ImageData]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val with_sw_and_sh : sw:int -> sh:int -> unit -> t

  val with_data_and_sw_and_sh :
    data:'todo_object -> sw:int -> ?sh:int -> unit -> t

  val width : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height} \
     [height] on MDN}."]

  val data : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data} \
     [data] on MDN}."]
end = struct
  type t = [ `Image_data ] Js.t

  let t = Js.Ffi.constr "ImageData"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_sw_and_sh ~sw ~sh () =
    let sw = Js.Any.of_int sw in
    let sh = Js.Any.of_int sh in
    Js.Ffi.obj_new t [| sw; sh |]

  let with_data_and_sw_and_sh ~data ~sw ?sh () =
    let data = Js.object_todo data in
    let sw = Js.Any.of_int sw in
    let sh = (Js.Any.undefined_of_option Js.Any.of_int) sh in
    Js.Ffi.obj_new t [| data; sw; sh |]

  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
  let data this = Uint8_clamped_array.of_any (Js.Ffi.get this "data")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ImageData} \
   [ImageData] on MDN}."]

and Channel_merger_options : sig
  type t [@@ocaml.doc "The type for the [ChannelMergerOptions] dictionary."]

  val make : ?number_of_inputs:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val number_of_inputs : t -> int option
end = struct
  type t = Js.any

  let make ?number_of_inputs () =
    let number_of_inputs =
      (Js.Any.nullable_of_option Js.Any.of_int) number_of_inputs
    in
    Js.Ffi.obj [| ("numberOfInputs", number_of_inputs) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let number_of_inputs this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "numberOfInputs")
end

and Channel_merger_node : sig
  type t = [ `Channel_merger_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode} \
     [ChannelMergerNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Channel_merger_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode} \
     [ChannelMergerNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Channel_merger_options.t ->
    unit ->
    'a super
end = struct
  type t = [ `Channel_merger_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Channel_merger_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode} \
     [ChannelMergerNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ChannelMergerNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Channel_merger_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode} \
   [ChannelMergerNode] on MDN}."]

and Channel_splitter_options : sig
  type t [@@ocaml.doc "The type for the [ChannelSplitterOptions] dictionary."]

  val make : ?number_of_outputs:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val number_of_outputs : t -> int option
end = struct
  type t = Js.any

  let make ?number_of_outputs () =
    let number_of_outputs =
      (Js.Any.nullable_of_option Js.Any.of_int) number_of_outputs
    in
    Js.Ffi.obj [| ("numberOfOutputs", number_of_outputs) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let number_of_outputs this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "numberOfOutputs")
end

and Channel_splitter_node : sig
  type t = [ `Channel_splitter_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode} \
     [ChannelSplitterNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Channel_splitter_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode} \
     [ChannelSplitterNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Channel_splitter_options.t ->
    unit ->
    'a super
end = struct
  type t = [ `Channel_splitter_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Channel_splitter_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode} \
     [ChannelSplitterNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ChannelSplitterNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Channel_splitter_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode} \
   [ChannelSplitterNode] on MDN}."]

and Character_data : sig
  type t = [ `Character_data ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData} \
     [CharacterData]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData} \
     [CharacterData]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val data : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/data} \
     [data] on MDN}."]

  val set_data : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/data} \
     [data] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/length} \
     [length] on MDN}."]

  val substring_data : offset:int -> count:int -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/substringData} \
     [substringData] on MDN}."]

  val append_data : data:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/appendData} \
     [appendData] on MDN}."]

  val insert_data : offset:int -> data:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/insertData} \
     [insertData] on MDN}."]

  val delete_data : offset:int -> count:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/deleteData} \
     [deleteData] on MDN}."]

  val replace_data : offset:int -> count:int -> data:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/replaceData} \
     [replaceData] on MDN}."]

  val next_element_sibling : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/nextElementSibling} \
     [nextElementSibling] on MDN}."]

  val previous_element_sibling : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/previousElementSibling} \
     [previousElementSibling] on MDN}."]
end = struct
  type t = [ `Character_data ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CharacterData} \
     [CharacterData]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CharacterData"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this
  let data this = Js.Any.to_string (Js.Ffi.get this "data")
  let set_data this x = Js.Ffi.set this "data" (Js.Any.of_string x)
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let substring_data ~offset ~count this =
    let offset = Js.Any.of_int offset in
    let count = Js.Any.of_int count in
    Js.Any.to_string (Js.Ffi.meth_call this "substringData" [| offset; count |])

  let append_data ~data this =
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "appendData" [| data |])

  let insert_data ~offset ~data this =
    let offset = Js.Any.of_int offset in
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "insertData" [| offset; data |])

  let delete_data ~offset ~count this =
    let offset = Js.Any.of_int offset in
    let count = Js.Any.of_int count in
    Js.to_unit (Js.Ffi.meth_call this "deleteData" [| offset; count |])

  let replace_data ~offset ~count ~data this =
    let offset = Js.Any.of_int offset in
    let count = Js.Any.of_int count in
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "replaceData" [| offset; count; data |])

  let next_element_sibling this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "nextElementSibling")

  let previous_element_sibling this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "previousElementSibling")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CharacterData} \
   [CharacterData] on MDN}."]

and Client : sig
  type t = [ `Client ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Client} [Client]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Client/url} \
     [url] on MDN}."]

  val frame_type : t -> Frame_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType} \
     [frameType] on MDN}."]

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Client/id} [id] \
     on MDN}."]
end = struct
  type t = [ `Client ] Js.t

  let t = Js.Ffi.constr "Client"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let url this = Js.Any.to_string (Js.Ffi.get this "url")
  let frame_type this = Frame_type.of_any (Js.Ffi.get this "frameType")
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Client} [Client] \
   on MDN}."]

and Frame_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val auxiliary : t
  val top_level : t
  val nested : t
  val none : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let auxiliary = Js.of_string "auxiliary"
  let top_level = Js.of_string "top-level"
  let nested = Js.of_string "nested"
  let none = Js.of_string "none"
end

and Close_event : sig
  type t = [ `Close_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent} \
     [CloseEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Close_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent} \
     [CloseEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Close_event_init.t -> unit -> 'a super

  val was_clean : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/wasClean} \
     [wasClean] on MDN}."]

  val code : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code} \
     [code] on MDN}."]

  val reason : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/reason} \
     [reason] on MDN}."]
end = struct
  type t = [ `Close_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Close_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent} \
     [CloseEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CloseEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Close_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let was_clean this = Js.Any.to_bool (Js.Ffi.get this "wasClean")
  let code this = Js.Any.to_int (Js.Ffi.get this "code")
  let reason this = Js.Any.to_string (Js.Ffi.get this "reason")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent} \
   [CloseEvent] on MDN}."]

and Close_event_init : sig
  type t [@@ocaml.doc "The type for the [CloseEventInit] dictionary."]

  val make : ?was_clean:bool -> ?code:int -> ?reason:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val was_clean : t -> bool option
  val code : t -> int option
  val reason : t -> string option
end = struct
  type t = Js.any

  let make ?was_clean ?code ?reason () =
    let was_clean = (Js.Any.nullable_of_option Js.Any.of_bool) was_clean in
    let code = (Js.Any.nullable_of_option Js.Any.of_int) code in
    let reason = (Js.Any.nullable_of_option Js.Any.of_string) reason in
    Js.Ffi.obj [| ("wasClean", was_clean); ("code", code); ("reason", reason) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let was_clean this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "wasClean")

  let code this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "code")

  let reason this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "reason")
end

and Comment : sig
  type t = [ `Comment ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Comment} [Comment]} \
     interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Comment | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Comment} [Comment]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : ?data:string -> unit -> 'a super
end = struct
  type t = [ `Comment ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Comment | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Comment} [Comment]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Comment"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_character_data this = Js.Ffi.magic this

  let make ?data () =
    let data = (Js.Any.undefined_of_option Js.Any.of_string) data in
    Js.Ffi.obj_new t [| data |]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Comment} [Comment] \
   on MDN}."]

and Composition_event : sig
  type t = [ `Composition_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent} \
     [CompositionEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Composition_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent} \
     [CompositionEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Composition_event_init.t ->
    unit ->
    'a super

  val data : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data} \
     [data] on MDN}."]
end = struct
  type t = [ `Composition_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Composition_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent} \
     [CompositionEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CompositionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Composition_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let data this = Js.Any.to_string (Js.Ffi.get this "data")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent} \
   [CompositionEvent] on MDN}."]

and Composition_event_init : sig
  type t [@@ocaml.doc "The type for the [CompositionEventInit] dictionary."]

  val make : ?data:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_ui_event_init : t -> Ui_event_init.t
  val data : t -> string option
end = struct
  type t = Js.any

  let make ?data () =
    let data = (Js.Any.nullable_of_option Js.Any.of_string) data in
    Js.Ffi.obj [| ("data", data) |]

  let to_ui_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let data this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "data")
end

and Constant_source_options : sig
  type t [@@ocaml.doc "The type for the [ConstantSourceOptions] dictionary."]

  val make : ?offset:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val offset : t -> float option
end = struct
  type t = Js.any

  let make ?offset () =
    let offset = (Js.Any.nullable_of_option Js.Any.of_float) offset in
    Js.Ffi.obj [| ("offset", offset) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let offset this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "offset")
end

and Constant_source_node : sig
  type t = [ `Constant_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode} \
     [ConstantSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Constant_source_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode} \
     [ConstantSourceNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Constant_source_options.t ->
    unit ->
    'a super

  val offset : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/offset} \
     [offset] on MDN}."]
end = struct
  type t = [ `Constant_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Constant_source_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode} \
     [ConstantSourceNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ConstantSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_scheduled_source_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Constant_source_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let offset this = Audio_param.of_any (Js.Ffi.get this "offset")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode} \
   [ConstantSourceNode] on MDN}."]

and Crypto : sig
  type t = [ `Crypto ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Crypto} [Crypto]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_random_values : array:Array_buffer_view.t -> t -> Array_buffer_view.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues} \
     [getRandomValues] on MDN}."]
end = struct
  type t = [ `Crypto ] Js.t

  let t = Js.Ffi.constr "Crypto"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_random_values ~array this =
    let array = Array_buffer_view.to_any array in
    Array_buffer_view.of_any
      (Js.Ffi.meth_call this "getRandomValues" [| array |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Crypto} [Crypto] \
   on MDN}."]

and Custom_element_registry : sig
  type t = [ `Custom_element_registry ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry} \
     [CustomElementRegistry]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val define :
    name:string ->
    constructor_:Custom_element_constructor.t ->
    ?options:Element_definition_options.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define} \
     [define] on MDN}."]

  val get : name:string -> t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/get} \
     [get] on MDN}."]

  val when_defined : name:string -> t -> Custom_element_constructor.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined} \
     [whenDefined] on MDN}."]

  val upgrade : root:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/upgrade} \
     [upgrade] on MDN}."]
end = struct
  type t = [ `Custom_element_registry ] Js.t

  let t = Js.Ffi.constr "CustomElementRegistry"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let define ~name ~constructor_ ?options this =
    let name = Js.Any.of_string name in
    let constructor_ = Custom_element_constructor.to_any constructor_ in
    let options =
      (Js.Any.undefined_of_option Element_definition_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "define" [| name; constructor_; options |])

  let get ~name this =
    let name = Js.Any.of_string name in
    Js.to_any (Js.Ffi.meth_call this "get" [| name |])

  let when_defined ~name this =
    let name = Js.Any.of_string name in
    (Promise.of_any Custom_element_constructor.of_any)
      (Js.Ffi.meth_call this "whenDefined" [| name |])

  let upgrade ~root this =
    let root = Node.to_any root in
    Js.to_unit (Js.Ffi.meth_call this "upgrade" [| root |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry} \
   [CustomElementRegistry] on MDN}."]

and Custom_element_constructor : sig
  type t = Html_element.t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Custom_element_constructor

and Element_definition_options : sig
  type t [@@ocaml.doc "The type for the [ElementDefinitionOptions] dictionary."]

  val make : ?extends:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val extends : t -> string option
end = struct
  type t = Js.any

  let make ?extends () =
    let extends = (Js.Any.nullable_of_option Js.Any.of_string) extends in
    Js.Ffi.obj [| ("extends", extends) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let extends this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "extends")
end

and Custom_event : sig
  type t = [ `Custom_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent} \
     [CustomEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Custom_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent} \
     [CustomEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Custom_event_init.t -> unit -> 'a super

  val detail : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail} \
     [detail] on MDN}."]

  val init_custom_event :
    type':string ->
    bubbles:bool ->
    cancelable:bool ->
    detail:Js.any ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent} \
     [initCustomEvent] on MDN}."]
end = struct
  type t = [ `Custom_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Custom_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent} \
     [CustomEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "CustomEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Custom_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let detail this = Js.to_any (Js.Ffi.get this "detail")

  let init_custom_event ~type' ~bubbles ~cancelable ~detail this =
    let type' = Js.Any.of_string type' in
    let bubbles = Js.Any.of_bool bubbles in
    let cancelable = Js.Any.of_bool cancelable in
    let detail = Js.of_any detail in
    Js.to_unit
      (Js.Ffi.meth_call this "initCustomEvent"
         [| type'; bubbles; cancelable; detail |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent} \
   [CustomEvent] on MDN}."]

and Custom_event_init : sig
  type t [@@ocaml.doc "The type for the [CustomEventInit] dictionary."]

  val make : ?detail:Js.any -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val detail : t -> Js.any option
end = struct
  type t = Js.any

  let make ?detail () =
    let detail = (Js.Any.nullable_of_option Js.of_any) detail in
    Js.Ffi.obj [| ("detail", detail) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let detail this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "detail")
end

and Dom_exception : sig
  type t = [ `Dom_exception ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMException} \
     [DOMException]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val with_message_and_name : ?message:string -> ?name:string -> unit -> t
  val index_size_err : int
  val domstring_size_err : int
  val hierarchy_request_err : int
  val wrong_document_err : int
  val invalid_character_err : int
  val no_data_allowed_err : int
  val no_modification_allowed_err : int
  val not_found_err : int
  val not_supported_err : int
  val inuse_attribute_err : int
  val invalid_state_err : int
  val syntax_err : int
  val invalid_modification_err : int
  val namespace_err : int
  val invalid_access_err : int
  val validation_err : int
  val type_mismatch_err : int
  val security_err : int
  val network_err : int
  val abort_err : int
  val url_mismatch_err : int
  val quota_exceeded_err : int
  val timeout_err : int
  val invalid_node_type_err : int
  val data_clone_err : int

  val code : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMException/code} \
     [code] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMException/name} \
     [name] on MDN}."]

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMException/message} \
     [message] on MDN}."]
end = struct
  type t = [ `Dom_exception ] Js.t

  let t = Js.Ffi.constr "DOMException"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_message_and_name ?message ?name () =
    let message = (Js.Any.undefined_of_option Js.Any.of_string) message in
    let name = (Js.Any.undefined_of_option Js.Any.of_string) name in
    Js.Ffi.obj_new t [| message; name |]

  let index_size_err = 1
  let domstring_size_err = 2
  let hierarchy_request_err = 3
  let wrong_document_err = 4
  let invalid_character_err = 5
  let no_data_allowed_err = 6
  let no_modification_allowed_err = 7
  let not_found_err = 8
  let not_supported_err = 9
  let inuse_attribute_err = 10
  let invalid_state_err = 11
  let syntax_err = 12
  let invalid_modification_err = 13
  let namespace_err = 14
  let invalid_access_err = 15
  let validation_err = 16
  let type_mismatch_err = 17
  let security_err = 18
  let network_err = 19
  let abort_err = 20
  let url_mismatch_err = 21
  let quota_exceeded_err = 22
  let timeout_err = 23
  let invalid_node_type_err = 24
  let data_clone_err = 25
  let code this = Js.Any.to_int (Js.Ffi.get this "code")
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let message this = Js.Any.to_string (Js.Ffi.get this "message")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMException} \
   [DOMException] on MDN}."]

and Dom_implementation : sig
  type t = [ `Dom_implementation ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation} \
     [DOMImplementation]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val create_document_type :
    qualified_name:string ->
    public_id:string ->
    system_id:string ->
    t ->
    'a Document_type.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType} \
     [createDocumentType] on MDN}."]

  val create_document :
    namespace:string option ->
    qualified_name:string ->
    ?doctype:Document_type.t option ->
    t ->
    'a Xml_document.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument} \
     [createDocument] on MDN}."]

  val create_html_document : ?title:string -> t -> 'a Document.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument} \
     [createHTMLDocument] on MDN}."]

  val has_feature : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature} \
     [hasFeature] on MDN}."]
end = struct
  type t = [ `Dom_implementation ] Js.t

  let t = Js.Ffi.constr "DOMImplementation"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let create_document_type ~qualified_name ~public_id ~system_id this =
    let qualified_name = Js.Any.of_string qualified_name in
    let public_id = Js.Any.of_string public_id in
    let system_id = Js.Any.of_string system_id in
    Document_type.of_any
      (Js.Ffi.meth_call this "createDocumentType"
         [| qualified_name; public_id; system_id |]
      )

  let create_document ~namespace ~qualified_name ?doctype this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let qualified_name = Js.Any.of_string qualified_name in
    let doctype =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option Document_type.to_any)
      )
        doctype
    in
    Xml_document.of_any
      (Js.Ffi.meth_call this "createDocument"
         [| namespace; qualified_name; doctype |]
      )

  let create_html_document ?title this =
    let title = (Js.Any.undefined_of_option Js.Any.of_string) title in
    Document.of_any (Js.Ffi.meth_call this "createHTMLDocument" [| title |])

  let has_feature this = Js.Any.to_bool (Js.Ffi.meth_call this "hasFeature" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation} \
   [DOMImplementation] on MDN}."]

and Dom_matrix : sig
  type t = [ `Dom_matrix ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix} [DOMMatrix]} \
     interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Dom_matrix | `Dom_matrix_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix} [DOMMatrix]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : ?init:[< `String | `Sequence ] Js.t -> unit -> 'a super

  val from_matrix : ?other:Dom_matrix_init.t -> unit -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/fromMatrix} \
     [fromMatrix] on MDN}."]

  val from_float32_array : array32:'todo_buffer -> unit -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/fromFloat32Array} \
     [fromFloat32Array] on MDN}."]

  val from_float64_array : array64:'todo_buffer -> unit -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/fromFloat64Array} \
     [fromFloat64Array] on MDN}."]

  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _

  val multiply_self : ?other:Dom_matrix_init.t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/multiplySelf} \
     [multiplySelf] on MDN}."]

  val pre_multiply_self : ?other:Dom_matrix_init.t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/preMultiplySelf} \
     [preMultiplySelf] on MDN}."]

  val translate_self : ?tx:float -> ?ty:float -> ?tz:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/translateSelf} \
     [translateSelf] on MDN}."]

  val scale_self :
    ?scale_x:float ->
    ?scale_y:float ->
    ?scale_z:float ->
    ?origin_x:float ->
    ?origin_y:float ->
    ?origin_z:float ->
    t ->
    'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/scaleSelf} \
     [scaleSelf] on MDN}."]

  val scale3d_self :
    ?scale:float ->
    ?origin_x:float ->
    ?origin_y:float ->
    ?origin_z:float ->
    t ->
    'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/scale3dSelf} \
     [scale3dSelf] on MDN}."]

  val rotate_self :
    ?rot_x:float -> ?rot_y:float -> ?rot_z:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/rotateSelf} \
     [rotateSelf] on MDN}."]

  val rotate_from_vector_self : ?x:float -> ?y:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/rotateFromVectorSelf} \
     [rotateFromVectorSelf] on MDN}."]

  val rotate_axis_angle_self :
    ?x:float -> ?y:float -> ?z:float -> ?angle:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/rotateAxisAngleSelf} \
     [rotateAxisAngleSelf] on MDN}."]

  val skew_x_self : ?sx:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/skewXSelf} \
     [skewXSelf] on MDN}."]

  val skew_y_self : ?sy:float -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/skewYSelf} \
     [skewYSelf] on MDN}."]

  val invert_self : t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/invertSelf} \
     [invertSelf] on MDN}."]
end = struct
  type t = [ `Dom_matrix ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Dom_matrix | `Dom_matrix_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix} [DOMMatrix]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "DOMMatrix"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_dom_matrix_read_only this = Js.Ffi.magic this

  let make ?init () =
    let init = (Js.Any.undefined_of_option Js.to_any) init in
    Js.Ffi.obj_new t [| init |]

  let from_matrix ?other () =
    let other = (Js.Any.undefined_of_option Dom_matrix_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromMatrix" [| other |])

  let from_float32_array ~array32 () =
    let array32 = Float32_array.to_any array32 in
    of_any (Js.Ffi.meth_call t "fromFloat32Array" [| array32 |])

  let from_float64_array ~array64 () =
    let array64 = Float64_array.to_any array64 in
    of_any (Js.Ffi.meth_call t "fromFloat64Array" [| array64 |])

  let multiply_self ?other this =
    let other = (Js.Any.undefined_of_option Dom_matrix_init.to_any) other in
    of_any (Js.Ffi.meth_call this "multiplySelf" [| other |])

  let pre_multiply_self ?other this =
    let other = (Js.Any.undefined_of_option Dom_matrix_init.to_any) other in
    of_any (Js.Ffi.meth_call this "preMultiplySelf" [| other |])

  let translate_self ?tx ?ty ?tz this =
    let tx = (Js.Any.undefined_of_option Js.Any.of_float) tx in
    let ty = (Js.Any.undefined_of_option Js.Any.of_float) ty in
    let tz = (Js.Any.undefined_of_option Js.Any.of_float) tz in
    of_any (Js.Ffi.meth_call this "translateSelf" [| tx; ty; tz |])

  let scale_self ?scale_x ?scale_y ?scale_z ?origin_x ?origin_y ?origin_z this =
    let scale_x = (Js.Any.undefined_of_option Js.Any.of_float) scale_x in
    let scale_y = (Js.Any.undefined_of_option Js.Any.of_float) scale_y in
    let scale_z = (Js.Any.undefined_of_option Js.Any.of_float) scale_z in
    let origin_x = (Js.Any.undefined_of_option Js.Any.of_float) origin_x in
    let origin_y = (Js.Any.undefined_of_option Js.Any.of_float) origin_y in
    let origin_z = (Js.Any.undefined_of_option Js.Any.of_float) origin_z in
    of_any
      (Js.Ffi.meth_call this "scaleSelf"
         [| scale_x; scale_y; scale_z; origin_x; origin_y; origin_z |]
      )

  let scale3d_self ?scale ?origin_x ?origin_y ?origin_z this =
    let scale = (Js.Any.undefined_of_option Js.Any.of_float) scale in
    let origin_x = (Js.Any.undefined_of_option Js.Any.of_float) origin_x in
    let origin_y = (Js.Any.undefined_of_option Js.Any.of_float) origin_y in
    let origin_z = (Js.Any.undefined_of_option Js.Any.of_float) origin_z in
    of_any
      (Js.Ffi.meth_call this "scale3dSelf"
         [| scale; origin_x; origin_y; origin_z |]
      )

  let rotate_self ?rot_x ?rot_y ?rot_z this =
    let rot_x = (Js.Any.undefined_of_option Js.Any.of_float) rot_x in
    let rot_y = (Js.Any.undefined_of_option Js.Any.of_float) rot_y in
    let rot_z = (Js.Any.undefined_of_option Js.Any.of_float) rot_z in
    of_any (Js.Ffi.meth_call this "rotateSelf" [| rot_x; rot_y; rot_z |])

  let rotate_from_vector_self ?x ?y this =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    of_any (Js.Ffi.meth_call this "rotateFromVectorSelf" [| x; y |])

  let rotate_axis_angle_self ?x ?y ?z ?angle this =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let z = (Js.Any.undefined_of_option Js.Any.of_float) z in
    let angle = (Js.Any.undefined_of_option Js.Any.of_float) angle in
    of_any (Js.Ffi.meth_call this "rotateAxisAngleSelf" [| x; y; z; angle |])

  let skew_x_self ?sx this =
    let sx = (Js.Any.undefined_of_option Js.Any.of_float) sx in
    of_any (Js.Ffi.meth_call this "skewXSelf" [| sx |])

  let skew_y_self ?sy this =
    let sy = (Js.Any.undefined_of_option Js.Any.of_float) sy in
    of_any (Js.Ffi.meth_call this "skewYSelf" [| sy |])

  let invert_self this = of_any (Js.Ffi.meth_call this "invertSelf" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix} \
   [DOMMatrix] on MDN}."]

and Dom_matrix2_d_init : sig
  type t [@@ocaml.doc "The type for the [DOMMatrix2DInit] dictionary."]

  val make :
    ?a:float ->
    ?b:float ->
    ?c:float ->
    ?d:float ->
    ?e:float ->
    ?f:float ->
    ?m11:float ->
    ?m12:float ->
    ?m21:float ->
    ?m22:float ->
    ?m41:float ->
    ?m42:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val a : t -> float option
  val b : t -> float option
  val c : t -> float option
  val d : t -> float option
  val e : t -> float option
  val f : t -> float option
  val m11 : t -> float option
  val m12 : t -> float option
  val m21 : t -> float option
  val m22 : t -> float option
  val m41 : t -> float option
  val m42 : t -> float option
end = struct
  type t = Js.any

  let make ?a ?b ?c ?d ?e ?f ?m11 ?m12 ?m21 ?m22 ?m41 ?m42 () =
    let a = (Js.Any.nullable_of_option Js.Any.of_float) a in
    let b = (Js.Any.nullable_of_option Js.Any.of_float) b in
    let c = (Js.Any.nullable_of_option Js.Any.of_float) c in
    let d = (Js.Any.nullable_of_option Js.Any.of_float) d in
    let e = (Js.Any.nullable_of_option Js.Any.of_float) e in
    let f = (Js.Any.nullable_of_option Js.Any.of_float) f in
    let m11 = (Js.Any.nullable_of_option Js.Any.of_float) m11 in
    let m12 = (Js.Any.nullable_of_option Js.Any.of_float) m12 in
    let m21 = (Js.Any.nullable_of_option Js.Any.of_float) m21 in
    let m22 = (Js.Any.nullable_of_option Js.Any.of_float) m22 in
    let m41 = (Js.Any.nullable_of_option Js.Any.of_float) m41 in
    let m42 = (Js.Any.nullable_of_option Js.Any.of_float) m42 in
    Js.Ffi.obj
      [|
        ("a", a);
        ("b", b);
        ("c", c);
        ("d", d);
        ("e", e);
        ("f", f);
        ("m11", m11);
        ("m12", m12);
        ("m21", m21);
        ("m22", m22);
        ("m41", m41);
        ("m42", m42);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let a this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "a")
  let b this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "b")
  let c this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "c")
  let d this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "d")
  let e this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "e")
  let f this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "f")

  let m11 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m11")

  let m12 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m12")

  let m21 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m21")

  let m22 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m22")

  let m41 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m41")

  let m42 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m42")
end

and Dom_matrix_init : sig
  type t [@@ocaml.doc "The type for the [DOMMatrixInit] dictionary."]

  val make :
    ?m13:float ->
    ?m14:float ->
    ?m23:float ->
    ?m24:float ->
    ?m31:float ->
    ?m32:float ->
    ?m33:float ->
    ?m34:float ->
    ?m43:float ->
    ?m44:float ->
    ?is2_d:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_dom_matrix2_d_init : t -> Dom_matrix2_d_init.t
  val m13 : t -> float option
  val m14 : t -> float option
  val m23 : t -> float option
  val m24 : t -> float option
  val m31 : t -> float option
  val m32 : t -> float option
  val m33 : t -> float option
  val m34 : t -> float option
  val m43 : t -> float option
  val m44 : t -> float option
  val is2_d : t -> bool option
end = struct
  type t = Js.any

  let make ?m13 ?m14 ?m23 ?m24 ?m31 ?m32 ?m33 ?m34 ?m43 ?m44 ?is2_d () =
    let m13 = (Js.Any.nullable_of_option Js.Any.of_float) m13 in
    let m14 = (Js.Any.nullable_of_option Js.Any.of_float) m14 in
    let m23 = (Js.Any.nullable_of_option Js.Any.of_float) m23 in
    let m24 = (Js.Any.nullable_of_option Js.Any.of_float) m24 in
    let m31 = (Js.Any.nullable_of_option Js.Any.of_float) m31 in
    let m32 = (Js.Any.nullable_of_option Js.Any.of_float) m32 in
    let m33 = (Js.Any.nullable_of_option Js.Any.of_float) m33 in
    let m34 = (Js.Any.nullable_of_option Js.Any.of_float) m34 in
    let m43 = (Js.Any.nullable_of_option Js.Any.of_float) m43 in
    let m44 = (Js.Any.nullable_of_option Js.Any.of_float) m44 in
    let is2_d = (Js.Any.nullable_of_option Js.Any.of_bool) is2_d in
    Js.Ffi.obj
      [|
        ("m13", m13);
        ("m14", m14);
        ("m23", m23);
        ("m24", m24);
        ("m31", m31);
        ("m32", m32);
        ("m33", m33);
        ("m34", m34);
        ("m43", m43);
        ("m44", m44);
        ("is2D", is2_d);
      |]

  let to_dom_matrix2_d_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let m13 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m13")

  let m14 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m14")

  let m23 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m23")

  let m24 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m24")

  let m31 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m31")

  let m32 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m32")

  let m33 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m33")

  let m34 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m34")

  let m43 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m43")

  let m44 this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "m44")

  let is2_d this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "is2D")
end

and Dom_matrix_read_only : sig
  type t = [ `Dom_matrix_read_only ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly} \
     [DOMMatrixReadOnly]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?init:[< `String | `Sequence ] Js.t -> unit -> t

  val from_matrix : ?other:Dom_matrix_init.t -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/fromMatrix} \
     [fromMatrix] on MDN}."]

  val from_float32_array : array32:'todo_buffer -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/fromFloat32Array} \
     [fromFloat32Array] on MDN}."]

  val from_float64_array : array64:'todo_buffer -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/fromFloat64Array} \
     [fromFloat64Array] on MDN}."]

  val a : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/a} [a] \
     on MDN}."]

  val b : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/b} [b] \
     on MDN}."]

  val c : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/c} [c] \
     on MDN}."]

  val d : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/d} [d] \
     on MDN}."]

  val e : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/e} [e] \
     on MDN}."]

  val f : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/f} [f] \
     on MDN}."]

  val m11 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m11} \
     [m11] on MDN}."]

  val m12 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m12} \
     [m12] on MDN}."]

  val m13 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m13} \
     [m13] on MDN}."]

  val m14 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m14} \
     [m14] on MDN}."]

  val m21 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m21} \
     [m21] on MDN}."]

  val m22 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m22} \
     [m22] on MDN}."]

  val m23 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m23} \
     [m23] on MDN}."]

  val m24 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m24} \
     [m24] on MDN}."]

  val m31 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m31} \
     [m31] on MDN}."]

  val m32 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m32} \
     [m32] on MDN}."]

  val m33 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m33} \
     [m33] on MDN}."]

  val m34 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m34} \
     [m34] on MDN}."]

  val m41 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m41} \
     [m41] on MDN}."]

  val m42 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m42} \
     [m42] on MDN}."]

  val m43 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m43} \
     [m43] on MDN}."]

  val m44 : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/m44} \
     [m44] on MDN}."]

  val is2_d : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/is2D} \
     [is2D] on MDN}."]

  val is_identity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/isIdentity} \
     [isIdentity] on MDN}."]

  val translate :
    ?tx:float -> ?ty:float -> ?tz:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/translate} \
     [translate] on MDN}."]

  val scale :
    ?scale_x:float ->
    ?scale_y:float ->
    ?scale_z:float ->
    ?origin_x:float ->
    ?origin_y:float ->
    ?origin_z:float ->
    t ->
    'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/scale} \
     [scale] on MDN}."]

  val scale_non_uniform :
    ?scale_x:float -> ?scale_y:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/scaleNonUniform} \
     [scaleNonUniform] on MDN}."]

  val scale3d :
    ?scale:float ->
    ?origin_x:float ->
    ?origin_y:float ->
    ?origin_z:float ->
    t ->
    'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/scale3d} \
     [scale3d] on MDN}."]

  val rotate :
    ?rot_x:float -> ?rot_y:float -> ?rot_z:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/rotate} \
     [rotate] on MDN}."]

  val rotate_from_vector : ?x:float -> ?y:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/rotateFromVector} \
     [rotateFromVector] on MDN}."]

  val rotate_axis_angle :
    ?x:float -> ?y:float -> ?z:float -> ?angle:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle} \
     [rotateAxisAngle] on MDN}."]

  val skew_x : ?sx:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/skewX} \
     [skewX] on MDN}."]

  val skew_y : ?sy:float -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/skewY} \
     [skewY] on MDN}."]

  val multiply : ?other:Dom_matrix_init.t -> t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/multiply} \
     [multiply] on MDN}."]

  val flip_x : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/flipX} \
     [flipX] on MDN}."]

  val flip_y : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/flipY} \
     [flipY] on MDN}."]

  val inverse : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/inverse} \
     [inverse] on MDN}."]

  val transform_point : ?point:Dom_point_init.t -> t -> 'a Dom_point.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/transformPoint} \
     [transformPoint] on MDN}."]

  val to_float32_array : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/toFloat32Array} \
     [toFloat32Array] on MDN}."]

  val to_float64_array : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/toFloat64Array} \
     [toFloat64Array] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Dom_matrix_read_only ] Js.t

  let t = Js.Ffi.constr "DOMMatrixReadOnly"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?init () =
    let init = (Js.Any.undefined_of_option Js.to_any) init in
    Js.Ffi.obj_new t [| init |]

  let from_matrix ?other () =
    let other = (Js.Any.undefined_of_option Dom_matrix_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromMatrix" [| other |])

  let from_float32_array ~array32 () =
    let array32 = Float32_array.to_any array32 in
    of_any (Js.Ffi.meth_call t "fromFloat32Array" [| array32 |])

  let from_float64_array ~array64 () =
    let array64 = Float64_array.to_any array64 in
    of_any (Js.Ffi.meth_call t "fromFloat64Array" [| array64 |])

  let a this = Js.Any.to_float (Js.Ffi.get this "a")
  let b this = Js.Any.to_float (Js.Ffi.get this "b")
  let c this = Js.Any.to_float (Js.Ffi.get this "c")
  let d this = Js.Any.to_float (Js.Ffi.get this "d")
  let e this = Js.Any.to_float (Js.Ffi.get this "e")
  let f this = Js.Any.to_float (Js.Ffi.get this "f")
  let m11 this = Js.Any.to_float (Js.Ffi.get this "m11")
  let m12 this = Js.Any.to_float (Js.Ffi.get this "m12")
  let m13 this = Js.Any.to_float (Js.Ffi.get this "m13")
  let m14 this = Js.Any.to_float (Js.Ffi.get this "m14")
  let m21 this = Js.Any.to_float (Js.Ffi.get this "m21")
  let m22 this = Js.Any.to_float (Js.Ffi.get this "m22")
  let m23 this = Js.Any.to_float (Js.Ffi.get this "m23")
  let m24 this = Js.Any.to_float (Js.Ffi.get this "m24")
  let m31 this = Js.Any.to_float (Js.Ffi.get this "m31")
  let m32 this = Js.Any.to_float (Js.Ffi.get this "m32")
  let m33 this = Js.Any.to_float (Js.Ffi.get this "m33")
  let m34 this = Js.Any.to_float (Js.Ffi.get this "m34")
  let m41 this = Js.Any.to_float (Js.Ffi.get this "m41")
  let m42 this = Js.Any.to_float (Js.Ffi.get this "m42")
  let m43 this = Js.Any.to_float (Js.Ffi.get this "m43")
  let m44 this = Js.Any.to_float (Js.Ffi.get this "m44")
  let is2_d this = Js.Any.to_bool (Js.Ffi.get this "is2D")
  let is_identity this = Js.Any.to_bool (Js.Ffi.get this "isIdentity")

  let translate ?tx ?ty ?tz this =
    let tx = (Js.Any.undefined_of_option Js.Any.of_float) tx in
    let ty = (Js.Any.undefined_of_option Js.Any.of_float) ty in
    let tz = (Js.Any.undefined_of_option Js.Any.of_float) tz in
    Dom_matrix.of_any (Js.Ffi.meth_call this "translate" [| tx; ty; tz |])

  let scale ?scale_x ?scale_y ?scale_z ?origin_x ?origin_y ?origin_z this =
    let scale_x = (Js.Any.undefined_of_option Js.Any.of_float) scale_x in
    let scale_y = (Js.Any.undefined_of_option Js.Any.of_float) scale_y in
    let scale_z = (Js.Any.undefined_of_option Js.Any.of_float) scale_z in
    let origin_x = (Js.Any.undefined_of_option Js.Any.of_float) origin_x in
    let origin_y = (Js.Any.undefined_of_option Js.Any.of_float) origin_y in
    let origin_z = (Js.Any.undefined_of_option Js.Any.of_float) origin_z in
    Dom_matrix.of_any
      (Js.Ffi.meth_call this "scale"
         [| scale_x; scale_y; scale_z; origin_x; origin_y; origin_z |]
      )

  let scale_non_uniform ?scale_x ?scale_y this =
    let scale_x = (Js.Any.undefined_of_option Js.Any.of_float) scale_x in
    let scale_y = (Js.Any.undefined_of_option Js.Any.of_float) scale_y in
    Dom_matrix.of_any
      (Js.Ffi.meth_call this "scaleNonUniform" [| scale_x; scale_y |])

  let scale3d ?scale ?origin_x ?origin_y ?origin_z this =
    let scale = (Js.Any.undefined_of_option Js.Any.of_float) scale in
    let origin_x = (Js.Any.undefined_of_option Js.Any.of_float) origin_x in
    let origin_y = (Js.Any.undefined_of_option Js.Any.of_float) origin_y in
    let origin_z = (Js.Any.undefined_of_option Js.Any.of_float) origin_z in
    Dom_matrix.of_any
      (Js.Ffi.meth_call this "scale3d" [| scale; origin_x; origin_y; origin_z |])

  let rotate ?rot_x ?rot_y ?rot_z this =
    let rot_x = (Js.Any.undefined_of_option Js.Any.of_float) rot_x in
    let rot_y = (Js.Any.undefined_of_option Js.Any.of_float) rot_y in
    let rot_z = (Js.Any.undefined_of_option Js.Any.of_float) rot_z in
    Dom_matrix.of_any (Js.Ffi.meth_call this "rotate" [| rot_x; rot_y; rot_z |])

  let rotate_from_vector ?x ?y this =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    Dom_matrix.of_any (Js.Ffi.meth_call this "rotateFromVector" [| x; y |])

  let rotate_axis_angle ?x ?y ?z ?angle this =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let z = (Js.Any.undefined_of_option Js.Any.of_float) z in
    let angle = (Js.Any.undefined_of_option Js.Any.of_float) angle in
    Dom_matrix.of_any
      (Js.Ffi.meth_call this "rotateAxisAngle" [| x; y; z; angle |])

  let skew_x ?sx this =
    let sx = (Js.Any.undefined_of_option Js.Any.of_float) sx in
    Dom_matrix.of_any (Js.Ffi.meth_call this "skewX" [| sx |])

  let skew_y ?sy this =
    let sy = (Js.Any.undefined_of_option Js.Any.of_float) sy in
    Dom_matrix.of_any (Js.Ffi.meth_call this "skewY" [| sy |])

  let multiply ?other this =
    let other = (Js.Any.undefined_of_option Dom_matrix_init.to_any) other in
    Dom_matrix.of_any (Js.Ffi.meth_call this "multiply" [| other |])

  let flip_x this = Dom_matrix.of_any (Js.Ffi.meth_call this "flipX" [||])
  let flip_y this = Dom_matrix.of_any (Js.Ffi.meth_call this "flipY" [||])
  let inverse this = Dom_matrix.of_any (Js.Ffi.meth_call this "inverse" [||])

  let transform_point ?point this =
    let point = (Js.Any.undefined_of_option Dom_point_init.to_any) point in
    Dom_point.of_any (Js.Ffi.meth_call this "transformPoint" [| point |])

  let to_float32_array this =
    Float32_array.of_any (Js.Ffi.meth_call this "toFloat32Array" [||])

  let to_float64_array this =
    Float64_array.of_any (Js.Ffi.meth_call this "toFloat64Array" [||])

  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly} \
   [DOMMatrixReadOnly] on MDN}."]

and Supported_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val text_html : t
  val text_xml : t
  val application_xml : t
  val application_xhtml_xml : t
  val image_svg_xml : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let text_html = Js.of_string "text/html"
  let text_xml = Js.of_string "text/xml"
  let application_xml = Js.of_string "application/xml"
  let application_xhtml_xml = Js.of_string "application/xhtml+xml"
  let image_svg_xml = Js.of_string "image/svg+xml"
end

and Dom_parser : sig
  type t = [ `Dom_parser ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMParser} [DOMParser]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val parse_from_string :
    str:string -> type':Supported_type.t -> t -> 'a Document.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString} \
     [parseFromString] on MDN}."]
end = struct
  type t = [ `Dom_parser ] Js.t

  let t = Js.Ffi.constr "DOMParser"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let parse_from_string ~str ~type' this =
    let str = Js.Any.of_string str in
    let type' = Supported_type.to_any type' in
    Document.of_any (Js.Ffi.meth_call this "parseFromString" [| str; type' |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMParser} \
   [DOMParser] on MDN}."]

and Dom_point : sig
  type t = [ `Dom_point ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint} [DOMPoint]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Dom_point | `Dom_point_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint} [DOMPoint]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_x_and_y_and_z_and_w :
    ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> 'a super

  val from_point : ?other:Dom_point_init.t -> unit -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/fromPoint} \
     [fromPoint] on MDN}."]

  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
end = struct
  type t = [ `Dom_point ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Dom_point | `Dom_point_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint} [DOMPoint]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "DOMPoint"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_dom_point_read_only this = Js.Ffi.magic this

  let with_x_and_y_and_z_and_w ?x ?y ?z ?w () =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let z = (Js.Any.undefined_of_option Js.Any.of_float) z in
    let w = (Js.Any.undefined_of_option Js.Any.of_float) w in
    Js.Ffi.obj_new t [| x; y; z; w |]

  let from_point ?other () =
    let other = (Js.Any.undefined_of_option Dom_point_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromPoint" [| other |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint} \
   [DOMPoint] on MDN}."]

and Dom_point_init : sig
  type t [@@ocaml.doc "The type for the [DOMPointInit] dictionary."]

  val make : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> float option
  val y : t -> float option
  val z : t -> float option
  val w : t -> float option
end = struct
  type t = Js.any

  let make ?x ?y ?z ?w () =
    let x = (Js.Any.nullable_of_option Js.Any.of_float) x in
    let y = (Js.Any.nullable_of_option Js.Any.of_float) y in
    let z = (Js.Any.nullable_of_option Js.Any.of_float) z in
    let w = (Js.Any.nullable_of_option Js.Any.of_float) w in
    Js.Ffi.obj [| ("x", x); ("y", y); ("z", z); ("w", w) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let x this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "x")
  let y this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "y")
  let z this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "z")
  let w this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "w")
end

and Dom_point_read_only : sig
  type t = [ `Dom_point_read_only ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly} \
     [DOMPointReadOnly]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_x_and_y_and_z_and_w :
    ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t

  val from_point : ?other:Dom_point_init.t -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/fromPoint} \
     [fromPoint] on MDN}."]

  val x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x} [x] \
     on MDN}."]

  val y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y} [y] \
     on MDN}."]

  val z : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z} [z] \
     on MDN}."]

  val w : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w} [w] \
     on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Dom_point_read_only ] Js.t

  let t = Js.Ffi.constr "DOMPointReadOnly"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_x_and_y_and_z_and_w ?x ?y ?z ?w () =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let z = (Js.Any.undefined_of_option Js.Any.of_float) z in
    let w = (Js.Any.undefined_of_option Js.Any.of_float) w in
    Js.Ffi.obj_new t [| x; y; z; w |]

  let from_point ?other () =
    let other = (Js.Any.undefined_of_option Dom_point_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromPoint" [| other |])

  let x this = Js.Any.to_float (Js.Ffi.get this "x")
  let y this = Js.Any.to_float (Js.Ffi.get this "y")
  let z this = Js.Any.to_float (Js.Ffi.get this "z")
  let w this = Js.Any.to_float (Js.Ffi.get this "w")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly} \
   [DOMPointReadOnly] on MDN}."]

and Dom_quad : sig
  type t = [ `Dom_quad ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad} [DOMQuad]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_p1_and_p2_and_p3_and_p4 :
    ?p1:Dom_point_init.t ->
    ?p2:Dom_point_init.t ->
    ?p3:Dom_point_init.t ->
    ?p4:Dom_point_init.t ->
    unit ->
    t

  val from_rect : ?other:Dom_rect_init.t -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/fromRect} \
     [fromRect] on MDN}."]

  val from_quad : ?other:Dom_quad_init.t -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/fromQuad} \
     [fromQuad] on MDN}."]

  val p1 : t -> 'a Dom_point.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/p1} [p1] \
     on MDN}."]

  val p2 : t -> 'a Dom_point.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/p2} [p2] \
     on MDN}."]

  val p3 : t -> 'a Dom_point.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/p3} [p3] \
     on MDN}."]

  val p4 : t -> 'a Dom_point.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/p4} [p4] \
     on MDN}."]

  val get_bounds : t -> 'a Dom_rect.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/getBounds} \
     [getBounds] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Dom_quad ] Js.t

  let t = Js.Ffi.constr "DOMQuad"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_p1_and_p2_and_p3_and_p4 ?p1 ?p2 ?p3 ?p4 () =
    let p1 = (Js.Any.undefined_of_option Dom_point_init.to_any) p1 in
    let p2 = (Js.Any.undefined_of_option Dom_point_init.to_any) p2 in
    let p3 = (Js.Any.undefined_of_option Dom_point_init.to_any) p3 in
    let p4 = (Js.Any.undefined_of_option Dom_point_init.to_any) p4 in
    Js.Ffi.obj_new t [| p1; p2; p3; p4 |]

  let from_rect ?other () =
    let other = (Js.Any.undefined_of_option Dom_rect_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromRect" [| other |])

  let from_quad ?other () =
    let other = (Js.Any.undefined_of_option Dom_quad_init.to_any) other in
    of_any (Js.Ffi.meth_call t "fromQuad" [| other |])

  let p1 this = Dom_point.of_any (Js.Ffi.get this "p1")
  let p2 this = Dom_point.of_any (Js.Ffi.get this "p2")
  let p3 this = Dom_point.of_any (Js.Ffi.get this "p3")
  let p4 this = Dom_point.of_any (Js.Ffi.get this "p4")
  let get_bounds this = Dom_rect.of_any (Js.Ffi.meth_call this "getBounds" [||])
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad} [DOMQuad] \
   on MDN}."]

and Dom_quad_init : sig
  type t [@@ocaml.doc "The type for the [DOMQuadInit] dictionary."]

  val make :
    ?p1:Dom_point_init.t ->
    ?p2:Dom_point_init.t ->
    ?p3:Dom_point_init.t ->
    ?p4:Dom_point_init.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val p1 : t -> Dom_point_init.t option
  val p2 : t -> Dom_point_init.t option
  val p3 : t -> Dom_point_init.t option
  val p4 : t -> Dom_point_init.t option
end = struct
  type t = Js.any

  let make ?p1 ?p2 ?p3 ?p4 () =
    let p1 = (Js.Any.nullable_of_option Dom_point_init.to_any) p1 in
    let p2 = (Js.Any.nullable_of_option Dom_point_init.to_any) p2 in
    let p3 = (Js.Any.nullable_of_option Dom_point_init.to_any) p3 in
    let p4 = (Js.Any.nullable_of_option Dom_point_init.to_any) p4 in
    Js.Ffi.obj [| ("p1", p1); ("p2", p2); ("p3", p3); ("p4", p4) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let p1 this =
    (Js.Any.nullable_to_option Dom_point_init.of_any) (Js.Ffi.get this "p1")

  let p2 this =
    (Js.Any.nullable_to_option Dom_point_init.of_any) (Js.Ffi.get this "p2")

  let p3 this =
    (Js.Any.nullable_to_option Dom_point_init.of_any) (Js.Ffi.get this "p3")

  let p4 this =
    (Js.Any.nullable_to_option Dom_point_init.of_any) (Js.Ffi.get this "p4")
end

and Dom_rect : sig
  type t = [ `Dom_rect ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRect} [DOMRect]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Dom_rect | `Dom_rect_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRect} [DOMRect]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_x_and_y_and_width_and_height :
    ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> 'a super

  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
  val inherit_attribute : _
end = struct
  type t = [ `Dom_rect ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Dom_rect | `Dom_rect_read_only ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRect} [DOMRect]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "DOMRect"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_dom_rect_read_only this = Js.Ffi.magic this

  let with_x_and_y_and_width_and_height ?x ?y ?width ?height () =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let width = (Js.Any.undefined_of_option Js.Any.of_float) width in
    let height = (Js.Any.undefined_of_option Js.Any.of_float) height in
    Js.Ffi.obj_new t [| x; y; width; height |]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMRect} [DOMRect] \
   on MDN}."]

and Dom_rect_read_only : sig
  type t = [ `Dom_rect_read_only ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly} \
     [DOMRectReadOnly]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_x_and_y_and_width_and_height :
    ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t

  val x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/x} [x] \
     on MDN}."]

  val y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/y} [y] \
     on MDN}."]

  val width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/width} \
     [width] on MDN}."]

  val height : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/height} \
     [height] on MDN}."]

  val top : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/top} \
     [top] on MDN}."]

  val right : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/right} \
     [right] on MDN}."]

  val bottom : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/bottom} \
     [bottom] on MDN}."]

  val left : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/left} \
     [left] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Dom_rect_read_only ] Js.t

  let t = Js.Ffi.constr "DOMRectReadOnly"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_x_and_y_and_width_and_height ?x ?y ?width ?height () =
    let x = (Js.Any.undefined_of_option Js.Any.of_float) x in
    let y = (Js.Any.undefined_of_option Js.Any.of_float) y in
    let width = (Js.Any.undefined_of_option Js.Any.of_float) width in
    let height = (Js.Any.undefined_of_option Js.Any.of_float) height in
    Js.Ffi.obj_new t [| x; y; width; height |]

  let x this = Js.Any.to_float (Js.Ffi.get this "x")
  let y this = Js.Any.to_float (Js.Ffi.get this "y")
  let width this = Js.Any.to_float (Js.Ffi.get this "width")
  let height this = Js.Any.to_float (Js.Ffi.get this "height")
  let top this = Js.Any.to_float (Js.Ffi.get this "top")
  let right this = Js.Any.to_float (Js.Ffi.get this "right")
  let bottom this = Js.Any.to_float (Js.Ffi.get this "bottom")
  let left this = Js.Any.to_float (Js.Ffi.get this "left")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly} \
   [DOMRectReadOnly] on MDN}."]

and Dom_rect_init : sig
  type t [@@ocaml.doc "The type for the [DOMRectInit] dictionary."]

  val make : ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> float option
  val y : t -> float option
  val width : t -> float option
  val height : t -> float option
end = struct
  type t = Js.any

  let make ?x ?y ?width ?height () =
    let x = (Js.Any.nullable_of_option Js.Any.of_float) x in
    let y = (Js.Any.nullable_of_option Js.Any.of_float) y in
    let width = (Js.Any.nullable_of_option Js.Any.of_float) width in
    let height = (Js.Any.nullable_of_option Js.Any.of_float) height in
    Js.Ffi.obj [| ("x", x); ("y", y); ("width", width); ("height", height) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let x this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "x")
  let y this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "y")

  let width this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "width")

  let height this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "height")
end

and Dom_string_list : sig
  type t = [ `Dom_string_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList} \
     [DOMStringList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/length} \
     [length] on MDN}."]

  val item : index:int -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/item} \
     [item] on MDN}."]

  val contains : string:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/contains} \
     [contains] on MDN}."]
end = struct
  type t = [ `Dom_string_list ] Js.t

  let t = Js.Ffi.constr "DOMStringList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "item" [| index |])

  let contains ~string this =
    let string = Js.Any.of_string string in
    Js.Any.to_bool (Js.Ffi.meth_call this "contains" [| string |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList} \
   [DOMStringList] on MDN}."]

and Dom_string_map : sig
  type t = [ `Dom_string_map ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap} \
     [DOMStringMap]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get : name:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap/get} [get] \
     on MDN}."]

  val set : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap/set} [set] \
     on MDN}."]

  val delete : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap/delete} \
     [delete] on MDN}."]
end = struct
  type t = [ `Dom_string_map ] Js.t

  let t = Js.Ffi.constr "DOMStringMap"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get ~name this =
    let name = Js.Any.of_string name in
    Js.Any.to_string (Js.Ffi.meth_call this "get" [| name |])

  let set ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "set" [| name; value |])

  let delete ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "delete" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap} \
   [DOMStringMap] on MDN}."]

and Dom_token_list : sig
  type t = [ `Dom_token_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList} \
     [DOMTokenList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/length} \
     [length] on MDN}."]

  val item : index:int -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/item} \
     [item] on MDN}."]

  val contains : token:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains} \
     [contains] on MDN}."]

  val add : tokens:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add} [add] \
     on MDN}."]

  val remove : tokens:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove} \
     [remove] on MDN}."]

  val toggle : token:string -> ?force:bool -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle} \
     [toggle] on MDN}."]

  val replace : token:string -> new_token:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace} \
     [replace] on MDN}."]

  val supports : token:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports} \
     [supports] on MDN}."]

  val to_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/to_string} \
     [to_string] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value} \
     [value] on MDN}."]
end = struct
  type t = [ `Dom_token_list ] Js.t

  let t = Js.Ffi.constr "DOMTokenList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "item" [| index |])

  let contains ~token this =
    let token = Js.Any.of_string token in
    Js.Any.to_bool (Js.Ffi.meth_call this "contains" [| token |])

  let add ~tokens this =
    let tokens = (Js.Any.of_array Js.Any.of_string) tokens in
    Js.to_unit (Js.Ffi.meth_call this "add" [| tokens |])

  let remove ~tokens this =
    let tokens = (Js.Any.of_array Js.Any.of_string) tokens in
    Js.to_unit (Js.Ffi.meth_call this "remove" [| tokens |])

  let toggle ~token ?force this =
    let token = Js.Any.of_string token in
    let force = (Js.Any.undefined_of_option Js.Any.of_bool) force in
    Js.Any.to_bool (Js.Ffi.meth_call this "toggle" [| token; force |])

  let replace ~token ~new_token this =
    let token = Js.Any.of_string token in
    let new_token = Js.Any.of_string new_token in
    Js.Any.to_bool (Js.Ffi.meth_call this "replace" [| token; new_token |])

  let supports ~token this =
    let token = Js.Any.of_string token in
    Js.Any.to_bool (Js.Ffi.meth_call this "supports" [| token |])

  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let to_string = value
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList} \
   [DOMTokenList] on MDN}."]

and Dedicated_worker_global_scope : sig
  type t = [ `Dedicated_worker_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope} \
     [DedicatedWorkerGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Dedicated_worker_global_scope
      | `Worker_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope} \
     [DedicatedWorkerGlobalScope]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val post_message : message:Js.any -> transfer:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage} \
     [postMessage] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage} \
     [onmessage] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close} \
     [close] on MDN}."]
end = struct
  type t = [ `Dedicated_worker_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Dedicated_worker_global_scope
      | `Worker_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope} \
     [DedicatedWorkerGlobalScope]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "DedicatedWorkerGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_worker_global_scope this = Js.Ffi.magic this

  let post_message ~message ~transfer this =
    let message = Js.of_any message in
    let transfer = (Js.Any.of_array Js.object_todo) transfer in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; transfer |])

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)
  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope} \
   [DedicatedWorkerGlobalScope] on MDN}."]

and Dissimilar_origin_location : sig
  type t = [ `Dissimilar_origin_location ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation} \
     [DissimilarOriginLocation]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val href : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation/href} \
     [href] on MDN}."]

  val set_href : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation/href} \
     [href] on MDN}."]

  val assign : url:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation/assign} \
     [assign] on MDN}."]

  val replace : url:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation/replace} \
     [replace] on MDN}."]

  val reload : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation/reload} \
     [reload] on MDN}."]
end = struct
  type t = [ `Dissimilar_origin_location ] Js.t

  let t = Js.Ffi.constr "DissimilarOriginLocation"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let set_href this x = Js.Ffi.set this "href" (Js.Any.of_string x)

  let assign ~url this =
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call this "assign" [| url |])

  let replace ~url this =
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call this "replace" [| url |])

  let reload this = Js.to_unit (Js.Ffi.meth_call this "reload" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginLocation} \
   [DissimilarOriginLocation] on MDN}."]

and Dissimilar_origin_window : sig
  type t = [ `Dissimilar_origin_window ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow} \
     [DissimilarOriginWindow]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Dissimilar_origin_window | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow} \
     [DissimilarOriginWindow]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val window : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/window} \
     [window] on MDN}."]

  val self : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/self} \
     [self] on MDN}."]

  val parent : t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/parent} \
     [parent] on MDN}."]

  val top : t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/top} \
     [top] on MDN}."]

  val frames : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/frames} \
     [frames] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/length} \
     [length] on MDN}."]

  val location : t -> Dissimilar_origin_location.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/location} \
     [location] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/close} \
     [close] on MDN}."]

  val closed : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/closed} \
     [closed] on MDN}."]

  val post_message :
    message:Js.any ->
    target_origin:string ->
    ?transfer:'todo_object array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Window_post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/postMessage} \
     [postMessage] on MDN}."]

  val opener : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/opener} \
     [opener] on MDN}."]

  val set_opener : t -> Js.any -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/opener} \
     [opener] on MDN}."]

  val blur : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/blur} \
     [blur] on MDN}."]

  val focus : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow/focus} \
     [focus] on MDN}."]
end = struct
  type t = [ `Dissimilar_origin_window ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Dissimilar_origin_window | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow} \
     [DissimilarOriginWindow]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "DissimilarOriginWindow"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_global_scope this = Js.Ffi.magic this
  let window this = Window_proxy.of_any (Js.Ffi.get this "window")
  let self this = Window_proxy.of_any (Js.Ffi.get this "self")

  let parent this =
    (Js.Any.nullable_to_option Window_proxy.of_any) (Js.Ffi.get this "parent")

  let top this =
    (Js.Any.nullable_to_option Window_proxy.of_any) (Js.Ffi.get this "top")

  let frames this = Window_proxy.of_any (Js.Ffi.get this "frames")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let location this =
    Dissimilar_origin_location.of_any (Js.Ffi.get this "location")

  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
  let closed this = Js.Any.to_bool (Js.Ffi.get this "closed")

  let post_message ~message ~target_origin ?transfer this =
    let message = Js.of_any message in
    let target_origin = Js.Any.of_string target_origin in
    let transfer =
      (Js.Any.undefined_of_option (Js.Any.of_array Js.object_todo)) transfer
    in
    Js.to_unit
      (Js.Ffi.meth_call this "postMessage"
         [| message; target_origin; transfer |]
      )

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Window_post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let opener this = Js.to_any (Js.Ffi.get this "opener")
  let set_opener this x = Js.Ffi.set this "opener" (Js.of_any x)
  let blur this = Js.to_unit (Js.Ffi.meth_call this "blur" [||])
  let focus this = Js.to_unit (Js.Ffi.meth_call this "focus" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/DissimilarOriginWindow} \
   [DissimilarOriginWindow] on MDN}."]

and Document : sig
  type t = [ `Document ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document} [Document]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Document | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document} [Document]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val implementation : t -> Dom_implementation.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation} \
     [implementation] on MDN}."]

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/URL} \
     [URL] on MDN}."]

  val document_uri : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI} \
     [documentURI] on MDN}."]

  val compat_mode : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode} \
     [compatMode] on MDN}."]

  val character_set : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet} \
     [characterSet] on MDN}."]

  val charset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/charset} \
     [charset] on MDN}."]

  val input_encoding : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding} \
     [inputEncoding] on MDN}."]

  val content_type : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType} \
     [contentType] on MDN}."]

  val doctype : t -> 'a Document_type.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype} \
     [doctype] on MDN}."]

  val document_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement} \
     [documentElement] on MDN}."]

  val get_elements_by_tag_name : qualified_name:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName} \
     [getElementsByTagName] on MDN}."]

  val get_elements_by_tag_name_ns :
    namespace:string option -> qualified_name:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS} \
     [getElementsByTagNameNS] on MDN}."]

  val get_elements_by_class_name : class_names:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName} \
     [getElementsByClassName] on MDN}."]

  val create_element :
    local_name:string ->
    ?options:[< `String | `Element_creation_options ] Js.t ->
    t ->
    'a Element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement} \
     [createElement] on MDN}."]

  val create_element_ns :
    namespace:string option ->
    qualified_name:string ->
    ?options:[< `String | `Element_creation_options ] Js.t ->
    t ->
    'a Element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS} \
     [createElementNS] on MDN}."]

  val create_document_fragment : t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment} \
     [createDocumentFragment] on MDN}."]

  val create_text_node : data:string -> t -> 'a Text.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode} \
     [createTextNode] on MDN}."]

  val create_cdata_section : data:string -> t -> 'a Cdata_section.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection} \
     [createCDATASection] on MDN}."]

  val create_comment : data:string -> t -> 'a Comment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment} \
     [createComment] on MDN}."]

  val create_processing_instruction :
    target:string -> data:string -> t -> 'a Processing_instruction.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction} \
     [createProcessingInstruction] on MDN}."]

  val import_node : node:Node.t -> ?deep:bool -> t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode} \
     [importNode] on MDN}."]

  val adopt_node : node:Node.t -> t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode} \
     [adoptNode] on MDN}."]

  val create_attribute : local_name:string -> t -> 'a Attr.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute} \
     [createAttribute] on MDN}."]

  val create_attribute_ns :
    namespace:string option -> qualified_name:string -> t -> 'a Attr.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttributeNS} \
     [createAttributeNS] on MDN}."]

  val create_event : interface_:string -> t -> Event.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent} \
     [createEvent] on MDN}."]

  val create_range : t -> 'a Range.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange} \
     [createRange] on MDN}."]

  val create_node_iterator :
    root:Node.t ->
    ?what_to_show:int ->
    ?filter:Node_filter.t option ->
    t ->
    Node_iterator.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator} \
     [createNodeIterator] on MDN}."]

  val create_tree_walker :
    root:Node.t ->
    ?what_to_show:int ->
    ?filter:Node_filter.t option ->
    t ->
    Tree_walker.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker} \
     [createTreeWalker] on MDN}."]

  val servo_get_media_controls : id:string -> t -> 'a Shadow_root.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/servoGetMediaControls} \
     [servoGetMediaControls] on MDN}."]

  val get_selection : t -> Selection.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/getSelection} \
     [getSelection] on MDN}."]

  val fullscreen_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled} \
     [fullscreenEnabled] on MDN}."]

  val fullscreen_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement} \
     [fullscreenElement] on MDN}."]

  val fullscreen : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen} \
     [fullscreen] on MDN}."]

  val exit_fullscreen : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen} \
     [exitFullscreen] on MDN}."]

  val onfullscreenchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange} \
     [onfullscreenchange] on MDN}."]

  val set_onfullscreenchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange} \
     [onfullscreenchange] on MDN}."]

  val onfullscreenerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror} \
     [onfullscreenerror] on MDN}."]

  val set_onfullscreenerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror} \
     [onfullscreenerror] on MDN}."]

  val fg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor} \
     [fgColor] on MDN}."]

  val set_fg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor} \
     [fgColor] on MDN}."]

  val bg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor} \
     [bgColor] on MDN}."]

  val set_bg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor} \
     [bgColor] on MDN}."]

  val anchors : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors} \
     [anchors] on MDN}."]

  val applets : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/applets} \
     [applets] on MDN}."]

  val clear : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/clear} \
     [clear] on MDN}."]

  val capture_events : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/captureEvents} \
     [captureEvents] on MDN}."]

  val release_events : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseEvents} \
     [releaseEvents] on MDN}."]

  val location : t -> Location.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/location} \
     [location] on MDN}."]

  val domain : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/domain} \
     [domain] on MDN}."]

  val set_domain : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/domain} \
     [domain] on MDN}."]

  val referrer : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer} \
     [referrer] on MDN}."]

  val cookie : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie} \
     [cookie] on MDN}."]

  val set_cookie : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie} \
     [cookie] on MDN}."]

  val last_modified : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified} \
     [lastModified] on MDN}."]

  val ready_state : t -> Document_ready_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState} \
     [readyState] on MDN}."]

  val get : name:string -> t -> Named_property_value.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/get} \
     [get] on MDN}."]

  val title : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/title} \
     [title] on MDN}."]

  val set_title : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/title} \
     [title] on MDN}."]

  val body : t -> 'a Html_element.super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/body} \
     [body] on MDN}."]

  val set_body : t -> Html_element.t option -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/body} \
     [body] on MDN}."]

  val head : t -> 'a Html_head_element.super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/head} \
     [head] on MDN}."]

  val images : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/images} \
     [images] on MDN}."]

  val embeds : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds} \
     [embeds] on MDN}."]

  val plugins : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins} \
     [plugins] on MDN}."]

  val links : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/links} \
     [links] on MDN}."]

  val forms : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/forms} \
     [forms] on MDN}."]

  val scripts : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts} \
     [scripts] on MDN}."]

  val get_elements_by_name : element_name:string -> t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName} \
     [getElementsByName] on MDN}."]

  val current_script : t -> 'a Html_script_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript} \
     [currentScript] on MDN}."]

  val open' : ?unused1:string -> ?unused2:string -> t -> 'a super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/open} \
     [open] on MDN}."]

  val open' :
    url:string -> name:string -> features:string -> t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/open} \
     [open] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/close} \
     [close] on MDN}."]

  val write : text:string array -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/write} \
     [write] on MDN}."]

  val writeln : text:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln} \
     [writeln] on MDN}."]

  val default_view : t -> 'a Window.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView} \
     [defaultView] on MDN}."]

  val has_focus : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus} \
     [hasFocus] on MDN}."]

  val query_command_supported : command_id:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported} \
     [queryCommandSupported] on MDN}."]

  val onreadystatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange} \
     [onreadystatechange] on MDN}."]

  val set_onreadystatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange} \
     [onreadystatechange] on MDN}."]

  val query_selector_all : selectors:string -> t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll} \
     [querySelectorAll] on MDN}."]

  val query_selector : selectors:string -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector} \
     [querySelector] on MDN}."]

  val replace_children : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/replaceChildren} \
     [replaceChildren] on MDN}."]

  val append : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/append} \
     [append] on MDN}."]

  val prepend : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend} \
     [prepend] on MDN}."]

  val child_element_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount} \
     [childElementCount] on MDN}."]

  val last_element_child : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild} \
     [lastElementChild] on MDN}."]

  val first_element_child : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild} \
     [firstElementChild] on MDN}."]

  val children : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/children} \
     [children] on MDN}."]

  val onwaiting : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting} \
     [onwaiting] on MDN}."]

  val set_onwaiting : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting} \
     [onwaiting] on MDN}."]

  val onvolumechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange} \
     [onvolumechange] on MDN}."]

  val set_onvolumechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange} \
     [onvolumechange] on MDN}."]

  val ontoggle : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle} \
     [ontoggle] on MDN}."]

  val set_ontoggle : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle} \
     [ontoggle] on MDN}."]

  val ontimeupdate : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate} \
     [ontimeupdate] on MDN}."]

  val set_ontimeupdate : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate} \
     [ontimeupdate] on MDN}."]

  val onsuspend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend} \
     [onsuspend] on MDN}."]

  val set_onsuspend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend} \
     [onsuspend] on MDN}."]

  val onsubmit : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit} \
     [onsubmit] on MDN}."]

  val set_onsubmit : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit} \
     [onsubmit] on MDN}."]

  val onstalled : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled} \
     [onstalled] on MDN}."]

  val set_onstalled : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled} \
     [onstalled] on MDN}."]

  val onshow : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow} \
     [onshow] on MDN}."]

  val set_onshow : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow} \
     [onshow] on MDN}."]

  val onselect : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect} \
     [onselect] on MDN}."]

  val set_onselect : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect} \
     [onselect] on MDN}."]

  val onseeking : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking} \
     [onseeking] on MDN}."]

  val set_onseeking : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking} \
     [onseeking] on MDN}."]

  val onseeked : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked} \
     [onseeked] on MDN}."]

  val set_onseeked : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked} \
     [onseeked] on MDN}."]

  val onscroll : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll} \
     [onscroll] on MDN}."]

  val set_onscroll : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll} \
     [onscroll] on MDN}."]

  val onresize : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize} \
     [onresize] on MDN}."]

  val set_onresize : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize} \
     [onresize] on MDN}."]

  val onreset : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset} \
     [onreset] on MDN}."]

  val set_onreset : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset} \
     [onreset] on MDN}."]

  val onratechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange} \
     [onratechange] on MDN}."]

  val set_onratechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange} \
     [onratechange] on MDN}."]

  val onprogress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress} \
     [onprogress] on MDN}."]

  val set_onprogress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress} \
     [onprogress] on MDN}."]

  val onplaying : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying} \
     [onplaying] on MDN}."]

  val set_onplaying : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying} \
     [onplaying] on MDN}."]

  val onplay : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay} \
     [onplay] on MDN}."]

  val set_onplay : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay} \
     [onplay] on MDN}."]

  val onpause : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause} \
     [onpause] on MDN}."]

  val set_onpause : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause} \
     [onpause] on MDN}."]

  val onwheel : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel} \
     [onwheel] on MDN}."]

  val set_onwheel : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel} \
     [onwheel] on MDN}."]

  val onmouseup : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup} \
     [onmouseup] on MDN}."]

  val set_onmouseup : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup} \
     [onmouseup] on MDN}."]

  val onmouseover : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover} \
     [onmouseover] on MDN}."]

  val set_onmouseover : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover} \
     [onmouseover] on MDN}."]

  val onmouseout : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout} \
     [onmouseout] on MDN}."]

  val set_onmouseout : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout} \
     [onmouseout] on MDN}."]

  val onmousemove : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove} \
     [onmousemove] on MDN}."]

  val set_onmousemove : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove} \
     [onmousemove] on MDN}."]

  val onmouseleave : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave} \
     [onmouseleave] on MDN}."]

  val set_onmouseleave : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave} \
     [onmouseleave] on MDN}."]

  val onmouseenter : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter} \
     [onmouseenter] on MDN}."]

  val set_onmouseenter : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter} \
     [onmouseenter] on MDN}."]

  val onmousedown : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown} \
     [onmousedown] on MDN}."]

  val set_onmousedown : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown} \
     [onmousedown] on MDN}."]

  val onloadstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart} \
     [onloadstart] on MDN}."]

  val set_onloadstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart} \
     [onloadstart] on MDN}."]

  val onloadedmetadata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata} \
     [onloadedmetadata] on MDN}."]

  val set_onloadedmetadata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata} \
     [onloadedmetadata] on MDN}."]

  val onloadeddata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata} \
     [onloadeddata] on MDN}."]

  val set_onloadeddata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata} \
     [onloadeddata] on MDN}."]

  val onload : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onload} \
     [onload] on MDN}."]

  val set_onload : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onload} \
     [onload] on MDN}."]

  val onkeyup : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup} \
     [onkeyup] on MDN}."]

  val set_onkeyup : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup} \
     [onkeyup] on MDN}."]

  val onkeypress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress} \
     [onkeypress] on MDN}."]

  val set_onkeypress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress} \
     [onkeypress] on MDN}."]

  val onkeydown : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown} \
     [onkeydown] on MDN}."]

  val set_onkeydown : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown} \
     [onkeydown] on MDN}."]

  val oninvalid : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid} \
     [oninvalid] on MDN}."]

  val set_oninvalid : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid} \
     [oninvalid] on MDN}."]

  val oninput : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput} \
     [oninput] on MDN}."]

  val set_oninput : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput} \
     [oninput] on MDN}."]

  val onformdata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onformdata} \
     [onformdata] on MDN}."]

  val set_onformdata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onformdata} \
     [onformdata] on MDN}."]

  val onfocus : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus} \
     [onfocus] on MDN}."]

  val set_onfocus : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus} \
     [onfocus] on MDN}."]

  val onerror : t -> On_error_event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> On_error_event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror} \
     [onerror] on MDN}."]

  val onended : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onended} \
     [onended] on MDN}."]

  val set_onended : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onended} \
     [onended] on MDN}."]

  val onemptied : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied} \
     [onemptied] on MDN}."]

  val set_onemptied : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied} \
     [onemptied] on MDN}."]

  val ondurationchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange} \
     [ondurationchange] on MDN}."]

  val set_ondurationchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange} \
     [ondurationchange] on MDN}."]

  val ondrop : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop} \
     [ondrop] on MDN}."]

  val set_ondrop : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop} \
     [ondrop] on MDN}."]

  val ondragstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart} \
     [ondragstart] on MDN}."]

  val set_ondragstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart} \
     [ondragstart] on MDN}."]

  val ondragover : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover} \
     [ondragover] on MDN}."]

  val set_ondragover : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover} \
     [ondragover] on MDN}."]

  val ondragleave : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave} \
     [ondragleave] on MDN}."]

  val set_ondragleave : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave} \
     [ondragleave] on MDN}."]

  val ondragexit : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit} \
     [ondragexit] on MDN}."]

  val set_ondragexit : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit} \
     [ondragexit] on MDN}."]

  val ondragenter : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter} \
     [ondragenter] on MDN}."]

  val set_ondragenter : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter} \
     [ondragenter] on MDN}."]

  val ondragend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend} \
     [ondragend] on MDN}."]

  val set_ondragend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend} \
     [ondragend] on MDN}."]

  val ondrag : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag} \
     [ondrag] on MDN}."]

  val set_ondrag : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag} \
     [ondrag] on MDN}."]

  val ondblclick : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick} \
     [ondblclick] on MDN}."]

  val set_ondblclick : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick} \
     [ondblclick] on MDN}."]

  val oncuechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncuechange} \
     [oncuechange] on MDN}."]

  val set_oncuechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncuechange} \
     [oncuechange] on MDN}."]

  val oncontextmenu : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu} \
     [oncontextmenu] on MDN}."]

  val set_oncontextmenu : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu} \
     [oncontextmenu] on MDN}."]

  val onclose : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose} \
     [onclose] on MDN}."]

  val set_onclose : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose} \
     [onclose] on MDN}."]

  val onclick : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick} \
     [onclick] on MDN}."]

  val set_onclick : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick} \
     [onclick] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange} \
     [onchange] on MDN}."]

  val oncanplaythrough : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough} \
     [oncanplaythrough] on MDN}."]

  val set_oncanplaythrough : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough} \
     [oncanplaythrough] on MDN}."]

  val oncanplay : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay} \
     [oncanplay] on MDN}."]

  val set_oncanplay : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay} \
     [oncanplay] on MDN}."]

  val oncancel : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncancel} \
     [oncancel] on MDN}."]

  val set_oncancel : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/oncancel} \
     [oncancel] on MDN}."]

  val onblur : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur} \
     [onblur] on MDN}."]

  val set_onblur : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur} \
     [onblur] on MDN}."]

  val onabort : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort} \
     [onabort] on MDN}."]

  val set_onabort : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort} \
     [onabort] on MDN}."]

  val style_sheets : t -> Style_sheet_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets} \
     [styleSheets] on MDN}."]

  val active_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement} \
     [activeElement] on MDN}."]

  val elements_from_point : x:float -> y:float -> t -> Element.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint} \
     [elementsFromPoint] on MDN}."]

  val element_from_point : x:float -> y:float -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint} \
     [elementFromPoint] on MDN}."]

  val onpaste : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste} \
     [onpaste] on MDN}."]

  val set_onpaste : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste} \
     [onpaste] on MDN}."]

  val oncut : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut} \
     [oncut] on MDN}."]

  val set_oncut : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut} \
     [oncut] on MDN}."]

  val oncopy : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy} \
     [oncopy] on MDN}."]

  val set_oncopy : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy} \
     [oncopy] on MDN}."]
end = struct
  type t = [ `Document ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Document | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Document} [Document]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Document"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let implementation this =
    Dom_implementation.of_any (Js.Ffi.get this "implementation")

  let url this = Js.Any.to_string (Js.Ffi.get this "URL")
  let document_uri this = Js.Any.to_string (Js.Ffi.get this "documentURI")
  let compat_mode this = Js.Any.to_string (Js.Ffi.get this "compatMode")
  let character_set this = Js.Any.to_string (Js.Ffi.get this "characterSet")
  let charset this = Js.Any.to_string (Js.Ffi.get this "charset")
  let input_encoding this = Js.Any.to_string (Js.Ffi.get this "inputEncoding")
  let content_type this = Js.Any.to_string (Js.Ffi.get this "contentType")

  let doctype this =
    (Js.Any.nullable_to_option Document_type.of_any) (Js.Ffi.get this "doctype")

  let document_element this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "documentElement")

  let get_elements_by_tag_name ~qualified_name this =
    let qualified_name = Js.Any.of_string qualified_name in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByTagName" [| qualified_name |])

  let get_elements_by_tag_name_ns ~namespace ~qualified_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let qualified_name = Js.Any.of_string qualified_name in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByTagNameNS"
         [| namespace; qualified_name |]
      )

  let get_elements_by_class_name ~class_names this =
    let class_names = Js.Any.of_string class_names in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByClassName" [| class_names |])

  let create_element ~local_name ?options this =
    let local_name = Js.Any.of_string local_name in
    let options = (Js.Any.undefined_of_option Js.to_any) options in
    Element.of_any
      (Js.Ffi.meth_call this "createElement" [| local_name; options |])

  let create_element_ns ~namespace ~qualified_name ?options this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let qualified_name = Js.Any.of_string qualified_name in
    let options = (Js.Any.undefined_of_option Js.to_any) options in
    Element.of_any
      (Js.Ffi.meth_call this "createElementNS"
         [| namespace; qualified_name; options |]
      )

  let create_document_fragment this =
    Document_fragment.of_any
      (Js.Ffi.meth_call this "createDocumentFragment" [||])

  let create_text_node ~data this =
    let data = Js.Any.of_string data in
    Text.of_any (Js.Ffi.meth_call this "createTextNode" [| data |])

  let create_cdata_section ~data this =
    let data = Js.Any.of_string data in
    Cdata_section.of_any (Js.Ffi.meth_call this "createCDATASection" [| data |])

  let create_comment ~data this =
    let data = Js.Any.of_string data in
    Comment.of_any (Js.Ffi.meth_call this "createComment" [| data |])

  let create_processing_instruction ~target ~data this =
    let target = Js.Any.of_string target in
    let data = Js.Any.of_string data in
    Processing_instruction.of_any
      (Js.Ffi.meth_call this "createProcessingInstruction" [| target; data |])

  let import_node ~node ?deep this =
    let node = Node.to_any node in
    let deep = (Js.Any.undefined_of_option Js.Any.of_bool) deep in
    Node.of_any (Js.Ffi.meth_call this "importNode" [| node; deep |])

  let adopt_node ~node this =
    let node = Node.to_any node in
    Node.of_any (Js.Ffi.meth_call this "adoptNode" [| node |])

  let create_attribute ~local_name this =
    let local_name = Js.Any.of_string local_name in
    Attr.of_any (Js.Ffi.meth_call this "createAttribute" [| local_name |])

  let create_attribute_ns ~namespace ~qualified_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let qualified_name = Js.Any.of_string qualified_name in
    Attr.of_any
      (Js.Ffi.meth_call this "createAttributeNS" [| namespace; qualified_name |])

  let create_event ~interface_ this =
    let interface_ = Js.Any.of_string interface_ in
    Event.of_any (Js.Ffi.meth_call this "createEvent" [| interface_ |])

  let create_range this = Range.of_any (Js.Ffi.meth_call this "createRange" [||])

  let create_node_iterator ~root ?what_to_show ?filter this =
    let root = Node.to_any root in
    let what_to_show =
      (Js.Any.undefined_of_option Js.Any.of_int) what_to_show
    in
    let filter =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Node_filter.to_any))
        filter
    in
    Node_iterator.of_any
      (Js.Ffi.meth_call this "createNodeIterator"
         [| root; what_to_show; filter |]
      )

  let create_tree_walker ~root ?what_to_show ?filter this =
    let root = Node.to_any root in
    let what_to_show =
      (Js.Any.undefined_of_option Js.Any.of_int) what_to_show
    in
    let filter =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Node_filter.to_any))
        filter
    in
    Tree_walker.of_any
      (Js.Ffi.meth_call this "createTreeWalker" [| root; what_to_show; filter |])

  let servo_get_media_controls ~id this =
    let id = Js.Any.of_string id in
    Shadow_root.of_any (Js.Ffi.meth_call this "servoGetMediaControls" [| id |])

  let get_selection this =
    (Js.Any.nullable_to_option Selection.of_any)
      (Js.Ffi.meth_call this "getSelection" [||])

  let fullscreen_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "fullscreenEnabled")

  let fullscreen_element this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "fullscreenElement")

  let fullscreen this = Js.Any.to_bool (Js.Ffi.get this "fullscreen")

  let exit_fullscreen this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "exitFullscreen" [||])

  let onfullscreenchange this =
    Event_handler.of_any (Js.Ffi.get this "onfullscreenchange")

  let set_onfullscreenchange this x =
    Js.Ffi.set this "onfullscreenchange" (Event_handler.to_any x)

  let onfullscreenerror this =
    Event_handler.of_any (Js.Ffi.get this "onfullscreenerror")

  let set_onfullscreenerror this x =
    Js.Ffi.set this "onfullscreenerror" (Event_handler.to_any x)

  let fg_color this = Js.Any.to_string (Js.Ffi.get this "fgColor")
  let set_fg_color this x = Js.Ffi.set this "fgColor" (Js.Any.of_string x)
  let bg_color this = Js.Any.to_string (Js.Ffi.get this "bgColor")
  let set_bg_color this x = Js.Ffi.set this "bgColor" (Js.Any.of_string x)
  let anchors this = Html_collection.of_any (Js.Ffi.get this "anchors")
  let applets this = Html_collection.of_any (Js.Ffi.get this "applets")
  let clear this = Js.to_unit (Js.Ffi.meth_call this "clear" [||])

  let capture_events this =
    Js.to_unit (Js.Ffi.meth_call this "captureEvents" [||])

  let release_events this =
    Js.to_unit (Js.Ffi.meth_call this "releaseEvents" [||])

  let location this =
    (Js.Any.nullable_to_option Location.of_any) (Js.Ffi.get this "location")

  let domain this = Js.Any.to_string (Js.Ffi.get this "domain")
  let set_domain this x = Js.Ffi.set this "domain" (Js.Any.of_string x)
  let referrer this = Js.Any.to_string (Js.Ffi.get this "referrer")
  let cookie this = Js.Any.to_string (Js.Ffi.get this "cookie")
  let set_cookie this x = Js.Ffi.set this "cookie" (Js.Any.of_string x)
  let last_modified this = Js.Any.to_string (Js.Ffi.get this "lastModified")

  let ready_state this =
    Document_ready_state.of_any (Js.Ffi.get this "readyState")

  let get ~name this =
    let name = Js.Any.of_string name in
    Named_property_value.of_any (Js.Ffi.meth_call this "get" [| name |])

  let title this = Js.Any.to_string (Js.Ffi.get this "title")
  let set_title this x = Js.Ffi.set this "title" (Js.Any.of_string x)

  let body this =
    (Js.Any.nullable_to_option Html_element.of_any) (Js.Ffi.get this "body")

  let set_body this x =
    Js.Ffi.set this "body" ((Js.Any.nullable_of_option Html_element.to_any) x)

  let head this =
    (Js.Any.nullable_to_option Html_head_element.of_any) (Js.Ffi.get this "head")

  let images this = Html_collection.of_any (Js.Ffi.get this "images")
  let embeds this = Html_collection.of_any (Js.Ffi.get this "embeds")
  let plugins this = Html_collection.of_any (Js.Ffi.get this "plugins")
  let links this = Html_collection.of_any (Js.Ffi.get this "links")
  let forms this = Html_collection.of_any (Js.Ffi.get this "forms")
  let scripts this = Html_collection.of_any (Js.Ffi.get this "scripts")

  let get_elements_by_name ~element_name this =
    let element_name = Js.Any.of_string element_name in
    Node_list.of_any
      (Js.Ffi.meth_call this "getElementsByName" [| element_name |])

  let current_script this =
    (Js.Any.nullable_to_option Html_script_element.of_any)
      (Js.Ffi.get this "currentScript")

  let open' ?unused1 ?unused2 this =
    let unused1 = (Js.Any.undefined_of_option Js.Any.of_string) unused1 in
    let unused2 = (Js.Any.undefined_of_option Js.Any.of_string) unused2 in
    of_any (Js.Ffi.meth_call this "open" [| unused1; unused2 |])

  let open' ~url ~name ~features this =
    let url = Js.Any.of_string url in
    let name = Js.Any.of_string name in
    let features = Js.Any.of_string features in
    (Js.Any.nullable_to_option Window_proxy.of_any)
      (Js.Ffi.meth_call this "open" [| url; name; features |])

  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])

  let write ~text this =
    let text = (Js.Any.of_array Js.Any.of_string) text in
    Js.to_unit (Js.Ffi.meth_call this "write" [| text |])

  let writeln ~text this =
    let text = (Js.Any.of_array Js.Any.of_string) text in
    Js.to_unit (Js.Ffi.meth_call this "writeln" [| text |])

  let default_view this =
    (Js.Any.nullable_to_option Window.of_any) (Js.Ffi.get this "defaultView")

  let has_focus this = Js.Any.to_bool (Js.Ffi.meth_call this "hasFocus" [||])

  let query_command_supported ~command_id this =
    let command_id = Js.Any.of_string command_id in
    Js.Any.to_bool
      (Js.Ffi.meth_call this "queryCommandSupported" [| command_id |])

  let onreadystatechange this =
    Event_handler.of_any (Js.Ffi.get this "onreadystatechange")

  let set_onreadystatechange this x =
    Js.Ffi.set this "onreadystatechange" (Event_handler.to_any x)

  let query_selector_all ~selectors this =
    let selectors = Js.Any.of_string selectors in
    Node_list.of_any (Js.Ffi.meth_call this "querySelectorAll" [| selectors |])

  let query_selector ~selectors this =
    let selectors = Js.Any.of_string selectors in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "querySelector" [| selectors |])

  let replace_children ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "replaceChildren" [| nodes |])

  let append ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "append" [| nodes |])

  let prepend ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "prepend" [| nodes |])

  let child_element_count this =
    Js.Any.to_int (Js.Ffi.get this "childElementCount")

  let last_element_child this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "lastElementChild")

  let first_element_child this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "firstElementChild")

  let children this = Html_collection.of_any (Js.Ffi.get this "children")
  let onwaiting this = Event_handler.of_any (Js.Ffi.get this "onwaiting")
  let set_onwaiting this x = Js.Ffi.set this "onwaiting" (Event_handler.to_any x)

  let onvolumechange this =
    Event_handler.of_any (Js.Ffi.get this "onvolumechange")

  let set_onvolumechange this x =
    Js.Ffi.set this "onvolumechange" (Event_handler.to_any x)

  let ontoggle this = Event_handler.of_any (Js.Ffi.get this "ontoggle")
  let set_ontoggle this x = Js.Ffi.set this "ontoggle" (Event_handler.to_any x)
  let ontimeupdate this = Event_handler.of_any (Js.Ffi.get this "ontimeupdate")

  let set_ontimeupdate this x =
    Js.Ffi.set this "ontimeupdate" (Event_handler.to_any x)

  let onsuspend this = Event_handler.of_any (Js.Ffi.get this "onsuspend")
  let set_onsuspend this x = Js.Ffi.set this "onsuspend" (Event_handler.to_any x)
  let onsubmit this = Event_handler.of_any (Js.Ffi.get this "onsubmit")
  let set_onsubmit this x = Js.Ffi.set this "onsubmit" (Event_handler.to_any x)
  let onstalled this = Event_handler.of_any (Js.Ffi.get this "onstalled")
  let set_onstalled this x = Js.Ffi.set this "onstalled" (Event_handler.to_any x)
  let onshow this = Event_handler.of_any (Js.Ffi.get this "onshow")
  let set_onshow this x = Js.Ffi.set this "onshow" (Event_handler.to_any x)
  let onselect this = Event_handler.of_any (Js.Ffi.get this "onselect")
  let set_onselect this x = Js.Ffi.set this "onselect" (Event_handler.to_any x)
  let onseeking this = Event_handler.of_any (Js.Ffi.get this "onseeking")
  let set_onseeking this x = Js.Ffi.set this "onseeking" (Event_handler.to_any x)
  let onseeked this = Event_handler.of_any (Js.Ffi.get this "onseeked")
  let set_onseeked this x = Js.Ffi.set this "onseeked" (Event_handler.to_any x)
  let onscroll this = Event_handler.of_any (Js.Ffi.get this "onscroll")
  let set_onscroll this x = Js.Ffi.set this "onscroll" (Event_handler.to_any x)
  let onresize this = Event_handler.of_any (Js.Ffi.get this "onresize")
  let set_onresize this x = Js.Ffi.set this "onresize" (Event_handler.to_any x)
  let onreset this = Event_handler.of_any (Js.Ffi.get this "onreset")
  let set_onreset this x = Js.Ffi.set this "onreset" (Event_handler.to_any x)
  let onratechange this = Event_handler.of_any (Js.Ffi.get this "onratechange")

  let set_onratechange this x =
    Js.Ffi.set this "onratechange" (Event_handler.to_any x)

  let onprogress this = Event_handler.of_any (Js.Ffi.get this "onprogress")

  let set_onprogress this x =
    Js.Ffi.set this "onprogress" (Event_handler.to_any x)

  let onplaying this = Event_handler.of_any (Js.Ffi.get this "onplaying")
  let set_onplaying this x = Js.Ffi.set this "onplaying" (Event_handler.to_any x)
  let onplay this = Event_handler.of_any (Js.Ffi.get this "onplay")
  let set_onplay this x = Js.Ffi.set this "onplay" (Event_handler.to_any x)
  let onpause this = Event_handler.of_any (Js.Ffi.get this "onpause")
  let set_onpause this x = Js.Ffi.set this "onpause" (Event_handler.to_any x)
  let onwheel this = Event_handler.of_any (Js.Ffi.get this "onwheel")
  let set_onwheel this x = Js.Ffi.set this "onwheel" (Event_handler.to_any x)
  let onmouseup this = Event_handler.of_any (Js.Ffi.get this "onmouseup")
  let set_onmouseup this x = Js.Ffi.set this "onmouseup" (Event_handler.to_any x)
  let onmouseover this = Event_handler.of_any (Js.Ffi.get this "onmouseover")

  let set_onmouseover this x =
    Js.Ffi.set this "onmouseover" (Event_handler.to_any x)

  let onmouseout this = Event_handler.of_any (Js.Ffi.get this "onmouseout")

  let set_onmouseout this x =
    Js.Ffi.set this "onmouseout" (Event_handler.to_any x)

  let onmousemove this = Event_handler.of_any (Js.Ffi.get this "onmousemove")

  let set_onmousemove this x =
    Js.Ffi.set this "onmousemove" (Event_handler.to_any x)

  let onmouseleave this = Event_handler.of_any (Js.Ffi.get this "onmouseleave")

  let set_onmouseleave this x =
    Js.Ffi.set this "onmouseleave" (Event_handler.to_any x)

  let onmouseenter this = Event_handler.of_any (Js.Ffi.get this "onmouseenter")

  let set_onmouseenter this x =
    Js.Ffi.set this "onmouseenter" (Event_handler.to_any x)

  let onmousedown this = Event_handler.of_any (Js.Ffi.get this "onmousedown")

  let set_onmousedown this x =
    Js.Ffi.set this "onmousedown" (Event_handler.to_any x)

  let onloadstart this = Event_handler.of_any (Js.Ffi.get this "onloadstart")

  let set_onloadstart this x =
    Js.Ffi.set this "onloadstart" (Event_handler.to_any x)

  let onloadedmetadata this =
    Event_handler.of_any (Js.Ffi.get this "onloadedmetadata")

  let set_onloadedmetadata this x =
    Js.Ffi.set this "onloadedmetadata" (Event_handler.to_any x)

  let onloadeddata this = Event_handler.of_any (Js.Ffi.get this "onloadeddata")

  let set_onloadeddata this x =
    Js.Ffi.set this "onloadeddata" (Event_handler.to_any x)

  let onload this = Event_handler.of_any (Js.Ffi.get this "onload")
  let set_onload this x = Js.Ffi.set this "onload" (Event_handler.to_any x)
  let onkeyup this = Event_handler.of_any (Js.Ffi.get this "onkeyup")
  let set_onkeyup this x = Js.Ffi.set this "onkeyup" (Event_handler.to_any x)
  let onkeypress this = Event_handler.of_any (Js.Ffi.get this "onkeypress")

  let set_onkeypress this x =
    Js.Ffi.set this "onkeypress" (Event_handler.to_any x)

  let onkeydown this = Event_handler.of_any (Js.Ffi.get this "onkeydown")
  let set_onkeydown this x = Js.Ffi.set this "onkeydown" (Event_handler.to_any x)
  let oninvalid this = Event_handler.of_any (Js.Ffi.get this "oninvalid")
  let set_oninvalid this x = Js.Ffi.set this "oninvalid" (Event_handler.to_any x)
  let oninput this = Event_handler.of_any (Js.Ffi.get this "oninput")
  let set_oninput this x = Js.Ffi.set this "oninput" (Event_handler.to_any x)
  let onformdata this = Event_handler.of_any (Js.Ffi.get this "onformdata")

  let set_onformdata this x =
    Js.Ffi.set this "onformdata" (Event_handler.to_any x)

  let onfocus this = Event_handler.of_any (Js.Ffi.get this "onfocus")
  let set_onfocus this x = Js.Ffi.set this "onfocus" (Event_handler.to_any x)
  let onerror this = On_error_event_handler.of_any (Js.Ffi.get this "onerror")

  let set_onerror this x =
    Js.Ffi.set this "onerror" (On_error_event_handler.to_any x)

  let onended this = Event_handler.of_any (Js.Ffi.get this "onended")
  let set_onended this x = Js.Ffi.set this "onended" (Event_handler.to_any x)
  let onemptied this = Event_handler.of_any (Js.Ffi.get this "onemptied")
  let set_onemptied this x = Js.Ffi.set this "onemptied" (Event_handler.to_any x)

  let ondurationchange this =
    Event_handler.of_any (Js.Ffi.get this "ondurationchange")

  let set_ondurationchange this x =
    Js.Ffi.set this "ondurationchange" (Event_handler.to_any x)

  let ondrop this = Event_handler.of_any (Js.Ffi.get this "ondrop")
  let set_ondrop this x = Js.Ffi.set this "ondrop" (Event_handler.to_any x)
  let ondragstart this = Event_handler.of_any (Js.Ffi.get this "ondragstart")

  let set_ondragstart this x =
    Js.Ffi.set this "ondragstart" (Event_handler.to_any x)

  let ondragover this = Event_handler.of_any (Js.Ffi.get this "ondragover")

  let set_ondragover this x =
    Js.Ffi.set this "ondragover" (Event_handler.to_any x)

  let ondragleave this = Event_handler.of_any (Js.Ffi.get this "ondragleave")

  let set_ondragleave this x =
    Js.Ffi.set this "ondragleave" (Event_handler.to_any x)

  let ondragexit this = Event_handler.of_any (Js.Ffi.get this "ondragexit")

  let set_ondragexit this x =
    Js.Ffi.set this "ondragexit" (Event_handler.to_any x)

  let ondragenter this = Event_handler.of_any (Js.Ffi.get this "ondragenter")

  let set_ondragenter this x =
    Js.Ffi.set this "ondragenter" (Event_handler.to_any x)

  let ondragend this = Event_handler.of_any (Js.Ffi.get this "ondragend")
  let set_ondragend this x = Js.Ffi.set this "ondragend" (Event_handler.to_any x)
  let ondrag this = Event_handler.of_any (Js.Ffi.get this "ondrag")
  let set_ondrag this x = Js.Ffi.set this "ondrag" (Event_handler.to_any x)
  let ondblclick this = Event_handler.of_any (Js.Ffi.get this "ondblclick")

  let set_ondblclick this x =
    Js.Ffi.set this "ondblclick" (Event_handler.to_any x)

  let oncuechange this = Event_handler.of_any (Js.Ffi.get this "oncuechange")

  let set_oncuechange this x =
    Js.Ffi.set this "oncuechange" (Event_handler.to_any x)

  let oncontextmenu this = Event_handler.of_any (Js.Ffi.get this "oncontextmenu")

  let set_oncontextmenu this x =
    Js.Ffi.set this "oncontextmenu" (Event_handler.to_any x)

  let onclose this = Event_handler.of_any (Js.Ffi.get this "onclose")
  let set_onclose this x = Js.Ffi.set this "onclose" (Event_handler.to_any x)
  let onclick this = Event_handler.of_any (Js.Ffi.get this "onclick")
  let set_onclick this x = Js.Ffi.set this "onclick" (Event_handler.to_any x)
  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)

  let oncanplaythrough this =
    Event_handler.of_any (Js.Ffi.get this "oncanplaythrough")

  let set_oncanplaythrough this x =
    Js.Ffi.set this "oncanplaythrough" (Event_handler.to_any x)

  let oncanplay this = Event_handler.of_any (Js.Ffi.get this "oncanplay")
  let set_oncanplay this x = Js.Ffi.set this "oncanplay" (Event_handler.to_any x)
  let oncancel this = Event_handler.of_any (Js.Ffi.get this "oncancel")
  let set_oncancel this x = Js.Ffi.set this "oncancel" (Event_handler.to_any x)
  let onblur this = Event_handler.of_any (Js.Ffi.get this "onblur")
  let set_onblur this x = Js.Ffi.set this "onblur" (Event_handler.to_any x)
  let onabort this = Event_handler.of_any (Js.Ffi.get this "onabort")
  let set_onabort this x = Js.Ffi.set this "onabort" (Event_handler.to_any x)
  let style_sheets this = Style_sheet_list.of_any (Js.Ffi.get this "styleSheets")

  let active_element this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "activeElement")

  let elements_from_point ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    (Js.Any.to_array Element.of_any)
      (Js.Ffi.meth_call this "elementsFromPoint" [| x; y |])

  let element_from_point ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "elementFromPoint" [| x; y |])

  let onpaste this = Event_handler.of_any (Js.Ffi.get this "onpaste")
  let set_onpaste this x = Js.Ffi.set this "onpaste" (Event_handler.to_any x)
  let oncut this = Event_handler.of_any (Js.Ffi.get this "oncut")
  let set_oncut this x = Js.Ffi.set this "oncut" (Event_handler.to_any x)
  let oncopy this = Event_handler.of_any (Js.Ffi.get this "oncopy")
  let set_oncopy this x = Js.Ffi.set this "oncopy" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Document} \
   [Document] on MDN}."]

and Document_ready_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val loading : t
  val interactive : t
  val complete : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let loading = Js.of_string "loading"
  let interactive = Js.of_string "interactive"
  let complete = Js.of_string "complete"
end

and Element_creation_options : sig
  type t [@@ocaml.doc "The type for the [ElementCreationOptions] dictionary."]

  val make : ?is:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val is : t -> string option
end = struct
  type t = Js.any

  let make ?is () =
    let is = (Js.Any.nullable_of_option Js.Any.of_string) is in
    Js.Ffi.obj [| ("is", is) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let is this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "is")
end

and Named_property_value : sig
  type t

  val with_window_proxy : Window_proxy.t -> t
  val with_element : Element.t -> t
  val with_html_collection : Html_collection.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_window_proxy = Js.repr
  let with_element = Js.repr
  let with_html_collection = Js.repr
end

and Document_fragment : sig
  type t = [ `Document_fragment ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment} \
     [DocumentFragment]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Document_fragment | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment} \
     [DocumentFragment]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val query_selector_all : selectors:string -> t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll} \
     [querySelectorAll] on MDN}."]

  val query_selector : selectors:string -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector} \
     [querySelector] on MDN}."]

  val replace_children : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/replaceChildren} \
     [replaceChildren] on MDN}."]

  val append : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/append} \
     [append] on MDN}."]

  val prepend : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/prepend} \
     [prepend] on MDN}."]

  val child_element_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/childElementCount} \
     [childElementCount] on MDN}."]

  val last_element_child : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/lastElementChild} \
     [lastElementChild] on MDN}."]

  val first_element_child : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/firstElementChild} \
     [firstElementChild] on MDN}."]

  val children : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/children} \
     [children] on MDN}."]
end = struct
  type t = [ `Document_fragment ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Document_fragment | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment} \
     [DocumentFragment]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "DocumentFragment"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let query_selector_all ~selectors this =
    let selectors = Js.Any.of_string selectors in
    Node_list.of_any (Js.Ffi.meth_call this "querySelectorAll" [| selectors |])

  let query_selector ~selectors this =
    let selectors = Js.Any.of_string selectors in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "querySelector" [| selectors |])

  let replace_children ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "replaceChildren" [| nodes |])

  let append ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "append" [| nodes |])

  let prepend ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "prepend" [| nodes |])

  let child_element_count this =
    Js.Any.to_int (Js.Ffi.get this "childElementCount")

  let last_element_child this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "lastElementChild")

  let first_element_child this =
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.get this "firstElementChild")

  let children this = Html_collection.of_any (Js.Ffi.get this "children")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment} \
   [DocumentFragment] on MDN}."]

and Document_type : sig
  type t = [ `Document_type ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType} \
     [DocumentType]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Document_type | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType} \
     [DocumentType]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/name} \
     [name] on MDN}."]

  val public_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/publicId} \
     [publicId] on MDN}."]

  val system_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/systemId} \
     [systemId] on MDN}."]
end = struct
  type t = [ `Document_type ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Document_type | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DocumentType} \
     [DocumentType]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "DocumentType"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let public_id this = Js.Any.to_string (Js.Ffi.get this "publicId")
  let system_id this = Js.Any.to_string (Js.Ffi.get this "systemId")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/DocumentType} \
   [DocumentType] on MDN}."]

and Dynamic_module_owner : sig
  type t = [ `Dynamic_module_owner ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DynamicModuleOwner} \
     [DynamicModuleOwner]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val promise : t -> Js.any Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/DynamicModuleOwner/promise} \
     [promise] on MDN}."]
end = struct
  type t = [ `Dynamic_module_owner ] Js.t

  let t = Js.Ffi.constr "DynamicModuleOwner"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let promise this = (Promise.of_any Js.to_any) (Js.Ffi.get this "promise")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/DynamicModuleOwner} \
   [DynamicModuleOwner] on MDN}."]

and Ext_blend_minmax : sig
  type t = [ `Ext_blend_minmax ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EXTBlendMinmax} \
     [EXTBlendMinmax]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val min_ext : G_lenum.t
  val max_ext : G_lenum.t
end = struct
  type t = [ `Ext_blend_minmax ] Js.t

  let t = Js.Ffi.constr "EXTBlendMinmax"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let min_ext = 32775
  let max_ext = 32776
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/EXTBlendMinmax} \
   [EXTBlendMinmax] on MDN}."]

and Ext_color_buffer_half_float : sig
  type t = [ `Ext_color_buffer_half_float ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EXTColorBufferHalfFloat} \
     [EXTColorBufferHalfFloat]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val rgba16_f_ext : G_lenum.t
  val rgb16_f_ext : G_lenum.t
  val framebuffer_attachment_component_type_ext : G_lenum.t
  val unsigned_normalized_ext : G_lenum.t
end = struct
  type t = [ `Ext_color_buffer_half_float ] Js.t

  let t = Js.Ffi.constr "EXTColorBufferHalfFloat"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let rgba16_f_ext = 34842
  let rgb16_f_ext = 34843
  let framebuffer_attachment_component_type_ext = 33297
  let unsigned_normalized_ext = 35863
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/EXTColorBufferHalfFloat} \
   [EXTColorBufferHalfFloat] on MDN}."]

and Ext_frag_depth : sig
  type t = [ `Ext_frag_depth ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EXTFragDepth} \
     [EXTFragDepth]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Ext_frag_depth ] Js.t

  let t = Js.Ffi.constr "EXTFragDepth"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/EXTFragDepth} \
   [EXTFragDepth] on MDN}."]

and Ext_shader_texture_lod : sig
  type t = [ `Ext_shader_texture_lod ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EXTShaderTextureLod} \
     [EXTShaderTextureLod]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Ext_shader_texture_lod ] Js.t

  let t = Js.Ffi.constr "EXTShaderTextureLod"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/EXTShaderTextureLod} \
   [EXTShaderTextureLod] on MDN}."]

and Ext_texture_filter_anisotropic : sig
  type t = [ `Ext_texture_filter_anisotropic ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EXTTextureFilterAnisotropic} \
     [EXTTextureFilterAnisotropic]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val texture_max_anisotropy_ext : G_lenum.t
  val max_texture_max_anisotropy_ext : G_lenum.t
end = struct
  type t = [ `Ext_texture_filter_anisotropic ] Js.t

  let t = Js.Ffi.constr "EXTTextureFilterAnisotropic"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let texture_max_anisotropy_ext = 34046
  let max_texture_max_anisotropy_ext = 34047
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/EXTTextureFilterAnisotropic} \
   [EXTTextureFilterAnisotropic] on MDN}."]

and Element : sig
  type t = [ `Element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element} [Element]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element} [Element]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val namespace_uri : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI} \
     [namespaceURI] on MDN}."]

  val prefix : t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix} \
     [prefix] on MDN}."]

  val local_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/localName} \
     [localName] on MDN}."]

  val tag_name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName} \
     [tagName] on MDN}."]

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/id} [id] \
     on MDN}."]

  val set_id : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/id} [id] \
     on MDN}."]

  val class_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/className} \
     [className] on MDN}."]

  val set_class_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/className} \
     [className] on MDN}."]

  val class_list : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/classList} \
     [classList] on MDN}."]

  val has_attributes : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes} \
     [hasAttributes] on MDN}."]

  val attributes : t -> Named_node_map.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes} \
     [attributes] on MDN}."]

  val get_attribute_names : t -> string array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames} \
     [getAttributeNames] on MDN}."]

  val get_attribute : name:string -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute} \
     [getAttribute] on MDN}."]

  val get_attribute_ns :
    namespace:string option -> local_name:string -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS} \
     [getAttributeNS] on MDN}."]

  val toggle_attribute : name:string -> ?force:bool -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute} \
     [toggleAttribute] on MDN}."]

  val set_attribute : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute} \
     [setAttribute] on MDN}."]

  val set_attribute_ns :
    namespace:string option -> name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS} \
     [setAttributeNS] on MDN}."]

  val remove_attribute : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute} \
     [removeAttribute] on MDN}."]

  val remove_attribute_ns :
    namespace:string option -> local_name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS} \
     [removeAttributeNS] on MDN}."]

  val has_attribute : name:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute} \
     [hasAttribute] on MDN}."]

  val has_attribute_ns :
    namespace:string option -> local_name:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS} \
     [hasAttributeNS] on MDN}."]

  val get_attribute_node : name:string -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode} \
     [getAttributeNode] on MDN}."]

  val get_attribute_node_ns :
    namespace:string option -> local_name:string -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS} \
     [getAttributeNodeNS] on MDN}."]

  val set_attribute_node : attr:Attr.t -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode} \
     [setAttributeNode] on MDN}."]

  val set_attribute_node_ns : attr:Attr.t -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS} \
     [setAttributeNodeNS] on MDN}."]

  val remove_attribute_node : old_attr:Attr.t -> t -> 'a Attr.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode} \
     [removeAttributeNode] on MDN}."]

  val closest : selectors:string -> t -> 'a super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest} \
     [closest] on MDN}."]

  val matches : selectors:string -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches} \
     [matches] on MDN}."]

  val webkit_matches_selector : selectors:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector} \
     [webkitMatchesSelector] on MDN}."]

  val get_elements_by_tag_name : local_name:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName} \
     [getElementsByTagName] on MDN}."]

  val get_elements_by_tag_name_ns :
    namespace:string option -> local_name:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS} \
     [getElementsByTagNameNS] on MDN}."]

  val get_elements_by_class_name : class_names:string -> t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName} \
     [getElementsByClassName] on MDN}."]

  val insert_adjacent_element :
    where_:string -> element:t -> t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement} \
     [insertAdjacentElement] on MDN}."]

  val insert_adjacent_text : where_:string -> data:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText} \
     [insertAdjacentText] on MDN}."]

  val insert_adjacent_html : position:string -> html:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML} \
     [insertAdjacentHTML] on MDN}."]

  val attach_shadow : t -> 'a Shadow_root.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow} \
     [attachShadow] on MDN}."]

  val request_fullscreen : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen} \
     [requestFullscreen] on MDN}."]

  val inner_html : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML} \
     [innerHTML] on MDN}."]

  val set_inner_html : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML} \
     [innerHTML] on MDN}."]

  val outer_html : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML} \
     [outerHTML] on MDN}."]

  val set_outer_html : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML} \
     [outerHTML] on MDN}."]

  val get_client_rects : t -> Dom_rect.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects} \
     [getClientRects] on MDN}."]

  val get_bounding_client_rect : t -> 'a Dom_rect.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect} \
     [getBoundingClientRect] on MDN}."]

  val scroll : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll} \
     [scroll] on MDN}."]

  val scroll : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll} \
     [scroll] on MDN}."]

  val scroll_to : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo} \
     [scrollTo] on MDN}."]

  val scroll_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo} \
     [scrollTo] on MDN}."]

  val scroll_by : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy} \
     [scrollBy] on MDN}."]

  val scroll_by : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy} \
     [scrollBy] on MDN}."]

  val scroll_top : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop} \
     [scrollTop] on MDN}."]

  val set_scroll_top : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop} \
     [scrollTop] on MDN}."]

  val scroll_left : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft} \
     [scrollLeft] on MDN}."]

  val set_scroll_left : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft} \
     [scrollLeft] on MDN}."]

  val scroll_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth} \
     [scrollWidth] on MDN}."]

  val scroll_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight} \
     [scrollHeight] on MDN}."]

  val client_top : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop} \
     [clientTop] on MDN}."]

  val client_left : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft} \
     [clientLeft] on MDN}."]

  val client_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth} \
     [clientWidth] on MDN}."]

  val client_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight} \
     [clientHeight] on MDN}."]

  val query_selector_all : selectors:string -> t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll} \
     [querySelectorAll] on MDN}."]

  val query_selector : selectors:string -> t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector} \
     [querySelector] on MDN}."]

  val replace_children : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren} \
     [replaceChildren] on MDN}."]

  val append : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/append} \
     [append] on MDN}."]

  val prepend : nodes:[< `Node | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend} \
     [prepend] on MDN}."]

  val child_element_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount} \
     [childElementCount] on MDN}."]

  val last_element_child : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild} \
     [lastElementChild] on MDN}."]

  val first_element_child : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild} \
     [firstElementChild] on MDN}."]

  val children : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/children} \
     [children] on MDN}."]

  val next_element_sibling : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling} \
     [nextElementSibling] on MDN}."]

  val previous_element_sibling : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling} \
     [previousElementSibling] on MDN}."]

  val exit_formal_activation_state : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/exitFormalActivationState} \
     [exitFormalActivationState] on MDN}."]

  val enter_formal_activation_state : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element/enterFormalActivationState} \
     [enterFormalActivationState] on MDN}."]
end = struct
  type t = [ `Element ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Element} [Element]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Element"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node this = Js.Ffi.magic this

  let namespace_uri this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "namespaceURI")

  let prefix this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "prefix")

  let local_name this = Js.Any.to_string (Js.Ffi.get this "localName")
  let tag_name this = Js.Any.to_string (Js.Ffi.get this "tagName")
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let set_id this x = Js.Ffi.set this "id" (Js.Any.of_string x)
  let class_name this = Js.Any.to_string (Js.Ffi.get this "className")
  let set_class_name this x = Js.Ffi.set this "className" (Js.Any.of_string x)
  let class_list this = Dom_token_list.of_any (Js.Ffi.get this "classList")

  let has_attributes this =
    Js.Any.to_bool (Js.Ffi.meth_call this "hasAttributes" [||])

  let attributes this = Named_node_map.of_any (Js.Ffi.get this "attributes")

  let get_attribute_names this =
    (Js.Any.to_array Js.Any.to_string)
      (Js.Ffi.meth_call this "getAttributeNames" [||])

  let get_attribute ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "getAttribute" [| name |])

  let get_attribute_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "getAttributeNS" [| namespace; local_name |])

  let toggle_attribute ~name ?force this =
    let name = Js.Any.of_string name in
    let force = (Js.Any.undefined_of_option Js.Any.of_bool) force in
    Js.Any.to_bool (Js.Ffi.meth_call this "toggleAttribute" [| name; force |])

  let set_attribute ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "setAttribute" [| name; value |])

  let set_attribute_ns ~namespace ~name ~value this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit
      (Js.Ffi.meth_call this "setAttributeNS" [| namespace; name; value |])

  let remove_attribute ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "removeAttribute" [| name |])

  let remove_attribute_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    Js.to_unit
      (Js.Ffi.meth_call this "removeAttributeNS" [| namespace; local_name |])

  let has_attribute ~name this =
    let name = Js.Any.of_string name in
    Js.Any.to_bool (Js.Ffi.meth_call this "hasAttribute" [| name |])

  let has_attribute_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    Js.Any.to_bool
      (Js.Ffi.meth_call this "hasAttributeNS" [| namespace; local_name |])

  let get_attribute_node ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "getAttributeNode" [| name |])

  let get_attribute_node_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "getAttributeNodeNS" [| namespace; local_name |])

  let set_attribute_node ~attr this =
    let attr = Attr.to_any attr in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "setAttributeNode" [| attr |])

  let set_attribute_node_ns ~attr this =
    let attr = Attr.to_any attr in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "setAttributeNodeNS" [| attr |])

  let remove_attribute_node ~old_attr this =
    let old_attr = Attr.to_any old_attr in
    Attr.of_any (Js.Ffi.meth_call this "removeAttributeNode" [| old_attr |])

  let closest ~selectors this =
    let selectors = Js.Any.of_string selectors in
    (Js.Any.nullable_to_option of_any)
      (Js.Ffi.meth_call this "closest" [| selectors |])

  let matches ~selectors this =
    let selectors = Js.Any.of_string selectors in
    Js.Any.to_bool (Js.Ffi.meth_call this "matches" [| selectors |])

  let webkit_matches_selector ~selectors this =
    let selectors = Js.Any.of_string selectors in
    Js.Any.to_bool
      (Js.Ffi.meth_call this "webkitMatchesSelector" [| selectors |])

  let get_elements_by_tag_name ~local_name this =
    let local_name = Js.Any.of_string local_name in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByTagName" [| local_name |])

  let get_elements_by_tag_name_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByTagNameNS"
         [| namespace; local_name |]
      )

  let get_elements_by_class_name ~class_names this =
    let class_names = Js.Any.of_string class_names in
    Html_collection.of_any
      (Js.Ffi.meth_call this "getElementsByClassName" [| class_names |])

  let insert_adjacent_element ~where_ ~element this =
    let where_ = Js.Any.of_string where_ in
    let element = to_any element in
    (Js.Any.nullable_to_option of_any)
      (Js.Ffi.meth_call this "insertAdjacentElement" [| where_; element |])

  let insert_adjacent_text ~where_ ~data this =
    let where_ = Js.Any.of_string where_ in
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "insertAdjacentText" [| where_; data |])

  let insert_adjacent_html ~position ~html this =
    let position = Js.Any.of_string position in
    let html = Js.Any.of_string html in
    Js.to_unit (Js.Ffi.meth_call this "insertAdjacentHTML" [| position; html |])

  let attach_shadow this =
    Shadow_root.of_any (Js.Ffi.meth_call this "attachShadow" [||])

  let request_fullscreen this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "requestFullscreen" [||])

  let inner_html this = Js.Any.to_string (Js.Ffi.get this "innerHTML")
  let set_inner_html this x = Js.Ffi.set this "innerHTML" (Js.Any.of_string x)
  let outer_html this = Js.Any.to_string (Js.Ffi.get this "outerHTML")
  let set_outer_html this x = Js.Ffi.set this "outerHTML" (Js.Any.of_string x)

  let get_client_rects this =
    (Js.Any.to_array Dom_rect.of_any)
      (Js.Ffi.meth_call this "getClientRects" [||])

  let get_bounding_client_rect this =
    Dom_rect.of_any (Js.Ffi.meth_call this "getBoundingClientRect" [||])

  let scroll ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scroll" [| options |])

  let scroll ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scroll" [| x; y |])

  let scroll_to ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scrollTo" [| options |])

  let scroll_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scrollTo" [| x; y |])

  let scroll_by ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scrollBy" [| options |])

  let scroll_by ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scrollBy" [| x; y |])

  let scroll_top this = Js.Any.to_float (Js.Ffi.get this "scrollTop")
  let set_scroll_top this x = Js.Ffi.set this "scrollTop" (Js.Any.of_float x)
  let scroll_left this = Js.Any.to_float (Js.Ffi.get this "scrollLeft")
  let set_scroll_left this x = Js.Ffi.set this "scrollLeft" (Js.Any.of_float x)
  let scroll_width this = Js.Any.to_int (Js.Ffi.get this "scrollWidth")
  let scroll_height this = Js.Any.to_int (Js.Ffi.get this "scrollHeight")
  let client_top this = Js.Any.to_int (Js.Ffi.get this "clientTop")
  let client_left this = Js.Any.to_int (Js.Ffi.get this "clientLeft")
  let client_width this = Js.Any.to_int (Js.Ffi.get this "clientWidth")
  let client_height this = Js.Any.to_int (Js.Ffi.get this "clientHeight")

  let query_selector_all ~selectors this =
    let selectors = Js.Any.of_string selectors in
    Node_list.of_any (Js.Ffi.meth_call this "querySelectorAll" [| selectors |])

  let query_selector ~selectors this =
    let selectors = Js.Any.of_string selectors in
    (Js.Any.nullable_to_option of_any)
      (Js.Ffi.meth_call this "querySelector" [| selectors |])

  let replace_children ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "replaceChildren" [| nodes |])

  let append ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "append" [| nodes |])

  let prepend ~nodes this =
    let nodes = (Js.Any.of_array Js.to_any) nodes in
    Js.to_unit (Js.Ffi.meth_call this "prepend" [| nodes |])

  let child_element_count this =
    Js.Any.to_int (Js.Ffi.get this "childElementCount")

  let last_element_child this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "lastElementChild")

  let first_element_child this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "firstElementChild")

  let children this = Html_collection.of_any (Js.Ffi.get this "children")

  let next_element_sibling this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "nextElementSibling")

  let previous_element_sibling this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "previousElementSibling")

  let exit_formal_activation_state this =
    Js.to_unit (Js.Ffi.meth_call this "exitFormalActivationState" [||])

  let enter_formal_activation_state this =
    Js.to_unit (Js.Ffi.meth_call this "enterFormalActivationState" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Element} [Element] \
   on MDN}."]

and Element_internals : sig
  type t = [ `Element_internals ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals} \
     [ElementInternals]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_form_value :
    value:[< `File | `String | `Form_data ] Js.nullable ->
    ?state:[< `File | `String | `Form_data ] Js.nullable ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setFormValue} \
     [setFormValue] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/form} \
     [form] on MDN}."]

  val set_validity :
    ?flags:Validity_state_flags.t ->
    ?message:string ->
    ?anchor:Html_element.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setValidity} \
     [setValidity] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/reportValidity} \
     [reportValidity] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Element_internals ] Js.t

  let t = Js.Ffi.constr "ElementInternals"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_form_value ~value ?state this =
    let value = Js.to_any value in
    let state = (Js.Any.undefined_of_option Js.to_any) state in
    Js.to_unit (Js.Ffi.meth_call this "setFormValue" [| value; state |])

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let set_validity ?flags ?message ?anchor this =
    let flags =
      (Js.Any.undefined_of_option Validity_state_flags.to_any) flags
    in
    let message = (Js.Any.undefined_of_option Js.Any.of_string) message in
    let anchor = (Js.Any.undefined_of_option Html_element.to_any) anchor in
    Js.to_unit (Js.Ffi.meth_call this "setValidity" [| flags; message; anchor |])

  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals} \
   [ElementInternals] on MDN}."]

and Validity_state_flags : sig
  type t [@@ocaml.doc "The type for the [ValidityStateFlags] dictionary."]

  val make :
    ?value_missing:bool ->
    ?type_mismatch:bool ->
    ?pattern_mismatch:bool ->
    ?too_long:bool ->
    ?too_short:bool ->
    ?range_underflow:bool ->
    ?range_overflow:bool ->
    ?step_mismatch:bool ->
    ?bad_input:bool ->
    ?custom_error:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val value_missing : t -> bool option
  val type_mismatch : t -> bool option
  val pattern_mismatch : t -> bool option
  val too_long : t -> bool option
  val too_short : t -> bool option
  val range_underflow : t -> bool option
  val range_overflow : t -> bool option
  val step_mismatch : t -> bool option
  val bad_input : t -> bool option
  val custom_error : t -> bool option
end = struct
  type t = Js.any

  let make ?value_missing ?type_mismatch ?pattern_mismatch ?too_long ?too_short
      ?range_underflow ?range_overflow ?step_mismatch ?bad_input ?custom_error
      () =
    let value_missing =
      (Js.Any.nullable_of_option Js.Any.of_bool) value_missing
    in
    let type_mismatch =
      (Js.Any.nullable_of_option Js.Any.of_bool) type_mismatch
    in
    let pattern_mismatch =
      (Js.Any.nullable_of_option Js.Any.of_bool) pattern_mismatch
    in
    let too_long = (Js.Any.nullable_of_option Js.Any.of_bool) too_long in
    let too_short = (Js.Any.nullable_of_option Js.Any.of_bool) too_short in
    let range_underflow =
      (Js.Any.nullable_of_option Js.Any.of_bool) range_underflow
    in
    let range_overflow =
      (Js.Any.nullable_of_option Js.Any.of_bool) range_overflow
    in
    let step_mismatch =
      (Js.Any.nullable_of_option Js.Any.of_bool) step_mismatch
    in
    let bad_input = (Js.Any.nullable_of_option Js.Any.of_bool) bad_input in
    let custom_error =
      (Js.Any.nullable_of_option Js.Any.of_bool) custom_error
    in
    Js.Ffi.obj
      [|
        ("valueMissing", value_missing);
        ("typeMismatch", type_mismatch);
        ("patternMismatch", pattern_mismatch);
        ("tooLong", too_long);
        ("tooShort", too_short);
        ("rangeUnderflow", range_underflow);
        ("rangeOverflow", range_overflow);
        ("stepMismatch", step_mismatch);
        ("badInput", bad_input);
        ("customError", custom_error);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let value_missing this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "valueMissing")

  let type_mismatch this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "typeMismatch")

  let pattern_mismatch this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "patternMismatch")

  let too_long this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "tooLong")

  let too_short this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "tooShort")

  let range_underflow this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "rangeUnderflow")

  let range_overflow this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "rangeOverflow")

  let step_mismatch this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "stepMismatch")

  let bad_input this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "badInput")

  let custom_error this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "customError")
end

and Error_event : sig
  type t = [ `Error_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent} \
     [ErrorEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent} \
     [ErrorEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Error_event_init.t -> unit -> 'a super

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/message} \
     [message] on MDN}."]

  val filename : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/filename} \
     [filename] on MDN}."]

  val lineno : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/lineno} \
     [lineno] on MDN}."]

  val colno : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/colno} \
     [colno] on MDN}."]

  val error : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/error} \
     [error] on MDN}."]
end = struct
  type t = [ `Error_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent} \
     [ErrorEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ErrorEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Error_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let message this = Js.Any.to_string (Js.Ffi.get this "message")
  let filename this = Js.Any.to_string (Js.Ffi.get this "filename")
  let lineno this = Js.Any.to_int (Js.Ffi.get this "lineno")
  let colno this = Js.Any.to_int (Js.Ffi.get this "colno")
  let error this = Js.to_any (Js.Ffi.get this "error")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent} \
   [ErrorEvent] on MDN}."]

and Error_event_init : sig
  type t [@@ocaml.doc "The type for the [ErrorEventInit] dictionary."]

  val make :
    ?message:string ->
    ?filename:string ->
    ?lineno:int ->
    ?colno:int ->
    ?error:Js.any ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val message : t -> string option
  val filename : t -> string option
  val lineno : t -> int option
  val colno : t -> int option
  val error : t -> Js.any option
end = struct
  type t = Js.any

  let make ?message ?filename ?lineno ?colno ?error () =
    let message = (Js.Any.nullable_of_option Js.Any.of_string) message in
    let filename = (Js.Any.nullable_of_option Js.Any.of_string) filename in
    let lineno = (Js.Any.nullable_of_option Js.Any.of_int) lineno in
    let colno = (Js.Any.nullable_of_option Js.Any.of_int) colno in
    let error = (Js.Any.nullable_of_option Js.of_any) error in
    Js.Ffi.obj
      [|
        ("message", message);
        ("filename", filename);
        ("lineno", lineno);
        ("colno", colno);
        ("error", error);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let message this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "message")

  let filename this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "filename")

  let lineno this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "lineno")

  let colno this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "colno")

  let error this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "error")
end

and Event : sig
  type t = [ `Event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event} [Event]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Event_init.t -> unit -> t

  val type' : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/type} \
     [type] on MDN}."]

  val target : t -> Event_target.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/target} \
     [target] on MDN}."]

  val src_element : t -> Event_target.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement} \
     [srcElement] on MDN}."]

  val current_target : t -> Event_target.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget} \
     [currentTarget] on MDN}."]

  val composed_path : t -> Event_target.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath} \
     [composedPath] on MDN}."]

  val none : int
  val capturing_phase : int
  val at_target : int
  val bubbling_phase : int

  val event_phase : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase} \
     [eventPhase] on MDN}."]

  val stop_propagation : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation} \
     [stopPropagation] on MDN}."]

  val cancel_bubble : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble} \
     [cancelBubble] on MDN}."]

  val set_cancel_bubble : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble} \
     [cancelBubble] on MDN}."]

  val stop_immediate_propagation : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation} \
     [stopImmediatePropagation] on MDN}."]

  val bubbles : t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles} \
     [bubbles] on MDN}."]

  val cancelable : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable} \
     [cancelable] on MDN}."]

  val return_value : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue} \
     [returnValue] on MDN}."]

  val set_return_value : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue} \
     [returnValue] on MDN}."]

  val prevent_default : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault} \
     [preventDefault] on MDN}."]

  val default_prevented : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented} \
     [defaultPrevented] on MDN}."]

  val is_trusted : t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted} \
     [isTrusted] on MDN}."]

  val time_stamp : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp} \
     [timeStamp] on MDN}."]

  val init_event :
    type':string -> ?bubbles:bool -> ?cancelable:bool -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent} \
     [initEvent] on MDN}."]
end = struct
  type t = [ `Event ] Js.t

  let t = Js.Ffi.constr "Event"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let type' this = Js.Any.to_string (Js.Ffi.get this "type")

  let target this =
    (Js.Any.nullable_to_option Event_target.of_any) (Js.Ffi.get this "target")

  let src_element this =
    (Js.Any.nullable_to_option Event_target.of_any)
      (Js.Ffi.get this "srcElement")

  let current_target this =
    (Js.Any.nullable_to_option Event_target.of_any)
      (Js.Ffi.get this "currentTarget")

  let composed_path this =
    (Js.Any.to_array Event_target.of_any)
      (Js.Ffi.meth_call this "composedPath" [||])

  let none = 0
  let capturing_phase = 1
  let at_target = 2
  let bubbling_phase = 3
  let event_phase this = Js.Any.to_int (Js.Ffi.get this "eventPhase")

  let stop_propagation this =
    Js.to_unit (Js.Ffi.meth_call this "stopPropagation" [||])

  let cancel_bubble this = Js.Any.to_bool (Js.Ffi.get this "cancelBubble")

  let set_cancel_bubble this x =
    Js.Ffi.set this "cancelBubble" (Js.Any.of_bool x)

  let stop_immediate_propagation this =
    Js.to_unit (Js.Ffi.meth_call this "stopImmediatePropagation" [||])

  let bubbles this = Js.Any.to_bool (Js.Ffi.get this "bubbles")
  let cancelable this = Js.Any.to_bool (Js.Ffi.get this "cancelable")
  let return_value this = Js.Any.to_bool (Js.Ffi.get this "returnValue")
  let set_return_value this x = Js.Ffi.set this "returnValue" (Js.Any.of_bool x)

  let prevent_default this =
    Js.to_unit (Js.Ffi.meth_call this "preventDefault" [||])

  let default_prevented this =
    Js.Any.to_bool (Js.Ffi.get this "defaultPrevented")

  let is_trusted this = Js.Any.to_bool (Js.Ffi.get this "isTrusted")

  let time_stamp this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "timeStamp")

  let init_event ~type' ?bubbles ?cancelable this =
    let type' = Js.Any.of_string type' in
    let bubbles = (Js.Any.undefined_of_option Js.Any.of_bool) bubbles in
    let cancelable = (Js.Any.undefined_of_option Js.Any.of_bool) cancelable in
    Js.to_unit
      (Js.Ffi.meth_call this "initEvent" [| type'; bubbles; cancelable |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Event} [Event] on \
   MDN}."]

and Event_init : sig
  type t [@@ocaml.doc "The type for the [EventInit] dictionary."]

  val make : ?bubbles:bool -> ?cancelable:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val bubbles : t -> bool option
  val cancelable : t -> bool option
end = struct
  type t = Js.any

  let make ?bubbles ?cancelable () =
    let bubbles = (Js.Any.nullable_of_option Js.Any.of_bool) bubbles in
    let cancelable = (Js.Any.nullable_of_option Js.Any.of_bool) cancelable in
    Js.Ffi.obj [| ("bubbles", bubbles); ("cancelable", cancelable) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let bubbles this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "bubbles")

  let cancelable this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "cancelable")
end

and Event_handler_non_null : sig
  type t = Event.t -> Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Event_handler_non_null

and Event_handler : sig
  type nonrec t = Event_handler_non_null.t option

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Event_handler

and On_error_event_handler_non_null : sig
  type t = Event.t -> string -> int -> int -> Js.any -> Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  On_error_event_handler_non_null

and On_error_event_handler : sig
  type nonrec t = On_error_event_handler_non_null.t option

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  On_error_event_handler

and On_before_unload_event_handler_non_null : sig
  type t = Event.t -> string option

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  On_before_unload_event_handler_non_null

and On_before_unload_event_handler : sig
  type nonrec t = On_before_unload_event_handler_non_null.t option

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  On_before_unload_event_handler

and Event_listener : sig
  type t = Event.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Event.t -> unit

  let to_any this = Js.Any.of_fun 1 this

  let of_any any =
    let __f_js = Js.Ffi.unsafe_cast `Function any in
    fun event ->
      let event = Event.to_any event in
      Js.to_unit (Js.Ffi.fun_call __f_js [| event |])
end

and Event_modifier_init : sig
  type t [@@ocaml.doc "The type for the [EventModifierInit] dictionary."]

  val make :
    ?ctrl_key:bool ->
    ?shift_key:bool ->
    ?alt_key:bool ->
    ?meta_key:bool ->
    ?key_modifier_state_alt_graph:bool ->
    ?key_modifier_state_caps_lock:bool ->
    ?key_modifier_state_fn:bool ->
    ?key_modifier_state_fn_lock:bool ->
    ?key_modifier_state_hyper:bool ->
    ?key_modifier_state_num_lock:bool ->
    ?key_modifier_state_os:bool ->
    ?key_modifier_state_scroll_lock:bool ->
    ?key_modifier_state_super:bool ->
    ?key_modifier_state_symbol:bool ->
    ?key_modifier_state_symbol_lock:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_ui_event_init : t -> Ui_event_init.t
  val ctrl_key : t -> bool option
  val shift_key : t -> bool option
  val alt_key : t -> bool option
  val meta_key : t -> bool option
  val key_modifier_state_alt_graph : t -> bool option
  val key_modifier_state_caps_lock : t -> bool option
  val key_modifier_state_fn : t -> bool option
  val key_modifier_state_fn_lock : t -> bool option
  val key_modifier_state_hyper : t -> bool option
  val key_modifier_state_num_lock : t -> bool option
  val key_modifier_state_os : t -> bool option
  val key_modifier_state_scroll_lock : t -> bool option
  val key_modifier_state_super : t -> bool option
  val key_modifier_state_symbol : t -> bool option
  val key_modifier_state_symbol_lock : t -> bool option
end = struct
  type t = Js.any

  let make ?ctrl_key ?shift_key ?alt_key ?meta_key ?key_modifier_state_alt_graph
      ?key_modifier_state_caps_lock ?key_modifier_state_fn
      ?key_modifier_state_fn_lock ?key_modifier_state_hyper
      ?key_modifier_state_num_lock ?key_modifier_state_os
      ?key_modifier_state_scroll_lock ?key_modifier_state_super
      ?key_modifier_state_symbol ?key_modifier_state_symbol_lock () =
    let ctrl_key = (Js.Any.nullable_of_option Js.Any.of_bool) ctrl_key in
    let shift_key = (Js.Any.nullable_of_option Js.Any.of_bool) shift_key in
    let alt_key = (Js.Any.nullable_of_option Js.Any.of_bool) alt_key in
    let meta_key = (Js.Any.nullable_of_option Js.Any.of_bool) meta_key in
    let key_modifier_state_alt_graph =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_alt_graph
    in
    let key_modifier_state_caps_lock =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_caps_lock
    in
    let key_modifier_state_fn =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_fn
    in
    let key_modifier_state_fn_lock =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_fn_lock
    in
    let key_modifier_state_hyper =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_hyper
    in
    let key_modifier_state_num_lock =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_num_lock
    in
    let key_modifier_state_os =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_os
    in
    let key_modifier_state_scroll_lock =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_scroll_lock
    in
    let key_modifier_state_super =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_super
    in
    let key_modifier_state_symbol =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_symbol
    in
    let key_modifier_state_symbol_lock =
      (Js.Any.nullable_of_option Js.Any.of_bool) key_modifier_state_symbol_lock
    in
    Js.Ffi.obj
      [|
        ("ctrlKey", ctrl_key);
        ("shiftKey", shift_key);
        ("altKey", alt_key);
        ("metaKey", meta_key);
        ("keyModifierStateAltGraph", key_modifier_state_alt_graph);
        ("keyModifierStateCapsLock", key_modifier_state_caps_lock);
        ("keyModifierStateFn", key_modifier_state_fn);
        ("keyModifierStateFnLock", key_modifier_state_fn_lock);
        ("keyModifierStateHyper", key_modifier_state_hyper);
        ("keyModifierStateNumLock", key_modifier_state_num_lock);
        ("keyModifierStateOS", key_modifier_state_os);
        ("keyModifierStateScrollLock", key_modifier_state_scroll_lock);
        ("keyModifierStateSuper", key_modifier_state_super);
        ("keyModifierStateSymbol", key_modifier_state_symbol);
        ("keyModifierStateSymbolLock", key_modifier_state_symbol_lock);
      |]

  let to_ui_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let ctrl_key this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "ctrlKey")

  let shift_key this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "shiftKey")

  let alt_key this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "altKey")

  let meta_key this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "metaKey")

  let key_modifier_state_alt_graph this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateAltGraph")

  let key_modifier_state_caps_lock this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateCapsLock")

  let key_modifier_state_fn this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateFn")

  let key_modifier_state_fn_lock this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateFnLock")

  let key_modifier_state_hyper this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateHyper")

  let key_modifier_state_num_lock this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateNumLock")

  let key_modifier_state_os this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateOS")

  let key_modifier_state_scroll_lock this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateScrollLock")

  let key_modifier_state_super this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateSuper")

  let key_modifier_state_symbol this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateSymbol")

  let key_modifier_state_symbol_lock this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "keyModifierStateSymbolLock")
end

and Event_source : sig
  type t = [ `Event_source ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource} \
     [EventSource]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Event_source | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource} \
     [EventSource]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_url_and_event_source_init_dict :
    url:string ->
    ?event_source_init_dict:Event_source_init.t ->
    unit ->
    'a super

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url} \
     [url] on MDN}."]

  val with_credentials : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials} \
     [withCredentials] on MDN}."]

  val connecting : int
  val open' : int
  val closed : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState} \
     [readyState] on MDN}."]

  val onopen : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen} \
     [onopen] on MDN}."]

  val set_onopen : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen} \
     [onopen] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage} \
     [onmessage] on MDN}."]

  val onerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror} \
     [onerror] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close} \
     [close] on MDN}."]
end = struct
  type t = [ `Event_source ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Event_source | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventSource} \
     [EventSource]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "EventSource"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let with_url_and_event_source_init_dict ~url ?event_source_init_dict () =
    let url = Js.Any.of_string url in
    let event_source_init_dict =
      (Js.Any.undefined_of_option Event_source_init.to_any)
        event_source_init_dict
    in
    Js.Ffi.obj_new t [| url; event_source_init_dict |]

  let url this = Js.Any.to_string (Js.Ffi.get this "url")
  let with_credentials this = Js.Any.to_bool (Js.Ffi.get this "withCredentials")
  let connecting = 0
  let open' = 1
  let closed = 2
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")
  let onopen this = Event_handler.of_any (Js.Ffi.get this "onopen")
  let set_onopen this x = Js.Ffi.set this "onopen" (Event_handler.to_any x)
  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)
  let onerror this = Event_handler.of_any (Js.Ffi.get this "onerror")
  let set_onerror this x = Js.Ffi.set this "onerror" (Event_handler.to_any x)
  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/EventSource} \
   [EventSource] on MDN}."]

and Event_source_init : sig
  type t [@@ocaml.doc "The type for the [EventSourceInit] dictionary."]

  val make : ?with_credentials:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val with_credentials : t -> bool option
end = struct
  type t = Js.any

  let make ?with_credentials () =
    let with_credentials =
      (Js.Any.nullable_of_option Js.Any.of_bool) with_credentials
    in
    Js.Ffi.obj [| ("withCredentials", with_credentials) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_credentials this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "withCredentials")
end

and Event_target : sig
  type t = [ `Event_target ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventTarget} \
     [EventTarget]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val add_event_listener :
    type':string ->
    callback:Event_listener.t option ->
    ?options:[< `Add_event_listener_options | `Bool ] Js.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener} \
     [addEventListener] on MDN}."]

  val remove_event_listener :
    type':string ->
    callback:Event_listener.t option ->
    ?options:[< `Event_listener_options | `Bool ] Js.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener} \
     [removeEventListener] on MDN}."]

  val dispatch_event : event:Event.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent} \
     [dispatchEvent] on MDN}."]
end = struct
  type t = [ `Event_target ] Js.t

  let t = Js.Ffi.constr "EventTarget"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let add_event_listener ~type' ~callback ?options this =
    let type' = Js.Any.of_string type' in
    let callback = (Js.Any.nullable_of_option Event_listener.to_any) callback in
    let options = (Js.Any.undefined_of_option Js.to_any) options in
    Js.to_unit
      (Js.Ffi.meth_call this "addEventListener" [| type'; callback; options |])

  let remove_event_listener ~type' ~callback ?options this =
    let type' = Js.Any.of_string type' in
    let callback = (Js.Any.nullable_of_option Event_listener.to_any) callback in
    let options = (Js.Any.undefined_of_option Js.to_any) options in
    Js.to_unit
      (Js.Ffi.meth_call this "removeEventListener"
         [| type'; callback; options |]
      )

  let dispatch_event ~event this =
    let event = Event.to_any event in
    Js.Any.to_bool (Js.Ffi.meth_call this "dispatchEvent" [| event |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget} \
   [EventTarget] on MDN}."]

and Event_listener_options : sig
  type t [@@ocaml.doc "The type for the [EventListenerOptions] dictionary."]

  val make : ?capture:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val capture : t -> bool option
end = struct
  type t = Js.any

  let make ?capture () =
    let capture = (Js.Any.nullable_of_option Js.Any.of_bool) capture in
    Js.Ffi.obj [| ("capture", capture) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let capture this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "capture")
end

and Add_event_listener_options : sig
  type t [@@ocaml.doc "The type for the [AddEventListenerOptions] dictionary."]

  val make : ?once:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_listener_options : t -> Event_listener_options.t
  val once : t -> bool option
end = struct
  type t = Js.any

  let make ?once () =
    let once = (Js.Any.nullable_of_option Js.Any.of_bool) once in
    Js.Ffi.obj [| ("once", once) |]

  let to_event_listener_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let once this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "once")
end

and Extendable_event : sig
  type t = [ `Extendable_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent} \
     [ExtendableEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Extendable_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent} \
     [ExtendableEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Extendable_event_init.t -> unit -> 'a super

  val wait_until : f:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil} \
     [waitUntil] on MDN}."]
end = struct
  type t = [ `Extendable_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Extendable_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent} \
     [ExtendableEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ExtendableEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Extendable_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let wait_until ~f this =
    let f = Js.of_any f in
    Js.to_unit (Js.Ffi.meth_call this "waitUntil" [| f |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent} \
   [ExtendableEvent] on MDN}."]

and Extendable_event_init : sig
  type t [@@ocaml.doc "The type for the [ExtendableEventInit] dictionary."]

  val make : unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
end = struct
  type t = Js.any

  let make () = Js.Ffi.obj [||]
  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
end

and Extendable_message_event : sig
  type t = [ `Extendable_message_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent} \
     [ExtendableMessageEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Extendable_message_event | `Extendable_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent} \
     [ExtendableMessageEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Extendable_message_event_init.t ->
    unit ->
    'a super

  val data : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/data} \
     [data] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/origin} \
     [origin] on MDN}."]

  val last_event_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/lastEventId} \
     [lastEventId] on MDN}."]

  val ports : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/ports} \
     [ports] on MDN}."]
end = struct
  type t = [ `Extendable_message_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Extendable_message_event | `Extendable_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent} \
     [ExtendableMessageEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "ExtendableMessageEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_extendable_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Extendable_message_event_init.to_any)
        event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let data this = Js.to_any (Js.Ffi.get this "data")
  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let last_event_id this = Js.Any.to_string (Js.Ffi.get this "lastEventId")
  let ports this = Js.to_any (Js.Ffi.get this "ports")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent} \
   [ExtendableMessageEvent] on MDN}."]

and Extendable_message_event_init : sig
  type t
  [@@ocaml.doc "The type for the [ExtendableMessageEventInit] dictionary."]

  val make :
    ?data:Js.any ->
    ?origin:string ->
    ?last_event_id:string ->
    ?ports:Message_port.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_extendable_event_init : t -> Extendable_event_init.t
  val data : t -> Js.any option
  val origin : t -> string option
  val last_event_id : t -> string option
  val ports : t -> Message_port.t array option
end = struct
  type t = Js.any

  let make ?data ?origin ?last_event_id ?ports () =
    let data = (Js.Any.nullable_of_option Js.of_any) data in
    let origin = (Js.Any.nullable_of_option Js.Any.of_string) origin in
    let last_event_id =
      (Js.Any.nullable_of_option Js.Any.of_string) last_event_id
    in
    let ports =
      (Js.Any.nullable_of_option (Js.Any.of_array Message_port.to_any)) ports
    in
    Js.Ffi.obj
      [|
        ("data", data);
        ("origin", origin);
        ("lastEventId", last_event_id);
        ("ports", ports);
      |]

  let to_extendable_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let data this = (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "data")

  let origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "origin")

  let last_event_id this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "lastEventId")

  let ports this =
    (Js.Any.nullable_to_option (Js.Any.to_array Message_port.of_any))
      (Js.Ffi.get this "ports")
end

and Fake_xr_device : sig
  type t = [ `Fake_xr_device ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice} \
     [FakeXRDevice]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_views : views:Fake_xr_view_init.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/setViews} \
     [setViews] on MDN}."]

  val set_viewer_origin :
    origin:Fake_xr_rigid_transform_init.t ->
    ?emulated_position:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/setViewerOrigin} \
     [setViewerOrigin] on MDN}."]

  val clear_viewer_origin : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/clearViewerOrigin} \
     [clearViewerOrigin] on MDN}."]

  val set_floor_origin : origin:Fake_xr_rigid_transform_init.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/setFloorOrigin} \
     [setFloorOrigin] on MDN}."]

  val clear_floor_origin : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/clearFloorOrigin} \
     [clearFloorOrigin] on MDN}."]

  val simulate_visibility_change : state:Xr_visibility_state.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/simulateVisibilityChange} \
     [simulateVisibilityChange] on MDN}."]

  val simulate_input_source_connection :
    init:Fake_xr_input_source_init.t -> t -> Fake_xr_input_controller.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/simulateInputSourceConnection} \
     [simulateInputSourceConnection] on MDN}."]

  val disconnect : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/disconnect} \
     [disconnect] on MDN}."]

  val set_world : world:Fake_xr_world_init.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/setWorld} \
     [setWorld] on MDN}."]

  val clear_world : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice/clearWorld} \
     [clearWorld] on MDN}."]
end = struct
  type t = [ `Fake_xr_device ] Js.t

  let t = Js.Ffi.constr "FakeXRDevice"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_views ~views this =
    let views = (Js.Any.of_array Fake_xr_view_init.to_any) views in
    Js.to_unit (Js.Ffi.meth_call this "setViews" [| views |])

  let set_viewer_origin ~origin ?emulated_position this =
    let origin = Fake_xr_rigid_transform_init.to_any origin in
    let emulated_position =
      (Js.Any.undefined_of_option Js.Any.of_bool) emulated_position
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setViewerOrigin" [| origin; emulated_position |])

  let clear_viewer_origin this =
    Js.to_unit (Js.Ffi.meth_call this "clearViewerOrigin" [||])

  let set_floor_origin ~origin this =
    let origin = Fake_xr_rigid_transform_init.to_any origin in
    Js.to_unit (Js.Ffi.meth_call this "setFloorOrigin" [| origin |])

  let clear_floor_origin this =
    Js.to_unit (Js.Ffi.meth_call this "clearFloorOrigin" [||])

  let simulate_visibility_change ~state this =
    let state = Xr_visibility_state.to_any state in
    Js.to_unit (Js.Ffi.meth_call this "simulateVisibilityChange" [| state |])

  let simulate_input_source_connection ~init this =
    let init = Fake_xr_input_source_init.to_any init in
    Fake_xr_input_controller.of_any
      (Js.Ffi.meth_call this "simulateInputSourceConnection" [| init |])

  let disconnect this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "disconnect" [||])

  let set_world ~world this =
    let world = Fake_xr_world_init.to_any world in
    Js.to_unit (Js.Ffi.meth_call this "setWorld" [| world |])

  let clear_world this = Js.to_unit (Js.Ffi.meth_call this "clearWorld" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FakeXRDevice} \
   [FakeXRDevice] on MDN}."]

and Fake_xr_view_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRViewInit] dictionary."]

  val make :
    eye:Xr_eye.t ->
    projection_matrix:float array ->
    view_offset:Fake_xr_rigid_transform_init.t ->
    resolution:Fake_xr_device_resolution.t ->
    ?field_of_view:Fake_xr_field_of_view_init.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val eye : t -> Xr_eye.t
  val projection_matrix : t -> float array
  val view_offset : t -> Fake_xr_rigid_transform_init.t
  val resolution : t -> Fake_xr_device_resolution.t
  val field_of_view : t -> Fake_xr_field_of_view_init.t option
end = struct
  type t = Js.any

  let make ~eye ~projection_matrix ~view_offset ~resolution ?field_of_view () =
    let eye = Xr_eye.to_any eye in
    let projection_matrix =
      (Js.Any.of_array Js.Any.of_float) projection_matrix
    in
    let view_offset = Fake_xr_rigid_transform_init.to_any view_offset in
    let resolution = Fake_xr_device_resolution.to_any resolution in
    let field_of_view =
      (Js.Any.nullable_of_option Fake_xr_field_of_view_init.to_any)
        field_of_view
    in
    Js.Ffi.obj
      [|
        ("eye", eye);
        ("projectionMatrix", projection_matrix);
        ("viewOffset", view_offset);
        ("resolution", resolution);
        ("fieldOfView", field_of_view);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let eye this = Xr_eye.of_any (Js.Ffi.get this "eye")

  let projection_matrix this =
    (Js.Any.to_array Js.Any.to_float) (Js.Ffi.get this "projectionMatrix")

  let view_offset this =
    Fake_xr_rigid_transform_init.of_any (Js.Ffi.get this "viewOffset")

  let resolution this =
    Fake_xr_device_resolution.of_any (Js.Ffi.get this "resolution")

  let field_of_view this =
    (Js.Any.nullable_to_option Fake_xr_field_of_view_init.of_any)
      (Js.Ffi.get this "fieldOfView")
end

and Fake_xr_device_resolution : sig
  type t [@@ocaml.doc "The type for the [FakeXRDeviceResolution] dictionary."]

  val make : width:int -> height:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val width : t -> int
  val height : t -> int
end = struct
  type t = Js.any

  let make ~width ~height () =
    let width = Js.Any.of_int width in
    let height = Js.Any.of_int height in
    Js.Ffi.obj [| ("width", width); ("height", height) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
end

and Fake_xr_bounds_point : sig
  type t [@@ocaml.doc "The type for the [FakeXRBoundsPoint] dictionary."]

  val make : ?x:float -> ?z:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> float option
  val z : t -> float option
end = struct
  type t = Js.any

  let make ?x ?z () =
    let x = (Js.Any.nullable_of_option Js.Any.of_float) x in
    let z = (Js.Any.nullable_of_option Js.Any.of_float) z in
    Js.Ffi.obj [| ("x", x); ("z", z) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let x this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "x")
  let z this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "z")
end

and Fake_xr_rigid_transform_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRRigidTransformInit] dictionary."]

  val make : position:float array -> orientation:float array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val position : t -> float array
  val orientation : t -> float array
end = struct
  type t = Js.any

  let make ~position ~orientation () =
    let position = (Js.Any.of_array Js.Any.of_float) position in
    let orientation = (Js.Any.of_array Js.Any.of_float) orientation in
    Js.Ffi.obj [| ("position", position); ("orientation", orientation) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let position this =
    (Js.Any.to_array Js.Any.to_float) (Js.Ffi.get this "position")

  let orientation this =
    (Js.Any.to_array Js.Any.to_float) (Js.Ffi.get this "orientation")
end

and Fake_xr_field_of_view_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRFieldOfViewInit] dictionary."]

  val make :
    up_degrees:float ->
    down_degrees:float ->
    left_degrees:float ->
    right_degrees:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val up_degrees : t -> float
  val down_degrees : t -> float
  val left_degrees : t -> float
  val right_degrees : t -> float
end = struct
  type t = Js.any

  let make ~up_degrees ~down_degrees ~left_degrees ~right_degrees () =
    let up_degrees = Js.Any.of_float up_degrees in
    let down_degrees = Js.Any.of_float down_degrees in
    let left_degrees = Js.Any.of_float left_degrees in
    let right_degrees = Js.Any.of_float right_degrees in
    Js.Ffi.obj
      [|
        ("upDegrees", up_degrees);
        ("downDegrees", down_degrees);
        ("leftDegrees", left_degrees);
        ("rightDegrees", right_degrees);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let up_degrees this = Js.Any.to_float (Js.Ffi.get this "upDegrees")
  let down_degrees this = Js.Any.to_float (Js.Ffi.get this "downDegrees")
  let left_degrees this = Js.Any.to_float (Js.Ffi.get this "leftDegrees")
  let right_degrees this = Js.Any.to_float (Js.Ffi.get this "rightDegrees")
end

and Fake_xr_world_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRWorldInit] dictionary."]

  val make : hit_test_regions:Fake_xr_region_init.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val hit_test_regions : t -> Fake_xr_region_init.t array
end = struct
  type t = Js.any

  let make ~hit_test_regions () =
    let hit_test_regions =
      (Js.Any.of_array Fake_xr_region_init.to_any) hit_test_regions
    in
    Js.Ffi.obj [| ("hitTestRegions", hit_test_regions) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let hit_test_regions this =
    (Js.Any.to_array Fake_xr_region_init.of_any)
      (Js.Ffi.get this "hitTestRegions")
end

and Fake_xr_region_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRRegionInit] dictionary."]

  val make :
    faces:Fake_xr_triangle_init.t array ->
    type':Fake_xr_region_type.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val faces : t -> Fake_xr_triangle_init.t array
  val type' : t -> Fake_xr_region_type.t
end = struct
  type t = Js.any

  let make ~faces ~type' () =
    let faces = (Js.Any.of_array Fake_xr_triangle_init.to_any) faces in
    let type' = Fake_xr_region_type.to_any type' in
    Js.Ffi.obj [| ("faces", faces); ("type", type') |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let faces this =
    (Js.Any.to_array Fake_xr_triangle_init.of_any) (Js.Ffi.get this "faces")

  let type' this = Fake_xr_region_type.of_any (Js.Ffi.get this "type")
end

and Fake_xr_triangle_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRTriangleInit] dictionary."]

  val make : vertices:Dom_point_init.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertices : t -> Dom_point_init.t array
end = struct
  type t = Js.any

  let make ~vertices () =
    let vertices = (Js.Any.of_array Dom_point_init.to_any) vertices in
    Js.Ffi.obj [| ("vertices", vertices) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let vertices this =
    (Js.Any.to_array Dom_point_init.of_any) (Js.Ffi.get this "vertices")
end

and Fake_xr_region_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val point : t
  val plane : t
  val mesh : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let point = Js.of_string "point"
  let plane = Js.of_string "plane"
  let mesh = Js.of_string "mesh"
end

and Fake_xr_input_controller : sig
  type t = [ `Fake_xr_input_controller ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController} \
     [FakeXRInputController]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_handedness : handedness:Xr_handedness.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/setHandedness} \
     [setHandedness] on MDN}."]

  val set_target_ray_mode : target_ray_mode:Xr_target_ray_mode.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/setTargetRayMode} \
     [setTargetRayMode] on MDN}."]

  val set_profiles : profiles:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/setProfiles} \
     [setProfiles] on MDN}."]

  val set_grip_origin :
    grip_origin:Fake_xr_rigid_transform_init.t ->
    ?emulated_position:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/setGripOrigin} \
     [setGripOrigin] on MDN}."]

  val clear_grip_origin : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/clearGripOrigin} \
     [clearGripOrigin] on MDN}."]

  val set_pointer_origin :
    pointer_origin:Fake_xr_rigid_transform_init.t ->
    ?emulated_position:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/setPointerOrigin} \
     [setPointerOrigin] on MDN}."]

  val disconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/disconnect} \
     [disconnect] on MDN}."]

  val reconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/reconnect} \
     [reconnect] on MDN}."]

  val start_selection : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/startSelection} \
     [startSelection] on MDN}."]

  val end_selection : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/endSelection} \
     [endSelection] on MDN}."]

  val simulate_select : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController/simulateSelect} \
     [simulateSelect] on MDN}."]
end = struct
  type t = [ `Fake_xr_input_controller ] Js.t

  let t = Js.Ffi.constr "FakeXRInputController"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_handedness ~handedness this =
    let handedness = Xr_handedness.to_any handedness in
    Js.to_unit (Js.Ffi.meth_call this "setHandedness" [| handedness |])

  let set_target_ray_mode ~target_ray_mode this =
    let target_ray_mode = Xr_target_ray_mode.to_any target_ray_mode in
    Js.to_unit (Js.Ffi.meth_call this "setTargetRayMode" [| target_ray_mode |])

  let set_profiles ~profiles this =
    let profiles = (Js.Any.of_array Js.Any.of_string) profiles in
    Js.to_unit (Js.Ffi.meth_call this "setProfiles" [| profiles |])

  let set_grip_origin ~grip_origin ?emulated_position this =
    let grip_origin = Fake_xr_rigid_transform_init.to_any grip_origin in
    let emulated_position =
      (Js.Any.undefined_of_option Js.Any.of_bool) emulated_position
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setGripOrigin"
         [| grip_origin; emulated_position |]
      )

  let clear_grip_origin this =
    Js.to_unit (Js.Ffi.meth_call this "clearGripOrigin" [||])

  let set_pointer_origin ~pointer_origin ?emulated_position this =
    let pointer_origin = Fake_xr_rigid_transform_init.to_any pointer_origin in
    let emulated_position =
      (Js.Any.undefined_of_option Js.Any.of_bool) emulated_position
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setPointerOrigin"
         [| pointer_origin; emulated_position |]
      )

  let disconnect this = Js.to_unit (Js.Ffi.meth_call this "disconnect" [||])
  let reconnect this = Js.to_unit (Js.Ffi.meth_call this "reconnect" [||])

  let start_selection this =
    Js.to_unit (Js.Ffi.meth_call this "startSelection" [||])

  let end_selection this = Js.to_unit (Js.Ffi.meth_call this "endSelection" [||])

  let simulate_select this =
    Js.to_unit (Js.Ffi.meth_call this "simulateSelect" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/FakeXRInputController} \
   [FakeXRInputController] on MDN}."]

and Fake_xr_input_source_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRInputSourceInit] dictionary."]

  val make :
    handedness:Xr_handedness.t ->
    target_ray_mode:Xr_target_ray_mode.t ->
    pointer_origin:Fake_xr_rigid_transform_init.t ->
    profiles:string array ->
    ?selection_started:bool ->
    ?selection_clicked:bool ->
    ?supported_buttons:Fake_xr_button_state_init.t array ->
    ?grip_origin:Fake_xr_rigid_transform_init.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val handedness : t -> Xr_handedness.t
  val target_ray_mode : t -> Xr_target_ray_mode.t
  val pointer_origin : t -> Fake_xr_rigid_transform_init.t
  val profiles : t -> string array
  val selection_started : t -> bool option
  val selection_clicked : t -> bool option
  val supported_buttons : t -> Fake_xr_button_state_init.t array option
  val grip_origin : t -> Fake_xr_rigid_transform_init.t option
end = struct
  type t = Js.any

  let make ~handedness ~target_ray_mode ~pointer_origin ~profiles
      ?selection_started ?selection_clicked ?supported_buttons ?grip_origin () =
    let handedness = Xr_handedness.to_any handedness in
    let target_ray_mode = Xr_target_ray_mode.to_any target_ray_mode in
    let pointer_origin = Fake_xr_rigid_transform_init.to_any pointer_origin in
    let profiles = (Js.Any.of_array Js.Any.of_string) profiles in
    let selection_started =
      (Js.Any.nullable_of_option Js.Any.of_bool) selection_started
    in
    let selection_clicked =
      (Js.Any.nullable_of_option Js.Any.of_bool) selection_clicked
    in
    let supported_buttons =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Fake_xr_button_state_init.to_any)
      )
        supported_buttons
    in
    let grip_origin =
      (Js.Any.nullable_of_option Fake_xr_rigid_transform_init.to_any)
        grip_origin
    in
    Js.Ffi.obj
      [|
        ("handedness", handedness);
        ("targetRayMode", target_ray_mode);
        ("pointerOrigin", pointer_origin);
        ("profiles", profiles);
        ("selectionStarted", selection_started);
        ("selectionClicked", selection_clicked);
        ("supportedButtons", supported_buttons);
        ("gripOrigin", grip_origin);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let handedness this = Xr_handedness.of_any (Js.Ffi.get this "handedness")

  let target_ray_mode this =
    Xr_target_ray_mode.of_any (Js.Ffi.get this "targetRayMode")

  let pointer_origin this =
    Fake_xr_rigid_transform_init.of_any (Js.Ffi.get this "pointerOrigin")

  let profiles this =
    (Js.Any.to_array Js.Any.to_string) (Js.Ffi.get this "profiles")

  let selection_started this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "selectionStarted")

  let selection_clicked this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "selectionClicked")

  let supported_buttons this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Fake_xr_button_state_init.of_any)
    )
      (Js.Ffi.get this "supportedButtons")

  let grip_origin this =
    (Js.Any.nullable_to_option Fake_xr_rigid_transform_init.of_any)
      (Js.Ffi.get this "gripOrigin")
end

and Fake_xr_button_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val grip : t
  val touchpad : t
  val thumbstick : t
  val optional_button : t
  val optional_thumbstick : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let grip = Js.of_string "grip"
  let touchpad = Js.of_string "touchpad"
  let thumbstick = Js.of_string "thumbstick"
  let optional_button = Js.of_string "optional-button"
  let optional_thumbstick = Js.of_string "optional-thumbstick"
end

and Fake_xr_button_state_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRButtonStateInit] dictionary."]

  val make :
    button_type:Fake_xr_button_type.t ->
    pressed:bool ->
    touched:bool ->
    pressed_value:float ->
    ?x_value:float ->
    ?y_value:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val button_type : t -> Fake_xr_button_type.t
  val pressed : t -> bool
  val touched : t -> bool
  val pressed_value : t -> float
  val x_value : t -> float option
  val y_value : t -> float option
end = struct
  type t = Js.any

  let make ~button_type ~pressed ~touched ~pressed_value ?x_value ?y_value () =
    let button_type = Fake_xr_button_type.to_any button_type in
    let pressed = Js.Any.of_bool pressed in
    let touched = Js.Any.of_bool touched in
    let pressed_value = Js.Any.of_float pressed_value in
    let x_value = (Js.Any.nullable_of_option Js.Any.of_float) x_value in
    let y_value = (Js.Any.nullable_of_option Js.Any.of_float) y_value in
    Js.Ffi.obj
      [|
        ("buttonType", button_type);
        ("pressed", pressed);
        ("touched", touched);
        ("pressedValue", pressed_value);
        ("xValue", x_value);
        ("yValue", y_value);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let button_type this =
    Fake_xr_button_type.of_any (Js.Ffi.get this "buttonType")

  let pressed this = Js.Any.to_bool (Js.Ffi.get this "pressed")
  let touched this = Js.Any.to_bool (Js.Ffi.get this "touched")
  let pressed_value this = Js.Any.to_float (Js.Ffi.get this "pressedValue")

  let x_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "xValue")

  let y_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "yValue")
end

and File : sig
  type t = [ `File ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/File} [File]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `File | `Blob ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/File} [File]} interface \
     or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_file_bits_and_file_name_and_options :
    file_bits:Blob_part.t array ->
    file_name:string ->
    ?options:File_property_bag.t ->
    unit ->
    'a super

  val name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/File/name} \
     [name] on MDN}."]

  val last_modified : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/File/lastModified} \
     [lastModified] on MDN}."]
end = struct
  type t = [ `File ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `File | `Blob ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/File} [File]} interface \
     or any base interface that it inherits."]

  let t = Js.Ffi.constr "File"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_blob this = Js.Ffi.magic this

  let with_file_bits_and_file_name_and_options ~file_bits ~file_name ?options ()
      =
    let file_bits = (Js.Any.of_array Blob_part.to_any) file_bits in
    let file_name = Js.Any.of_string file_name in
    let options =
      (Js.Any.undefined_of_option File_property_bag.to_any) options
    in
    Js.Ffi.obj_new t [| file_bits; file_name; options |]

  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let last_modified this = Js.Any.to_int (Js.Ffi.get this "lastModified")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/File} [File] on \
   MDN}."]

and File_property_bag : sig
  type t [@@ocaml.doc "The type for the [FilePropertyBag] dictionary."]

  val make : ?last_modified:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_blob_property_bag : t -> Blob_property_bag.t
  val last_modified : t -> int option
end = struct
  type t = Js.any

  let make ?last_modified () =
    let last_modified =
      (Js.Any.nullable_of_option Js.Any.of_int) last_modified
    in
    Js.Ffi.obj [| ("lastModified", last_modified) |]

  let to_blob_property_bag this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let last_modified this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "lastModified")
end

and File_list : sig
  type t = [ `File_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileList} [FileList]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val item : index:int -> t -> 'a File.super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FileList/item} \
     [item] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FileList/length} \
     [length] on MDN}."]
end = struct
  type t = [ `File_list ] Js.t

  let t = Js.Ffi.constr "FileList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option File.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FileList} \
   [FileList] on MDN}."]

and File_reader_result : sig
  type t

  val with_string : string -> t
  val with_object : 'todo_object -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_object = Js.repr
end

and File_reader : sig
  type t = [ `File_reader ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader} \
     [FileReader]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `File_reader | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader} \
     [FileReader]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val read_as_array_buffer : blob:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer} \
     [readAsArrayBuffer] on MDN}."]

  val read_as_text : blob:Blob.t -> ?label:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText} \
     [readAsText] on MDN}."]

  val read_as_data_url : blob:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL} \
     [readAsDataURL] on MDN}."]

  val abort : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort} \
     [abort] on MDN}."]

  val empty : int
  val loading : int
  val done' : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState} \
     [readyState] on MDN}."]

  val result : t -> File_reader_result.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/result} \
     [result] on MDN}."]

  val error : t -> Dom_exception.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error} \
     [error] on MDN}."]

  val onloadstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onloadstart} \
     [onloadstart] on MDN}."]

  val set_onloadstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onloadstart} \
     [onloadstart] on MDN}."]

  val onprogress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onprogress} \
     [onprogress] on MDN}."]

  val set_onprogress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onprogress} \
     [onprogress] on MDN}."]

  val onload : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onload} \
     [onload] on MDN}."]

  val set_onload : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onload} \
     [onload] on MDN}."]

  val onabort : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onabort} \
     [onabort] on MDN}."]

  val set_onabort : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onabort} \
     [onabort] on MDN}."]

  val onerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onerror} \
     [onerror] on MDN}."]

  val onloadend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onloadend} \
     [onloadend] on MDN}."]

  val set_onloadend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onloadend} \
     [onloadend] on MDN}."]
end = struct
  type t = [ `File_reader ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `File_reader | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReader} \
     [FileReader]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "FileReader"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let read_as_array_buffer ~blob this =
    let blob = Blob.to_any blob in
    Js.to_unit (Js.Ffi.meth_call this "readAsArrayBuffer" [| blob |])

  let read_as_text ~blob ?label this =
    let blob = Blob.to_any blob in
    let label = (Js.Any.undefined_of_option Js.Any.of_string) label in
    Js.to_unit (Js.Ffi.meth_call this "readAsText" [| blob; label |])

  let read_as_data_url ~blob this =
    let blob = Blob.to_any blob in
    Js.to_unit (Js.Ffi.meth_call this "readAsDataURL" [| blob |])

  let abort this = Js.to_unit (Js.Ffi.meth_call this "abort" [||])
  let empty = 0
  let loading = 1
  let done' = 2
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")

  let result this =
    (Js.Any.nullable_to_option File_reader_result.of_any)
      (Js.Ffi.get this "result")

  let error this =
    (Js.Any.nullable_to_option Dom_exception.of_any) (Js.Ffi.get this "error")

  let onloadstart this = Event_handler.of_any (Js.Ffi.get this "onloadstart")

  let set_onloadstart this x =
    Js.Ffi.set this "onloadstart" (Event_handler.to_any x)

  let onprogress this = Event_handler.of_any (Js.Ffi.get this "onprogress")

  let set_onprogress this x =
    Js.Ffi.set this "onprogress" (Event_handler.to_any x)

  let onload this = Event_handler.of_any (Js.Ffi.get this "onload")
  let set_onload this x = Js.Ffi.set this "onload" (Event_handler.to_any x)
  let onabort this = Event_handler.of_any (Js.Ffi.get this "onabort")
  let set_onabort this x = Js.Ffi.set this "onabort" (Event_handler.to_any x)
  let onerror this = Event_handler.of_any (Js.Ffi.get this "onerror")
  let set_onerror this x = Js.Ffi.set this "onerror" (Event_handler.to_any x)
  let onloadend this = Event_handler.of_any (Js.Ffi.get this "onloadend")
  let set_onloadend this x = Js.Ffi.set this "onloadend" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FileReader} \
   [FileReader] on MDN}."]

and File_reader_sync : sig
  type t = [ `File_reader_sync ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync} \
     [FileReaderSync]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val read_as_array_buffer : blob:Blob.t -> t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsArrayBuffer} \
     [readAsArrayBuffer] on MDN}."]

  val read_as_binary_string : blob:Blob.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsBinaryString} \
     [readAsBinaryString] on MDN}."]

  val read_as_text : blob:Blob.t -> ?label:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsText} \
     [readAsText] on MDN}."]

  val read_as_data_url : blob:Blob.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsDataURL} \
     [readAsDataURL] on MDN}."]
end = struct
  type t = [ `File_reader_sync ] Js.t

  let t = Js.Ffi.constr "FileReaderSync"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let read_as_array_buffer ~blob this =
    let blob = Blob.to_any blob in
    Array_buffer.of_any (Js.Ffi.meth_call this "readAsArrayBuffer" [| blob |])

  let read_as_binary_string ~blob this =
    let blob = Blob.to_any blob in
    Js.Any.to_string (Js.Ffi.meth_call this "readAsBinaryString" [| blob |])

  let read_as_text ~blob ?label this =
    let blob = Blob.to_any blob in
    let label = (Js.Any.undefined_of_option Js.Any.of_string) label in
    Js.Any.to_string (Js.Ffi.meth_call this "readAsText" [| blob; label |])

  let read_as_data_url ~blob this =
    let blob = Blob.to_any blob in
    Js.Any.to_string (Js.Ffi.meth_call this "readAsDataURL" [| blob |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync} \
   [FileReaderSync] on MDN}."]

and Focus_event : sig
  type t = [ `Focus_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent} \
     [FocusEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Focus_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent} \
     [FocusEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_arg_and_focus_event_init_dict :
    type_arg:string ->
    ?focus_event_init_dict:Focus_event_init.t ->
    unit ->
    'a super

  val related_target : t -> Event_target.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget} \
     [relatedTarget] on MDN}."]
end = struct
  type t = [ `Focus_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Focus_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent} \
     [FocusEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "FocusEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this

  let with_type_arg_and_focus_event_init_dict ~type_arg ?focus_event_init_dict
      () =
    let type_arg = Js.Any.of_string type_arg in
    let focus_event_init_dict =
      (Js.Any.undefined_of_option Focus_event_init.to_any) focus_event_init_dict
    in
    Js.Ffi.obj_new t [| type_arg; focus_event_init_dict |]

  let related_target this =
    (Js.Any.nullable_to_option Event_target.of_any)
      (Js.Ffi.get this "relatedTarget")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent} \
   [FocusEvent] on MDN}."]

and Focus_event_init : sig
  type t [@@ocaml.doc "The type for the [FocusEventInit] dictionary."]

  val make : ?related_target:Event_target.t option -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_ui_event_init : t -> Ui_event_init.t
  val related_target : t -> Event_target.t option option
end = struct
  type t = Js.any

  let make ?related_target () =
    let related_target =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Event_target.to_any))
        related_target
    in
    Js.Ffi.obj [| ("relatedTarget", related_target) |]

  let to_ui_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let related_target this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Event_target.of_any))
      (Js.Ffi.get this "relatedTarget")
end

and Form_data_entry_value : sig
  type t

  val with_file : File.t -> t
  val with_string : string -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_file = Js.repr
  let with_string = Js.repr
end

and Form_data : sig
  type t = [ `Form_data ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FormData} [FormData]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?form:Html_form_element.t -> unit -> t

  val append : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/append} \
     [append] on MDN}."]

  val append : name:string -> value:Blob.t -> ?filename:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/append} \
     [append] on MDN}."]

  val delete : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete} \
     [delete] on MDN}."]

  val get : name:string -> t -> Form_data_entry_value.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/get} \
     [get] on MDN}."]

  val get_all : name:string -> t -> Form_data_entry_value.t array
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll} \
     [getAll] on MDN}."]

  val has : name:string -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/has} \
     [has] on MDN}."]

  val set : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/set} \
     [set] on MDN}."]

  val set : name:string -> value:Blob.t -> ?filename:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData/set} \
     [set] on MDN}."]
end = struct
  type t = [ `Form_data ] Js.t

  let t = Js.Ffi.constr "FormData"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?form () =
    let form = (Js.Any.undefined_of_option Html_form_element.to_any) form in
    Js.Ffi.obj_new t [| form |]

  let append ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "append" [| name; value |])

  let append ~name ~value ?filename this =
    let name = Js.Any.of_string name in
    let value = Blob.to_any value in
    let filename = (Js.Any.undefined_of_option Js.Any.of_string) filename in
    Js.to_unit (Js.Ffi.meth_call this "append" [| name; value; filename |])

  let delete ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "delete" [| name |])

  let get ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Form_data_entry_value.of_any)
      (Js.Ffi.meth_call this "get" [| name |])

  let get_all ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.to_array Form_data_entry_value.of_any)
      (Js.Ffi.meth_call this "getAll" [| name |])

  let has ~name this =
    let name = Js.Any.of_string name in
    Js.Any.to_bool (Js.Ffi.meth_call this "has" [| name |])

  let set ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "set" [| name; value |])

  let set ~name ~value ?filename this =
    let name = Js.Any.of_string name in
    let value = Blob.to_any value in
    let filename = (Js.Any.undefined_of_option Js.Any.of_string) filename in
    Js.to_unit (Js.Ffi.meth_call this "set" [| name; value; filename |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormData} \
   [FormData] on MDN}."]

and Form_data_event : sig
  type t = [ `Form_data_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent} \
     [FormDataEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Form_data_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent} \
     [FormDataEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Form_data_event_init.t -> unit -> 'a super

  val form_data : t -> Form_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent/formData} \
     [formData] on MDN}."]
end = struct
  type t = [ `Form_data_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Form_data_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent} \
     [FormDataEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "FormDataEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Form_data_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let form_data this = Form_data.of_any (Js.Ffi.get this "formData")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent} \
   [FormDataEvent] on MDN}."]

and Form_data_event_init : sig
  type t [@@ocaml.doc "The type for the [FormDataEventInit] dictionary."]

  val make : form_data:Form_data.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val form_data : t -> Form_data.t
end = struct
  type t = Js.any

  let make ~form_data () =
    let form_data = Form_data.to_any form_data in
    Js.Ffi.obj [| ("formData", form_data) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let form_data this = Form_data.of_any (Js.Ffi.get this "formData")
end

and Function : sig
  type t = Js.any array -> Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Function

and Gain_options : sig
  type t [@@ocaml.doc "The type for the [GainOptions] dictionary."]

  val make : ?gain:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val gain : t -> float option
end = struct
  type t = Js.any

  let make ?gain () =
    let gain = (Js.Any.nullable_of_option Js.Any.of_float) gain in
    Js.Ffi.obj [| ("gain", gain) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let gain this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "gain")
end

and Gain_node : sig
  type t = [ `Gain_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GainNode} [GainNode]} \
     interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Gain_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GainNode} [GainNode]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t -> ?options:Gain_options.t -> unit -> 'a super

  val gain : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain} \
     [gain] on MDN}."]
end = struct
  type t = [ `Gain_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Gain_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GainNode} [GainNode]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "GainNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options = (Js.Any.undefined_of_option Gain_options.to_any) options in
    Js.Ffi.obj_new t [| context; options |]

  let gain this = Audio_param.of_any (Js.Ffi.get this "gain")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GainNode} \
   [GainNode] on MDN}."]

and Gamepad : sig
  type t = [ `Gamepad ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Gamepad} [Gamepad]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id} [id] \
     on MDN}."]

  val index : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index} \
     [index] on MDN}."]

  val connected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected} \
     [connected] on MDN}."]

  val timestamp : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp} \
     [timestamp] on MDN}."]

  val mapping : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping} \
     [mapping] on MDN}."]

  val axes : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes} \
     [axes] on MDN}."]

  val buttons : t -> Gamepad_button_list.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons} \
     [buttons] on MDN}."]

  val hand : t -> Gamepad_hand.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/hand} \
     [hand] on MDN}."]

  val pose : t -> Gamepad_pose.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/pose} \
     [pose] on MDN}."]
end = struct
  type t = [ `Gamepad ] Js.t

  let t = Js.Ffi.constr "Gamepad"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let index this = Js.Any.to_int (Js.Ffi.get this "index")
  let connected this = Js.Any.to_bool (Js.Ffi.get this "connected")

  let timestamp this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "timestamp")

  let mapping this = Js.Any.to_string (Js.Ffi.get this "mapping")
  let axes this = Float64_array.of_any (Js.Ffi.get this "axes")
  let buttons this = Gamepad_button_list.of_any (Js.Ffi.get this "buttons")
  let hand this = Gamepad_hand.of_any (Js.Ffi.get this "hand")

  let pose this =
    (Js.Any.nullable_to_option Gamepad_pose.of_any) (Js.Ffi.get this "pose")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Gamepad} [Gamepad] \
   on MDN}."]

and Gamepad_hand : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val left : t
  val right : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let left = Js.of_string "left"
  let right = Js.of_string "right"
end

and Gamepad_button : sig
  type t = [ `Gamepad_button ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton} \
     [GamepadButton]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val pressed : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/pressed} \
     [pressed] on MDN}."]

  val touched : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/touched} \
     [touched] on MDN}."]

  val value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value} \
     [value] on MDN}."]
end = struct
  type t = [ `Gamepad_button ] Js.t

  let t = Js.Ffi.constr "GamepadButton"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let pressed this = Js.Any.to_bool (Js.Ffi.get this "pressed")
  let touched this = Js.Any.to_bool (Js.Ffi.get this "touched")
  let value this = Js.Any.to_float (Js.Ffi.get this "value")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton} \
   [GamepadButton] on MDN}."]

and Gamepad_button_list : sig
  type t = [ `Gamepad_button_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButtonList} \
     [GamepadButtonList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val item : index:int -> t -> Gamepad_button.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButtonList/item} \
     [item] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadButtonList/length} \
     [length] on MDN}."]
end = struct
  type t = [ `Gamepad_button_list ] Js.t

  let t = Js.Ffi.constr "GamepadButtonList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Gamepad_button.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GamepadButtonList} \
   [GamepadButtonList] on MDN}."]

and Gamepad_event : sig
  type t = [ `Gamepad_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent} \
     [GamepadEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Gamepad_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent} \
     [GamepadEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Gamepad_event_init.t -> unit -> 'a super

  val gamepad : t -> Gamepad.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/gamepad} \
     [gamepad] on MDN}."]
end = struct
  type t = [ `Gamepad_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Gamepad_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent} \
     [GamepadEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "GamepadEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Gamepad_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let gamepad this = Gamepad.of_any (Js.Ffi.get this "gamepad")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent} \
   [GamepadEvent] on MDN}."]

and Gamepad_event_init : sig
  type t [@@ocaml.doc "The type for the [GamepadEventInit] dictionary."]

  val make : gamepad:Gamepad.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val gamepad : t -> Gamepad.t
end = struct
  type t = Js.any

  let make ~gamepad () =
    let gamepad = Gamepad.to_any gamepad in
    Js.Ffi.obj [| ("gamepad", gamepad) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let gamepad this = Gamepad.of_any (Js.Ffi.get this "gamepad")
end

and Gamepad_pose : sig
  type t = [ `Gamepad_pose ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose} \
     [GamepadPose]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val has_orientation : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/hasOrientation} \
     [hasOrientation] on MDN}."]

  val has_position : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/hasPosition} \
     [hasPosition] on MDN}."]

  val position : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/position} \
     [position] on MDN}."]

  val linear_velocity : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/linearVelocity} \
     [linearVelocity] on MDN}."]

  val linear_acceleration : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/linearAcceleration} \
     [linearAcceleration] on MDN}."]

  val orientation : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/orientation} \
     [orientation] on MDN}."]

  val angular_velocity : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/angularVelocity} \
     [angularVelocity] on MDN}."]

  val angular_acceleration : t -> 'todo_buffer option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/angularAcceleration} \
     [angularAcceleration] on MDN}."]
end = struct
  type t = [ `Gamepad_pose ] Js.t

  let t = Js.Ffi.constr "GamepadPose"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let has_orientation this = Js.Any.to_bool (Js.Ffi.get this "hasOrientation")
  let has_position this = Js.Any.to_bool (Js.Ffi.get this "hasPosition")

  let position this =
    (Js.Any.nullable_to_option Float32_array.of_any) (Js.Ffi.get this "position")

  let linear_velocity this =
    (Js.Any.nullable_to_option Float32_array.of_any)
      (Js.Ffi.get this "linearVelocity")

  let linear_acceleration this =
    (Js.Any.nullable_to_option Float32_array.of_any)
      (Js.Ffi.get this "linearAcceleration")

  let orientation this =
    (Js.Any.nullable_to_option Float32_array.of_any)
      (Js.Ffi.get this "orientation")

  let angular_velocity this =
    (Js.Any.nullable_to_option Float32_array.of_any)
      (Js.Ffi.get this "angularVelocity")

  let angular_acceleration this =
    (Js.Any.nullable_to_option Float32_array.of_any)
      (Js.Ffi.get this "angularAcceleration")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose} \
   [GamepadPose] on MDN}."]

and Global_scope : sig
  type t = [ `Global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GlobalScope} \
     [GlobalScope]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GlobalScope} \
     [GlobalScope]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Global_scope ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GlobalScope} \
     [GlobalScope]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "GlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GlobalScope} \
   [GlobalScope] on MDN}."]

and Html_anchor_element : sig
  type t = [ `Html_anchor_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement} \
     [HTMLAnchorElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_anchor_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement} \
     [HTMLAnchorElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/target} \
     [target] on MDN}."]

  val set_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/target} \
     [target] on MDN}."]

  val rel : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel} \
     [rel] on MDN}."]

  val set_rel : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel} \
     [rel] on MDN}."]

  val rel_list : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList} \
     [relList] on MDN}."]

  val text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/text} \
     [text] on MDN}."]

  val coords : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/coords} \
     [coords] on MDN}."]

  val set_coords : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/coords} \
     [coords] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/name} \
     [name] on MDN}."]

  val rev : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rev} \
     [rev] on MDN}."]

  val set_rev : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rev} \
     [rev] on MDN}."]

  val shape : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/shape} \
     [shape] on MDN}."]

  val set_shape : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/shape} \
     [shape] on MDN}."]
end = struct
  type t = [ `Html_anchor_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_anchor_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement} \
     [HTMLAnchorElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLAnchorElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let target this = Js.Any.to_string (Js.Ffi.get this "target")
  let set_target this x = Js.Ffi.set this "target" (Js.Any.of_string x)
  let rel this = Js.Any.to_string (Js.Ffi.get this "rel")
  let set_rel this x = Js.Ffi.set this "rel" (Js.Any.of_string x)
  let rel_list this = Dom_token_list.of_any (Js.Ffi.get this "relList")
  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)
  let coords this = Js.Any.to_string (Js.Ffi.get this "coords")
  let set_coords this x = Js.Ffi.set this "coords" (Js.Any.of_string x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let rev this = Js.Any.to_string (Js.Ffi.get this "rev")
  let set_rev this x = Js.Ffi.set this "rev" (Js.Any.of_string x)
  let shape this = Js.Any.to_string (Js.Ffi.get this "shape")
  let set_shape this x = Js.Ffi.set this "shape" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement} \
   [HTMLAnchorElement] on MDN}."]

and Html_area_element : sig
  type t = [ `Html_area_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement} \
     [HTMLAreaElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_area_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement} \
     [HTMLAreaElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/target} \
     [target] on MDN}."]

  val set_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/target} \
     [target] on MDN}."]

  val rel : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel} \
     [rel] on MDN}."]

  val set_rel : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel} \
     [rel] on MDN}."]

  val rel_list : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList} \
     [relList] on MDN}."]
end = struct
  type t = [ `Html_area_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_area_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement} \
     [HTMLAreaElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLAreaElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let target this = Js.Any.to_string (Js.Ffi.get this "target")
  let set_target this x = Js.Ffi.set this "target" (Js.Any.of_string x)
  let rel this = Js.Any.to_string (Js.Ffi.get this "rel")
  let set_rel this x = Js.Ffi.set this "rel" (Js.Any.of_string x)
  let rel_list this = Dom_token_list.of_any (Js.Ffi.get this "relList")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement} \
   [HTMLAreaElement] on MDN}."]

and Html_audio_element : sig
  type t = [ `Html_audio_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} \
     [HTMLAudioElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_audio_element
      | `Html_media_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} \
     [HTMLAudioElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_audio_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_audio_element
      | `Html_media_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} \
     [HTMLAudioElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLAudioElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_media_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} \
   [HTMLAudioElement] on MDN}."]

and Htmlbr_element : sig
  type t = [ `Htmlbr_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement} \
     [HTMLBRElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlbr_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement} \
     [HTMLBRElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Htmlbr_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlbr_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement} \
     [HTMLBRElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLBRElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement} \
   [HTMLBRElement] on MDN}."]

and Html_base_element : sig
  type t = [ `Html_base_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement} \
     [HTMLBaseElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_base_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement} \
     [HTMLBaseElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val href : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement/href} \
     [href] on MDN}."]

  val set_href : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement/href} \
     [href] on MDN}."]
end = struct
  type t = [ `Html_base_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_base_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement} \
     [HTMLBaseElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLBaseElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let set_href this x = Js.Ffi.set this "href" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement} \
   [HTMLBaseElement] on MDN}."]

and Html_body_element : sig
  type t = [ `Html_body_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement} \
     [HTMLBodyElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_body_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement} \
     [HTMLBodyElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/text} \
     [text] on MDN}."]

  val bg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/bgColor} \
     [bgColor] on MDN}."]

  val set_bg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/bgColor} \
     [bgColor] on MDN}."]

  val background : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/background} \
     [background] on MDN}."]

  val set_background : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement/background} \
     [background] on MDN}."]
end = struct
  type t = [ `Html_body_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_body_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement} \
     [HTMLBodyElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLBodyElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)
  let bg_color this = Js.Any.to_string (Js.Ffi.get this "bgColor")
  let set_bg_color this x = Js.Ffi.set this "bgColor" (Js.Any.of_string x)
  let background this = Js.Any.to_string (Js.Ffi.get this "background")
  let set_background this x = Js.Ffi.set this "background" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement} \
   [HTMLBodyElement] on MDN}."]

and Html_button_element : sig
  type t = [ `Html_button_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement} \
     [HTMLButtonElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_button_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement} \
     [HTMLButtonElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/form} \
     [form] on MDN}."]

  val form_action : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formAction} \
     [formAction] on MDN}."]

  val set_form_action : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formAction} \
     [formAction] on MDN}."]

  val form_enctype : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formEnctype} \
     [formEnctype] on MDN}."]

  val set_form_enctype : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formEnctype} \
     [formEnctype] on MDN}."]

  val form_method : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formMethod} \
     [formMethod] on MDN}."]

  val set_form_method : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formMethod} \
     [formMethod] on MDN}."]

  val form_no_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formNoValidate} \
     [formNoValidate] on MDN}."]

  val set_form_no_validate : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formNoValidate} \
     [formNoValidate] on MDN}."]

  val form_target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formTarget} \
     [formTarget] on MDN}."]

  val set_form_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/formTarget} \
     [formTarget] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/name} \
     [name] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/type} \
     [type] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/value} \
     [value] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Html_button_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_button_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement} \
     [HTMLButtonElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLButtonElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let form_action this = Js.Any.to_string (Js.Ffi.get this "formAction")
  let set_form_action this x = Js.Ffi.set this "formAction" (Js.Any.of_string x)
  let form_enctype this = Js.Any.to_string (Js.Ffi.get this "formEnctype")

  let set_form_enctype this x =
    Js.Ffi.set this "formEnctype" (Js.Any.of_string x)

  let form_method this = Js.Any.to_string (Js.Ffi.get this "formMethod")
  let set_form_method this x = Js.Ffi.set this "formMethod" (Js.Any.of_string x)
  let form_no_validate this = Js.Any.to_bool (Js.Ffi.get this "formNoValidate")

  let set_form_no_validate this x =
    Js.Ffi.set this "formNoValidate" (Js.Any.of_bool x)

  let form_target this = Js.Any.to_string (Js.Ffi.get this "formTarget")
  let set_form_target this x = Js.Ffi.set this "formTarget" (Js.Any.of_string x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)
  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])

  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement} \
   [HTMLButtonElement] on MDN}."]

and Rendering_context : sig
  type t

  val with_canvas_rendering_context2_d : Canvas_rendering_context2_d.t -> t
  val with_web_gl_rendering_context : Web_gl_rendering_context.t -> t
  val with_web_gl2_rendering_context : Web_gl2_rendering_context.t -> t
  val with_gpu_canvas_context : Gpu_canvas_context.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_canvas_rendering_context2_d = Js.repr
  let with_web_gl_rendering_context = Js.repr
  let with_web_gl2_rendering_context = Js.repr
  let with_gpu_canvas_context = Js.repr
end

and Html_canvas_element : sig
  type t = [ `Html_canvas_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement} \
     [HTMLCanvasElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_canvas_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement} \
     [HTMLCanvasElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width} \
     [width] on MDN}."]

  val set_width : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height} \
     [height] on MDN}."]

  val set_height : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height} \
     [height] on MDN}."]

  val get_context :
    context_id:string -> ?options:Js.any -> t -> Rendering_context.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext} \
     [getContext] on MDN}."]

  val to_data_url : ?type':string -> ?quality:Js.any -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL} \
     [toDataURL] on MDN}."]

  val capture_stream : ?frame_request_rate:float -> t -> 'a Media_stream.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream} \
     [captureStream] on MDN}."]
end = struct
  type t = [ `Html_canvas_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_canvas_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement} \
     [HTMLCanvasElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLCanvasElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_int x)
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
  let set_height this x = Js.Ffi.set this "height" (Js.Any.of_int x)

  let get_context ~context_id ?options this =
    let context_id = Js.Any.of_string context_id in
    let options = (Js.Any.undefined_of_option Js.of_any) options in
    (Js.Any.nullable_to_option Rendering_context.of_any)
      (Js.Ffi.meth_call this "getContext" [| context_id; options |])

  let to_data_url ?type' ?quality this =
    let type' = (Js.Any.undefined_of_option Js.Any.of_string) type' in
    let quality = (Js.Any.undefined_of_option Js.of_any) quality in
    Js.Any.to_string (Js.Ffi.meth_call this "toDataURL" [| type'; quality |])

  let capture_stream ?frame_request_rate this =
    let frame_request_rate =
      (Js.Any.undefined_of_option Js.Any.of_float) frame_request_rate
    in
    Media_stream.of_any
      (Js.Ffi.meth_call this "captureStream" [| frame_request_rate |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement} \
   [HTMLCanvasElement] on MDN}."]

and Html_collection : sig
  type t = [ `Html_collection ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection} \
     [HTMLCollection]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/length} \
     [length] on MDN}."]

  val item : index:int -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item} \
     [item] on MDN}."]

  val named_item : name:string -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/namedItem} \
     [namedItem] on MDN}."]
end = struct
  type t = [ `Html_collection ] Js.t

  let t = Js.Ffi.constr "HTMLCollection"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let named_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "namedItem" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection} \
   [HTMLCollection] on MDN}."]

and Htmld_list_element : sig
  type t = [ `Htmld_list_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement} \
     [HTMLDListElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmld_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement} \
     [HTMLDListElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Htmld_list_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmld_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement} \
     [HTMLDListElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDListElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement} \
   [HTMLDListElement] on MDN}."]

and Html_data_element : sig
  type t = [ `Html_data_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement} \
     [HTMLDataElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_data_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement} \
     [HTMLDataElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement/value} \
     [value] on MDN}."]
end = struct
  type t = [ `Html_data_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_data_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement} \
     [HTMLDataElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDataElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement} \
   [HTMLDataElement] on MDN}."]

and Html_data_list_element : sig
  type t = [ `Html_data_list_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement} \
     [HTMLDataListElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_data_list_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement} \
     [HTMLDataListElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val options : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement/options} \
     [options] on MDN}."]
end = struct
  type t = [ `Html_data_list_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_data_list_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement} \
     [HTMLDataListElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDataListElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let options this = Html_collection.of_any (Js.Ffi.get this "options")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement} \
   [HTMLDataListElement] on MDN}."]

and Html_details_element : sig
  type t = [ `Html_details_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement} \
     [HTMLDetailsElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_details_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement} \
     [HTMLDetailsElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val open' : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/open} \
     [open] on MDN}."]

  val set_open : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/open} \
     [open] on MDN}."]
end = struct
  type t = [ `Html_details_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_details_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement} \
     [HTMLDetailsElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDetailsElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let open' this = Js.Any.to_bool (Js.Ffi.get this "open")
  let set_open this x = Js.Ffi.set this "open" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement} \
   [HTMLDetailsElement] on MDN}."]

and Html_dialog_element : sig
  type t = [ `Html_dialog_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement} \
     [HTMLDialogElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_dialog_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement} \
     [HTMLDialogElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val open' : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open} \
     [open] on MDN}."]

  val set_open : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open} \
     [open] on MDN}."]

  val return_value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue} \
     [returnValue] on MDN}."]

  val set_return_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue} \
     [returnValue] on MDN}."]

  val close : ?return_value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close} \
     [close] on MDN}."]
end = struct
  type t = [ `Html_dialog_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_dialog_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement} \
     [HTMLDialogElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDialogElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let open' this = Js.Any.to_bool (Js.Ffi.get this "open")
  let set_open this x = Js.Ffi.set this "open" (Js.Any.of_bool x)
  let return_value this = Js.Any.to_string (Js.Ffi.get this "returnValue")

  let set_return_value this x =
    Js.Ffi.set this "returnValue" (Js.Any.of_string x)

  let close ?return_value this =
    let return_value =
      (Js.Any.undefined_of_option Js.Any.of_string) return_value
    in
    Js.to_unit (Js.Ffi.meth_call this "close" [| return_value |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement} \
   [HTMLDialogElement] on MDN}."]

and Html_directory_element : sig
  type t = [ `Html_directory_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDirectoryElement} \
     [HTMLDirectoryElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_directory_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDirectoryElement} \
     [HTMLDirectoryElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_directory_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_directory_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDirectoryElement} \
     [HTMLDirectoryElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDirectoryElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLDirectoryElement} \
   [HTMLDirectoryElement] on MDN}."]

and Html_div_element : sig
  type t = [ `Html_div_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement} \
     [HTMLDivElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_div_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement} \
     [HTMLDivElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val align : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement/align} \
     [align] on MDN}."]

  val set_align : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement/align} \
     [align] on MDN}."]
end = struct
  type t = [ `Html_div_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_div_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement} \
     [HTMLDivElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLDivElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let align this = Js.Any.to_string (Js.Ffi.get this "align")
  let set_align this x = Js.Ffi.set this "align" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement} \
   [HTMLDivElement] on MDN}."]

and Html_element : sig
  type t = [ `Html_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement} \
     [HTMLElement]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement} \
     [HTMLElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val title : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title} \
     [title] on MDN}."]

  val set_title : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title} \
     [title] on MDN}."]

  val lang : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang} [lang] \
     on MDN}."]

  val set_lang : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang} [lang] \
     on MDN}."]

  val translate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/translate} \
     [translate] on MDN}."]

  val set_translate : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/translate} \
     [translate] on MDN}."]

  val dir : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir} \
     [dir] on MDN}."]

  val set_dir : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir} \
     [dir] on MDN}."]

  val dataset : t -> Dom_string_map.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset} \
     [dataset] on MDN}."]

  val property_names : t -> string array option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/propertyNames} \
     [propertyNames] on MDN}."]

  val itemtypes : t -> string array option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/itemtypes} \
     [itemtypes] on MDN}."]

  val hidden : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden} \
     [hidden] on MDN}."]

  val set_hidden : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden} \
     [hidden] on MDN}."]

  val click : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click} \
     [click] on MDN}."]

  val focus : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus} \
     [focus] on MDN}."]

  val blur : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur} [blur] \
     on MDN}."]

  val inner_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText} \
     [innerText] on MDN}."]

  val set_inner_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText} \
     [innerText] on MDN}."]

  val attach_internals : t -> Element_internals.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/attachInternals} \
     [attachInternals] on MDN}."]

  val offset_parent : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent} \
     [offsetParent] on MDN}."]

  val offset_top : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop} \
     [offsetTop] on MDN}."]

  val offset_left : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft} \
     [offsetLeft] on MDN}."]

  val offset_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth} \
     [offsetWidth] on MDN}."]

  val offset_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight} \
     [offsetHeight] on MDN}."]

  val is_content_editable : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable} \
     [isContentEditable] on MDN}."]

  val content_editable : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable} \
     [contentEditable] on MDN}."]

  val set_content_editable : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable} \
     [contentEditable] on MDN}."]

  val style : t -> Css_style_declaration.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style} \
     [style] on MDN}."]

  val onpaste : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste} \
     [onpaste] on MDN}."]

  val set_onpaste : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste} \
     [onpaste] on MDN}."]

  val oncut : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut} \
     [oncut] on MDN}."]

  val set_oncut : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut} \
     [oncut] on MDN}."]

  val oncopy : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy} \
     [oncopy] on MDN}."]

  val set_oncopy : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy} \
     [oncopy] on MDN}."]
end = struct
  type t = [ `Html_element ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement} \
     [HTMLElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let title this = Js.Any.to_string (Js.Ffi.get this "title")
  let set_title this x = Js.Ffi.set this "title" (Js.Any.of_string x)
  let lang this = Js.Any.to_string (Js.Ffi.get this "lang")
  let set_lang this x = Js.Ffi.set this "lang" (Js.Any.of_string x)
  let translate this = Js.Any.to_bool (Js.Ffi.get this "translate")
  let set_translate this x = Js.Ffi.set this "translate" (Js.Any.of_bool x)
  let dir this = Js.Any.to_string (Js.Ffi.get this "dir")
  let set_dir this x = Js.Ffi.set this "dir" (Js.Any.of_string x)
  let dataset this = Dom_string_map.of_any (Js.Ffi.get this "dataset")

  let property_names this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_string))
      (Js.Ffi.meth_call this "propertyNames" [||])

  let itemtypes this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_string))
      (Js.Ffi.meth_call this "itemtypes" [||])

  let hidden this = Js.Any.to_bool (Js.Ffi.get this "hidden")
  let set_hidden this x = Js.Ffi.set this "hidden" (Js.Any.of_bool x)
  let click this = Js.to_unit (Js.Ffi.meth_call this "click" [||])
  let focus this = Js.to_unit (Js.Ffi.meth_call this "focus" [||])
  let blur this = Js.to_unit (Js.Ffi.meth_call this "blur" [||])
  let inner_text this = Js.Any.to_string (Js.Ffi.get this "innerText")
  let set_inner_text this x = Js.Ffi.set this "innerText" (Js.Any.of_string x)

  let attach_internals this =
    Element_internals.of_any (Js.Ffi.meth_call this "attachInternals" [||])

  let offset_parent this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "offsetParent")

  let offset_top this = Js.Any.to_int (Js.Ffi.get this "offsetTop")
  let offset_left this = Js.Any.to_int (Js.Ffi.get this "offsetLeft")
  let offset_width this = Js.Any.to_int (Js.Ffi.get this "offsetWidth")
  let offset_height this = Js.Any.to_int (Js.Ffi.get this "offsetHeight")

  let is_content_editable this =
    Js.Any.to_bool (Js.Ffi.get this "isContentEditable")

  let content_editable this =
    Js.Any.to_string (Js.Ffi.get this "contentEditable")

  let set_content_editable this x =
    Js.Ffi.set this "contentEditable" (Js.Any.of_string x)

  let style this = Css_style_declaration.of_any (Js.Ffi.get this "style")
  let onpaste this = Event_handler.of_any (Js.Ffi.get this "onpaste")
  let set_onpaste this x = Js.Ffi.set this "onpaste" (Event_handler.to_any x)
  let oncut this = Event_handler.of_any (Js.Ffi.get this "oncut")
  let set_oncut this x = Js.Ffi.set this "oncut" (Event_handler.to_any x)
  let oncopy this = Event_handler.of_any (Js.Ffi.get this "oncopy")
  let set_oncopy this x = Js.Ffi.set this "oncopy" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement} \
   [HTMLElement] on MDN}."]

and Html_embed_element : sig
  type t = [ `Html_embed_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement} \
     [HTMLEmbedElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_embed_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement} \
     [HTMLEmbedElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_embed_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_embed_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement} \
     [HTMLEmbedElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLEmbedElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement} \
   [HTMLEmbedElement] on MDN}."]

and Html_field_set_element : sig
  type t = [ `Html_field_set_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement} \
     [HTMLFieldSetElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_field_set_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement} \
     [HTMLFieldSetElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/form} \
     [form] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/name} \
     [name] on MDN}."]

  val elements : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/elements} \
     [elements] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]
end = struct
  type t = [ `Html_field_set_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_field_set_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement} \
     [HTMLFieldSetElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLFieldSetElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let elements this = Html_collection.of_any (Js.Ffi.get this "elements")
  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement} \
   [HTMLFieldSetElement] on MDN}."]

and Html_font_element : sig
  type t = [ `Html_font_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement} \
     [HTMLFontElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_font_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement} \
     [HTMLFontElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/color} \
     [color] on MDN}."]

  val set_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/color} \
     [color] on MDN}."]

  val face : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/face} \
     [face] on MDN}."]

  val set_face : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/face} \
     [face] on MDN}."]

  val size : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/size} \
     [size] on MDN}."]

  val set_size : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/size} \
     [size] on MDN}."]
end = struct
  type t = [ `Html_font_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_font_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement} \
     [HTMLFontElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLFontElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let color this = Js.Any.to_string (Js.Ffi.get this "color")
  let set_color this x = Js.Ffi.set this "color" (Js.Any.of_string x)
  let face this = Js.Any.to_string (Js.Ffi.get this "face")
  let set_face this x = Js.Ffi.set this "face" (Js.Any.of_string x)
  let size this = Js.Any.to_string (Js.Ffi.get this "size")
  let set_size this x = Js.Ffi.set this "size" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement} \
   [HTMLFontElement] on MDN}."]

and Html_form_controls_collection : sig
  type t = [ `Html_form_controls_collection ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection} \
     [HTMLFormControlsCollection]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_form_controls_collection | `Html_collection ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection} \
     [HTMLFormControlsCollection]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val named_item :
    name:string -> t -> [< `Radio_node_list | `Element ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem} \
     [namedItem] on MDN}."]
end = struct
  type t = [ `Html_form_controls_collection ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_form_controls_collection | `Html_collection ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection} \
     [HTMLFormControlsCollection]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "HTMLFormControlsCollection"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_collection this = Js.Ffi.magic this

  let named_item ~name this =
    let name = Js.Any.of_string name in
    Js.of_any (Js.Ffi.meth_call this "namedItem" [| name |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection} \
   [HTMLFormControlsCollection] on MDN}."]

and Html_form_element : sig
  type t = [ `Html_form_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement} \
     [HTMLFormElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_form_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement} \
     [HTMLFormElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val accept_charset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset} \
     [acceptCharset] on MDN}."]

  val set_accept_charset : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset} \
     [acceptCharset] on MDN}."]

  val action : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action} \
     [action] on MDN}."]

  val set_action : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action} \
     [action] on MDN}."]

  val autocomplete : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/autocomplete} \
     [autocomplete] on MDN}."]

  val set_autocomplete : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/autocomplete} \
     [autocomplete] on MDN}."]

  val enctype : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype} \
     [enctype] on MDN}."]

  val set_enctype : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype} \
     [enctype] on MDN}."]

  val encoding : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding} \
     [encoding] on MDN}."]

  val set_encoding : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding} \
     [encoding] on MDN}."]

  val method' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method} \
     [method] on MDN}."]

  val set_method : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method} \
     [method] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name} \
     [name] on MDN}."]

  val no_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/noValidate} \
     [noValidate] on MDN}."]

  val set_no_validate : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/noValidate} \
     [noValidate] on MDN}."]

  val target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target} \
     [target] on MDN}."]

  val set_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target} \
     [target] on MDN}."]

  val rel : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/rel} \
     [rel] on MDN}."]

  val set_rel : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/rel} \
     [rel] on MDN}."]

  val rel_list : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/relList} \
     [relList] on MDN}."]

  val elements : t -> 'a Html_form_controls_collection.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements} \
     [elements] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length} \
     [length] on MDN}."]

  val get : index:int -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/get} \
     [get] on MDN}."]

  val get : name:string -> t -> [< `Radio_node_list | `Element ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/get} \
     [get] on MDN}."]

  val submit : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit} \
     [submit] on MDN}."]

  val request_submit : ?submitter:Html_element.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit} \
     [requestSubmit] on MDN}."]

  val reset : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset} \
     [reset] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity} \
     [reportValidity] on MDN}."]
end = struct
  type t = [ `Html_form_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_form_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement} \
     [HTMLFormElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLFormElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let accept_charset this = Js.Any.to_string (Js.Ffi.get this "acceptCharset")

  let set_accept_charset this x =
    Js.Ffi.set this "acceptCharset" (Js.Any.of_string x)

  let action this = Js.Any.to_string (Js.Ffi.get this "action")
  let set_action this x = Js.Ffi.set this "action" (Js.Any.of_string x)
  let autocomplete this = Js.Any.to_string (Js.Ffi.get this "autocomplete")

  let set_autocomplete this x =
    Js.Ffi.set this "autocomplete" (Js.Any.of_string x)

  let enctype this = Js.Any.to_string (Js.Ffi.get this "enctype")
  let set_enctype this x = Js.Ffi.set this "enctype" (Js.Any.of_string x)
  let encoding this = Js.Any.to_string (Js.Ffi.get this "encoding")
  let set_encoding this x = Js.Ffi.set this "encoding" (Js.Any.of_string x)
  let method' this = Js.Any.to_string (Js.Ffi.get this "method")
  let set_method this x = Js.Ffi.set this "method" (Js.Any.of_string x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let no_validate this = Js.Any.to_bool (Js.Ffi.get this "noValidate")
  let set_no_validate this x = Js.Ffi.set this "noValidate" (Js.Any.of_bool x)
  let target this = Js.Any.to_string (Js.Ffi.get this "target")
  let set_target this x = Js.Ffi.set this "target" (Js.Any.of_string x)
  let rel this = Js.Any.to_string (Js.Ffi.get this "rel")
  let set_rel this x = Js.Ffi.set this "rel" (Js.Any.of_string x)
  let rel_list this = Dom_token_list.of_any (Js.Ffi.get this "relList")

  let elements this =
    Html_form_controls_collection.of_any (Js.Ffi.get this "elements")

  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "get" [| index |])

  let get ~name this =
    let name = Js.Any.of_string name in
    Js.of_any (Js.Ffi.meth_call this "get" [| name |])

  let submit this = Js.to_unit (Js.Ffi.meth_call this "submit" [||])

  let request_submit ?submitter this =
    let submitter =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option Html_element.to_any)
      )
        submitter
    in
    Js.to_unit (Js.Ffi.meth_call this "requestSubmit" [| submitter |])

  let reset this = Js.to_unit (Js.Ffi.meth_call this "reset" [||])

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement} \
   [HTMLFormElement] on MDN}."]

and Selection_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val preserve : t
  val select : t
  val start : t
  val end' : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let preserve = Js.of_string "preserve"
  let select = Js.of_string "select"
  let start = Js.of_string "start"
  let end' = Js.of_string "end"
end

and Html_frame_element : sig
  type t = [ `Html_frame_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameElement} \
     [HTMLFrameElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_frame_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameElement} \
     [HTMLFrameElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_frame_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_frame_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameElement} \
     [HTMLFrameElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLFrameElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameElement} \
   [HTMLFrameElement] on MDN}."]

and Html_frame_set_element : sig
  type t = [ `Html_frame_set_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement} \
     [HTMLFrameSetElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_frame_set_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement} \
     [HTMLFrameSetElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_frame_set_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_frame_set_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement} \
     [HTMLFrameSetElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLFrameSetElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement} \
   [HTMLFrameSetElement] on MDN}."]

and Htmlhr_element : sig
  type t = [ `Htmlhr_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement} \
     [HTMLHRElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlhr_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement} \
     [HTMLHRElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val align : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/align} \
     [align] on MDN}."]

  val set_align : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/align} \
     [align] on MDN}."]

  val color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/color} \
     [color] on MDN}."]

  val set_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/color} \
     [color] on MDN}."]

  val width : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/width} \
     [width] on MDN}."]

  val set_width : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement/width} \
     [width] on MDN}."]
end = struct
  type t = [ `Htmlhr_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlhr_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement} \
     [HTMLHRElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLHRElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let align this = Js.Any.to_string (Js.Ffi.get this "align")
  let set_align this x = Js.Ffi.set this "align" (Js.Any.of_string x)
  let color this = Js.Any.to_string (Js.Ffi.get this "color")
  let set_color this x = Js.Ffi.set this "color" (Js.Any.of_string x)
  let width this = Js.Any.to_string (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement} \
   [HTMLHRElement] on MDN}."]

and Html_head_element : sig
  type t = [ `Html_head_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement} \
     [HTMLHeadElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_head_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement} \
     [HTMLHeadElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_head_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_head_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement} \
     [HTMLHeadElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLHeadElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement} \
   [HTMLHeadElement] on MDN}."]

and Html_heading_element : sig
  type t = [ `Html_heading_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement} \
     [HTMLHeadingElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_heading_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement} \
     [HTMLHeadingElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_heading_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_heading_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement} \
     [HTMLHeadingElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLHeadingElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement} \
   [HTMLHeadingElement] on MDN}."]

and Html_html_element : sig
  type t = [ `Html_html_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement} \
     [HTMLHtmlElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_html_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement} \
     [HTMLHtmlElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_html_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_html_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement} \
     [HTMLHtmlElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLHtmlElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement} \
   [HTMLHtmlElement] on MDN}."]

and Htmli_frame_element : sig
  type t = [ `Htmli_frame_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} \
     [HTMLIFrameElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmli_frame_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} \
     [HTMLIFrameElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src} \
     [src] on MDN}."]

  val srcdoc : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc} \
     [srcdoc] on MDN}."]

  val set_srcdoc : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc} \
     [srcdoc] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/name} \
     [name] on MDN}."]

  val sandbox : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/sandbox} \
     [sandbox] on MDN}."]

  val allow_fullscreen : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowFullscreen} \
     [allowFullscreen] on MDN}."]

  val set_allow_fullscreen : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowFullscreen} \
     [allowFullscreen] on MDN}."]

  val width : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/width} \
     [width] on MDN}."]

  val set_width : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/width} \
     [width] on MDN}."]

  val height : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/height} \
     [height] on MDN}."]

  val set_height : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/height} \
     [height] on MDN}."]

  val content_document : t -> 'a Document.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument} \
     [contentDocument] on MDN}."]

  val content_window : t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow} \
     [contentWindow] on MDN}."]

  val frame_border : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/frameBorder} \
     [frameBorder] on MDN}."]

  val set_frame_border : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/frameBorder} \
     [frameBorder] on MDN}."]
end = struct
  type t = [ `Htmli_frame_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmli_frame_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} \
     [HTMLIFrameElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLIFrameElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let srcdoc this = Js.Any.to_string (Js.Ffi.get this "srcdoc")
  let set_srcdoc this x = Js.Ffi.set this "srcdoc" (Js.Any.of_string x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let sandbox this = Dom_token_list.of_any (Js.Ffi.get this "sandbox")
  let allow_fullscreen this = Js.Any.to_bool (Js.Ffi.get this "allowFullscreen")

  let set_allow_fullscreen this x =
    Js.Ffi.set this "allowFullscreen" (Js.Any.of_bool x)

  let width this = Js.Any.to_string (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_string x)
  let height this = Js.Any.to_string (Js.Ffi.get this "height")
  let set_height this x = Js.Ffi.set this "height" (Js.Any.of_string x)

  let content_document this =
    (Js.Any.nullable_to_option Document.of_any)
      (Js.Ffi.get this "contentDocument")

  let content_window this =
    (Js.Any.nullable_to_option Window_proxy.of_any)
      (Js.Ffi.get this "contentWindow")

  let frame_border this = Js.Any.to_string (Js.Ffi.get this "frameBorder")

  let set_frame_border this x =
    Js.Ffi.set this "frameBorder" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} \
   [HTMLIFrameElement] on MDN}."]

and Html_image_element : sig
  type t = [ `Html_image_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement} \
     [HTMLImageElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_image_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement} \
     [HTMLImageElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val alt : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt} \
     [alt] on MDN}."]

  val set_alt : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt} \
     [alt] on MDN}."]

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src} \
     [src] on MDN}."]

  val srcset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset} \
     [srcset] on MDN}."]

  val set_srcset : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset} \
     [srcset] on MDN}."]

  val cross_origin : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val set_cross_origin : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val use_map : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap} \
     [useMap] on MDN}."]

  val set_use_map : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap} \
     [useMap] on MDN}."]

  val is_map : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap} \
     [isMap] on MDN}."]

  val set_is_map : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap} \
     [isMap] on MDN}."]

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width} \
     [width] on MDN}."]

  val set_width : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height} \
     [height] on MDN}."]

  val set_height : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height} \
     [height] on MDN}."]

  val natural_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth} \
     [naturalWidth] on MDN}."]

  val natural_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight} \
     [naturalHeight] on MDN}."]

  val complete : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete} \
     [complete] on MDN}."]

  val current_src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc} \
     [currentSrc] on MDN}."]

  val referrer_policy : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val set_referrer_policy : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name} \
     [name] on MDN}."]

  val align : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align} \
     [align] on MDN}."]

  val set_align : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align} \
     [align] on MDN}."]

  val hspace : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace} \
     [hspace] on MDN}."]

  val set_hspace : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace} \
     [hspace] on MDN}."]

  val vspace : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace} \
     [vspace] on MDN}."]

  val set_vspace : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace} \
     [vspace] on MDN}."]

  val long_desc : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc} \
     [longDesc] on MDN}."]

  val set_long_desc : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc} \
     [longDesc] on MDN}."]

  val border : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border} \
     [border] on MDN}."]

  val set_border : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border} \
     [border] on MDN}."]
end = struct
  type t = [ `Html_image_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_image_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement} \
     [HTMLImageElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLImageElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let alt this = Js.Any.to_string (Js.Ffi.get this "alt")
  let set_alt this x = Js.Ffi.set this "alt" (Js.Any.of_string x)
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let srcset this = Js.Any.to_string (Js.Ffi.get this "srcset")
  let set_srcset this x = Js.Ffi.set this "srcset" (Js.Any.of_string x)

  let cross_origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "crossOrigin")

  let set_cross_origin this x =
    Js.Ffi.set this "crossOrigin"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let use_map this = Js.Any.to_string (Js.Ffi.get this "useMap")
  let set_use_map this x = Js.Ffi.set this "useMap" (Js.Any.of_string x)
  let is_map this = Js.Any.to_bool (Js.Ffi.get this "isMap")
  let set_is_map this x = Js.Ffi.set this "isMap" (Js.Any.of_bool x)
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_int x)
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
  let set_height this x = Js.Ffi.set this "height" (Js.Any.of_int x)
  let natural_width this = Js.Any.to_int (Js.Ffi.get this "naturalWidth")
  let natural_height this = Js.Any.to_int (Js.Ffi.get this "naturalHeight")
  let complete this = Js.Any.to_bool (Js.Ffi.get this "complete")
  let current_src this = Js.Any.to_string (Js.Ffi.get this "currentSrc")
  let referrer_policy this = Js.Any.to_string (Js.Ffi.get this "referrerPolicy")

  let set_referrer_policy this x =
    Js.Ffi.set this "referrerPolicy" (Js.Any.of_string x)

  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let align this = Js.Any.to_string (Js.Ffi.get this "align")
  let set_align this x = Js.Ffi.set this "align" (Js.Any.of_string x)
  let hspace this = Js.Any.to_int (Js.Ffi.get this "hspace")
  let set_hspace this x = Js.Ffi.set this "hspace" (Js.Any.of_int x)
  let vspace this = Js.Any.to_int (Js.Ffi.get this "vspace")
  let set_vspace this x = Js.Ffi.set this "vspace" (Js.Any.of_int x)
  let long_desc this = Js.Any.to_string (Js.Ffi.get this "longDesc")
  let set_long_desc this x = Js.Ffi.set this "longDesc" (Js.Any.of_string x)
  let border this = Js.Any.to_string (Js.Ffi.get this "border")
  let set_border this x = Js.Ffi.set this "border" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement} \
   [HTMLImageElement] on MDN}."]

and Html_input_element : sig
  type t = [ `Html_input_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement} \
     [HTMLInputElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_input_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement} \
     [HTMLInputElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val accept : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/accept} \
     [accept] on MDN}."]

  val set_accept : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/accept} \
     [accept] on MDN}."]

  val alt : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/alt} \
     [alt] on MDN}."]

  val set_alt : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/alt} \
     [alt] on MDN}."]

  val default_checked : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/defaultChecked} \
     [defaultChecked] on MDN}."]

  val set_default_checked : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/defaultChecked} \
     [defaultChecked] on MDN}."]

  val checked : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checked} \
     [checked] on MDN}."]

  val set_checked : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checked} \
     [checked] on MDN}."]

  val dir_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/dirName} \
     [dirName] on MDN}."]

  val set_dir_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/dirName} \
     [dirName] on MDN}."]

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/form} \
     [form] on MDN}."]

  val files : t -> File_list.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files} \
     [files] on MDN}."]

  val set_files : t -> File_list.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files} \
     [files] on MDN}."]

  val form_action : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formAction} \
     [formAction] on MDN}."]

  val set_form_action : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formAction} \
     [formAction] on MDN}."]

  val form_enctype : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formEnctype} \
     [formEnctype] on MDN}."]

  val set_form_enctype : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formEnctype} \
     [formEnctype] on MDN}."]

  val form_method : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formMethod} \
     [formMethod] on MDN}."]

  val set_form_method : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formMethod} \
     [formMethod] on MDN}."]

  val form_no_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formNoValidate} \
     [formNoValidate] on MDN}."]

  val set_form_no_validate : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formNoValidate} \
     [formNoValidate] on MDN}."]

  val form_target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formTarget} \
     [formTarget] on MDN}."]

  val set_form_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/formTarget} \
     [formTarget] on MDN}."]

  val indeterminate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/indeterminate} \
     [indeterminate] on MDN}."]

  val set_indeterminate : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/indeterminate} \
     [indeterminate] on MDN}."]

  val list : t -> 'a Html_data_list_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/list} \
     [list] on MDN}."]

  val max : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/max} \
     [max] on MDN}."]

  val set_max : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/max} \
     [max] on MDN}."]

  val max_length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/maxLength} \
     [maxLength] on MDN}."]

  val set_max_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/maxLength} \
     [maxLength] on MDN}."]

  val min : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/min} \
     [min] on MDN}."]

  val set_min : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/min} \
     [min] on MDN}."]

  val min_length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/minLength} \
     [minLength] on MDN}."]

  val set_min_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/minLength} \
     [minLength] on MDN}."]

  val multiple : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple} \
     [multiple] on MDN}."]

  val set_multiple : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple} \
     [multiple] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/name} \
     [name] on MDN}."]

  val pattern : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/pattern} \
     [pattern] on MDN}."]

  val set_pattern : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/pattern} \
     [pattern] on MDN}."]

  val placeholder : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/placeholder} \
     [placeholder] on MDN}."]

  val set_placeholder : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/placeholder} \
     [placeholder] on MDN}."]

  val read_only : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/readOnly} \
     [readOnly] on MDN}."]

  val set_read_only : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/readOnly} \
     [readOnly] on MDN}."]

  val required : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/required} \
     [required] on MDN}."]

  val set_required : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/required} \
     [required] on MDN}."]

  val size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/size} \
     [size] on MDN}."]

  val set_size : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/size} \
     [size] on MDN}."]

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/src} \
     [src] on MDN}."]

  val step : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/step} \
     [step] on MDN}."]

  val set_step : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/step} \
     [step] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/type} \
     [type] on MDN}."]

  val default_value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/defaultValue} \
     [defaultValue] on MDN}."]

  val set_default_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/defaultValue} \
     [defaultValue] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/value} \
     [value] on MDN}."]

  val value_as_date : t -> 'todo_object option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/valueAsDate} \
     [valueAsDate] on MDN}."]

  val set_value_as_date : t -> 'todo_object option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/valueAsDate} \
     [valueAsDate] on MDN}."]

  val value_as_number : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/valueAsNumber} \
     [valueAsNumber] on MDN}."]

  val set_value_as_number : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/valueAsNumber} \
     [valueAsNumber] on MDN}."]

  val step_up : ?n:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp} \
     [stepUp] on MDN}."]

  val step_down : ?n:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown} \
     [stepDown] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]

  val labels : t -> Node_list.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels} \
     [labels] on MDN}."]

  val select : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select} \
     [select] on MDN}."]

  val selection_start : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionStart} \
     [selectionStart] on MDN}."]

  val set_selection_start : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionStart} \
     [selectionStart] on MDN}."]

  val selection_end : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionEnd} \
     [selectionEnd] on MDN}."]

  val set_selection_end : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionEnd} \
     [selectionEnd] on MDN}."]

  val selection_direction : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionDirection} \
     [selectionDirection] on MDN}."]

  val set_selection_direction : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionDirection} \
     [selectionDirection] on MDN}."]

  val set_range_text : replacement:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText} \
     [setRangeText] on MDN}."]

  val set_range_text :
    replacement:string ->
    start:int ->
    end':int ->
    ?selection_mode:Selection_mode.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText} \
     [setRangeText] on MDN}."]

  val set_selection_range :
    start:int -> end':int -> ?direction:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange} \
     [setSelectionRange] on MDN}."]

  val select_files : path:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectFiles} \
     [selectFiles] on MDN}."]
end = struct
  type t = [ `Html_input_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_input_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement} \
     [HTMLInputElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLInputElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let accept this = Js.Any.to_string (Js.Ffi.get this "accept")
  let set_accept this x = Js.Ffi.set this "accept" (Js.Any.of_string x)
  let alt this = Js.Any.to_string (Js.Ffi.get this "alt")
  let set_alt this x = Js.Ffi.set this "alt" (Js.Any.of_string x)
  let default_checked this = Js.Any.to_bool (Js.Ffi.get this "defaultChecked")

  let set_default_checked this x =
    Js.Ffi.set this "defaultChecked" (Js.Any.of_bool x)

  let checked this = Js.Any.to_bool (Js.Ffi.get this "checked")
  let set_checked this x = Js.Ffi.set this "checked" (Js.Any.of_bool x)
  let dir_name this = Js.Any.to_string (Js.Ffi.get this "dirName")
  let set_dir_name this x = Js.Ffi.set this "dirName" (Js.Any.of_string x)
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let files this =
    (Js.Any.nullable_to_option File_list.of_any) (Js.Ffi.get this "files")

  let set_files this x =
    Js.Ffi.set this "files" ((Js.Any.nullable_of_option File_list.to_any) x)

  let form_action this = Js.Any.to_string (Js.Ffi.get this "formAction")
  let set_form_action this x = Js.Ffi.set this "formAction" (Js.Any.of_string x)
  let form_enctype this = Js.Any.to_string (Js.Ffi.get this "formEnctype")

  let set_form_enctype this x =
    Js.Ffi.set this "formEnctype" (Js.Any.of_string x)

  let form_method this = Js.Any.to_string (Js.Ffi.get this "formMethod")
  let set_form_method this x = Js.Ffi.set this "formMethod" (Js.Any.of_string x)
  let form_no_validate this = Js.Any.to_bool (Js.Ffi.get this "formNoValidate")

  let set_form_no_validate this x =
    Js.Ffi.set this "formNoValidate" (Js.Any.of_bool x)

  let form_target this = Js.Any.to_string (Js.Ffi.get this "formTarget")
  let set_form_target this x = Js.Ffi.set this "formTarget" (Js.Any.of_string x)
  let indeterminate this = Js.Any.to_bool (Js.Ffi.get this "indeterminate")

  let set_indeterminate this x =
    Js.Ffi.set this "indeterminate" (Js.Any.of_bool x)

  let list this =
    (Js.Any.nullable_to_option Html_data_list_element.of_any)
      (Js.Ffi.get this "list")

  let max this = Js.Any.to_string (Js.Ffi.get this "max")
  let set_max this x = Js.Ffi.set this "max" (Js.Any.of_string x)
  let max_length this = Js.Any.to_int (Js.Ffi.get this "maxLength")
  let set_max_length this x = Js.Ffi.set this "maxLength" (Js.Any.of_int x)
  let min this = Js.Any.to_string (Js.Ffi.get this "min")
  let set_min this x = Js.Ffi.set this "min" (Js.Any.of_string x)
  let min_length this = Js.Any.to_int (Js.Ffi.get this "minLength")
  let set_min_length this x = Js.Ffi.set this "minLength" (Js.Any.of_int x)
  let multiple this = Js.Any.to_bool (Js.Ffi.get this "multiple")
  let set_multiple this x = Js.Ffi.set this "multiple" (Js.Any.of_bool x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let pattern this = Js.Any.to_string (Js.Ffi.get this "pattern")
  let set_pattern this x = Js.Ffi.set this "pattern" (Js.Any.of_string x)
  let placeholder this = Js.Any.to_string (Js.Ffi.get this "placeholder")
  let set_placeholder this x = Js.Ffi.set this "placeholder" (Js.Any.of_string x)
  let read_only this = Js.Any.to_bool (Js.Ffi.get this "readOnly")
  let set_read_only this x = Js.Ffi.set this "readOnly" (Js.Any.of_bool x)
  let required this = Js.Any.to_bool (Js.Ffi.get this "required")
  let set_required this x = Js.Ffi.set this "required" (Js.Any.of_bool x)
  let size this = Js.Any.to_int (Js.Ffi.get this "size")
  let set_size this x = Js.Ffi.set this "size" (Js.Any.of_int x)
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let step this = Js.Any.to_string (Js.Ffi.get this "step")
  let set_step this x = Js.Ffi.set this "step" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)
  let default_value this = Js.Any.to_string (Js.Ffi.get this "defaultValue")

  let set_default_value this x =
    Js.Ffi.set this "defaultValue" (Js.Any.of_string x)

  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)

  let value_as_date this =
    (Js.Any.nullable_to_option Js.object_todo) (Js.Ffi.get this "valueAsDate")

  let set_value_as_date this x =
    Js.Ffi.set this "valueAsDate" ((Js.Any.nullable_of_option Js.object_todo) x)

  let value_as_number this = Js.Any.to_float (Js.Ffi.get this "valueAsNumber")

  let set_value_as_number this x =
    Js.Ffi.set this "valueAsNumber" (Js.Any.of_float x)

  let step_up ?n this =
    let n = (Js.Any.undefined_of_option Js.Any.of_int) n in
    Js.to_unit (Js.Ffi.meth_call this "stepUp" [| n |])

  let step_down ?n this =
    let n = (Js.Any.undefined_of_option Js.Any.of_int) n in
    Js.to_unit (Js.Ffi.meth_call this "stepDown" [| n |])

  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])

  let labels this =
    (Js.Any.nullable_to_option Node_list.of_any) (Js.Ffi.get this "labels")

  let select this = Js.to_unit (Js.Ffi.meth_call this "select" [||])

  let selection_start this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "selectionStart")

  let set_selection_start this x =
    Js.Ffi.set this "selectionStart"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let selection_end this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "selectionEnd")

  let set_selection_end this x =
    Js.Ffi.set this "selectionEnd" ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let selection_direction this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "selectionDirection")

  let set_selection_direction this x =
    Js.Ffi.set this "selectionDirection"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let set_range_text ~replacement this =
    let replacement = Js.Any.of_string replacement in
    Js.to_unit (Js.Ffi.meth_call this "setRangeText" [| replacement |])

  let set_range_text ~replacement ~start ~end' ?selection_mode this =
    let replacement = Js.Any.of_string replacement in
    let start = Js.Any.of_int start in
    let end' = Js.Any.of_int end' in
    let selection_mode =
      (Js.Any.undefined_of_option Selection_mode.to_any) selection_mode
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setRangeText"
         [| replacement; start; end'; selection_mode |]
      )

  let set_selection_range ~start ~end' ?direction this =
    let start = Js.Any.of_int start in
    let end' = Js.Any.of_int end' in
    let direction = (Js.Any.undefined_of_option Js.Any.of_string) direction in
    Js.to_unit
      (Js.Ffi.meth_call this "setSelectionRange" [| start; end'; direction |])

  let select_files ~path this =
    let path = (Js.Any.of_array Js.Any.of_string) path in
    Js.to_unit (Js.Ffi.meth_call this "selectFiles" [| path |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement} \
   [HTMLInputElement] on MDN}."]

and Htmlli_element : sig
  type t = [ `Htmlli_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement} \
     [HTMLLIElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlli_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement} \
     [HTMLLIElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val value : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement/value} \
     [value] on MDN}."]

  val set_value : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement/value} \
     [value] on MDN}."]
end = struct
  type t = [ `Htmlli_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlli_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement} \
     [HTMLLIElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLLIElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let value this = Js.Any.to_int (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_int x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement} \
   [HTMLLIElement] on MDN}."]

and Html_label_element : sig
  type t = [ `Html_label_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement} \
     [HTMLLabelElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_label_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement} \
     [HTMLLabelElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/form} \
     [form] on MDN}."]

  val html_for : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor} \
     [htmlFor] on MDN}."]

  val set_html_for : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor} \
     [htmlFor] on MDN}."]

  val control : t -> 'a Html_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control} \
     [control] on MDN}."]
end = struct
  type t = [ `Html_label_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_label_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement} \
     [HTMLLabelElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLLabelElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let html_for this = Js.Any.to_string (Js.Ffi.get this "htmlFor")
  let set_html_for this x = Js.Ffi.set this "htmlFor" (Js.Any.of_string x)

  let control this =
    (Js.Any.nullable_to_option Html_element.of_any) (Js.Ffi.get this "control")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement} \
   [HTMLLabelElement] on MDN}."]

and Html_legend_element : sig
  type t = [ `Html_legend_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement} \
     [HTMLLegendElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_legend_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement} \
     [HTMLLegendElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement/form} \
     [form] on MDN}."]
end = struct
  type t = [ `Html_legend_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_legend_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement} \
     [HTMLLegendElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLLegendElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement} \
   [HTMLLegendElement] on MDN}."]

and Html_link_element : sig
  type t = [ `Html_link_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement} \
     [HTMLLinkElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_link_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement} \
     [HTMLLinkElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val href : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/href} \
     [href] on MDN}."]

  val set_href : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/href} \
     [href] on MDN}."]

  val cross_origin : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val set_cross_origin : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val rel : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel} \
     [rel] on MDN}."]

  val set_rel : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel} \
     [rel] on MDN}."]

  val rel_list : t -> Dom_token_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList} \
     [relList] on MDN}."]

  val media : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/media} \
     [media] on MDN}."]

  val set_media : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/media} \
     [media] on MDN}."]

  val hreflang : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/hreflang} \
     [hreflang] on MDN}."]

  val set_hreflang : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/hreflang} \
     [hreflang] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/type} \
     [type] on MDN}."]

  val integrity : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/integrity} \
     [integrity] on MDN}."]

  val set_integrity : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/integrity} \
     [integrity] on MDN}."]

  val referrer_policy : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val set_referrer_policy : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val charset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/charset} \
     [charset] on MDN}."]

  val set_charset : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/charset} \
     [charset] on MDN}."]

  val rev : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rev} \
     [rev] on MDN}."]

  val set_rev : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rev} \
     [rev] on MDN}."]

  val target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/target} \
     [target] on MDN}."]

  val set_target : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/target} \
     [target] on MDN}."]
end = struct
  type t = [ `Html_link_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_link_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement} \
     [HTMLLinkElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLLinkElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let set_href this x = Js.Ffi.set this "href" (Js.Any.of_string x)

  let cross_origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "crossOrigin")

  let set_cross_origin this x =
    Js.Ffi.set this "crossOrigin"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let rel this = Js.Any.to_string (Js.Ffi.get this "rel")
  let set_rel this x = Js.Ffi.set this "rel" (Js.Any.of_string x)
  let rel_list this = Dom_token_list.of_any (Js.Ffi.get this "relList")
  let media this = Js.Any.to_string (Js.Ffi.get this "media")
  let set_media this x = Js.Ffi.set this "media" (Js.Any.of_string x)
  let hreflang this = Js.Any.to_string (Js.Ffi.get this "hreflang")
  let set_hreflang this x = Js.Ffi.set this "hreflang" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)
  let integrity this = Js.Any.to_string (Js.Ffi.get this "integrity")
  let set_integrity this x = Js.Ffi.set this "integrity" (Js.Any.of_string x)
  let referrer_policy this = Js.Any.to_string (Js.Ffi.get this "referrerPolicy")

  let set_referrer_policy this x =
    Js.Ffi.set this "referrerPolicy" (Js.Any.of_string x)

  let charset this = Js.Any.to_string (Js.Ffi.get this "charset")
  let set_charset this x = Js.Ffi.set this "charset" (Js.Any.of_string x)
  let rev this = Js.Any.to_string (Js.Ffi.get this "rev")
  let set_rev this x = Js.Ffi.set this "rev" (Js.Any.of_string x)
  let target this = Js.Any.to_string (Js.Ffi.get this "target")
  let set_target this x = Js.Ffi.set this "target" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement} \
   [HTMLLinkElement] on MDN}."]

and Html_map_element : sig
  type t = [ `Html_map_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement} \
     [HTMLMapElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_map_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement} \
     [HTMLMapElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_map_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_map_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement} \
     [HTMLMapElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLMapElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement} \
   [HTMLMapElement] on MDN}."]

and Can_play_type_result : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val maybe : t
  val probably : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let maybe = Js.of_string "maybe"
  let probably = Js.of_string "probably"
end

and Media_provider : sig
  type t

  val with_media_stream : Media_stream.t -> t
  val with_blob : Blob.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_media_stream = Js.repr
  let with_blob = Js.repr
end

and Html_media_element : sig
  type t = [ `Html_media_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} \
     [HTMLMediaElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_media_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} \
     [HTMLMediaElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val error : t -> Media_error.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error} \
     [error] on MDN}."]

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src} \
     [src] on MDN}."]

  val src_object : t -> Media_provider.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject} \
     [srcObject] on MDN}."]

  val set_src_object : t -> Media_provider.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject} \
     [srcObject] on MDN}."]

  val current_src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc} \
     [currentSrc] on MDN}."]

  val cross_origin : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val set_cross_origin : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val network_empty : int
  val network_idle : int
  val network_loading : int
  val network_no_source : int

  val network_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState} \
     [networkState] on MDN}."]

  val preload : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload} \
     [preload] on MDN}."]

  val set_preload : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload} \
     [preload] on MDN}."]

  val buffered : t -> Time_ranges.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered} \
     [buffered] on MDN}."]

  val load : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load} \
     [load] on MDN}."]

  val can_play_type : type':string -> t -> Can_play_type_result.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType} \
     [canPlayType] on MDN}."]

  val have_nothing : int
  val have_metadata : int
  val have_current_data : int
  val have_future_data : int
  val have_enough_data : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState} \
     [readyState] on MDN}."]

  val seeking : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking} \
     [seeking] on MDN}."]

  val current_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime} \
     [currentTime] on MDN}."]

  val set_current_time : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime} \
     [currentTime] on MDN}."]

  val fast_seek : time:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek} \
     [fastSeek] on MDN}."]

  val duration : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration} \
     [duration] on MDN}."]

  val paused : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused} \
     [paused] on MDN}."]

  val default_playback_rate : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate} \
     [defaultPlaybackRate] on MDN}."]

  val set_default_playback_rate : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate} \
     [defaultPlaybackRate] on MDN}."]

  val playback_rate : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate} \
     [playbackRate] on MDN}."]

  val set_playback_rate : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate} \
     [playbackRate] on MDN}."]

  val played : t -> Time_ranges.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/played} \
     [played] on MDN}."]

  val ended : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended} \
     [ended] on MDN}."]

  val autoplay : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay} \
     [autoplay] on MDN}."]

  val set_autoplay : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay} \
     [autoplay] on MDN}."]

  val loop : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop} \
     [loop] on MDN}."]

  val set_loop : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop} \
     [loop] on MDN}."]

  val play : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play} \
     [play] on MDN}."]

  val pause : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause} \
     [pause] on MDN}."]

  val controls : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls} \
     [controls] on MDN}."]

  val set_controls : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls} \
     [controls] on MDN}."]

  val volume : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume} \
     [volume] on MDN}."]

  val set_volume : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume} \
     [volume] on MDN}."]

  val muted : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted} \
     [muted] on MDN}."]

  val set_muted : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted} \
     [muted] on MDN}."]

  val default_muted : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted} \
     [defaultMuted] on MDN}."]

  val set_default_muted : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted} \
     [defaultMuted] on MDN}."]

  val audio_tracks : t -> 'a Audio_track_list.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks} \
     [audioTracks] on MDN}."]

  val video_tracks : t -> 'a Video_track_list.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks} \
     [videoTracks] on MDN}."]

  val text_tracks : t -> 'a Text_track_list.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks} \
     [textTracks] on MDN}."]

  val add_text_track :
    kind:Text_track_kind.t ->
    ?label:string ->
    ?language:string ->
    t ->
    'a Text_track.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/addTextTrack} \
     [addTextTrack] on MDN}."]
end = struct
  type t = [ `Html_media_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_media_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} \
     [HTMLMediaElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLMediaElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this

  let error this =
    (Js.Any.nullable_to_option Media_error.of_any) (Js.Ffi.get this "error")

  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)

  let src_object this =
    (Js.Any.nullable_to_option Media_provider.of_any)
      (Js.Ffi.get this "srcObject")

  let set_src_object this x =
    Js.Ffi.set this "srcObject"
      ((Js.Any.nullable_of_option Media_provider.to_any) x)

  let current_src this = Js.Any.to_string (Js.Ffi.get this "currentSrc")

  let cross_origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "crossOrigin")

  let set_cross_origin this x =
    Js.Ffi.set this "crossOrigin"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let network_empty = 0
  let network_idle = 1
  let network_loading = 2
  let network_no_source = 3
  let network_state this = Js.Any.to_int (Js.Ffi.get this "networkState")
  let preload this = Js.Any.to_string (Js.Ffi.get this "preload")
  let set_preload this x = Js.Ffi.set this "preload" (Js.Any.of_string x)
  let buffered this = Time_ranges.of_any (Js.Ffi.get this "buffered")
  let load this = Js.to_unit (Js.Ffi.meth_call this "load" [||])

  let can_play_type ~type' this =
    let type' = Js.Any.of_string type' in
    Can_play_type_result.of_any (Js.Ffi.meth_call this "canPlayType" [| type' |])

  let have_nothing = 0
  let have_metadata = 1
  let have_current_data = 2
  let have_future_data = 3
  let have_enough_data = 4
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")
  let seeking this = Js.Any.to_bool (Js.Ffi.get this "seeking")
  let current_time this = Js.Any.to_float (Js.Ffi.get this "currentTime")
  let set_current_time this x = Js.Ffi.set this "currentTime" (Js.Any.of_float x)

  let fast_seek ~time this =
    let time = Js.Any.of_float time in
    Js.to_unit (Js.Ffi.meth_call this "fastSeek" [| time |])

  let duration this = Js.Any.to_float (Js.Ffi.get this "duration")
  let paused this = Js.Any.to_bool (Js.Ffi.get this "paused")

  let default_playback_rate this =
    Js.Any.to_float (Js.Ffi.get this "defaultPlaybackRate")

  let set_default_playback_rate this x =
    Js.Ffi.set this "defaultPlaybackRate" (Js.Any.of_float x)

  let playback_rate this = Js.Any.to_float (Js.Ffi.get this "playbackRate")

  let set_playback_rate this x =
    Js.Ffi.set this "playbackRate" (Js.Any.of_float x)

  let played this = Time_ranges.of_any (Js.Ffi.get this "played")
  let ended this = Js.Any.to_bool (Js.Ffi.get this "ended")
  let autoplay this = Js.Any.to_bool (Js.Ffi.get this "autoplay")
  let set_autoplay this x = Js.Ffi.set this "autoplay" (Js.Any.of_bool x)
  let loop this = Js.Any.to_bool (Js.Ffi.get this "loop")
  let set_loop this x = Js.Ffi.set this "loop" (Js.Any.of_bool x)
  let play this = (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "play" [||])
  let pause this = Js.to_unit (Js.Ffi.meth_call this "pause" [||])
  let controls this = Js.Any.to_bool (Js.Ffi.get this "controls")
  let set_controls this x = Js.Ffi.set this "controls" (Js.Any.of_bool x)
  let volume this = Js.Any.to_float (Js.Ffi.get this "volume")
  let set_volume this x = Js.Ffi.set this "volume" (Js.Any.of_float x)
  let muted this = Js.Any.to_bool (Js.Ffi.get this "muted")
  let set_muted this x = Js.Ffi.set this "muted" (Js.Any.of_bool x)
  let default_muted this = Js.Any.to_bool (Js.Ffi.get this "defaultMuted")

  let set_default_muted this x =
    Js.Ffi.set this "defaultMuted" (Js.Any.of_bool x)

  let audio_tracks this = Audio_track_list.of_any (Js.Ffi.get this "audioTracks")
  let video_tracks this = Video_track_list.of_any (Js.Ffi.get this "videoTracks")
  let text_tracks this = Text_track_list.of_any (Js.Ffi.get this "textTracks")

  let add_text_track ~kind ?label ?language this =
    let kind = Text_track_kind.to_any kind in
    let label = (Js.Any.undefined_of_option Js.Any.of_string) label in
    let language = (Js.Any.undefined_of_option Js.Any.of_string) language in
    Text_track.of_any
      (Js.Ffi.meth_call this "addTextTrack" [| kind; label; language |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} \
   [HTMLMediaElement] on MDN}."]

and Html_menu_element : sig
  type t = [ `Html_menu_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement} \
     [HTMLMenuElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_menu_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement} \
     [HTMLMenuElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val compact : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement/compact} \
     [compact] on MDN}."]

  val set_compact : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement/compact} \
     [compact] on MDN}."]
end = struct
  type t = [ `Html_menu_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_menu_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement} \
     [HTMLMenuElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLMenuElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let compact this = Js.Any.to_bool (Js.Ffi.get this "compact")
  let set_compact this x = Js.Ffi.set this "compact" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement} \
   [HTMLMenuElement] on MDN}."]

and Html_meta_element : sig
  type t = [ `Html_meta_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement} \
     [HTMLMetaElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_meta_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement} \
     [HTMLMetaElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/name} \
     [name] on MDN}."]

  val http_equiv : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/httpEquiv} \
     [httpEquiv] on MDN}."]

  val set_http_equiv : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/httpEquiv} \
     [httpEquiv] on MDN}."]

  val content : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/content} \
     [content] on MDN}."]

  val set_content : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement/content} \
     [content] on MDN}."]
end = struct
  type t = [ `Html_meta_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_meta_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement} \
     [HTMLMetaElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLMetaElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let http_equiv this = Js.Any.to_string (Js.Ffi.get this "httpEquiv")
  let set_http_equiv this x = Js.Ffi.set this "httpEquiv" (Js.Any.of_string x)
  let content this = Js.Any.to_string (Js.Ffi.get this "content")
  let set_content this x = Js.Ffi.set this "content" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement} \
   [HTMLMetaElement] on MDN}."]

and Html_meter_element : sig
  type t = [ `Html_meter_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement} \
     [HTMLMeterElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_meter_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement} \
     [HTMLMeterElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Html_meter_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_meter_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement} \
     [HTMLMeterElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLMeterElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement} \
   [HTMLMeterElement] on MDN}."]

and Html_mod_element : sig
  type t = [ `Html_mod_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement} \
     [HTMLModElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_mod_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement} \
     [HTMLModElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_mod_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_mod_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement} \
     [HTMLModElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLModElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement} \
   [HTMLModElement] on MDN}."]

and Htmlo_list_element : sig
  type t = [ `Htmlo_list_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement} \
     [HTMLOListElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlo_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement} \
     [HTMLOListElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Htmlo_list_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlo_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement} \
     [HTMLOListElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLOListElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement} \
   [HTMLOListElement] on MDN}."]

and Html_object_element : sig
  type t = [ `Html_object_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement} \
     [HTMLObjectElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_object_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement} \
     [HTMLObjectElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type} \
     [type] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/form} \
     [form] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]
end = struct
  type t = [ `Html_object_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_object_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement} \
     [HTMLObjectElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLObjectElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement} \
   [HTMLObjectElement] on MDN}."]

and Html_opt_group_element : sig
  type t = [ `Html_opt_group_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement} \
     [HTMLOptGroupElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_opt_group_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement} \
     [HTMLOptGroupElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement/disabled} \
     [disabled] on MDN}."]
end = struct
  type t = [ `Html_opt_group_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_opt_group_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement} \
     [HTMLOptGroupElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLOptGroupElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement} \
   [HTMLOptGroupElement] on MDN}."]

and Html_option_element : sig
  type t = [ `Html_option_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement} \
     [HTMLOptionElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_option_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement} \
     [HTMLOptionElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/form} \
     [form] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/label} \
     [label] on MDN}."]

  val set_label : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/label} \
     [label] on MDN}."]

  val default_selected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/defaultSelected} \
     [defaultSelected] on MDN}."]

  val set_default_selected : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/defaultSelected} \
     [defaultSelected] on MDN}."]

  val selected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/selected} \
     [selected] on MDN}."]

  val set_selected : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/selected} \
     [selected] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/value} \
     [value] on MDN}."]

  val text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/text} \
     [text] on MDN}."]

  val index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/index} \
     [index] on MDN}."]
end = struct
  type t = [ `Html_option_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_option_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement} \
     [HTMLOptionElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLOptionElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let set_label this x = Js.Ffi.set this "label" (Js.Any.of_string x)
  let default_selected this = Js.Any.to_bool (Js.Ffi.get this "defaultSelected")

  let set_default_selected this x =
    Js.Ffi.set this "defaultSelected" (Js.Any.of_bool x)

  let selected this = Js.Any.to_bool (Js.Ffi.get this "selected")
  let set_selected this x = Js.Ffi.set this "selected" (Js.Any.of_bool x)
  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)
  let index this = Js.Any.to_int (Js.Ffi.get this "index")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement} \
   [HTMLOptionElement] on MDN}."]

and Html_options_collection : sig
  type t = [ `Html_options_collection ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection} \
     [HTMLOptionsCollection]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_options_collection | `Html_collection ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection} \
     [HTMLOptionsCollection]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/length} \
     [length] on MDN}."]

  val set_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/length} \
     [length] on MDN}."]

  val set : index:int -> option:Html_option_element.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/set} \
     [set] on MDN}."]

  val add :
    element:[< `Html_option_element | `Html_opt_group_element ] Js.t ->
    ?before:[< `Html_element | `Long ] Js.nullable ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/add} \
     [add] on MDN}."]

  val remove : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/remove} \
     [remove] on MDN}."]

  val selected_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/selectedIndex} \
     [selectedIndex] on MDN}."]

  val set_selected_index : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection/selectedIndex} \
     [selectedIndex] on MDN}."]
end = struct
  type t = [ `Html_options_collection ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Html_options_collection | `Html_collection ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection} \
     [HTMLOptionsCollection]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "HTMLOptionsCollection"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_collection this = Js.Ffi.magic this
  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let set_length this x = Js.Ffi.set this "length" (Js.Any.of_int x)

  let set ~index ~option this =
    let index = Js.Any.of_int index in
    let option =
      (Js.Any.nullable_of_option Html_option_element.to_any) option
    in
    Js.to_unit (Js.Ffi.meth_call this "set" [| index; option |])

  let add ~element ?before this =
    let element = Js.to_any element in
    let before = (Js.Any.undefined_of_option Js.to_any) before in
    Js.to_unit (Js.Ffi.meth_call this "add" [| element; before |])

  let remove ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "remove" [| index |])

  let selected_index this = Js.Any.to_int (Js.Ffi.get this "selectedIndex")

  let set_selected_index this x =
    Js.Ffi.set this "selectedIndex" (Js.Any.of_int x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection} \
   [HTMLOptionsCollection] on MDN}."]

and Html_output_element : sig
  type t = [ `Html_output_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement} \
     [HTMLOutputElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_output_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement} \
     [HTMLOutputElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/form} \
     [form] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/name} \
     [name] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/type} \
     [type] on MDN}."]

  val default_value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/defaultValue} \
     [defaultValue] on MDN}."]

  val set_default_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/defaultValue} \
     [defaultValue] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/value} \
     [value] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Html_output_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_output_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement} \
     [HTMLOutputElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLOutputElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let default_value this = Js.Any.to_string (Js.Ffi.get this "defaultValue")

  let set_default_value this x =
    Js.Ffi.set this "defaultValue" (Js.Any.of_string x)

  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])

  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement} \
   [HTMLOutputElement] on MDN}."]

and Html_paragraph_element : sig
  type t = [ `Html_paragraph_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement} \
     [HTMLParagraphElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_paragraph_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement} \
     [HTMLParagraphElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_paragraph_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_paragraph_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement} \
     [HTMLParagraphElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLParagraphElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement} \
   [HTMLParagraphElement] on MDN}."]

and Html_param_element : sig
  type t = [ `Html_param_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement} \
     [HTMLParamElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_param_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement} \
     [HTMLParamElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_param_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_param_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement} \
     [HTMLParamElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLParamElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement} \
   [HTMLParamElement] on MDN}."]

and Html_picture_element : sig
  type t = [ `Html_picture_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement} \
     [HTMLPictureElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_picture_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement} \
     [HTMLPictureElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_picture_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_picture_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement} \
     [HTMLPictureElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLPictureElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement} \
   [HTMLPictureElement] on MDN}."]

and Html_pre_element : sig
  type t = [ `Html_pre_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement} \
     [HTMLPreElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_pre_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement} \
     [HTMLPreElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement/width} \
     [width] on MDN}."]

  val set_width : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement/width} \
     [width] on MDN}."]
end = struct
  type t = [ `Html_pre_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_pre_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement} \
     [HTMLPreElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLPreElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_int x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement} \
   [HTMLPreElement] on MDN}."]

and Html_progress_element : sig
  type t = [ `Html_progress_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement} \
     [HTMLProgressElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_progress_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement} \
     [HTMLProgressElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val value : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/value} \
     [value] on MDN}."]

  val set_value : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/value} \
     [value] on MDN}."]

  val max : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/max} \
     [max] on MDN}."]

  val set_max : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/max} \
     [max] on MDN}."]

  val position : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/position} \
     [position] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Html_progress_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_progress_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement} \
     [HTMLProgressElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLProgressElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let value this = Js.Any.to_float (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_float x)
  let max this = Js.Any.to_float (Js.Ffi.get this "max")
  let set_max this x = Js.Ffi.set this "max" (Js.Any.of_float x)
  let position this = Js.Any.to_float (Js.Ffi.get this "position")
  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement} \
   [HTMLProgressElement] on MDN}."]

and Html_quote_element : sig
  type t = [ `Html_quote_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement} \
     [HTMLQuoteElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_quote_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement} \
     [HTMLQuoteElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_quote_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_quote_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement} \
     [HTMLQuoteElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLQuoteElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement} \
   [HTMLQuoteElement] on MDN}."]

and Html_script_element : sig
  type t = [ `Html_script_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement} \
     [HTMLScriptElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_script_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement} \
     [HTMLScriptElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/src} \
     [src] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/type} \
     [type] on MDN}."]

  val no_module : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/noModule} \
     [noModule] on MDN}."]

  val set_no_module : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/noModule} \
     [noModule] on MDN}."]

  val charset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/charset} \
     [charset] on MDN}."]

  val set_charset : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/charset} \
     [charset] on MDN}."]

  val async : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/async} \
     [async] on MDN}."]

  val set_async : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/async} \
     [async] on MDN}."]

  val defer : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/defer} \
     [defer] on MDN}."]

  val set_defer : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/defer} \
     [defer] on MDN}."]

  val cross_origin : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val set_cross_origin : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/crossOrigin} \
     [crossOrigin] on MDN}."]

  val text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/text} \
     [text] on MDN}."]

  val integrity : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/integrity} \
     [integrity] on MDN}."]

  val set_integrity : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/integrity} \
     [integrity] on MDN}."]

  val referrer_policy : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val set_referrer_policy : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val event : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/event} \
     [event] on MDN}."]

  val set_event : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/event} \
     [event] on MDN}."]

  val html_for : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/htmlFor} \
     [htmlFor] on MDN}."]

  val set_html_for : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/htmlFor} \
     [htmlFor] on MDN}."]
end = struct
  type t = [ `Html_script_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_script_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement} \
     [HTMLScriptElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLScriptElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)
  let no_module this = Js.Any.to_bool (Js.Ffi.get this "noModule")
  let set_no_module this x = Js.Ffi.set this "noModule" (Js.Any.of_bool x)
  let charset this = Js.Any.to_string (Js.Ffi.get this "charset")
  let set_charset this x = Js.Ffi.set this "charset" (Js.Any.of_string x)
  let async this = Js.Any.to_bool (Js.Ffi.get this "async")
  let set_async this x = Js.Ffi.set this "async" (Js.Any.of_bool x)
  let defer this = Js.Any.to_bool (Js.Ffi.get this "defer")
  let set_defer this x = Js.Ffi.set this "defer" (Js.Any.of_bool x)

  let cross_origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "crossOrigin")

  let set_cross_origin this x =
    Js.Ffi.set this "crossOrigin"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)
  let integrity this = Js.Any.to_string (Js.Ffi.get this "integrity")
  let set_integrity this x = Js.Ffi.set this "integrity" (Js.Any.of_string x)
  let referrer_policy this = Js.Any.to_string (Js.Ffi.get this "referrerPolicy")

  let set_referrer_policy this x =
    Js.Ffi.set this "referrerPolicy" (Js.Any.of_string x)

  let event this = Js.Any.to_string (Js.Ffi.get this "event")
  let set_event this x = Js.Ffi.set this "event" (Js.Any.of_string x)
  let html_for this = Js.Any.to_string (Js.Ffi.get this "htmlFor")
  let set_html_for this x = Js.Ffi.set this "htmlFor" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement} \
   [HTMLScriptElement] on MDN}."]

and Html_select_element : sig
  type t = [ `Html_select_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement} \
     [HTMLSelectElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_select_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement} \
     [HTMLSelectElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/form} \
     [form] on MDN}."]

  val multiple : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/multiple} \
     [multiple] on MDN}."]

  val set_multiple : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/multiple} \
     [multiple] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/name} \
     [name] on MDN}."]

  val required : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/required} \
     [required] on MDN}."]

  val set_required : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/required} \
     [required] on MDN}."]

  val size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/size} \
     [size] on MDN}."]

  val set_size : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/size} \
     [size] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type} \
     [type] on MDN}."]

  val options : t -> 'a Html_options_collection.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/options} \
     [options] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/length} \
     [length] on MDN}."]

  val set_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/length} \
     [length] on MDN}."]

  val item : index:int -> t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item} \
     [item] on MDN}."]

  val named_item : name:string -> t -> 'a Html_option_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem} \
     [namedItem] on MDN}."]

  val add :
    element:[< `Html_option_element | `Html_opt_group_element ] Js.t ->
    ?before:[< `Html_element | `Long ] Js.nullable ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add} \
     [add] on MDN}."]

  val remove : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove} \
     [remove] on MDN}."]

  val remove : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove} \
     [remove] on MDN}."]

  val set : index:int -> option:Html_option_element.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/set} \
     [set] on MDN}."]

  val selected_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex} \
     [selectedIndex] on MDN}."]

  val set_selected_index : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex} \
     [selectedIndex] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/value} \
     [value] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/labels} \
     [labels] on MDN}."]
end = struct
  type t = [ `Html_select_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_select_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement} \
     [HTMLSelectElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLSelectElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let multiple this = Js.Any.to_bool (Js.Ffi.get this "multiple")
  let set_multiple this x = Js.Ffi.set this "multiple" (Js.Any.of_bool x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let required this = Js.Any.to_bool (Js.Ffi.get this "required")
  let set_required this x = Js.Ffi.set this "required" (Js.Any.of_bool x)
  let size this = Js.Any.to_int (Js.Ffi.get this "size")
  let set_size this x = Js.Ffi.set this "size" (Js.Any.of_int x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let options this = Html_options_collection.of_any (Js.Ffi.get this "options")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let set_length this x = Js.Ffi.set this "length" (Js.Any.of_int x)

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Element.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let named_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Html_option_element.of_any)
      (Js.Ffi.meth_call this "namedItem" [| name |])

  let add ~element ?before this =
    let element = Js.to_any element in
    let before = (Js.Any.undefined_of_option Js.to_any) before in
    Js.to_unit (Js.Ffi.meth_call this "add" [| element; before |])

  let remove this = Js.to_unit (Js.Ffi.meth_call this "remove" [||])

  let remove ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "remove" [| index |])

  let set ~index ~option this =
    let index = Js.Any.of_int index in
    let option =
      (Js.Any.nullable_of_option Html_option_element.to_any) option
    in
    Js.to_unit (Js.Ffi.meth_call this "set" [| index; option |])

  let selected_index this = Js.Any.to_int (Js.Ffi.get this "selectedIndex")

  let set_selected_index this x =
    Js.Ffi.set this "selectedIndex" (Js.Any.of_int x)

  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])

  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement} \
   [HTMLSelectElement] on MDN}."]

and Html_source_element : sig
  type t = [ `Html_source_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement} \
     [HTMLSourceElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_source_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement} \
     [HTMLSourceElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/src} \
     [src] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/type} \
     [type] on MDN}."]

  val set_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/type} \
     [type] on MDN}."]

  val srcset : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/srcset} \
     [srcset] on MDN}."]

  val set_srcset : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/srcset} \
     [srcset] on MDN}."]

  val sizes : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/sizes} \
     [sizes] on MDN}."]

  val set_sizes : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/sizes} \
     [sizes] on MDN}."]

  val media : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/media} \
     [media] on MDN}."]

  val set_media : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement/media} \
     [media] on MDN}."]
end = struct
  type t = [ `Html_source_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_source_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement} \
     [HTMLSourceElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLSourceElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Js.Any.of_string x)
  let srcset this = Js.Any.to_string (Js.Ffi.get this "srcset")
  let set_srcset this x = Js.Ffi.set this "srcset" (Js.Any.of_string x)
  let sizes this = Js.Any.to_string (Js.Ffi.get this "sizes")
  let set_sizes this x = Js.Ffi.set this "sizes" (Js.Any.of_string x)
  let media this = Js.Any.to_string (Js.Ffi.get this "media")
  let set_media this x = Js.Ffi.set this "media" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement} \
   [HTMLSourceElement] on MDN}."]

and Html_span_element : sig
  type t = [ `Html_span_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement} \
     [HTMLSpanElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_span_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement} \
     [HTMLSpanElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_span_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_span_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement} \
     [HTMLSpanElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLSpanElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement} \
   [HTMLSpanElement] on MDN}."]

and Html_style_element : sig
  type t = [ `Html_style_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement} \
     [HTMLStyleElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_style_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement} \
     [HTMLStyleElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/disabled} \
     [disabled] on MDN}."]
end = struct
  type t = [ `Html_style_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_style_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement} \
     [HTMLStyleElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLStyleElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement} \
   [HTMLStyleElement] on MDN}."]

and Html_table_caption_element : sig
  type t = [ `Html_table_caption_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement} \
     [HTMLTableCaptionElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_caption_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement} \
     [HTMLTableCaptionElement]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Html_table_caption_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_caption_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement} \
     [HTMLTableCaptionElement]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "HTMLTableCaptionElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement} \
   [HTMLTableCaptionElement] on MDN}."]

and Html_table_cell_element : sig
  type t = [ `Html_table_cell_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement} \
     [HTMLTableCellElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_cell_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement} \
     [HTMLTableCellElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val col_span : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/colSpan} \
     [colSpan] on MDN}."]

  val set_col_span : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/colSpan} \
     [colSpan] on MDN}."]

  val row_span : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/rowSpan} \
     [rowSpan] on MDN}."]

  val set_row_span : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/rowSpan} \
     [rowSpan] on MDN}."]

  val cell_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/cellIndex} \
     [cellIndex] on MDN}."]

  val width : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/width} \
     [width] on MDN}."]

  val set_width : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/width} \
     [width] on MDN}."]

  val bg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/bgColor} \
     [bgColor] on MDN}."]

  val set_bg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement/bgColor} \
     [bgColor] on MDN}."]
end = struct
  type t = [ `Html_table_cell_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_cell_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement} \
     [HTMLTableCellElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTableCellElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let col_span this = Js.Any.to_int (Js.Ffi.get this "colSpan")
  let set_col_span this x = Js.Ffi.set this "colSpan" (Js.Any.of_int x)
  let row_span this = Js.Any.to_int (Js.Ffi.get this "rowSpan")
  let set_row_span this x = Js.Ffi.set this "rowSpan" (Js.Any.of_int x)
  let cell_index this = Js.Any.to_int (Js.Ffi.get this "cellIndex")
  let width this = Js.Any.to_string (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_string x)
  let bg_color this = Js.Any.to_string (Js.Ffi.get this "bgColor")
  let set_bg_color this x = Js.Ffi.set this "bgColor" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement} \
   [HTMLTableCellElement] on MDN}."]

and Html_table_col_element : sig
  type t = [ `Html_table_col_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement} \
     [HTMLTableColElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_col_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement} \
     [HTMLTableColElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val span : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement/span} \
     [span] on MDN}."]

  val set_span : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement/span} \
     [span] on MDN}."]
end = struct
  type t = [ `Html_table_col_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_col_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement} \
     [HTMLTableColElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTableColElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let span this = Js.Any.to_int (Js.Ffi.get this "span")
  let set_span this x = Js.Ffi.set this "span" (Js.Any.of_int x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement} \
   [HTMLTableColElement] on MDN}."]

and Html_table_element : sig
  type t = [ `Html_table_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement} \
     [HTMLTableElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement} \
     [HTMLTableElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val caption : t -> 'a Html_table_caption_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption} \
     [caption] on MDN}."]

  val set_caption : t -> Html_table_caption_element.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption} \
     [caption] on MDN}."]

  val create_caption : t -> 'a Html_table_caption_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption} \
     [createCaption] on MDN}."]

  val delete_caption : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption} \
     [deleteCaption] on MDN}."]

  val t_head : t -> 'a Html_table_section_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead} \
     [tHead] on MDN}."]

  val set_t_head : t -> Html_table_section_element.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead} \
     [tHead] on MDN}."]

  val create_t_head : t -> 'a Html_table_section_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead} \
     [createTHead] on MDN}."]

  val delete_t_head : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead} \
     [deleteTHead] on MDN}."]

  val t_foot : t -> 'a Html_table_section_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot} \
     [tFoot] on MDN}."]

  val set_t_foot : t -> Html_table_section_element.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot} \
     [tFoot] on MDN}."]

  val create_t_foot : t -> 'a Html_table_section_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot} \
     [createTFoot] on MDN}."]

  val delete_t_foot : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot} \
     [deleteTFoot] on MDN}."]

  val t_bodies : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies} \
     [tBodies] on MDN}."]

  val create_t_body : t -> 'a Html_table_section_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTBody} \
     [createTBody] on MDN}."]

  val rows : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows} \
     [rows] on MDN}."]

  val insert_row : ?index:int -> t -> 'a Html_table_row_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow} \
     [insertRow] on MDN}."]

  val delete_row : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow} \
     [deleteRow] on MDN}."]

  val width : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/width} \
     [width] on MDN}."]

  val set_width : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/width} \
     [width] on MDN}."]

  val bg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/bgColor} \
     [bgColor] on MDN}."]

  val set_bg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/bgColor} \
     [bgColor] on MDN}."]
end = struct
  type t = [ `Html_table_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement} \
     [HTMLTableElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTableElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let caption this =
    (Js.Any.nullable_to_option Html_table_caption_element.of_any)
      (Js.Ffi.get this "caption")

  let set_caption this x =
    Js.Ffi.set this "caption"
      ((Js.Any.nullable_of_option Html_table_caption_element.to_any) x)

  let create_caption this =
    Html_table_caption_element.of_any
      (Js.Ffi.meth_call this "createCaption" [||])

  let delete_caption this =
    Js.to_unit (Js.Ffi.meth_call this "deleteCaption" [||])

  let t_head this =
    (Js.Any.nullable_to_option Html_table_section_element.of_any)
      (Js.Ffi.get this "tHead")

  let set_t_head this x =
    Js.Ffi.set this "tHead"
      ((Js.Any.nullable_of_option Html_table_section_element.to_any) x)

  let create_t_head this =
    Html_table_section_element.of_any (Js.Ffi.meth_call this "createTHead" [||])

  let delete_t_head this = Js.to_unit (Js.Ffi.meth_call this "deleteTHead" [||])

  let t_foot this =
    (Js.Any.nullable_to_option Html_table_section_element.of_any)
      (Js.Ffi.get this "tFoot")

  let set_t_foot this x =
    Js.Ffi.set this "tFoot"
      ((Js.Any.nullable_of_option Html_table_section_element.to_any) x)

  let create_t_foot this =
    Html_table_section_element.of_any (Js.Ffi.meth_call this "createTFoot" [||])

  let delete_t_foot this = Js.to_unit (Js.Ffi.meth_call this "deleteTFoot" [||])
  let t_bodies this = Html_collection.of_any (Js.Ffi.get this "tBodies")

  let create_t_body this =
    Html_table_section_element.of_any (Js.Ffi.meth_call this "createTBody" [||])

  let rows this = Html_collection.of_any (Js.Ffi.get this "rows")

  let insert_row ?index this =
    let index = (Js.Any.undefined_of_option Js.Any.of_int) index in
    Html_table_row_element.of_any (Js.Ffi.meth_call this "insertRow" [| index |])

  let delete_row ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "deleteRow" [| index |])

  let width this = Js.Any.to_string (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_string x)
  let bg_color this = Js.Any.to_string (Js.Ffi.get this "bgColor")
  let set_bg_color this x = Js.Ffi.set this "bgColor" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement} \
   [HTMLTableElement] on MDN}."]

and Html_table_row_element : sig
  type t = [ `Html_table_row_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement} \
     [HTMLTableRowElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_row_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement} \
     [HTMLTableRowElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val row_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex} \
     [rowIndex] on MDN}."]

  val section_row_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/sectionRowIndex} \
     [sectionRowIndex] on MDN}."]

  val cells : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/cells} \
     [cells] on MDN}."]

  val insert_cell : ?index:int -> t -> 'a Html_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell} \
     [insertCell] on MDN}."]

  val delete_cell : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/deleteCell} \
     [deleteCell] on MDN}."]

  val bg_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/bgColor} \
     [bgColor] on MDN}."]

  val set_bg_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/bgColor} \
     [bgColor] on MDN}."]
end = struct
  type t = [ `Html_table_row_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_row_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement} \
     [HTMLTableRowElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTableRowElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let row_index this = Js.Any.to_int (Js.Ffi.get this "rowIndex")
  let section_row_index this = Js.Any.to_int (Js.Ffi.get this "sectionRowIndex")
  let cells this = Html_collection.of_any (Js.Ffi.get this "cells")

  let insert_cell ?index this =
    let index = (Js.Any.undefined_of_option Js.Any.of_int) index in
    Html_element.of_any (Js.Ffi.meth_call this "insertCell" [| index |])

  let delete_cell ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "deleteCell" [| index |])

  let bg_color this = Js.Any.to_string (Js.Ffi.get this "bgColor")
  let set_bg_color this x = Js.Ffi.set this "bgColor" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement} \
   [HTMLTableRowElement] on MDN}."]

and Html_table_section_element : sig
  type t = [ `Html_table_section_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement} \
     [HTMLTableSectionElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_section_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement} \
     [HTMLTableSectionElement]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val rows : t -> Html_collection.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement/rows} \
     [rows] on MDN}."]

  val insert_row : ?index:int -> t -> 'a Html_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement/insertRow} \
     [insertRow] on MDN}."]

  val delete_row : index:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement/deleteRow} \
     [deleteRow] on MDN}."]
end = struct
  type t = [ `Html_table_section_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_table_section_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement} \
     [HTMLTableSectionElement]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "HTMLTableSectionElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let rows this = Html_collection.of_any (Js.Ffi.get this "rows")

  let insert_row ?index this =
    let index = (Js.Any.undefined_of_option Js.Any.of_int) index in
    Html_element.of_any (Js.Ffi.meth_call this "insertRow" [| index |])

  let delete_row ~index this =
    let index = Js.Any.of_int index in
    Js.to_unit (Js.Ffi.meth_call this "deleteRow" [| index |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement} \
   [HTMLTableSectionElement] on MDN}."]

and Html_template_element : sig
  type t = [ `Html_template_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement} \
     [HTMLTemplateElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_template_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement} \
     [HTMLTemplateElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val content : t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content} \
     [content] on MDN}."]
end = struct
  type t = [ `Html_template_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_template_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement} \
     [HTMLTemplateElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTemplateElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let content this = Document_fragment.of_any (Js.Ffi.get this "content")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement} \
   [HTMLTemplateElement] on MDN}."]

and Html_text_area_element : sig
  type t = [ `Html_text_area_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement} \
     [HTMLTextAreaElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_text_area_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement} \
     [HTMLTextAreaElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val cols : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/cols} \
     [cols] on MDN}."]

  val set_cols : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/cols} \
     [cols] on MDN}."]

  val dir_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/dirName} \
     [dirName] on MDN}."]

  val set_dir_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/dirName} \
     [dirName] on MDN}."]

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/disabled} \
     [disabled] on MDN}."]

  val form : t -> 'a Html_form_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/form} \
     [form] on MDN}."]

  val max_length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/maxLength} \
     [maxLength] on MDN}."]

  val set_max_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/maxLength} \
     [maxLength] on MDN}."]

  val min_length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/minLength} \
     [minLength] on MDN}."]

  val set_min_length : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/minLength} \
     [minLength] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/name} \
     [name] on MDN}."]

  val placeholder : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/placeholder} \
     [placeholder] on MDN}."]

  val set_placeholder : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/placeholder} \
     [placeholder] on MDN}."]

  val read_only : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/readOnly} \
     [readOnly] on MDN}."]

  val set_read_only : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/readOnly} \
     [readOnly] on MDN}."]

  val required : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/required} \
     [required] on MDN}."]

  val set_required : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/required} \
     [required] on MDN}."]

  val rows : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/rows} \
     [rows] on MDN}."]

  val set_rows : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/rows} \
     [rows] on MDN}."]

  val wrap : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/wrap} \
     [wrap] on MDN}."]

  val set_wrap : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/wrap} \
     [wrap] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/type} \
     [type] on MDN}."]

  val default_value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/defaultValue} \
     [defaultValue] on MDN}."]

  val set_default_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/defaultValue} \
     [defaultValue] on MDN}."]

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/value} \
     [value] on MDN}."]

  val text_length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/textLength} \
     [textLength] on MDN}."]

  val will_validate : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/willValidate} \
     [willValidate] on MDN}."]

  val validity : t -> Validity_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/validity} \
     [validity] on MDN}."]

  val validation_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/validationMessage} \
     [validationMessage] on MDN}."]

  val check_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/checkValidity} \
     [checkValidity] on MDN}."]

  val report_validity : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/reportValidity} \
     [reportValidity] on MDN}."]

  val set_custom_validity : error:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/setCustomValidity} \
     [setCustomValidity] on MDN}."]

  val labels : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/labels} \
     [labels] on MDN}."]

  val select : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/select} \
     [select] on MDN}."]

  val selection_start : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionStart} \
     [selectionStart] on MDN}."]

  val set_selection_start : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionStart} \
     [selectionStart] on MDN}."]

  val selection_end : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionEnd} \
     [selectionEnd] on MDN}."]

  val set_selection_end : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionEnd} \
     [selectionEnd] on MDN}."]

  val selection_direction : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionDirection} \
     [selectionDirection] on MDN}."]

  val set_selection_direction : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/selectionDirection} \
     [selectionDirection] on MDN}."]

  val set_range_text : replacement:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/setRangeText} \
     [setRangeText] on MDN}."]

  val set_range_text :
    replacement:string ->
    start:int ->
    end':int ->
    ?selection_mode:Selection_mode.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/setRangeText} \
     [setRangeText] on MDN}."]

  val set_selection_range :
    start:int -> end':int -> ?direction:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/setSelectionRange} \
     [setSelectionRange] on MDN}."]
end = struct
  type t = [ `Html_text_area_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_text_area_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement} \
     [HTMLTextAreaElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTextAreaElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let cols this = Js.Any.to_int (Js.Ffi.get this "cols")
  let set_cols this x = Js.Ffi.set this "cols" (Js.Any.of_int x)
  let dir_name this = Js.Any.to_string (Js.Ffi.get this "dirName")
  let set_dir_name this x = Js.Ffi.set this "dirName" (Js.Any.of_string x)
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)

  let form this =
    (Js.Any.nullable_to_option Html_form_element.of_any) (Js.Ffi.get this "form")

  let max_length this = Js.Any.to_int (Js.Ffi.get this "maxLength")
  let set_max_length this x = Js.Ffi.set this "maxLength" (Js.Any.of_int x)
  let min_length this = Js.Any.to_int (Js.Ffi.get this "minLength")
  let set_min_length this x = Js.Ffi.set this "minLength" (Js.Any.of_int x)
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let placeholder this = Js.Any.to_string (Js.Ffi.get this "placeholder")
  let set_placeholder this x = Js.Ffi.set this "placeholder" (Js.Any.of_string x)
  let read_only this = Js.Any.to_bool (Js.Ffi.get this "readOnly")
  let set_read_only this x = Js.Ffi.set this "readOnly" (Js.Any.of_bool x)
  let required this = Js.Any.to_bool (Js.Ffi.get this "required")
  let set_required this x = Js.Ffi.set this "required" (Js.Any.of_bool x)
  let rows this = Js.Any.to_int (Js.Ffi.get this "rows")
  let set_rows this x = Js.Ffi.set this "rows" (Js.Any.of_int x)
  let wrap this = Js.Any.to_string (Js.Ffi.get this "wrap")
  let set_wrap this x = Js.Ffi.set this "wrap" (Js.Any.of_string x)
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let default_value this = Js.Any.to_string (Js.Ffi.get this "defaultValue")

  let set_default_value this x =
    Js.Ffi.set this "defaultValue" (Js.Any.of_string x)

  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
  let text_length this = Js.Any.to_int (Js.Ffi.get this "textLength")
  let will_validate this = Js.Any.to_bool (Js.Ffi.get this "willValidate")
  let validity this = Validity_state.of_any (Js.Ffi.get this "validity")

  let validation_message this =
    Js.Any.to_string (Js.Ffi.get this "validationMessage")

  let check_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "checkValidity" [||])

  let report_validity this =
    Js.Any.to_bool (Js.Ffi.meth_call this "reportValidity" [||])

  let set_custom_validity ~error this =
    let error = Js.Any.of_string error in
    Js.to_unit (Js.Ffi.meth_call this "setCustomValidity" [| error |])

  let labels this = Node_list.of_any (Js.Ffi.get this "labels")
  let select this = Js.to_unit (Js.Ffi.meth_call this "select" [||])

  let selection_start this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "selectionStart")

  let set_selection_start this x =
    Js.Ffi.set this "selectionStart"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let selection_end this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "selectionEnd")

  let set_selection_end this x =
    Js.Ffi.set this "selectionEnd" ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let selection_direction this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "selectionDirection")

  let set_selection_direction this x =
    Js.Ffi.set this "selectionDirection"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let set_range_text ~replacement this =
    let replacement = Js.Any.of_string replacement in
    Js.to_unit (Js.Ffi.meth_call this "setRangeText" [| replacement |])

  let set_range_text ~replacement ~start ~end' ?selection_mode this =
    let replacement = Js.Any.of_string replacement in
    let start = Js.Any.of_int start in
    let end' = Js.Any.of_int end' in
    let selection_mode =
      (Js.Any.undefined_of_option Selection_mode.to_any) selection_mode
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setRangeText"
         [| replacement; start; end'; selection_mode |]
      )

  let set_selection_range ~start ~end' ?direction this =
    let start = Js.Any.of_int start in
    let end' = Js.Any.of_int end' in
    let direction = (Js.Any.undefined_of_option Js.Any.of_string) direction in
    Js.to_unit
      (Js.Ffi.meth_call this "setSelectionRange" [| start; end'; direction |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement} \
   [HTMLTextAreaElement] on MDN}."]

and Html_time_element : sig
  type t = [ `Html_time_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement} \
     [HTMLTimeElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_time_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement} \
     [HTMLTimeElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val date_time : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime} \
     [dateTime] on MDN}."]

  val set_date_time : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime} \
     [dateTime] on MDN}."]
end = struct
  type t = [ `Html_time_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_time_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement} \
     [HTMLTimeElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTimeElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let date_time this = Js.Any.to_string (Js.Ffi.get this "dateTime")
  let set_date_time this x = Js.Ffi.set this "dateTime" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement} \
   [HTMLTimeElement] on MDN}."]

and Html_title_element : sig
  type t = [ `Html_title_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement} \
     [HTMLTitleElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_title_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement} \
     [HTMLTitleElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement/text} \
     [text] on MDN}."]
end = struct
  type t = [ `Html_title_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_title_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement} \
     [HTMLTitleElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTitleElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement} \
   [HTMLTitleElement] on MDN}."]

and Html_track_element : sig
  type t = [ `Html_track_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement} \
     [HTMLTrackElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_track_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement} \
     [HTMLTrackElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val kind : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/kind} \
     [kind] on MDN}."]

  val set_kind : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/kind} \
     [kind] on MDN}."]

  val src : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src} \
     [src] on MDN}."]

  val set_src : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src} \
     [src] on MDN}."]

  val srclang : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/srclang} \
     [srclang] on MDN}."]

  val set_srclang : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/srclang} \
     [srclang] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/label} \
     [label] on MDN}."]

  val set_label : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/label} \
     [label] on MDN}."]

  val default : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/default} \
     [default] on MDN}."]

  val set_default : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/default} \
     [default] on MDN}."]

  val none : int
  val loading : int
  val loaded : int
  val error : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/readyState} \
     [readyState] on MDN}."]

  val track : t -> 'a Text_track.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/track} \
     [track] on MDN}."]
end = struct
  type t = [ `Html_track_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_track_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement} \
     [HTMLTrackElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLTrackElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let kind this = Js.Any.to_string (Js.Ffi.get this "kind")
  let set_kind this x = Js.Ffi.set this "kind" (Js.Any.of_string x)
  let src this = Js.Any.to_string (Js.Ffi.get this "src")
  let set_src this x = Js.Ffi.set this "src" (Js.Any.of_string x)
  let srclang this = Js.Any.to_string (Js.Ffi.get this "srclang")
  let set_srclang this x = Js.Ffi.set this "srclang" (Js.Any.of_string x)
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let set_label this x = Js.Ffi.set this "label" (Js.Any.of_string x)
  let default this = Js.Any.to_bool (Js.Ffi.get this "default")
  let set_default this x = Js.Ffi.set this "default" (Js.Any.of_bool x)
  let none = 0
  let loading = 1
  let loaded = 2
  let error = 3
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")
  let track this = Text_track.of_any (Js.Ffi.get this "track")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement} \
   [HTMLTrackElement] on MDN}."]

and Htmlu_list_element : sig
  type t = [ `Htmlu_list_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement} \
     [HTMLUListElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlu_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement} \
     [HTMLUListElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
end = struct
  type t = [ `Htmlu_list_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Htmlu_list_element | `Html_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement} \
     [HTMLUListElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLUListElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement} \
   [HTMLUListElement] on MDN}."]

and Html_unknown_element : sig
  type t = [ `Html_unknown_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement} \
     [HTMLUnknownElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_unknown_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement} \
     [HTMLUnknownElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Html_unknown_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_unknown_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement} \
     [HTMLUnknownElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLUnknownElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_element this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement} \
   [HTMLUnknownElement] on MDN}."]

and Html_video_element : sig
  type t = [ `Html_video_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} \
     [HTMLVideoElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_video_element
      | `Html_media_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} \
     [HTMLVideoElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val video_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth} \
     [videoWidth] on MDN}."]

  val video_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight} \
     [videoHeight] on MDN}."]

  val poster : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/poster} \
     [poster] on MDN}."]

  val set_poster : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/poster} \
     [poster] on MDN}."]

  val onpostershown : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/onpostershown} \
     [onpostershown] on MDN}."]

  val set_onpostershown : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/onpostershown} \
     [onpostershown] on MDN}."]
end = struct
  type t = [ `Html_video_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Html_video_element
      | `Html_media_element
      | `Html_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} \
     [HTMLVideoElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HTMLVideoElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_html_media_element this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]
  let video_width this = Js.Any.to_int (Js.Ffi.get this "videoWidth")
  let video_height this = Js.Any.to_int (Js.Ffi.get this "videoHeight")
  let poster this = Js.Any.to_string (Js.Ffi.get this "poster")
  let set_poster this x = Js.Ffi.set this "poster" (Js.Any.of_string x)
  let onpostershown this = Event_handler.of_any (Js.Ffi.get this "onpostershown")

  let set_onpostershown this x =
    Js.Ffi.set this "onpostershown" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} \
   [HTMLVideoElement] on MDN}."]

and Hash_change_event : sig
  type t = [ `Hash_change_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent} \
     [HashChangeEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Hash_change_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent} \
     [HashChangeEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Hash_change_event_init.t ->
    unit ->
    'a super

  val old_url : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL} \
     [oldURL] on MDN}."]

  val new_url : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/newURL} \
     [newURL] on MDN}."]
end = struct
  type t = [ `Hash_change_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Hash_change_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent} \
     [HashChangeEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "HashChangeEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Hash_change_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let old_url this = Js.Any.to_string (Js.Ffi.get this "oldURL")
  let new_url this = Js.Any.to_string (Js.Ffi.get this "newURL")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent} \
   [HashChangeEvent] on MDN}."]

and Hash_change_event_init : sig
  type t [@@ocaml.doc "The type for the [HashChangeEventInit] dictionary."]

  val make : ?old_url:string -> ?new_url:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val old_url : t -> string option
  val new_url : t -> string option
end = struct
  type t = Js.any

  let make ?old_url ?new_url () =
    let old_url = (Js.Any.nullable_of_option Js.Any.of_string) old_url in
    let new_url = (Js.Any.nullable_of_option Js.Any.of_string) new_url in
    Js.Ffi.obj [| ("oldURL", old_url); ("newURL", new_url) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let old_url this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "oldURL")

  let new_url this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "newURL")
end

and Headers_init : sig
  type t

  val with_sequence : string array array -> t
  val with_record : 'todo_record -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_sequence = Js.repr
  let with_record = Js.repr
end

and Headers : sig
  type t = [ `Headers ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Headers} [Headers]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?init:Headers_init.t -> unit -> t

  val append : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers/append} \
     [append] on MDN}."]

  val delete : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete} \
     [delete] on MDN}."]

  val get : name:string -> t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers/get} \
     [get] on MDN}."]

  val get_set_cookie : t -> string array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Headers/getSetCookie} \
     [getSetCookie] on MDN}."]

  val has : name:string -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers/has} \
     [has] on MDN}."]

  val set : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers/set} \
     [set] on MDN}."]
end = struct
  type t = [ `Headers ] Js.t

  let t = Js.Ffi.constr "Headers"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?init () =
    let init = (Js.Any.undefined_of_option Headers_init.to_any) init in
    Js.Ffi.obj_new t [| init |]

  let append ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "append" [| name; value |])

  let delete ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "delete" [| name |])

  let get ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "get" [| name |])

  let get_set_cookie this =
    (Js.Any.to_array Js.Any.to_string)
      (Js.Ffi.meth_call this "getSetCookie" [||])

  let has ~name this =
    let name = Js.Any.of_string name in
    Js.Any.to_bool (Js.Ffi.meth_call this "has" [| name |])

  let set ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "set" [| name; value |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Headers} [Headers] \
   on MDN}."]

and History : sig
  type t = [ `History ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/History} [History]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History/length} \
     [length] on MDN}."]

  val state : t -> Js.any
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History/state} \
     [state] on MDN}."]

  val go : ?delta:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History/go} [go] \
     on MDN}."]

  val back : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History/back} \
     [back] on MDN}."]

  val forward : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History/forward} \
     [forward] on MDN}."]

  val push_state :
    data:Js.any -> title:string -> ?url:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/History/pushState} \
     [pushState] on MDN}."]

  val replace_state :
    data:Js.any -> title:string -> ?url:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState} \
     [replaceState] on MDN}."]
end = struct
  type t = [ `History ] Js.t

  let t = Js.Ffi.constr "History"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let state this = Js.to_any (Js.Ffi.get this "state")

  let go ?delta this =
    let delta = (Js.Any.undefined_of_option Js.Any.of_int) delta in
    Js.to_unit (Js.Ffi.meth_call this "go" [| delta |])

  let back this = Js.to_unit (Js.Ffi.meth_call this "back" [||])
  let forward this = Js.to_unit (Js.Ffi.meth_call this "forward" [||])

  let push_state ~data ~title ?url this =
    let data = Js.of_any data in
    let title = Js.Any.of_string title in
    let url =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        url
    in
    Js.to_unit (Js.Ffi.meth_call this "pushState" [| data; title; url |])

  let replace_state ~data ~title ?url this =
    let data = Js.of_any data in
    let title = Js.Any.of_string title in
    let url =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        url
    in
    Js.to_unit (Js.Ffi.meth_call this "replaceState" [| data; title; url |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/History} [History] \
   on MDN}."]

and Image_bitmap : sig
  type t = [ `Image_bitmap ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap} \
     [ImageBitmap]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height} \
     [height] on MDN}."]
end = struct
  type t = [ `Image_bitmap ] Js.t

  let t = Js.Ffi.constr "ImageBitmap"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap} \
   [ImageBitmap] on MDN}."]

and Image_bitmap_source : sig
  type t

  val with_canvas_image_source : Canvas_image_source.t -> t
  val with_blob : Blob.t -> t
  val with_image_data : Image_data.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_canvas_image_source = Js.repr
  let with_blob = Js.repr
  let with_image_data = Js.repr
end

and Image_orientation : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val flip_y : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let flip_y = Js.of_string "flipY"
end

and Premultiply_alpha : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val premultiply : t
  val default : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let premultiply = Js.of_string "premultiply"
  let default = Js.of_string "default"
end

and Color_space_conversion : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val default : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let default = Js.of_string "default"
end

and Resize_quality : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val pixelated : t
  val low : t
  val medium : t
  val high : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let pixelated = Js.of_string "pixelated"
  let low = Js.of_string "low"
  let medium = Js.of_string "medium"
  let high = Js.of_string "high"
end

and Image_bitmap_options : sig
  type t [@@ocaml.doc "The type for the [ImageBitmapOptions] dictionary."]

  val make :
    ?image_orientation:Image_orientation.t ->
    ?premultiply_alpha:Premultiply_alpha.t ->
    ?color_space_conversion:Color_space_conversion.t ->
    ?resize_width:int ->
    ?resize_height:int ->
    ?resize_quality:Resize_quality.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val image_orientation : t -> Image_orientation.t option
  val premultiply_alpha : t -> Premultiply_alpha.t option
  val color_space_conversion : t -> Color_space_conversion.t option
  val resize_width : t -> int option
  val resize_height : t -> int option
  val resize_quality : t -> Resize_quality.t option
end = struct
  type t = Js.any

  let make ?image_orientation ?premultiply_alpha ?color_space_conversion
      ?resize_width ?resize_height ?resize_quality () =
    let image_orientation =
      (Js.Any.nullable_of_option Image_orientation.to_any) image_orientation
    in
    let premultiply_alpha =
      (Js.Any.nullable_of_option Premultiply_alpha.to_any) premultiply_alpha
    in
    let color_space_conversion =
      (Js.Any.nullable_of_option Color_space_conversion.to_any)
        color_space_conversion
    in
    let resize_width = (Js.Any.nullable_of_option Js.Any.of_int) resize_width in
    let resize_height =
      (Js.Any.nullable_of_option Js.Any.of_int) resize_height
    in
    let resize_quality =
      (Js.Any.nullable_of_option Resize_quality.to_any) resize_quality
    in
    Js.Ffi.obj
      [|
        ("imageOrientation", image_orientation);
        ("premultiplyAlpha", premultiply_alpha);
        ("colorSpaceConversion", color_space_conversion);
        ("resizeWidth", resize_width);
        ("resizeHeight", resize_height);
        ("resizeQuality", resize_quality);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let image_orientation this =
    (Js.Any.nullable_to_option Image_orientation.of_any)
      (Js.Ffi.get this "imageOrientation")

  let premultiply_alpha this =
    (Js.Any.nullable_to_option Premultiply_alpha.of_any)
      (Js.Ffi.get this "premultiplyAlpha")

  let color_space_conversion this =
    (Js.Any.nullable_to_option Color_space_conversion.of_any)
      (Js.Ffi.get this "colorSpaceConversion")

  let resize_width this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "resizeWidth")

  let resize_height this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "resizeHeight")

  let resize_quality this =
    (Js.Any.nullable_to_option Resize_quality.of_any)
      (Js.Ffi.get this "resizeQuality")
end

and Input_event : sig
  type t = [ `Input_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/InputEvent} \
     [InputEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Input_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/InputEvent} \
     [InputEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Input_event_init.t -> unit -> 'a super

  val data : t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/data} \
     [data] on MDN}."]

  val is_composing : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing} \
     [isComposing] on MDN}."]
end = struct
  type t = [ `Input_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Input_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/InputEvent} \
     [InputEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "InputEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Input_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let data this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "data")

  let is_composing this = Js.Any.to_bool (Js.Ffi.get this "isComposing")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/InputEvent} \
   [InputEvent] on MDN}."]

and Input_event_init : sig
  type t [@@ocaml.doc "The type for the [InputEventInit] dictionary."]

  val make : ?data:string option -> ?is_composing:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_ui_event_init : t -> Ui_event_init.t
  val data : t -> string option option
  val is_composing : t -> bool option
end = struct
  type t = Js.any

  let make ?data ?is_composing () =
    let data =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        data
    in
    let is_composing =
      (Js.Any.nullable_of_option Js.Any.of_bool) is_composing
    in
    Js.Ffi.obj [| ("data", data); ("isComposing", is_composing) |]

  let to_ui_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let data this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "data")

  let is_composing this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isComposing")
end

and Iterable_key_or_value_result : sig
  type t [@@ocaml.doc "The type for the [IterableKeyOrValueResult] dictionary."]

  val make : ?value:Js.any -> ?done':bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val value : t -> Js.any option
  val done' : t -> bool option
end = struct
  type t = Js.any

  let make ?value ?done' () =
    let value = (Js.Any.nullable_of_option Js.of_any) value in
    let done' = (Js.Any.nullable_of_option Js.Any.of_bool) done' in
    Js.Ffi.obj [| ("value", value); ("done", done') |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let value this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "value")

  let done' this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "done")
end

and Iterable_key_and_value_result : sig
  type t
  [@@ocaml.doc "The type for the [IterableKeyAndValueResult] dictionary."]

  val make : ?value:Js.any array -> ?done':bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val value : t -> Js.any array option
  val done' : t -> bool option
end = struct
  type t = Js.any

  let make ?value ?done' () =
    let value = (Js.Any.nullable_of_option (Js.Any.of_array Js.of_any)) value in
    let done' = (Js.Any.nullable_of_option Js.Any.of_bool) done' in
    Js.Ffi.obj [| ("value", value); ("done", done') |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let value this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.to_any))
      (Js.Ffi.get this "value")

  let done' this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "done")
end

and Keyboard_event : sig
  type t = [ `Keyboard_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent} \
     [KeyboardEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Keyboard_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent} \
     [KeyboardEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_arg_and_keyboard_event_init_dict :
    type_arg:string ->
    ?keyboard_event_init_dict:Keyboard_event_init.t ->
    unit ->
    'a super

  val dom_key_location_standard : int
  val dom_key_location_left : int
  val dom_key_location_right : int
  val dom_key_location_numpad : int

  val key : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key} [key] \
     on MDN}."]

  val code : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} \
     [code] on MDN}."]

  val location : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location} \
     [location] on MDN}."]

  val ctrl_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey} \
     [ctrlKey] on MDN}."]

  val shift_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey} \
     [shiftKey] on MDN}."]

  val alt_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey} \
     [altKey] on MDN}."]

  val meta_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey} \
     [metaKey] on MDN}."]

  val repeat : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat} \
     [repeat] on MDN}."]

  val is_composing : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing} \
     [isComposing] on MDN}."]

  val get_modifier_state : key_arg:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState} \
     [getModifierState] on MDN}."]

  val char_code : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode} \
     [charCode] on MDN}."]

  val key_code : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode} \
     [keyCode] on MDN}."]

  val which : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which} \
     [which] on MDN}."]

  val init_keyboard_event :
    type_arg:string ->
    bubbles_arg:bool ->
    cancelable_arg:bool ->
    view_arg:Window.t option ->
    key_arg:string ->
    location_arg:int ->
    modifiers_list_arg:string ->
    repeat:bool ->
    locale:string ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent} \
     [initKeyboardEvent] on MDN}."]
end = struct
  type t = [ `Keyboard_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Keyboard_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent} \
     [KeyboardEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "KeyboardEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this

  let with_type_arg_and_keyboard_event_init_dict ~type_arg
      ?keyboard_event_init_dict () =
    let type_arg = Js.Any.of_string type_arg in
    let keyboard_event_init_dict =
      (Js.Any.undefined_of_option Keyboard_event_init.to_any)
        keyboard_event_init_dict
    in
    Js.Ffi.obj_new t [| type_arg; keyboard_event_init_dict |]

  let dom_key_location_standard = 0
  let dom_key_location_left = 1
  let dom_key_location_right = 2
  let dom_key_location_numpad = 3
  let key this = Js.Any.to_string (Js.Ffi.get this "key")
  let code this = Js.Any.to_string (Js.Ffi.get this "code")
  let location this = Js.Any.to_int (Js.Ffi.get this "location")
  let ctrl_key this = Js.Any.to_bool (Js.Ffi.get this "ctrlKey")
  let shift_key this = Js.Any.to_bool (Js.Ffi.get this "shiftKey")
  let alt_key this = Js.Any.to_bool (Js.Ffi.get this "altKey")
  let meta_key this = Js.Any.to_bool (Js.Ffi.get this "metaKey")
  let repeat this = Js.Any.to_bool (Js.Ffi.get this "repeat")
  let is_composing this = Js.Any.to_bool (Js.Ffi.get this "isComposing")

  let get_modifier_state ~key_arg this =
    let key_arg = Js.Any.of_string key_arg in
    Js.Any.to_bool (Js.Ffi.meth_call this "getModifierState" [| key_arg |])

  let char_code this = Js.Any.to_int (Js.Ffi.get this "charCode")
  let key_code this = Js.Any.to_int (Js.Ffi.get this "keyCode")
  let which this = Js.Any.to_int (Js.Ffi.get this "which")

  let init_keyboard_event ~type_arg ~bubbles_arg ~cancelable_arg ~view_arg
      ~key_arg ~location_arg ~modifiers_list_arg ~repeat ~locale this =
    let type_arg = Js.Any.of_string type_arg in
    let bubbles_arg = Js.Any.of_bool bubbles_arg in
    let cancelable_arg = Js.Any.of_bool cancelable_arg in
    let view_arg = (Js.Any.nullable_of_option Window.to_any) view_arg in
    let key_arg = Js.Any.of_string key_arg in
    let location_arg = Js.Any.of_int location_arg in
    let modifiers_list_arg = Js.Any.of_string modifiers_list_arg in
    let repeat = Js.Any.of_bool repeat in
    let locale = Js.Any.of_string locale in
    Js.to_unit
      (Js.Ffi.meth_call this "initKeyboardEvent"
         [|
           type_arg;
           bubbles_arg;
           cancelable_arg;
           view_arg;
           key_arg;
           location_arg;
           modifiers_list_arg;
           repeat;
           locale;
         |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent} \
   [KeyboardEvent] on MDN}."]

and Keyboard_event_init : sig
  type t [@@ocaml.doc "The type for the [KeyboardEventInit] dictionary."]

  val make :
    ?key:string ->
    ?code:string ->
    ?location:int ->
    ?repeat:bool ->
    ?is_composing:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_modifier_init : t -> Event_modifier_init.t
  val key : t -> string option
  val code : t -> string option
  val location : t -> int option
  val repeat : t -> bool option
  val is_composing : t -> bool option
end = struct
  type t = Js.any

  let make ?key ?code ?location ?repeat ?is_composing () =
    let key = (Js.Any.nullable_of_option Js.Any.of_string) key in
    let code = (Js.Any.nullable_of_option Js.Any.of_string) code in
    let location = (Js.Any.nullable_of_option Js.Any.of_int) location in
    let repeat = (Js.Any.nullable_of_option Js.Any.of_bool) repeat in
    let is_composing =
      (Js.Any.nullable_of_option Js.Any.of_bool) is_composing
    in
    Js.Ffi.obj
      [|
        ("key", key);
        ("code", code);
        ("location", location);
        ("repeat", repeat);
        ("isComposing", is_composing);
      |]

  let to_event_modifier_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let key this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "key")

  let code this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "code")

  let location this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "location")

  let repeat this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "repeat")

  let is_composing this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isComposing")
end

and Location : sig
  type t = [ `Location ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location} [Location]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val to_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/to_string} \
     [to_string] on MDN}."]

  val href : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/href} \
     [href] on MDN}."]

  val set_href : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/href} \
     [href] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/origin} \
     [origin] on MDN}."]

  val protocol : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol} \
     [protocol] on MDN}."]

  val set_protocol : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol} \
     [protocol] on MDN}."]

  val host : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/host} \
     [host] on MDN}."]

  val set_host : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/host} \
     [host] on MDN}."]

  val hostname : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname} \
     [hostname] on MDN}."]

  val set_hostname : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname} \
     [hostname] on MDN}."]

  val port : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/port} \
     [port] on MDN}."]

  val set_port : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/port} \
     [port] on MDN}."]

  val pathname : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname} \
     [pathname] on MDN}."]

  val set_pathname : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname} \
     [pathname] on MDN}."]

  val search : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/search} \
     [search] on MDN}."]

  val set_search : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/search} \
     [search] on MDN}."]

  val hash : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/hash} \
     [hash] on MDN}."]

  val set_hash : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/hash} \
     [hash] on MDN}."]

  val assign : url:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/assign} \
     [assign] on MDN}."]

  val replace : url:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Location/replace} \
     [replace] on MDN}."]

  val reload : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location/reload} \
     [reload] on MDN}."]
end = struct
  type t = [ `Location ] Js.t

  let t = Js.Ffi.constr "Location"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let set_href this x = Js.Ffi.set this "href" (Js.Any.of_string x)
  let to_string = href
  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let protocol this = Js.Any.to_string (Js.Ffi.get this "protocol")
  let set_protocol this x = Js.Ffi.set this "protocol" (Js.Any.of_string x)
  let host this = Js.Any.to_string (Js.Ffi.get this "host")
  let set_host this x = Js.Ffi.set this "host" (Js.Any.of_string x)
  let hostname this = Js.Any.to_string (Js.Ffi.get this "hostname")
  let set_hostname this x = Js.Ffi.set this "hostname" (Js.Any.of_string x)
  let port this = Js.Any.to_string (Js.Ffi.get this "port")
  let set_port this x = Js.Ffi.set this "port" (Js.Any.of_string x)
  let pathname this = Js.Any.to_string (Js.Ffi.get this "pathname")
  let set_pathname this x = Js.Ffi.set this "pathname" (Js.Any.of_string x)
  let search this = Js.Any.to_string (Js.Ffi.get this "search")
  let set_search this x = Js.Ffi.set this "search" (Js.Any.of_string x)
  let hash this = Js.Any.to_string (Js.Ffi.get this "hash")
  let set_hash this x = Js.Ffi.set this "hash" (Js.Any.of_string x)

  let assign ~url this =
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call this "assign" [| url |])

  let replace ~url this =
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call this "replace" [| url |])

  let reload this = Js.to_unit (Js.Ffi.meth_call this "reload" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Location} \
   [Location] on MDN}."]

and Media_device_info : sig
  type t = [ `Media_device_info ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo} \
     [MediaDeviceInfo]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val device_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/deviceId} \
     [deviceId] on MDN}."]

  val kind : t -> Media_device_kind.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/kind} \
     [kind] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/label} \
     [label] on MDN}."]

  val group_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/groupId} \
     [groupId] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Media_device_info ] Js.t

  let t = Js.Ffi.constr "MediaDeviceInfo"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let device_id this = Js.Any.to_string (Js.Ffi.get this "deviceId")
  let kind this = Media_device_kind.of_any (Js.Ffi.get this "kind")
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let group_id this = Js.Any.to_string (Js.Ffi.get this "groupId")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo} \
   [MediaDeviceInfo] on MDN}."]

and Media_device_kind : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val audioinput : t
  val audiooutput : t
  val videoinput : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let audioinput = Js.of_string "audioinput"
  let audiooutput = Js.of_string "audiooutput"
  let videoinput = Js.of_string "videoinput"
end

and Media_devices : sig
  type t = [ `Media_devices ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices} \
     [MediaDevices]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Media_devices | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices} \
     [MediaDevices]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val enumerate_devices : t -> Media_device_info.t array Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices} \
     [enumerateDevices] on MDN}."]

  val get_user_media :
    ?constraints:Media_stream_constraints.t -> t -> Media_stream.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia} \
     [getUserMedia] on MDN}."]
end = struct
  type t = [ `Media_devices ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Media_devices | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices} \
     [MediaDevices]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MediaDevices"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let enumerate_devices this =
    (Promise.of_any (Js.Any.to_array Media_device_info.of_any))
      (Js.Ffi.meth_call this "enumerateDevices" [||])

  let get_user_media ?constraints this =
    let constraints =
      (Js.Any.undefined_of_option Media_stream_constraints.to_any) constraints
    in
    (Promise.of_any Media_stream.of_any)
      (Js.Ffi.meth_call this "getUserMedia" [| constraints |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices} \
   [MediaDevices] on MDN}."]

and Media_stream_constraints : sig
  type t [@@ocaml.doc "The type for the [MediaStreamConstraints] dictionary."]

  val make :
    ?video:[< `Bool | `Media_track_constraints ] Js.t ->
    ?audio:[< `Bool | `Media_track_constraints ] Js.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val video : t -> [< `Bool | `Media_track_constraints ] Js.t option
  val audio : t -> [< `Bool | `Media_track_constraints ] Js.t option
end = struct
  type t = Js.any

  let make ?video ?audio () =
    let video = (Js.Any.nullable_of_option Js.to_any) video in
    let audio = (Js.Any.nullable_of_option Js.to_any) audio in
    Js.Ffi.obj [| ("video", video); ("audio", audio) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let video this =
    (Js.Any.nullable_to_option Js.of_any) (Js.Ffi.get this "video")

  let audio this =
    (Js.Any.nullable_to_option Js.of_any) (Js.Ffi.get this "audio")
end

and Double_range : sig
  type t [@@ocaml.doc "The type for the [DoubleRange] dictionary."]

  val make : ?max:float -> ?min:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val max : t -> float option
  val min : t -> float option
end = struct
  type t = Js.any

  let make ?max ?min () =
    let max = (Js.Any.nullable_of_option Js.Any.of_float) max in
    let min = (Js.Any.nullable_of_option Js.Any.of_float) min in
    Js.Ffi.obj [| ("max", max); ("min", min) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let max this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "max")

  let min this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "min")
end

and Constrain_double_range : sig
  type t [@@ocaml.doc "The type for the [ConstrainDoubleRange] dictionary."]

  val make : ?exact:float -> ?ideal:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_double_range : t -> Double_range.t
  val exact : t -> float option
  val ideal : t -> float option
end = struct
  type t = Js.any

  let make ?exact ?ideal () =
    let exact = (Js.Any.nullable_of_option Js.Any.of_float) exact in
    let ideal = (Js.Any.nullable_of_option Js.Any.of_float) ideal in
    Js.Ffi.obj [| ("exact", exact); ("ideal", ideal) |]

  let to_double_range this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let exact this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "exact")

  let ideal this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "ideal")
end

and U_long_range : sig
  type t [@@ocaml.doc "The type for the [ULongRange] dictionary."]

  val make : ?max:int -> ?min:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val max : t -> int option
  val min : t -> int option
end = struct
  type t = Js.any

  let make ?max ?min () =
    let max = (Js.Any.nullable_of_option Js.Any.of_int) max in
    let min = (Js.Any.nullable_of_option Js.Any.of_int) min in
    Js.Ffi.obj [| ("max", max); ("min", min) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let max this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "max")

  let min this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "min")
end

and Constrain_u_long_range : sig
  type t [@@ocaml.doc "The type for the [ConstrainULongRange] dictionary."]

  val make : ?exact:int -> ?ideal:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_u_long_range : t -> U_long_range.t
  val exact : t -> int option
  val ideal : t -> int option
end = struct
  type t = Js.any

  let make ?exact ?ideal () =
    let exact = (Js.Any.nullable_of_option Js.Any.of_int) exact in
    let ideal = (Js.Any.nullable_of_option Js.Any.of_int) ideal in
    Js.Ffi.obj [| ("exact", exact); ("ideal", ideal) |]

  let to_u_long_range this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let exact this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "exact")

  let ideal this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "ideal")
end

and Media_track_constraints : sig
  type t [@@ocaml.doc "The type for the [MediaTrackConstraints] dictionary."]

  val make : ?advanced:Media_track_constraint_set.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_media_track_constraint_set : t -> Media_track_constraint_set.t
  val advanced : t -> Media_track_constraint_set.t array option
end = struct
  type t = Js.any

  let make ?advanced () =
    let advanced =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Media_track_constraint_set.to_any)
      )
        advanced
    in
    Js.Ffi.obj [| ("advanced", advanced) |]

  let to_media_track_constraint_set this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let advanced this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Media_track_constraint_set.of_any)
    )
      (Js.Ffi.get this "advanced")
end

and Constrain_u_long : sig
  type t

  val with_unsigned_long : int -> t
  val with_constrain_u_long_range : Constrain_u_long_range.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_unsigned_long = Js.repr
  let with_constrain_u_long_range = Js.repr
end

and Constrain_double : sig
  type t

  val with_double : float -> t
  val with_constrain_double_range : Constrain_double_range.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_double = Js.repr
  let with_constrain_double_range = Js.repr
end

and Media_track_constraint_set : sig
  type t [@@ocaml.doc "The type for the [MediaTrackConstraintSet] dictionary."]

  val make :
    ?width:Constrain_u_long.t ->
    ?height:Constrain_u_long.t ->
    ?aspect_ratio:Constrain_double.t ->
    ?frame_rate:Constrain_double.t ->
    ?sample_rate:Constrain_u_long.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val width : t -> Constrain_u_long.t option
  val height : t -> Constrain_u_long.t option
  val aspect_ratio : t -> Constrain_double.t option
  val frame_rate : t -> Constrain_double.t option
  val sample_rate : t -> Constrain_u_long.t option
end = struct
  type t = Js.any

  let make ?width ?height ?aspect_ratio ?frame_rate ?sample_rate () =
    let width = (Js.Any.nullable_of_option Constrain_u_long.to_any) width in
    let height = (Js.Any.nullable_of_option Constrain_u_long.to_any) height in
    let aspect_ratio =
      (Js.Any.nullable_of_option Constrain_double.to_any) aspect_ratio
    in
    let frame_rate =
      (Js.Any.nullable_of_option Constrain_double.to_any) frame_rate
    in
    let sample_rate =
      (Js.Any.nullable_of_option Constrain_u_long.to_any) sample_rate
    in
    Js.Ffi.obj
      [|
        ("width", width);
        ("height", height);
        ("aspectRatio", aspect_ratio);
        ("frameRate", frame_rate);
        ("sampleRate", sample_rate);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let width this =
    (Js.Any.nullable_to_option Constrain_u_long.of_any) (Js.Ffi.get this "width")

  let height this =
    (Js.Any.nullable_to_option Constrain_u_long.of_any)
      (Js.Ffi.get this "height")

  let aspect_ratio this =
    (Js.Any.nullable_to_option Constrain_double.of_any)
      (Js.Ffi.get this "aspectRatio")

  let frame_rate this =
    (Js.Any.nullable_to_option Constrain_double.of_any)
      (Js.Ffi.get this "frameRate")

  let sample_rate this =
    (Js.Any.nullable_to_option Constrain_u_long.of_any)
      (Js.Ffi.get this "sampleRate")
end

and Media_element_audio_source_options : sig
  type t
  [@@ocaml.doc "The type for the [MediaElementAudioSourceOptions] dictionary."]

  val make : media_element:Html_media_element.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val media_element : t -> Html_media_element.t
end = struct
  type t = Js.any

  let make ~media_element () =
    let media_element = Html_media_element.to_any media_element in
    Js.Ffi.obj [| ("mediaElement", media_element) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let media_element this =
    Html_media_element.of_any (Js.Ffi.get this "mediaElement")
end

and Media_element_audio_source_node : sig
  type t = [ `Media_element_audio_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode} \
     [MediaElementAudioSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_element_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode} \
     [MediaElementAudioSourceNode]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Audio_context.t ->
    options:Media_element_audio_source_options.t ->
    unit ->
    'a super

  val media_element : t -> 'a Html_media_element.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/mediaElement} \
     [mediaElement] on MDN}."]
end = struct
  type t = [ `Media_element_audio_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_element_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode} \
     [MediaElementAudioSourceNode]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "MediaElementAudioSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ~options () =
    let context = Audio_context.to_any context in
    let options = Media_element_audio_source_options.to_any options in
    Js.Ffi.obj_new t [| context; options |]

  let media_element this =
    Html_media_element.of_any (Js.Ffi.get this "mediaElement")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode} \
   [MediaElementAudioSourceNode] on MDN}."]

and Media_error : sig
  type t = [ `Media_error ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaError} \
     [MediaError]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val media_err_aborted : int
  val media_err_network : int
  val media_err_decode : int
  val media_err_src_not_supported : int

  val code : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code} \
     [code] on MDN}."]

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message} \
     [message] on MDN}."]
end = struct
  type t = [ `Media_error ] Js.t

  let t = Js.Ffi.constr "MediaError"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let media_err_aborted = 1
  let media_err_network = 2
  let media_err_decode = 3
  let media_err_src_not_supported = 4
  let code this = Js.Any.to_int (Js.Ffi.get this "code")
  let message this = Js.Any.to_string (Js.Ffi.get this "message")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaError} \
   [MediaError] on MDN}."]

and Media_list : sig
  type t = [ `Media_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList} [MediaList]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val to_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/to_string} \
     [to_string] on MDN}."]

  val media_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/mediaText} \
     [mediaText] on MDN}."]

  val set_media_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/mediaText} \
     [mediaText] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/length} \
     [length] on MDN}."]

  val item : index:int -> t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaList/item} \
     [item] on MDN}."]

  val append_medium : medium:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/appendMedium} \
     [appendMedium] on MDN}."]

  val delete_medium : medium:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaList/deleteMedium} \
     [deleteMedium] on MDN}."]
end = struct
  type t = [ `Media_list ] Js.t

  let t = Js.Ffi.constr "MediaList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let media_text this = Js.Any.to_string (Js.Ffi.get this "mediaText")
  let set_media_text this x = Js.Ffi.set this "mediaText" (Js.Any.of_string x)
  let to_string = media_text
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "item" [| index |])

  let append_medium ~medium this =
    let medium = Js.Any.of_string medium in
    Js.to_unit (Js.Ffi.meth_call this "appendMedium" [| medium |])

  let delete_medium ~medium this =
    let medium = Js.Any.of_string medium in
    Js.to_unit (Js.Ffi.meth_call this "deleteMedium" [| medium |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaList} \
   [MediaList] on MDN}."]

and Media_image : sig
  type t [@@ocaml.doc "The type for the [MediaImage] dictionary."]

  val make : src:string -> ?sizes:string -> ?type':string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val src : t -> string
  val sizes : t -> string option
  val type' : t -> string option
end = struct
  type t = Js.any

  let make ~src ?sizes ?type' () =
    let src = Js.Any.of_string src in
    let sizes = (Js.Any.nullable_of_option Js.Any.of_string) sizes in
    let type' = (Js.Any.nullable_of_option Js.Any.of_string) type' in
    Js.Ffi.obj [| ("src", src); ("sizes", sizes); ("type", type') |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let src this = Js.Any.to_string (Js.Ffi.get this "src")

  let sizes this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "sizes")

  let type' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "type")
end

and Media_metadata : sig
  type t = [ `Media_metadata ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata} \
     [MediaMetadata]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?init:Media_metadata_init.t -> unit -> t

  val title : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title} \
     [title] on MDN}."]

  val set_title : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title} \
     [title] on MDN}."]

  val artist : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist} \
     [artist] on MDN}."]

  val set_artist : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist} \
     [artist] on MDN}."]

  val album : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album} \
     [album] on MDN}."]

  val set_album : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album} \
     [album] on MDN}."]
end = struct
  type t = [ `Media_metadata ] Js.t

  let t = Js.Ffi.constr "MediaMetadata"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?init () =
    let init = (Js.Any.undefined_of_option Media_metadata_init.to_any) init in
    Js.Ffi.obj_new t [| init |]

  let title this = Js.Any.to_string (Js.Ffi.get this "title")
  let set_title this x = Js.Ffi.set this "title" (Js.Any.of_string x)
  let artist this = Js.Any.to_string (Js.Ffi.get this "artist")
  let set_artist this x = Js.Ffi.set this "artist" (Js.Any.of_string x)
  let album this = Js.Any.to_string (Js.Ffi.get this "album")
  let set_album this x = Js.Ffi.set this "album" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata} \
   [MediaMetadata] on MDN}."]

and Media_metadata_init : sig
  type t [@@ocaml.doc "The type for the [MediaMetadataInit] dictionary."]

  val make :
    ?title:string ->
    ?artist:string ->
    ?album:string ->
    ?artwork:Media_image.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val title : t -> string option
  val artist : t -> string option
  val album : t -> string option
  val artwork : t -> Media_image.t array option
end = struct
  type t = Js.any

  let make ?title ?artist ?album ?artwork () =
    let title = (Js.Any.nullable_of_option Js.Any.of_string) title in
    let artist = (Js.Any.nullable_of_option Js.Any.of_string) artist in
    let album = (Js.Any.nullable_of_option Js.Any.of_string) album in
    let artwork =
      (Js.Any.nullable_of_option (Js.Any.of_array Media_image.to_any)) artwork
    in
    Js.Ffi.obj
      [|
        ("title", title);
        ("artist", artist);
        ("album", album);
        ("artwork", artwork);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let title this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "title")

  let artist this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "artist")

  let album this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "album")

  let artwork this =
    (Js.Any.nullable_to_option (Js.Any.to_array Media_image.of_any))
      (Js.Ffi.get this "artwork")
end

and Media_query_list : sig
  type t = [ `Media_query_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList} \
     [MediaQueryList]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Media_query_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList} \
     [MediaQueryList]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val media : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media} \
     [media] on MDN}."]

  val matches : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches} \
     [matches] on MDN}."]

  val add_listener : listener:Event_listener.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener} \
     [addListener] on MDN}."]

  val remove_listener : listener:Event_listener.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener} \
     [removeListener] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange} \
     [onchange] on MDN}."]
end = struct
  type t = [ `Media_query_list ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Media_query_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList} \
     [MediaQueryList]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MediaQueryList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let media this = Js.Any.to_string (Js.Ffi.get this "media")
  let matches this = Js.Any.to_bool (Js.Ffi.get this "matches")

  let add_listener ~listener this =
    let listener = (Js.Any.nullable_of_option Event_listener.to_any) listener in
    Js.to_unit (Js.Ffi.meth_call this "addListener" [| listener |])

  let remove_listener ~listener this =
    let listener = (Js.Any.nullable_of_option Event_listener.to_any) listener in
    Js.to_unit (Js.Ffi.meth_call this "removeListener" [| listener |])

  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList} \
   [MediaQueryList] on MDN}."]

and Media_query_list_event : sig
  type t = [ `Media_query_list_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent} \
     [MediaQueryListEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Media_query_list_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent} \
     [MediaQueryListEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Media_query_list_event_init.t ->
    unit ->
    'a super

  val media : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media} \
     [media] on MDN}."]

  val matches : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches} \
     [matches] on MDN}."]
end = struct
  type t = [ `Media_query_list_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Media_query_list_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent} \
     [MediaQueryListEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MediaQueryListEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Media_query_list_event_init.to_any)
        event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let media this = Js.Any.to_string (Js.Ffi.get this "media")
  let matches this = Js.Any.to_bool (Js.Ffi.get this "matches")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent} \
   [MediaQueryListEvent] on MDN}."]

and Media_query_list_event_init : sig
  type t [@@ocaml.doc "The type for the [MediaQueryListEventInit] dictionary."]

  val make : ?media:string -> ?matches:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val media : t -> string option
  val matches : t -> bool option
end = struct
  type t = Js.any

  let make ?media ?matches () =
    let media = (Js.Any.nullable_of_option Js.Any.of_string) media in
    let matches = (Js.Any.nullable_of_option Js.Any.of_bool) matches in
    Js.Ffi.obj [| ("media", media); ("matches", matches) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let media this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "media")

  let matches this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "matches")
end

and Media_session_playback_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val paused : t
  val playing : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let paused = Js.of_string "paused"
  let playing = Js.of_string "playing"
end

and Media_session_action : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val play : t
  val pause : t
  val seekbackward : t
  val seekforward : t
  val previoustrack : t
  val nexttrack : t
  val skipad : t
  val stop : t
  val seekto : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let play = Js.of_string "play"
  let pause = Js.of_string "pause"
  let seekbackward = Js.of_string "seekbackward"
  let seekforward = Js.of_string "seekforward"
  let previoustrack = Js.of_string "previoustrack"
  let nexttrack = Js.of_string "nexttrack"
  let skipad = Js.of_string "skipad"
  let stop = Js.of_string "stop"
  let seekto = Js.of_string "seekto"
end

and Media_session_action_details : sig
  type t
  [@@ocaml.doc "The type for the [MediaSessionActionDetails] dictionary."]

  val make : action:Media_session_action.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val action : t -> Media_session_action.t
end = struct
  type t = Js.any

  let make ~action () =
    let action = Media_session_action.to_any action in
    Js.Ffi.obj [| ("action", action) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let action this = Media_session_action.of_any (Js.Ffi.get this "action")
end

and Media_session_seek_action_details : sig
  type t
  [@@ocaml.doc "The type for the [MediaSessionSeekActionDetails] dictionary."]

  val make : ?seek_offset:float option -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_media_session_action_details : t -> Media_session_action_details.t
  val seek_offset : t -> float option option
end = struct
  type t = Js.any

  let make ?seek_offset () =
    let seek_offset =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        seek_offset
    in
    Js.Ffi.obj [| ("seekOffset", seek_offset) |]

  let to_media_session_action_details this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let seek_offset this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_float))
      (Js.Ffi.get this "seekOffset")
end

and Media_session_seek_to_action_details : sig
  type t
  [@@ocaml.doc "The type for the [MediaSessionSeekToActionDetails] dictionary."]

  val make : seek_time:float -> ?fast_seek:bool option -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_media_session_action_details : t -> Media_session_action_details.t
  val seek_time : t -> float
  val fast_seek : t -> bool option option
end = struct
  type t = Js.any

  let make ~seek_time ?fast_seek () =
    let seek_time = Js.Any.of_float seek_time in
    let fast_seek =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_bool))
        fast_seek
    in
    Js.Ffi.obj [| ("seekTime", seek_time); ("fastSeek", fast_seek) |]

  let to_media_session_action_details this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let seek_time this = Js.Any.to_float (Js.Ffi.get this "seekTime")

  let fast_seek this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_bool))
      (Js.Ffi.get this "fastSeek")
end

and Media_position_state : sig
  type t [@@ocaml.doc "The type for the [MediaPositionState] dictionary."]

  val make :
    ?duration:float -> ?playback_rate:float -> ?position:float -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val duration : t -> float option
  val playback_rate : t -> float option
  val position : t -> float option
end = struct
  type t = Js.any

  let make ?duration ?playback_rate ?position () =
    let duration = (Js.Any.nullable_of_option Js.Any.of_float) duration in
    let playback_rate =
      (Js.Any.nullable_of_option Js.Any.of_float) playback_rate
    in
    let position = (Js.Any.nullable_of_option Js.Any.of_float) position in
    Js.Ffi.obj
      [|
        ("duration", duration);
        ("playbackRate", playback_rate);
        ("position", position);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let duration this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "duration")

  let playback_rate this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "playbackRate")

  let position this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "position")
end

and Media_session_action_handler : sig
  type t = unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Media_session_action_handler

and Media_session : sig
  type t = [ `Media_session ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession} \
     [MediaSession]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val metadata : t -> Media_metadata.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata} \
     [metadata] on MDN}."]

  val set_metadata : t -> Media_metadata.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata} \
     [metadata] on MDN}."]

  val playback_state : t -> Media_session_playback_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState} \
     [playbackState] on MDN}."]

  val set_playback_state : t -> Media_session_playback_state.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState} \
     [playbackState] on MDN}."]

  val set_action_handler :
    action:Media_session_action.t ->
    handler:Media_session_action_handler.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setActionHandler} \
     [setActionHandler] on MDN}."]

  val set_position_state : ?state:Media_position_state.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setPositionState} \
     [setPositionState] on MDN}."]
end = struct
  type t = [ `Media_session ] Js.t

  let t = Js.Ffi.constr "MediaSession"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let metadata this =
    (Js.Any.nullable_to_option Media_metadata.of_any)
      (Js.Ffi.get this "metadata")

  let set_metadata this x =
    Js.Ffi.set this "metadata"
      ((Js.Any.nullable_of_option Media_metadata.to_any) x)

  let playback_state this =
    Media_session_playback_state.of_any (Js.Ffi.get this "playbackState")

  let set_playback_state this x =
    Js.Ffi.set this "playbackState" (Media_session_playback_state.to_any x)

  let set_action_handler ~action ~handler this =
    let action = Media_session_action.to_any action in
    let handler =
      (Js.Any.nullable_of_option Media_session_action_handler.to_any) handler
    in
    Js.to_unit (Js.Ffi.meth_call this "setActionHandler" [| action; handler |])

  let set_position_state ?state this =
    let state =
      (Js.Any.undefined_of_option Media_position_state.to_any) state
    in
    Js.to_unit (Js.Ffi.meth_call this "setPositionState" [| state |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaSession} \
   [MediaSession] on MDN}."]

and Media_stream : sig
  type t = [ `Media_stream ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream} \
     [MediaStream]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Media_stream | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream} \
     [MediaStream]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super
  val make : stream:t -> unit -> 'a super
  val make : tracks:Media_stream_track.t array -> unit -> 'a super

  val get_audio_tracks : t -> Media_stream_track.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getAudioTracks} \
     [getAudioTracks] on MDN}."]

  val get_video_tracks : t -> Media_stream_track.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks} \
     [getVideoTracks] on MDN}."]

  val get_tracks : t -> Media_stream_track.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTracks} \
     [getTracks] on MDN}."]

  val get_track_by_id :
    track_id:string -> t -> 'a Media_stream_track.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTrackById} \
     [getTrackById] on MDN}."]

  val add_track : track:Media_stream_track.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack} \
     [addTrack] on MDN}."]

  val remove_track : track:Media_stream_track.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/removeTrack} \
     [removeTrack] on MDN}."]

  val clone : t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/clone} \
     [clone] on MDN}."]
end = struct
  type t = [ `Media_stream ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Media_stream | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStream} \
     [MediaStream]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MediaStream"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let make ~stream () =
    let stream = to_any stream in
    Js.Ffi.obj_new t [| stream |]

  let make ~tracks () =
    let tracks = (Js.Any.of_array Media_stream_track.to_any) tracks in
    Js.Ffi.obj_new t [| tracks |]

  let get_audio_tracks this =
    (Js.Any.to_array Media_stream_track.of_any)
      (Js.Ffi.meth_call this "getAudioTracks" [||])

  let get_video_tracks this =
    (Js.Any.to_array Media_stream_track.of_any)
      (Js.Ffi.meth_call this "getVideoTracks" [||])

  let get_tracks this =
    (Js.Any.to_array Media_stream_track.of_any)
      (Js.Ffi.meth_call this "getTracks" [||])

  let get_track_by_id ~track_id this =
    let track_id = Js.Any.of_string track_id in
    (Js.Any.nullable_to_option Media_stream_track.of_any)
      (Js.Ffi.meth_call this "getTrackById" [| track_id |])

  let add_track ~track this =
    let track = Media_stream_track.to_any track in
    Js.to_unit (Js.Ffi.meth_call this "addTrack" [| track |])

  let remove_track ~track this =
    let track = Media_stream_track.to_any track in
    Js.to_unit (Js.Ffi.meth_call this "removeTrack" [| track |])

  let clone this = of_any (Js.Ffi.meth_call this "clone" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaStream} \
   [MediaStream] on MDN}."]

and Media_stream_audio_destination_node : sig
  type t = [ `Media_stream_audio_destination_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode} \
     [MediaStreamAudioDestinationNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_audio_destination_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode} \
     [MediaStreamAudioDestinationNode]} interface or any base interface that \
     it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Audio_context.t -> ?options:Audio_node_options.t -> unit -> 'a super

  val stream : t -> 'a Media_stream.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream} \
     [stream] on MDN}."]
end = struct
  type t = [ `Media_stream_audio_destination_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_audio_destination_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode} \
     [MediaStreamAudioDestinationNode]} interface or any base interface that \
     it inherits."]

  let t = Js.Ffi.constr "MediaStreamAudioDestinationNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Audio_node_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let stream this = Media_stream.of_any (Js.Ffi.get this "stream")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode} \
   [MediaStreamAudioDestinationNode] on MDN}."]

and Media_stream_audio_source_options : sig
  type t
  [@@ocaml.doc "The type for the [MediaStreamAudioSourceOptions] dictionary."]

  val make : media_stream:Media_stream.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val media_stream : t -> Media_stream.t
end = struct
  type t = Js.any

  let make ~media_stream () =
    let media_stream = Media_stream.to_any media_stream in
    Js.Ffi.obj [| ("mediaStream", media_stream) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let media_stream this = Media_stream.of_any (Js.Ffi.get this "mediaStream")
end

and Media_stream_audio_source_node : sig
  type t = [ `Media_stream_audio_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode} \
     [MediaStreamAudioSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode} \
     [MediaStreamAudioSourceNode]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Audio_context.t ->
    options:Media_stream_audio_source_options.t ->
    unit ->
    'a super

  val media_stream : t -> 'a Media_stream.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/mediaStream} \
     [mediaStream] on MDN}."]
end = struct
  type t = [ `Media_stream_audio_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode} \
     [MediaStreamAudioSourceNode]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "MediaStreamAudioSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ~options () =
    let context = Audio_context.to_any context in
    let options = Media_stream_audio_source_options.to_any options in
    Js.Ffi.obj_new t [| context; options |]

  let media_stream this = Media_stream.of_any (Js.Ffi.get this "mediaStream")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode} \
   [MediaStreamAudioSourceNode] on MDN}."]

and Media_stream_track : sig
  type t = [ `Media_stream_track ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack} \
     [MediaStreamTrack]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Media_stream_track | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack} \
     [MediaStreamTrack]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val kind : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind} \
     [kind] on MDN}."]

  val id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id} \
     [id] on MDN}."]

  val clone : t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone} \
     [clone] on MDN}."]
end = struct
  type t = [ `Media_stream_track ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Media_stream_track | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack} \
     [MediaStreamTrack]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MediaStreamTrack"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let kind this = Js.Any.to_string (Js.Ffi.get this "kind")
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let clone this = of_any (Js.Ffi.meth_call this "clone" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack} \
   [MediaStreamTrack] on MDN}."]

and Media_stream_track_audio_source_options : sig
  type t
  [@@ocaml.doc
    "The type for the [MediaStreamTrackAudioSourceOptions] dictionary."]

  val make : media_stream_track:Media_stream_track.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val media_stream_track : t -> Media_stream_track.t
end = struct
  type t = Js.any

  let make ~media_stream_track () =
    let media_stream_track = Media_stream_track.to_any media_stream_track in
    Js.Ffi.obj [| ("mediaStreamTrack", media_stream_track) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let media_stream_track this =
    Media_stream_track.of_any (Js.Ffi.get this "mediaStreamTrack")
end

and Media_stream_track_audio_source_node : sig
  type t = [ `Media_stream_track_audio_source_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode} \
     [MediaStreamTrackAudioSourceNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_track_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode} \
     [MediaStreamTrackAudioSourceNode]} interface or any base interface that \
     it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Audio_context.t ->
    options:Media_stream_track_audio_source_options.t ->
    unit ->
    'a super
end = struct
  type t = [ `Media_stream_track_audio_source_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Media_stream_track_audio_source_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode} \
     [MediaStreamTrackAudioSourceNode]} interface or any base interface that \
     it inherits."]

  let t = Js.Ffi.constr "MediaStreamTrackAudioSourceNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ~options () =
    let context = Audio_context.to_any context in
    let options = Media_stream_track_audio_source_options.to_any options in
    Js.Ffi.obj_new t [| context; options |]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode} \
   [MediaStreamTrackAudioSourceNode] on MDN}."]

and Message_channel : sig
  type t = [ `Message_channel ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel} \
     [MessageChannel]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val port1 : t -> 'a Message_port.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1} \
     [port1] on MDN}."]

  val port2 : t -> 'a Message_port.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2} \
     [port2] on MDN}."]
end = struct
  type t = [ `Message_channel ] Js.t

  let t = Js.Ffi.constr "MessageChannel"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]
  let port1 this = Message_port.of_any (Js.Ffi.get this "port1")
  let port2 this = Message_port.of_any (Js.Ffi.get this "port2")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel} \
   [MessageChannel] on MDN}."]

and Message_event : sig
  type t = [ `Message_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent} \
     [MessageEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Message_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent} \
     [MessageEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Message_event_init.t -> unit -> 'a super

  val data : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data} \
     [data] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin} \
     [origin] on MDN}."]

  val last_event_id : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId} \
     [lastEventId] on MDN}."]

  val source : t -> Message_event_source.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source} \
     [source] on MDN}."]

  val ports : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports} \
     [ports] on MDN}."]

  val init_message_event :
    type':string ->
    ?bubbles:bool ->
    ?cancelable:bool ->
    ?data:Js.any ->
    ?origin:string ->
    ?last_event_id:string ->
    ?source:Message_event_source.t option ->
    ?ports:Message_port.t array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent} \
     [initMessageEvent] on MDN}."]
end = struct
  type t = [ `Message_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Message_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent} \
     [MessageEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MessageEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Message_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let data this = Js.to_any (Js.Ffi.get this "data")
  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let last_event_id this = Js.Any.to_string (Js.Ffi.get this "lastEventId")

  let source this =
    (Js.Any.nullable_to_option Message_event_source.of_any)
      (Js.Ffi.get this "source")

  let ports this = Js.to_any (Js.Ffi.get this "ports")

  let init_message_event ~type' ?bubbles ?cancelable ?data ?origin
      ?last_event_id ?source ?ports this =
    let type' = Js.Any.of_string type' in
    let bubbles = (Js.Any.undefined_of_option Js.Any.of_bool) bubbles in
    let cancelable = (Js.Any.undefined_of_option Js.Any.of_bool) cancelable in
    let data = (Js.Any.undefined_of_option Js.of_any) data in
    let origin = (Js.Any.undefined_of_option Js.Any.of_string) origin in
    let last_event_id =
      (Js.Any.undefined_of_option Js.Any.of_string) last_event_id
    in
    let source =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option Message_event_source.to_any)
      )
        source
    in
    let ports =
      (Js.Any.undefined_of_option (Js.Any.of_array Message_port.to_any)) ports
    in
    Js.to_unit
      (Js.Ffi.meth_call this "initMessageEvent"
         [|
           type';
           bubbles;
           cancelable;
           data;
           origin;
           last_event_id;
           source;
           ports;
         |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent} \
   [MessageEvent] on MDN}."]

and Message_event_init : sig
  type t [@@ocaml.doc "The type for the [MessageEventInit] dictionary."]

  val make :
    ?data:Js.any ->
    ?origin:string ->
    ?last_event_id:string ->
    ?source:Message_event_source.t option ->
    ?ports:Message_port.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val data : t -> Js.any option
  val origin : t -> string option
  val last_event_id : t -> string option
  val source : t -> Message_event_source.t option option
  val ports : t -> Message_port.t array option
end = struct
  type t = Js.any

  let make ?data ?origin ?last_event_id ?source ?ports () =
    let data = (Js.Any.nullable_of_option Js.of_any) data in
    let origin = (Js.Any.nullable_of_option Js.Any.of_string) origin in
    let last_event_id =
      (Js.Any.nullable_of_option Js.Any.of_string) last_event_id
    in
    let source =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Message_event_source.to_any)
      )
        source
    in
    let ports =
      (Js.Any.nullable_of_option (Js.Any.of_array Message_port.to_any)) ports
    in
    Js.Ffi.obj
      [|
        ("data", data);
        ("origin", origin);
        ("lastEventId", last_event_id);
        ("source", source);
        ("ports", ports);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let data this = (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "data")

  let origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "origin")

  let last_event_id this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "lastEventId")

  let source this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Message_event_source.of_any)
    )
      (Js.Ffi.get this "source")

  let ports this =
    (Js.Any.nullable_to_option (Js.Any.to_array Message_port.of_any))
      (Js.Ffi.get this "ports")
end

and Message_event_source : sig
  type t

  val with_window_proxy : Window_proxy.t -> t
  val with_message_port : Message_port.t -> t
  val with_service_worker : Service_worker.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_window_proxy = Js.repr
  let with_message_port = Js.repr
  let with_service_worker = Js.repr
end

and Message_port : sig
  type t = [ `Message_port ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort} \
     [MessagePort]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Message_port | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort} \
     [MessagePort]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val post_message : message:Js.any -> transfer:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage} \
     [postMessage] on MDN}."]

  val start : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start} \
     [start] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close} \
     [close] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage} \
     [onmessage] on MDN}."]

  val onmessageerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror} \
     [onmessageerror] on MDN}."]

  val set_onmessageerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror} \
     [onmessageerror] on MDN}."]
end = struct
  type t = [ `Message_port ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Message_port | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MessagePort} \
     [MessagePort]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MessagePort"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let post_message ~message ~transfer this =
    let message = Js.of_any message in
    let transfer = (Js.Any.of_array Js.object_todo) transfer in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; transfer |])

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let start this = Js.to_unit (Js.Ffi.meth_call this "start" [||])
  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)

  let onmessageerror this =
    Event_handler.of_any (Js.Ffi.get this "onmessageerror")

  let set_onmessageerror this x =
    Js.Ffi.set this "onmessageerror" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MessagePort} \
   [MessagePort] on MDN}."]

and Post_message_options : sig
  type t [@@ocaml.doc "The type for the [PostMessageOptions] dictionary."]

  val make : ?transfer:'todo_object array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val transfer : t -> 'todo_object array option
end = struct
  type t = Js.any

  let make ?transfer () =
    let transfer =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.object_todo)) transfer
    in
    Js.Ffi.obj [| ("transfer", transfer) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let transfer this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.object_todo))
      (Js.Ffi.get this "transfer")
end

and Mime_type : sig
  type t = [ `Mime_type ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeType} [MimeType]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val type' : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MimeType/type} \
     [type] on MDN}."]

  val description : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeType/description} \
     [description] on MDN}."]

  val suffixes : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeType/suffixes} \
     [suffixes] on MDN}."]

  val enabled_plugin : t -> Plugin.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeType/enabledPlugin} \
     [enabledPlugin] on MDN}."]
end = struct
  type t = [ `Mime_type ] Js.t

  let t = Js.Ffi.constr "MimeType"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let description this = Js.Any.to_string (Js.Ffi.get this "description")
  let suffixes this = Js.Any.to_string (Js.Ffi.get this "suffixes")
  let enabled_plugin this = Plugin.of_any (Js.Ffi.get this "enabledPlugin")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MimeType} \
   [MimeType] on MDN}."]

and Mime_type_array : sig
  type t = [ `Mime_type_array ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray} \
     [MimeTypeArray]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray/length} \
     [length] on MDN}."]

  val item : index:int -> t -> Mime_type.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray/item} \
     [item] on MDN}."]

  val named_item : name:string -> t -> Mime_type.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray/namedItem} \
     [namedItem] on MDN}."]
end = struct
  type t = [ `Mime_type_array ] Js.t

  let t = Js.Ffi.constr "MimeTypeArray"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Mime_type.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let named_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Mime_type.of_any)
      (Js.Ffi.meth_call this "namedItem" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray} \
   [MimeTypeArray] on MDN}."]

and Mouse_event : sig
  type t = [ `Mouse_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent} \
     [MouseEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Mouse_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent} \
     [MouseEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_arg_and_mouse_event_init_dict :
    type_arg:string ->
    ?mouse_event_init_dict:Mouse_event_init.t ->
    unit ->
    'a super

  val screen_x : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX} \
     [screenX] on MDN}."]

  val screen_y : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY} \
     [screenY] on MDN}."]

  val client_x : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX} \
     [clientX] on MDN}."]

  val client_y : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY} \
     [clientY] on MDN}."]

  val page_x : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX} \
     [pageX] on MDN}."]

  val page_y : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY} \
     [pageY] on MDN}."]

  val x : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x} \
     [x] on MDN}."]

  val y : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y} \
     [y] on MDN}."]

  val offset_x : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX} \
     [offsetX] on MDN}."]

  val offset_y : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY} \
     [offsetY] on MDN}."]

  val ctrl_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey} \
     [ctrlKey] on MDN}."]

  val shift_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey} \
     [shiftKey] on MDN}."]

  val alt_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey} \
     [altKey] on MDN}."]

  val meta_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey} \
     [metaKey] on MDN}."]

  val button : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button} \
     [button] on MDN}."]

  val related_target : t -> Event_target.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget} \
     [relatedTarget] on MDN}."]

  val buttons : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons} \
     [buttons] on MDN}."]

  val which : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which} \
     [which] on MDN}."]

  val init_mouse_event :
    type_arg:string ->
    bubbles_arg:bool ->
    cancelable_arg:bool ->
    view_arg:Window.t option ->
    detail_arg:int ->
    screen_x_arg:int ->
    screen_y_arg:int ->
    client_x_arg:int ->
    client_y_arg:int ->
    ctrl_key_arg:bool ->
    alt_key_arg:bool ->
    shift_key_arg:bool ->
    meta_key_arg:bool ->
    button_arg:int ->
    related_target_arg:Event_target.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent} \
     [initMouseEvent] on MDN}."]
end = struct
  type t = [ `Mouse_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Mouse_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent} \
     [MouseEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "MouseEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this

  let with_type_arg_and_mouse_event_init_dict ~type_arg ?mouse_event_init_dict
      () =
    let type_arg = Js.Any.of_string type_arg in
    let mouse_event_init_dict =
      (Js.Any.undefined_of_option Mouse_event_init.to_any) mouse_event_init_dict
    in
    Js.Ffi.obj_new t [| type_arg; mouse_event_init_dict |]

  let screen_x this = Js.Any.to_int (Js.Ffi.get this "screenX")
  let screen_y this = Js.Any.to_int (Js.Ffi.get this "screenY")
  let client_x this = Js.Any.to_int (Js.Ffi.get this "clientX")
  let client_y this = Js.Any.to_int (Js.Ffi.get this "clientY")
  let page_x this = Js.Any.to_int (Js.Ffi.get this "pageX")
  let page_y this = Js.Any.to_int (Js.Ffi.get this "pageY")
  let x this = Js.Any.to_int (Js.Ffi.get this "x")
  let y this = Js.Any.to_int (Js.Ffi.get this "y")
  let offset_x this = Js.Any.to_int (Js.Ffi.get this "offsetX")
  let offset_y this = Js.Any.to_int (Js.Ffi.get this "offsetY")
  let ctrl_key this = Js.Any.to_bool (Js.Ffi.get this "ctrlKey")
  let shift_key this = Js.Any.to_bool (Js.Ffi.get this "shiftKey")
  let alt_key this = Js.Any.to_bool (Js.Ffi.get this "altKey")
  let meta_key this = Js.Any.to_bool (Js.Ffi.get this "metaKey")
  let button this = Js.Any.to_int (Js.Ffi.get this "button")

  let related_target this =
    (Js.Any.nullable_to_option Event_target.of_any)
      (Js.Ffi.get this "relatedTarget")

  let buttons this = Js.Any.to_int (Js.Ffi.get this "buttons")
  let which this = Js.Any.to_int (Js.Ffi.get this "which")

  let init_mouse_event ~type_arg ~bubbles_arg ~cancelable_arg ~view_arg
      ~detail_arg ~screen_x_arg ~screen_y_arg ~client_x_arg ~client_y_arg
      ~ctrl_key_arg ~alt_key_arg ~shift_key_arg ~meta_key_arg ~button_arg
      ~related_target_arg this =
    let type_arg = Js.Any.of_string type_arg in
    let bubbles_arg = Js.Any.of_bool bubbles_arg in
    let cancelable_arg = Js.Any.of_bool cancelable_arg in
    let view_arg = (Js.Any.nullable_of_option Window.to_any) view_arg in
    let detail_arg = Js.Any.of_int detail_arg in
    let screen_x_arg = Js.Any.of_int screen_x_arg in
    let screen_y_arg = Js.Any.of_int screen_y_arg in
    let client_x_arg = Js.Any.of_int client_x_arg in
    let client_y_arg = Js.Any.of_int client_y_arg in
    let ctrl_key_arg = Js.Any.of_bool ctrl_key_arg in
    let alt_key_arg = Js.Any.of_bool alt_key_arg in
    let shift_key_arg = Js.Any.of_bool shift_key_arg in
    let meta_key_arg = Js.Any.of_bool meta_key_arg in
    let button_arg = Js.Any.of_int button_arg in
    let related_target_arg =
      (Js.Any.nullable_of_option Event_target.to_any) related_target_arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "initMouseEvent"
         [|
           type_arg;
           bubbles_arg;
           cancelable_arg;
           view_arg;
           detail_arg;
           screen_x_arg;
           screen_y_arg;
           client_x_arg;
           client_y_arg;
           ctrl_key_arg;
           alt_key_arg;
           shift_key_arg;
           meta_key_arg;
           button_arg;
           related_target_arg;
         |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent} \
   [MouseEvent] on MDN}."]

and Mouse_event_init : sig
  type t [@@ocaml.doc "The type for the [MouseEventInit] dictionary."]

  val make :
    ?screen_x:int ->
    ?screen_y:int ->
    ?client_x:int ->
    ?client_y:int ->
    ?button:int ->
    ?buttons:int ->
    ?related_target:Event_target.t option ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_modifier_init : t -> Event_modifier_init.t
  val screen_x : t -> int option
  val screen_y : t -> int option
  val client_x : t -> int option
  val client_y : t -> int option
  val button : t -> int option
  val buttons : t -> int option
  val related_target : t -> Event_target.t option option
end = struct
  type t = Js.any

  let make ?screen_x ?screen_y ?client_x ?client_y ?button ?buttons
      ?related_target () =
    let screen_x = (Js.Any.nullable_of_option Js.Any.of_int) screen_x in
    let screen_y = (Js.Any.nullable_of_option Js.Any.of_int) screen_y in
    let client_x = (Js.Any.nullable_of_option Js.Any.of_int) client_x in
    let client_y = (Js.Any.nullable_of_option Js.Any.of_int) client_y in
    let button = (Js.Any.nullable_of_option Js.Any.of_int) button in
    let buttons = (Js.Any.nullable_of_option Js.Any.of_int) buttons in
    let related_target =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Event_target.to_any))
        related_target
    in
    Js.Ffi.obj
      [|
        ("screenX", screen_x);
        ("screenY", screen_y);
        ("clientX", client_x);
        ("clientY", client_y);
        ("button", button);
        ("buttons", buttons);
        ("relatedTarget", related_target);
      |]

  let to_event_modifier_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let screen_x this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "screenX")

  let screen_y this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "screenY")

  let client_x this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "clientX")

  let client_y this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "clientY")

  let button this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "button")

  let buttons this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "buttons")

  let related_target this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Event_target.of_any))
      (Js.Ffi.get this "relatedTarget")
end

and Mutation_observer : sig
  type t = [ `Mutation_observer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver} \
     [MutationObserver]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : callback:Mutation_callback.t -> unit -> t

  val observe : target:Node.t -> ?options:Mutation_observer_init.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe} \
     [observe] on MDN}."]

  val disconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect} \
     [disconnect] on MDN}."]

  val take_records : t -> Mutation_record.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords} \
     [takeRecords] on MDN}."]
end = struct
  type t = [ `Mutation_observer ] Js.t

  let t = Js.Ffi.constr "MutationObserver"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~callback () =
    let callback = Mutation_callback.to_any callback in
    Js.Ffi.obj_new t [| callback |]

  let observe ~target ?options this =
    let target = Node.to_any target in
    let options =
      (Js.Any.undefined_of_option Mutation_observer_init.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "observe" [| target; options |])

  let disconnect this = Js.to_unit (Js.Ffi.meth_call this "disconnect" [||])

  let take_records this =
    (Js.Any.to_array Mutation_record.of_any)
      (Js.Ffi.meth_call this "takeRecords" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver} \
   [MutationObserver] on MDN}."]

and Mutation_callback : sig
  type t = Mutation_record.t array -> Mutation_observer.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Mutation_callback

and Mutation_observer_init : sig
  type t [@@ocaml.doc "The type for the [MutationObserverInit] dictionary."]

  val make :
    ?child_list:bool ->
    ?attributes:bool ->
    ?character_data:bool ->
    ?subtree:bool ->
    ?attribute_old_value:bool ->
    ?character_data_old_value:bool ->
    ?attribute_filter:string array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val child_list : t -> bool option
  val attributes : t -> bool option
  val character_data : t -> bool option
  val subtree : t -> bool option
  val attribute_old_value : t -> bool option
  val character_data_old_value : t -> bool option
  val attribute_filter : t -> string array option
end = struct
  type t = Js.any

  let make ?child_list ?attributes ?character_data ?subtree ?attribute_old_value
      ?character_data_old_value ?attribute_filter () =
    let child_list = (Js.Any.nullable_of_option Js.Any.of_bool) child_list in
    let attributes = (Js.Any.nullable_of_option Js.Any.of_bool) attributes in
    let character_data =
      (Js.Any.nullable_of_option Js.Any.of_bool) character_data
    in
    let subtree = (Js.Any.nullable_of_option Js.Any.of_bool) subtree in
    let attribute_old_value =
      (Js.Any.nullable_of_option Js.Any.of_bool) attribute_old_value
    in
    let character_data_old_value =
      (Js.Any.nullable_of_option Js.Any.of_bool) character_data_old_value
    in
    let attribute_filter =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.Any.of_string))
        attribute_filter
    in
    Js.Ffi.obj
      [|
        ("childList", child_list);
        ("attributes", attributes);
        ("characterData", character_data);
        ("subtree", subtree);
        ("attributeOldValue", attribute_old_value);
        ("characterDataOldValue", character_data_old_value);
        ("attributeFilter", attribute_filter);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let child_list this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "childList")

  let attributes this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "attributes")

  let character_data this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "characterData")

  let subtree this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "subtree")

  let attribute_old_value this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "attributeOldValue")

  let character_data_old_value this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "characterDataOldValue")

  let attribute_filter this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_string))
      (Js.Ffi.get this "attributeFilter")
end

and Mutation_record : sig
  type t = [ `Mutation_record ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord} \
     [MutationRecord]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val type' : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/type} \
     [type] on MDN}."]

  val target : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/target} \
     [target] on MDN}."]

  val added_nodes : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/addedNodes} \
     [addedNodes] on MDN}."]

  val removed_nodes : t -> Node_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/removedNodes} \
     [removedNodes] on MDN}."]

  val previous_sibling : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/previousSibling} \
     [previousSibling] on MDN}."]

  val next_sibling : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/nextSibling} \
     [nextSibling] on MDN}."]

  val attribute_name : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/attributeName} \
     [attributeName] on MDN}."]

  val attribute_namespace : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/attributeNamespace} \
     [attributeNamespace] on MDN}."]

  val old_value : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/oldValue} \
     [oldValue] on MDN}."]
end = struct
  type t = [ `Mutation_record ] Js.t

  let t = Js.Ffi.constr "MutationRecord"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")
  let target this = Node.of_any (Js.Ffi.get this "target")
  let added_nodes this = Node_list.of_any (Js.Ffi.get this "addedNodes")
  let removed_nodes this = Node_list.of_any (Js.Ffi.get this "removedNodes")

  let previous_sibling this =
    (Js.Any.nullable_to_option Node.of_any) (Js.Ffi.get this "previousSibling")

  let next_sibling this =
    (Js.Any.nullable_to_option Node.of_any) (Js.Ffi.get this "nextSibling")

  let attribute_name this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "attributeName")

  let attribute_namespace this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "attributeNamespace")

  let old_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "oldValue")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord} \
   [MutationRecord] on MDN}."]

and Named_node_map : sig
  type t = [ `Named_node_map ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap} \
     [NamedNodeMap]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/length} \
     [length] on MDN}."]

  val item : index:int -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/item} \
     [item] on MDN}."]

  val get_named_item : qualified_name:string -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem} \
     [getNamedItem] on MDN}."]

  val get_named_item_ns :
    namespace:string option -> local_name:string -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItemNS} \
     [getNamedItemNS] on MDN}."]

  val set_named_item : attr:Attr.t -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/setNamedItem} \
     [setNamedItem] on MDN}."]

  val set_named_item_ns : attr:Attr.t -> t -> 'a Attr.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/setNamedItemNS} \
     [setNamedItemNS] on MDN}."]

  val remove_named_item : qualified_name:string -> t -> 'a Attr.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/removeNamedItem} \
     [removeNamedItem] on MDN}."]

  val remove_named_item_ns :
    namespace:string option -> local_name:string -> t -> 'a Attr.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/removeNamedItemNS} \
     [removeNamedItemNS] on MDN}."]
end = struct
  type t = [ `Named_node_map ] Js.t

  let t = Js.Ffi.constr "NamedNodeMap"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let get_named_item ~qualified_name this =
    let qualified_name = Js.Any.of_string qualified_name in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "getNamedItem" [| qualified_name |])

  let get_named_item_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "getNamedItemNS" [| namespace; local_name |])

  let set_named_item ~attr this =
    let attr = Attr.to_any attr in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "setNamedItem" [| attr |])

  let set_named_item_ns ~attr this =
    let attr = Attr.to_any attr in
    (Js.Any.nullable_to_option Attr.of_any)
      (Js.Ffi.meth_call this "setNamedItemNS" [| attr |])

  let remove_named_item ~qualified_name this =
    let qualified_name = Js.Any.of_string qualified_name in
    Attr.of_any (Js.Ffi.meth_call this "removeNamedItem" [| qualified_name |])

  let remove_named_item_ns ~namespace ~local_name this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    let local_name = Js.Any.of_string local_name in
    Attr.of_any
      (Js.Ffi.meth_call this "removeNamedItemNS" [| namespace; local_name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap} \
   [NamedNodeMap] on MDN}."]

and Navigation_preload_manager : sig
  type t = [ `Navigation_preload_manager ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager} \
     [NavigationPreloadManager]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val enable : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager/enable} \
     [enable] on MDN}."]

  val disable : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager/disable} \
     [disable] on MDN}."]

  val set_header_value : value:string -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager/setHeaderValue} \
     [setHeaderValue] on MDN}."]

  val get_state : t -> Navigation_preload_state.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager/getState} \
     [getState] on MDN}."]
end = struct
  type t = [ `Navigation_preload_manager ] Js.t

  let t = Js.Ffi.constr "NavigationPreloadManager"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let enable this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "enable" [||])

  let disable this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "disable" [||])

  let set_header_value ~value this =
    let value = Js.Any.of_string value in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "setHeaderValue" [| value |])

  let get_state this =
    (Promise.of_any Navigation_preload_state.of_any)
      (Js.Ffi.meth_call this "getState" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager} \
   [NavigationPreloadManager] on MDN}."]

and Navigation_preload_state : sig
  type t [@@ocaml.doc "The type for the [NavigationPreloadState] dictionary."]

  val make : ?enabled:bool -> ?header_value:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val enabled : t -> bool option
  val header_value : t -> string option
end = struct
  type t = Js.any

  let make ?enabled ?header_value () =
    let enabled = (Js.Any.nullable_of_option Js.Any.of_bool) enabled in
    let header_value =
      (Js.Any.nullable_of_option Js.Any.of_string) header_value
    in
    Js.Ffi.obj [| ("enabled", enabled); ("headerValue", header_value) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let enabled this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "enabled")

  let header_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "headerValue")
end

and Navigator : sig
  type t = [ `Navigator ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator} [Navigator]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val xr : t -> 'a Xr_system.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr} \
     [xr] on MDN}."]

  val get_gamepads : t -> Gamepad.t option array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads} \
     [getGamepads] on MDN}."]

  val permissions : t -> Permissions.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions} \
     [permissions] on MDN}."]

  val service_worker : t -> 'a Service_worker_container.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker} \
     [serviceWorker] on MDN}."]

  val bluetooth : t -> 'a Bluetooth.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/bluetooth} \
     [bluetooth] on MDN}."]

  val media_session : t -> Media_session.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaSession} \
     [mediaSession] on MDN}."]

  val media_devices : t -> 'a Media_devices.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices} \
     [mediaDevices] on MDN}."]

  val java_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/javaEnabled} \
     [javaEnabled] on MDN}."]

  val mime_types : t -> Mime_type_array.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mimeTypes} \
     [mimeTypes] on MDN}."]

  val plugins : t -> Plugin_array.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/plugins} \
     [plugins] on MDN}."]

  val languages : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages} \
     [languages] on MDN}."]

  val language : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language} \
     [language] on MDN}."]

  val gpu : t -> Gpu.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/gpu} \
     [gpu] on MDN}."]

  val cookie_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled} \
     [cookieEnabled] on MDN}."]

  val hardware_concurrency : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency} \
     [hardwareConcurrency] on MDN}."]
end = struct
  type t = [ `Navigator ] Js.t

  let t = Js.Ffi.constr "Navigator"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let xr this = Xr_system.of_any (Js.Ffi.get this "xr")

  let get_gamepads this =
    (Js.Any.to_array (Js.Any.nullable_to_option Gamepad.of_any))
      (Js.Ffi.meth_call this "getGamepads" [||])

  let permissions this = Permissions.of_any (Js.Ffi.get this "permissions")

  let service_worker this =
    Service_worker_container.of_any (Js.Ffi.get this "serviceWorker")

  let bluetooth this = Bluetooth.of_any (Js.Ffi.get this "bluetooth")
  let media_session this = Media_session.of_any (Js.Ffi.get this "mediaSession")
  let media_devices this = Media_devices.of_any (Js.Ffi.get this "mediaDevices")

  let java_enabled this =
    Js.Any.to_bool (Js.Ffi.meth_call this "javaEnabled" [||])

  let mime_types this = Mime_type_array.of_any (Js.Ffi.get this "mimeTypes")
  let plugins this = Plugin_array.of_any (Js.Ffi.get this "plugins")
  let languages this = Js.to_any (Js.Ffi.get this "languages")
  let language this = Js.Any.to_string (Js.Ffi.get this "language")
  let gpu this = Gpu.of_any (Js.Ffi.get this "gpu")
  let cookie_enabled this = Js.Any.to_bool (Js.Ffi.get this "cookieEnabled")

  let hardware_concurrency this =
    Js.Any.to_int (Js.Ffi.get this "hardwareConcurrency")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Navigator} \
   [Navigator] on MDN}."]

and Node : sig
  type t = [ `Node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node} [Node]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node} [Node]} interface \
     or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val element_node : int
  val attribute_node : int
  val text_node : int
  val cdata_section_node : int
  val entity_reference_node : int
  val entity_node : int
  val processing_instruction_node : int
  val comment_node : int
  val document_node : int
  val document_type_node : int
  val document_fragment_node : int
  val notation_node : int

  val node_type : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType} \
     [nodeType] on MDN}."]

  val node_name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName} \
     [nodeName] on MDN}."]

  val base_uri : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI} \
     [baseURI] on MDN}."]

  val is_connected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected} \
     [isConnected] on MDN}."]

  val owner_document : t -> 'a Document.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument} \
     [ownerDocument] on MDN}."]

  val get_root_node : ?options:Get_root_node_options.t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode} \
     [getRootNode] on MDN}."]

  val parent_node : t -> 'a super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode} \
     [parentNode] on MDN}."]

  val parent_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement} \
     [parentElement] on MDN}."]

  val has_child_nodes : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes} \
     [hasChildNodes] on MDN}."]

  val child_nodes : t -> Node_list.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes} \
     [childNodes] on MDN}."]

  val first_child : t -> 'a super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild} \
     [firstChild] on MDN}."]

  val last_child : t -> 'a super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild} \
     [lastChild] on MDN}."]

  val previous_sibling : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling} \
     [previousSibling] on MDN}."]

  val next_sibling : t -> 'a super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling} \
     [nextSibling] on MDN}."]

  val node_value : t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue} \
     [nodeValue] on MDN}."]

  val set_node_value : t -> string option -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue} \
     [nodeValue] on MDN}."]

  val text_content : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent} \
     [textContent] on MDN}."]

  val set_text_content : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent} \
     [textContent] on MDN}."]

  val normalize : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize} \
     [normalize] on MDN}."]

  val clone_node : ?deep:bool -> t -> 'a super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode} \
     [cloneNode] on MDN}."]

  val is_equal_node : node:t option -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode} \
     [isEqualNode] on MDN}."]

  val is_same_node : other_node:t option -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode} \
     [isSameNode] on MDN}."]

  val document_position_disconnected : int
  val document_position_preceding : int
  val document_position_following : int
  val document_position_contains : int
  val document_position_contained_by : int
  val document_position_implementation_specific : int

  val compare_document_position : other:t -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition} \
     [compareDocumentPosition] on MDN}."]

  val contains : other:t option -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node/contains} \
     [contains] on MDN}."]

  val lookup_prefix : namespace:string option -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix} \
     [lookupPrefix] on MDN}."]

  val lookup_namespace_uri : prefix:string option -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI} \
     [lookupNamespaceURI] on MDN}."]

  val is_default_namespace : namespace:string option -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace} \
     [isDefaultNamespace] on MDN}."]

  val insert_before : node:t -> child:t option -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore} \
     [insertBefore] on MDN}."]

  val append_child : node:t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild} \
     [appendChild] on MDN}."]

  val replace_child : node:t -> child:t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild} \
     [replaceChild] on MDN}."]

  val remove_child : child:t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild} \
     [removeChild] on MDN}."]
end = struct
  type t = [ `Node ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Node} [Node]} interface \
     or any base interface that it inherits."]

  let t = Js.Ffi.constr "Node"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let element_node = 1
  let attribute_node = 2
  let text_node = 3
  let cdata_section_node = 4
  let entity_reference_node = 5
  let entity_node = 6
  let processing_instruction_node = 7
  let comment_node = 8
  let document_node = 9
  let document_type_node = 10
  let document_fragment_node = 11
  let notation_node = 12
  let node_type this = Js.Any.to_int (Js.Ffi.get this "nodeType")
  let node_name this = Js.Any.to_string (Js.Ffi.get this "nodeName")
  let base_uri this = Js.Any.to_string (Js.Ffi.get this "baseURI")
  let is_connected this = Js.Any.to_bool (Js.Ffi.get this "isConnected")

  let owner_document this =
    (Js.Any.nullable_to_option Document.of_any) (Js.Ffi.get this "ownerDocument")

  let get_root_node ?options this =
    let options =
      (Js.Any.undefined_of_option Get_root_node_options.to_any) options
    in
    of_any (Js.Ffi.meth_call this "getRootNode" [| options |])

  let parent_node this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "parentNode")

  let parent_element this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "parentElement")

  let has_child_nodes this =
    Js.Any.to_bool (Js.Ffi.meth_call this "hasChildNodes" [||])

  let child_nodes this = Node_list.of_any (Js.Ffi.get this "childNodes")

  let first_child this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "firstChild")

  let last_child this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "lastChild")

  let previous_sibling this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "previousSibling")

  let next_sibling this =
    (Js.Any.nullable_to_option of_any) (Js.Ffi.get this "nextSibling")

  let node_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "nodeValue")

  let set_node_value this x =
    Js.Ffi.set this "nodeValue" ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let text_content this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "textContent")

  let set_text_content this x =
    Js.Ffi.set this "textContent"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let normalize this = Js.to_unit (Js.Ffi.meth_call this "normalize" [||])

  let clone_node ?deep this =
    let deep = (Js.Any.undefined_of_option Js.Any.of_bool) deep in
    of_any (Js.Ffi.meth_call this "cloneNode" [| deep |])

  let is_equal_node ~node this =
    let node = (Js.Any.nullable_of_option to_any) node in
    Js.Any.to_bool (Js.Ffi.meth_call this "isEqualNode" [| node |])

  let is_same_node ~other_node this =
    let other_node = (Js.Any.nullable_of_option to_any) other_node in
    Js.Any.to_bool (Js.Ffi.meth_call this "isSameNode" [| other_node |])

  let document_position_disconnected = 1
  let document_position_preceding = 2
  let document_position_following = 4
  let document_position_contains = 8
  let document_position_contained_by = 16
  let document_position_implementation_specific = 32

  let compare_document_position ~other this =
    let other = to_any other in
    Js.Any.to_int (Js.Ffi.meth_call this "compareDocumentPosition" [| other |])

  let contains ~other this =
    let other = (Js.Any.nullable_of_option to_any) other in
    Js.Any.to_bool (Js.Ffi.meth_call this "contains" [| other |])

  let lookup_prefix ~namespace this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "lookupPrefix" [| namespace |])

  let lookup_namespace_uri ~prefix this =
    let prefix = (Js.Any.nullable_of_option Js.Any.of_string) prefix in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "lookupNamespaceURI" [| prefix |])

  let is_default_namespace ~namespace this =
    let namespace = (Js.Any.nullable_of_option Js.Any.of_string) namespace in
    Js.Any.to_bool (Js.Ffi.meth_call this "isDefaultNamespace" [| namespace |])

  let insert_before ~node ~child this =
    let node = to_any node in
    let child = (Js.Any.nullable_of_option to_any) child in
    of_any (Js.Ffi.meth_call this "insertBefore" [| node; child |])

  let append_child ~node this =
    let node = to_any node in
    of_any (Js.Ffi.meth_call this "appendChild" [| node |])

  let replace_child ~node ~child this =
    let node = to_any node in
    let child = to_any child in
    of_any (Js.Ffi.meth_call this "replaceChild" [| node; child |])

  let remove_child ~child this =
    let child = to_any child in
    of_any (Js.Ffi.meth_call this "removeChild" [| child |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Node} [Node] on \
   MDN}."]

and Get_root_node_options : sig
  type t [@@ocaml.doc "The type for the [GetRootNodeOptions] dictionary."]

  val make : ?composed:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val composed : t -> bool option
end = struct
  type t = Js.any

  let make ?composed () =
    let composed = (Js.Any.nullable_of_option Js.Any.of_bool) composed in
    Js.Ffi.obj [| ("composed", composed) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let composed this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "composed")
end

and Node_filter : sig
  type t = Node.t -> int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val show_notation : int
  val show_document_fragment : int
  val show_document_type : int
  val show_document : int
  val show_comment : int
  val show_processing_instruction : int
  val show_entity : int
  val show_entity_reference : int
  val show_cdata_section : int
  val show_text : int
  val show_attribute : int
  val show_element : int
  val show_all : int
  val filter_skip : int
  val filter_reject : int
  val filter_accept : int
end = struct
  type t = Node.t -> int

  let to_any this = Js.Any.of_fun 1 this

  let of_any any =
    let __f_js = Js.Ffi.unsafe_cast `Function any in
    fun node ->
      let node = Node.to_any node in
      Js.Any.to_int (Js.Ffi.fun_call __f_js [| node |])

  let show_notation = 2048
  let show_document_fragment = 1024
  let show_document_type = 512
  let show_document = 256
  let show_comment = 128
  let show_processing_instruction = 64
  let show_entity = 32
  let show_entity_reference = 16
  let show_cdata_section = 8
  let show_text = 4
  let show_attribute = 2
  let show_element = 1
  let show_all = 4294967295
  let filter_skip = 3
  let filter_reject = 2
  let filter_accept = 1
end

and Node_iterator : sig
  type t = [ `Node_iterator ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator} \
     [NodeIterator]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val root : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root} \
     [root] on MDN}."]

  val reference_node : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode} \
     [referenceNode] on MDN}."]

  val pointer_before_reference_node : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode} \
     [pointerBeforeReferenceNode] on MDN}."]

  val what_to_show : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow} \
     [whatToShow] on MDN}."]

  val filter : t -> Node_filter.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter} \
     [filter] on MDN}."]

  val next_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode} \
     [nextNode] on MDN}."]

  val previous_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode} \
     [previousNode] on MDN}."]

  val detach : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach} \
     [detach] on MDN}."]
end = struct
  type t = [ `Node_iterator ] Js.t

  let t = Js.Ffi.constr "NodeIterator"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let root this = Node.of_any (Js.Ffi.get this "root")
  let reference_node this = Node.of_any (Js.Ffi.get this "referenceNode")

  let pointer_before_reference_node this =
    Js.Any.to_bool (Js.Ffi.get this "pointerBeforeReferenceNode")

  let what_to_show this = Js.Any.to_int (Js.Ffi.get this "whatToShow")

  let filter this =
    (Js.Any.nullable_to_option Node_filter.of_any) (Js.Ffi.get this "filter")

  let next_node this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "nextNode" [||])

  let previous_node this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "previousNode" [||])

  let detach this = Js.to_unit (Js.Ffi.meth_call this "detach" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator} \
   [NodeIterator] on MDN}."]

and Node_list : sig
  type t = [ `Node_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/NodeList} [NodeList]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val item : index:int -> t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item} \
     [item] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/NodeList/length} \
     [length] on MDN}."]
end = struct
  type t = [ `Node_list ] Js.t

  let t = Js.Ffi.constr "NodeList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/NodeList} \
   [NodeList] on MDN}."]

and Oes_element_index_uint : sig
  type t = [ `Oes_element_index_uint ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESElementIndexUint} \
     [OESElementIndexUint]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Oes_element_index_uint ] Js.t

  let t = Js.Ffi.constr "OESElementIndexUint"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESElementIndexUint} \
   [OESElementIndexUint] on MDN}."]

and Oes_standard_derivatives : sig
  type t = [ `Oes_standard_derivatives ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESStandardDerivatives} \
     [OESStandardDerivatives]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val fragment_shader_derivative_hint_oes : G_lenum.t
end = struct
  type t = [ `Oes_standard_derivatives ] Js.t

  let t = Js.Ffi.constr "OESStandardDerivatives"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let fragment_shader_derivative_hint_oes = 35723
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESStandardDerivatives} \
   [OESStandardDerivatives] on MDN}."]

and Oes_texture_float : sig
  type t = [ `Oes_texture_float ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESTextureFloat} \
     [OESTextureFloat]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Oes_texture_float ] Js.t

  let t = Js.Ffi.constr "OESTextureFloat"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/OESTextureFloat} \
   [OESTextureFloat] on MDN}."]

and Oes_texture_float_linear : sig
  type t = [ `Oes_texture_float_linear ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESTextureFloatLinear} \
     [OESTextureFloatLinear]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Oes_texture_float_linear ] Js.t

  let t = Js.Ffi.constr "OESTextureFloatLinear"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESTextureFloatLinear} \
   [OESTextureFloatLinear] on MDN}."]

and Oes_texture_half_float : sig
  type t = [ `Oes_texture_half_float ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESTextureHalfFloat} \
     [OESTextureHalfFloat]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val half_float_oes : G_lenum.t
end = struct
  type t = [ `Oes_texture_half_float ] Js.t

  let t = Js.Ffi.constr "OESTextureHalfFloat"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let half_float_oes = 36193
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESTextureHalfFloat} \
   [OESTextureHalfFloat] on MDN}."]

and Oes_texture_half_float_linear : sig
  type t = [ `Oes_texture_half_float_linear ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESTextureHalfFloatLinear} \
     [OESTextureHalfFloatLinear]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Oes_texture_half_float_linear ] Js.t

  let t = Js.Ffi.constr "OESTextureHalfFloatLinear"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESTextureHalfFloatLinear} \
   [OESTextureHalfFloatLinear] on MDN}."]

and Oes_vertex_array_object : sig
  type t = [ `Oes_vertex_array_object ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject} \
     [OESVertexArrayObject]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertex_array_binding_oes : int

  val create_vertex_array_oes :
    t -> 'a Web_gl_vertex_array_object_oes.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject/createVertexArrayOES} \
     [createVertexArrayOES] on MDN}."]

  val delete_vertex_array_oes :
    array_object:Web_gl_vertex_array_object_oes.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject/deleteVertexArrayOES} \
     [deleteVertexArrayOES] on MDN}."]

  val is_vertex_array_oes :
    array_object:Web_gl_vertex_array_object_oes.t option -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject/isVertexArrayOES} \
     [isVertexArrayOES] on MDN}."]

  val bind_vertex_array_oes :
    array_object:Web_gl_vertex_array_object_oes.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject/bindVertexArrayOES} \
     [bindVertexArrayOES] on MDN}."]
end = struct
  type t = [ `Oes_vertex_array_object ] Js.t

  let t = Js.Ffi.constr "OESVertexArrayObject"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex_array_binding_oes = 34229

  let create_vertex_array_oes this =
    (Js.Any.nullable_to_option Web_gl_vertex_array_object_oes.of_any)
      (Js.Ffi.meth_call this "createVertexArrayOES" [||])

  let delete_vertex_array_oes ~array_object this =
    let array_object =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object_oes.to_any)
        array_object
    in
    Js.to_unit (Js.Ffi.meth_call this "deleteVertexArrayOES" [| array_object |])

  let is_vertex_array_oes ~array_object this =
    let array_object =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object_oes.to_any)
        array_object
    in
    Js.Any.to_bool (Js.Ffi.meth_call this "isVertexArrayOES" [| array_object |])

  let bind_vertex_array_oes ~array_object this =
    let array_object =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object_oes.to_any)
        array_object
    in
    Js.to_unit (Js.Ffi.meth_call this "bindVertexArrayOES" [| array_object |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OESVertexArrayObject} \
   [OESVertexArrayObject] on MDN}."]

and Offline_audio_completion_event_init : sig
  type t
  [@@ocaml.doc "The type for the [OfflineAudioCompletionEventInit] dictionary."]

  val make : rendered_buffer:Audio_buffer.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val rendered_buffer : t -> Audio_buffer.t
end = struct
  type t = Js.any

  let make ~rendered_buffer () =
    let rendered_buffer = Audio_buffer.to_any rendered_buffer in
    Js.Ffi.obj [| ("renderedBuffer", rendered_buffer) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let rendered_buffer this =
    Audio_buffer.of_any (Js.Ffi.get this "renderedBuffer")
end

and Offline_audio_completion_event : sig
  type t = [ `Offline_audio_completion_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent} \
     [OfflineAudioCompletionEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Offline_audio_completion_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent} \
     [OfflineAudioCompletionEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    event_init_dict:Offline_audio_completion_event_init.t ->
    unit ->
    'a super

  val rendered_buffer : t -> Audio_buffer.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer} \
     [renderedBuffer] on MDN}."]
end = struct
  type t = [ `Offline_audio_completion_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Offline_audio_completion_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent} \
     [OfflineAudioCompletionEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "OfflineAudioCompletionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      Offline_audio_completion_event_init.to_any event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let rendered_buffer this =
    Audio_buffer.of_any (Js.Ffi.get this "renderedBuffer")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent} \
   [OfflineAudioCompletionEvent] on MDN}."]

and Offline_audio_context_options : sig
  type t
  [@@ocaml.doc "The type for the [OfflineAudioContextOptions] dictionary."]

  val make :
    ?number_of_channels:int -> length:int -> sample_rate:float -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val number_of_channels : t -> int option
  val length : t -> int
  val sample_rate : t -> float
end = struct
  type t = Js.any

  let make ?number_of_channels ~length ~sample_rate () =
    let number_of_channels =
      (Js.Any.nullable_of_option Js.Any.of_int) number_of_channels
    in
    let length = Js.Any.of_int length in
    let sample_rate = Js.Any.of_float sample_rate in
    Js.Ffi.obj
      [|
        ("numberOfChannels", number_of_channels);
        ("length", length);
        ("sampleRate", sample_rate);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let number_of_channels this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "numberOfChannels")

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let sample_rate this = Js.Any.to_float (Js.Ffi.get this "sampleRate")
end

and Offline_audio_context : sig
  type t = [ `Offline_audio_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext} \
     [OfflineAudioContext]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Offline_audio_context | `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext} \
     [OfflineAudioContext]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : context_options:Offline_audio_context_options.t -> unit -> 'a super

  val with_number_of_channels_and_length_and_sample_rate :
    number_of_channels:int ->
    length:int ->
    sample_rate:float ->
    unit ->
    'a super

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length} \
     [length] on MDN}."]

  val oncomplete : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete} \
     [oncomplete] on MDN}."]

  val set_oncomplete : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete} \
     [oncomplete] on MDN}."]

  val start_rendering : t -> Audio_buffer.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering} \
     [startRendering] on MDN}."]
end = struct
  type t = [ `Offline_audio_context ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Offline_audio_context | `Base_audio_context | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext} \
     [OfflineAudioContext]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "OfflineAudioContext"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_base_audio_context this = Js.Ffi.magic this

  let make ~context_options () =
    let context_options =
      Offline_audio_context_options.to_any context_options
    in
    Js.Ffi.obj_new t [| context_options |]

  let with_number_of_channels_and_length_and_sample_rate ~number_of_channels
      ~length ~sample_rate () =
    let number_of_channels = Js.Any.of_int number_of_channels in
    let length = Js.Any.of_int length in
    let sample_rate = Js.Any.of_float sample_rate in
    Js.Ffi.obj_new t [| number_of_channels; length; sample_rate |]

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
  let oncomplete this = Event_handler.of_any (Js.Ffi.get this "oncomplete")

  let set_oncomplete this x =
    Js.Ffi.set this "oncomplete" (Event_handler.to_any x)

  let start_rendering this =
    (Promise.of_any Audio_buffer.of_any)
      (Js.Ffi.meth_call this "startRendering" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext} \
   [OfflineAudioContext] on MDN}."]

and Offscreen_rendering_context : sig
  type t

  val with_offscreen_canvas_rendering_context2_d :
    Offscreen_canvas_rendering_context2_d.t -> t

  val with_web_gl_rendering_context : Web_gl_rendering_context.t -> t
  val with_web_gl2_rendering_context : Web_gl2_rendering_context.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_offscreen_canvas_rendering_context2_d = Js.repr
  let with_web_gl_rendering_context = Js.repr
  let with_web_gl2_rendering_context = Js.repr
end

and Image_encode_options : sig
  type t [@@ocaml.doc "The type for the [ImageEncodeOptions] dictionary."]

  val make : ?type':string -> ?quality:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> string option
  val quality : t -> float option
end = struct
  type t = Js.any

  let make ?type' ?quality () =
    let type' = (Js.Any.nullable_of_option Js.Any.of_string) type' in
    let quality = (Js.Any.nullable_of_option Js.Any.of_float) quality in
    Js.Ffi.obj [| ("type", type'); ("quality", quality) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "type")

  let quality this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "quality")
end

and Offscreen_canvas : sig
  type t = [ `Offscreen_canvas ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas} \
     [OffscreenCanvas]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Offscreen_canvas | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas} \
     [OffscreenCanvas]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val with_width_and_height : width:int -> height:int -> unit -> 'a super

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width} \
     [width] on MDN}."]

  val set_width : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height} \
     [height] on MDN}."]

  val set_height : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height} \
     [height] on MDN}."]

  val get_context :
    context_id:string ->
    ?options:Js.any ->
    t ->
    Offscreen_rendering_context.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext} \
     [getContext] on MDN}."]
end = struct
  type t = [ `Offscreen_canvas ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Offscreen_canvas | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas} \
     [OffscreenCanvas]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "OffscreenCanvas"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let with_width_and_height ~width ~height () =
    let width = Js.Any.of_int width in
    let height = Js.Any.of_int height in
    Js.Ffi.obj_new t [| width; height |]

  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_int x)
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
  let set_height this x = Js.Ffi.set this "height" (Js.Any.of_int x)

  let get_context ~context_id ?options this =
    let context_id = Js.Any.of_string context_id in
    let options = (Js.Any.undefined_of_option Js.of_any) options in
    (Js.Any.nullable_to_option Offscreen_rendering_context.of_any)
      (Js.Ffi.meth_call this "getContext" [| context_id; options |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas} \
   [OffscreenCanvas] on MDN}."]

and Offscreen_canvas_rendering_context2_d : sig
  type t = [ `Offscreen_canvas_rendering_context2_d ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D} \
     [OffscreenCanvasRenderingContext2D]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val canvas : t -> 'a Offscreen_canvas.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/canvas} \
     [canvas] on MDN}."]

  val reset_transform : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/resetTransform} \
     [resetTransform] on MDN}."]

  val set_transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/setTransform} \
     [setTransform] on MDN}."]

  val get_transform : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/getTransform} \
     [getTransform] on MDN}."]

  val transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/transform} \
     [transform] on MDN}."]

  val translate : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/translate} \
     [translate] on MDN}."]

  val rotate : angle:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/rotate} \
     [rotate] on MDN}."]

  val scale : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/scale} \
     [scale] on MDN}."]

  val direction : t -> Canvas_direction.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/direction} \
     [direction] on MDN}."]

  val set_direction : t -> Canvas_direction.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/direction} \
     [direction] on MDN}."]

  val text_baseline : t -> Canvas_text_baseline.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/textBaseline} \
     [textBaseline] on MDN}."]

  val set_text_baseline : t -> Canvas_text_baseline.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/textBaseline} \
     [textBaseline] on MDN}."]

  val text_align : t -> Canvas_text_align.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/textAlign} \
     [textAlign] on MDN}."]

  val set_text_align : t -> Canvas_text_align.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/textAlign} \
     [textAlign] on MDN}."]

  val font : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/font} \
     [font] on MDN}."]

  val set_font : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/font} \
     [font] on MDN}."]

  val measure_text : text:string -> t -> Text_metrics.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/measureText} \
     [measureText] on MDN}."]

  val fill_text :
    text:string -> x:float -> y:float -> ?max_width:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/fillText} \
     [fillText] on MDN}."]

  val shadow_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val set_shadow_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val shadow_blur : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val set_shadow_blur : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val shadow_offset_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val set_shadow_offset_y : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val shadow_offset_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val set_shadow_offset_x : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val stroke_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/strokeRect} \
     [strokeRect] on MDN}."]

  val fill_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/fillRect} \
     [fillRect] on MDN}."]

  val clear_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/clearRect} \
     [clearRect] on MDN}."]

  val miter_limit : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val set_miter_limit : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val line_join : t -> Canvas_line_join.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val set_line_join : t -> Canvas_line_join.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val line_cap : t -> Canvas_line_cap.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val set_line_cap : t -> Canvas_line_cap.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val line_width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val set_line_width : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val ellipse :
    x:float ->
    y:float ->
    radius_x:float ->
    radius_y:float ->
    rotation:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/ellipse} \
     [ellipse] on MDN}."]

  val arc :
    x:float ->
    y:float ->
    radius:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/arc} \
     [arc] on MDN}."]

  val rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/rect} \
     [rect] on MDN}."]

  val arc_to :
    x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/arcTo} \
     [arcTo] on MDN}."]

  val bezier_curve_to :
    cp1x:float ->
    cp1y:float ->
    cp2x:float ->
    cp2y:float ->
    x:float ->
    y:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/bezierCurveTo} \
     [bezierCurveTo] on MDN}."]

  val quadratic_curve_to :
    cpx:float -> cpy:float -> x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/quadraticCurveTo} \
     [quadraticCurveTo] on MDN}."]

  val line_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/lineTo} \
     [lineTo] on MDN}."]

  val move_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/moveTo} \
     [moveTo] on MDN}."]

  val close_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/closePath} \
     [closePath] on MDN}."]

  val image_smoothing_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val set_image_smoothing_enabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val put_image_data :
    imagedata:Image_data.t ->
    dx:int ->
    dy:int ->
    dirty_x:int ->
    dirty_y:int ->
    dirty_width:int ->
    dirty_height:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/putImageData} \
     [putImageData] on MDN}."]

  val put_image_data : imagedata:Image_data.t -> dx:int -> dy:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/putImageData} \
     [putImageData] on MDN}."]

  val get_image_data : sx:int -> sy:int -> sw:int -> sh:int -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/getImageData} \
     [getImageData] on MDN}."]

  val create_image_data : imagedata:Image_data.t -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/createImageData} \
     [createImageData] on MDN}."]

  val create_image_data : sw:int -> sh:int -> t -> Image_data.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/createImageData} \
     [createImageData] on MDN}."]

  val create_pattern :
    image:Canvas_image_source.t ->
    repetition:string ->
    t ->
    Canvas_pattern.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/createPattern} \
     [createPattern] on MDN}."]

  val create_radial_gradient :
    x0:float ->
    y0:float ->
    r0:float ->
    x1:float ->
    y1:float ->
    r1:float ->
    t ->
    Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/createRadialGradient} \
     [createRadialGradient] on MDN}."]

  val create_linear_gradient :
    x0:float -> y0:float -> x1:float -> y1:float -> t -> Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/createLinearGradient} \
     [createLinearGradient] on MDN}."]

  val fill_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val set_fill_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val stroke_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val set_stroke_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val is_point_in_path :
    x:float -> y:float -> ?fill_rule:Canvas_fill_rule.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/isPointInPath} \
     [isPointInPath] on MDN}."]

  val clip : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/clip} \
     [clip] on MDN}."]

  val stroke : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/stroke} \
     [stroke] on MDN}."]

  val fill : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/fill} \
     [fill] on MDN}."]

  val begin_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/beginPath} \
     [beginPath] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    sx:float ->
    sy:float ->
    sw:float ->
    sh:float ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t -> dx:float -> dy:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val global_composite_operation : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val set_global_composite_operation : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val global_alpha : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]

  val set_global_alpha : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]
end = struct
  type t = [ `Offscreen_canvas_rendering_context2_d ] Js.t

  let t = Js.Ffi.constr "OffscreenCanvasRenderingContext2D"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let canvas this = Offscreen_canvas.of_any (Js.Ffi.get this "canvas")

  let reset_transform this =
    Js.to_unit (Js.Ffi.meth_call this "resetTransform" [||])

  let set_transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "setTransform" [| a; b; c; d; e; f |])

  let get_transform this =
    Dom_matrix.of_any (Js.Ffi.meth_call this "getTransform" [||])

  let transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "transform" [| a; b; c; d; e; f |])

  let translate ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "translate" [| x; y |])

  let rotate ~angle this =
    let angle = Js.Any.of_float angle in
    Js.to_unit (Js.Ffi.meth_call this "rotate" [| angle |])

  let scale ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scale" [| x; y |])

  let direction this = Canvas_direction.of_any (Js.Ffi.get this "direction")

  let set_direction this x =
    Js.Ffi.set this "direction" (Canvas_direction.to_any x)

  let text_baseline this =
    Canvas_text_baseline.of_any (Js.Ffi.get this "textBaseline")

  let set_text_baseline this x =
    Js.Ffi.set this "textBaseline" (Canvas_text_baseline.to_any x)

  let text_align this = Canvas_text_align.of_any (Js.Ffi.get this "textAlign")

  let set_text_align this x =
    Js.Ffi.set this "textAlign" (Canvas_text_align.to_any x)

  let font this = Js.Any.to_string (Js.Ffi.get this "font")
  let set_font this x = Js.Ffi.set this "font" (Js.Any.of_string x)

  let measure_text ~text this =
    let text = Js.Any.of_string text in
    Text_metrics.of_any (Js.Ffi.meth_call this "measureText" [| text |])

  let fill_text ~text ~x ~y ?max_width this =
    let text = Js.Any.of_string text in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let max_width = (Js.Any.undefined_of_option Js.Any.of_float) max_width in
    Js.to_unit (Js.Ffi.meth_call this "fillText" [| text; x; y; max_width |])

  let shadow_color this = Js.Any.to_string (Js.Ffi.get this "shadowColor")

  let set_shadow_color this x =
    Js.Ffi.set this "shadowColor" (Js.Any.of_string x)

  let shadow_blur this = Js.Any.to_float (Js.Ffi.get this "shadowBlur")
  let set_shadow_blur this x = Js.Ffi.set this "shadowBlur" (Js.Any.of_float x)
  let shadow_offset_y this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetY")

  let set_shadow_offset_y this x =
    Js.Ffi.set this "shadowOffsetY" (Js.Any.of_float x)

  let shadow_offset_x this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetX")

  let set_shadow_offset_x this x =
    Js.Ffi.set this "shadowOffsetX" (Js.Any.of_float x)

  let stroke_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "strokeRect" [| x; y; w; h |])

  let fill_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "fillRect" [| x; y; w; h |])

  let clear_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "clearRect" [| x; y; w; h |])

  let miter_limit this = Js.Any.to_float (Js.Ffi.get this "miterLimit")
  let set_miter_limit this x = Js.Ffi.set this "miterLimit" (Js.Any.of_float x)
  let line_join this = Canvas_line_join.of_any (Js.Ffi.get this "lineJoin")

  let set_line_join this x =
    Js.Ffi.set this "lineJoin" (Canvas_line_join.to_any x)

  let line_cap this = Canvas_line_cap.of_any (Js.Ffi.get this "lineCap")
  let set_line_cap this x = Js.Ffi.set this "lineCap" (Canvas_line_cap.to_any x)
  let line_width this = Js.Any.to_float (Js.Ffi.get this "lineWidth")
  let set_line_width this x = Js.Ffi.set this "lineWidth" (Js.Any.of_float x)

  let ellipse ~x ~y ~radius_x ~radius_y ~rotation ~start_angle ~end_angle
      ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius_x = Js.Any.of_float radius_x in
    let radius_y = Js.Any.of_float radius_y in
    let rotation = Js.Any.of_float rotation in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "ellipse"
         [|
           x;
           y;
           radius_x;
           radius_y;
           rotation;
           start_angle;
           end_angle;
           anticlockwise;
         |]
      )

  let arc ~x ~y ~radius ~start_angle ~end_angle ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius = Js.Any.of_float radius in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "arc"
         [| x; y; radius; start_angle; end_angle; anticlockwise |]
      )

  let rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "rect" [| x; y; w; h |])

  let arc_to ~x1 ~y1 ~x2 ~y2 ~radius this =
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let x2 = Js.Any.of_float x2 in
    let y2 = Js.Any.of_float y2 in
    let radius = Js.Any.of_float radius in
    Js.to_unit (Js.Ffi.meth_call this "arcTo" [| x1; y1; x2; y2; radius |])

  let bezier_curve_to ~cp1x ~cp1y ~cp2x ~cp2y ~x ~y this =
    let cp1x = Js.Any.of_float cp1x in
    let cp1y = Js.Any.of_float cp1y in
    let cp2x = Js.Any.of_float cp2x in
    let cp2y = Js.Any.of_float cp2y in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit
      (Js.Ffi.meth_call this "bezierCurveTo" [| cp1x; cp1y; cp2x; cp2y; x; y |])

  let quadratic_curve_to ~cpx ~cpy ~x ~y this =
    let cpx = Js.Any.of_float cpx in
    let cpy = Js.Any.of_float cpy in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "quadraticCurveTo" [| cpx; cpy; x; y |])

  let line_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "lineTo" [| x; y |])

  let move_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "moveTo" [| x; y |])

  let close_path this = Js.to_unit (Js.Ffi.meth_call this "closePath" [||])

  let image_smoothing_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "imageSmoothingEnabled")

  let set_image_smoothing_enabled this x =
    Js.Ffi.set this "imageSmoothingEnabled" (Js.Any.of_bool x)

  let put_image_data ~imagedata ~dx ~dy ~dirty_x ~dirty_y ~dirty_width
      ~dirty_height this =
    let imagedata = Image_data.to_any imagedata in
    let dx = Js.Any.of_int dx in
    let dy = Js.Any.of_int dy in
    let dirty_x = Js.Any.of_int dirty_x in
    let dirty_y = Js.Any.of_int dirty_y in
    let dirty_width = Js.Any.of_int dirty_width in
    let dirty_height = Js.Any.of_int dirty_height in
    Js.to_unit
      (Js.Ffi.meth_call this "putImageData"
         [| imagedata; dx; dy; dirty_x; dirty_y; dirty_width; dirty_height |]
      )

  let put_image_data ~imagedata ~dx ~dy this =
    let imagedata = Image_data.to_any imagedata in
    let dx = Js.Any.of_int dx in
    let dy = Js.Any.of_int dy in
    Js.to_unit (Js.Ffi.meth_call this "putImageData" [| imagedata; dx; dy |])

  let get_image_data ~sx ~sy ~sw ~sh this =
    let sx = Js.Any.of_int sx in
    let sy = Js.Any.of_int sy in
    let sw = Js.Any.of_int sw in
    let sh = Js.Any.of_int sh in
    Image_data.of_any (Js.Ffi.meth_call this "getImageData" [| sx; sy; sw; sh |])

  let create_image_data ~imagedata this =
    let imagedata = Image_data.to_any imagedata in
    Image_data.of_any (Js.Ffi.meth_call this "createImageData" [| imagedata |])

  let create_image_data ~sw ~sh this =
    let sw = Js.Any.of_int sw in
    let sh = Js.Any.of_int sh in
    Image_data.of_any (Js.Ffi.meth_call this "createImageData" [| sw; sh |])

  let create_pattern ~image ~repetition this =
    let image = Canvas_image_source.to_any image in
    let repetition = Js.Any.of_string repetition in
    (Js.Any.nullable_to_option Canvas_pattern.of_any)
      (Js.Ffi.meth_call this "createPattern" [| image; repetition |])

  let create_radial_gradient ~x0 ~y0 ~r0 ~x1 ~y1 ~r1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let r0 = Js.Any.of_float r0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let r1 = Js.Any.of_float r1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createRadialGradient" [| x0; y0; r0; x1; y1; r1 |])

  let create_linear_gradient ~x0 ~y0 ~x1 ~y1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createLinearGradient" [| x0; y0; x1; y1 |])

  let fill_style this = Js.of_any (Js.Ffi.get this "fillStyle")
  let set_fill_style this x = Js.Ffi.set this "fillStyle" (Js.to_any x)
  let stroke_style this = Js.of_any (Js.Ffi.get this "strokeStyle")
  let set_stroke_style this x = Js.Ffi.set this "strokeStyle" (Js.to_any x)

  let is_point_in_path ~x ~y ?fill_rule this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.Any.to_bool (Js.Ffi.meth_call this "isPointInPath" [| x; y; fill_rule |])

  let clip ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "clip" [| fill_rule |])

  let stroke this = Js.to_unit (Js.Ffi.meth_call this "stroke" [||])

  let fill ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "fill" [| fill_rule |])

  let begin_path this = Js.to_unit (Js.Ffi.meth_call this "beginPath" [||])

  let draw_image ~image ~sx ~sy ~sw ~sh ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let sx = Js.Any.of_float sx in
    let sy = Js.Any.of_float sy in
    let sw = Js.Any.of_float sw in
    let sh = Js.Any.of_float sh in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit
      (Js.Ffi.meth_call this "drawImage"
         [| image; sx; sy; sw; sh; dx; dy; dw; dh |]
      )

  let draw_image ~image ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy; dw; dh |])

  let draw_image ~image ~dx ~dy this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy |])

  let global_composite_operation this =
    Js.Any.to_string (Js.Ffi.get this "globalCompositeOperation")

  let set_global_composite_operation this x =
    Js.Ffi.set this "globalCompositeOperation" (Js.Any.of_string x)

  let global_alpha this = Js.Any.to_float (Js.Ffi.get this "globalAlpha")
  let set_global_alpha this x = Js.Ffi.set this "globalAlpha" (Js.Any.of_float x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D} \
   [OffscreenCanvasRenderingContext2D] on MDN}."]

and Oscillator_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val sine : t
  val square : t
  val sawtooth : t
  val triangle : t
  val custom : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let sine = Js.of_string "sine"
  let square = Js.of_string "square"
  let sawtooth = Js.of_string "sawtooth"
  let triangle = Js.of_string "triangle"
  let custom = Js.of_string "custom"
end

and Oscillator_options : sig
  type t [@@ocaml.doc "The type for the [OscillatorOptions] dictionary."]

  val make :
    ?type':Oscillator_type.t -> ?frequency:float -> ?detune:float -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val type' : t -> Oscillator_type.t option
  val frequency : t -> float option
  val detune : t -> float option
end = struct
  type t = Js.any

  let make ?type' ?frequency ?detune () =
    let type' = (Js.Any.nullable_of_option Oscillator_type.to_any) type' in
    let frequency = (Js.Any.nullable_of_option Js.Any.of_float) frequency in
    let detune = (Js.Any.nullable_of_option Js.Any.of_float) detune in
    Js.Ffi.obj
      [| ("type", type'); ("frequency", frequency); ("detune", detune) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Oscillator_type.of_any) (Js.Ffi.get this "type")

  let frequency this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "frequency")

  let detune this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "detune")
end

and Oscillator_node : sig
  type t = [ `Oscillator_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode} \
     [OscillatorNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Oscillator_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode} \
     [OscillatorNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Oscillator_options.t ->
    unit ->
    'a super

  val type' : t -> Oscillator_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type} \
     [type] on MDN}."]

  val set_type : t -> Oscillator_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type} \
     [type] on MDN}."]

  val frequency : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency} \
     [frequency] on MDN}."]

  val detune : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune} \
     [detune] on MDN}."]
end = struct
  type t = [ `Oscillator_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Oscillator_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode} \
     [OscillatorNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "OscillatorNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_scheduled_source_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Oscillator_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let type' this = Oscillator_type.of_any (Js.Ffi.get this "type")
  let set_type this x = Js.Ffi.set this "type" (Oscillator_type.to_any x)
  let frequency this = Audio_param.of_any (Js.Ffi.get this "frequency")
  let detune this = Audio_param.of_any (Js.Ffi.get this "detune")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode} \
   [OscillatorNode] on MDN}."]

and Page_transition_event : sig
  type t = [ `Page_transition_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent} \
     [PageTransitionEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Page_transition_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent} \
     [PageTransitionEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Page_transition_event_init.t ->
    unit ->
    'a super

  val persisted : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent/persisted} \
     [persisted] on MDN}."]
end = struct
  type t = [ `Page_transition_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Page_transition_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent} \
     [PageTransitionEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PageTransitionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Page_transition_event_init.to_any)
        event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let persisted this = Js.Any.to_bool (Js.Ffi.get this "persisted")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent} \
   [PageTransitionEvent] on MDN}."]

and Page_transition_event_init : sig
  type t [@@ocaml.doc "The type for the [PageTransitionEventInit] dictionary."]

  val make : ?persisted:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val persisted : t -> bool option
end = struct
  type t = Js.any

  let make ?persisted () =
    let persisted = (Js.Any.nullable_of_option Js.Any.of_bool) persisted in
    Js.Ffi.obj [| ("persisted", persisted) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let persisted this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "persisted")
end

and Paint_rendering_context2_d : sig
  type t = [ `Paint_rendering_context2_d ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D} \
     [PaintRenderingContext2D]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val reset_transform : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/resetTransform} \
     [resetTransform] on MDN}."]

  val set_transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/setTransform} \
     [setTransform] on MDN}."]

  val get_transform : t -> 'a Dom_matrix.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/getTransform} \
     [getTransform] on MDN}."]

  val transform :
    a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/transform} \
     [transform] on MDN}."]

  val translate : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/translate} \
     [translate] on MDN}."]

  val rotate : angle:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/rotate} \
     [rotate] on MDN}."]

  val scale : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/scale} \
     [scale] on MDN}."]

  val shadow_color : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val set_shadow_color : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowColor} \
     [shadowColor] on MDN}."]

  val shadow_blur : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val set_shadow_blur : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowBlur} \
     [shadowBlur] on MDN}."]

  val shadow_offset_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val set_shadow_offset_y : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowOffsetY} \
     [shadowOffsetY] on MDN}."]

  val shadow_offset_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val set_shadow_offset_x : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/shadowOffsetX} \
     [shadowOffsetX] on MDN}."]

  val stroke_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/strokeRect} \
     [strokeRect] on MDN}."]

  val fill_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/fillRect} \
     [fillRect] on MDN}."]

  val clear_rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/clearRect} \
     [clearRect] on MDN}."]

  val miter_limit : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val set_miter_limit : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/miterLimit} \
     [miterLimit] on MDN}."]

  val line_join : t -> Canvas_line_join.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val set_line_join : t -> Canvas_line_join.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineJoin} \
     [lineJoin] on MDN}."]

  val line_cap : t -> Canvas_line_cap.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val set_line_cap : t -> Canvas_line_cap.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineCap} \
     [lineCap] on MDN}."]

  val line_width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val set_line_width : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineWidth} \
     [lineWidth] on MDN}."]

  val ellipse :
    x:float ->
    y:float ->
    radius_x:float ->
    radius_y:float ->
    rotation:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/ellipse} \
     [ellipse] on MDN}."]

  val arc :
    x:float ->
    y:float ->
    radius:float ->
    start_angle:float ->
    end_angle:float ->
    ?anticlockwise:bool ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/arc} \
     [arc] on MDN}."]

  val rect : x:float -> y:float -> w:float -> h:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/rect} \
     [rect] on MDN}."]

  val arc_to :
    x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/arcTo} \
     [arcTo] on MDN}."]

  val bezier_curve_to :
    cp1x:float ->
    cp1y:float ->
    cp2x:float ->
    cp2y:float ->
    x:float ->
    y:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/bezierCurveTo} \
     [bezierCurveTo] on MDN}."]

  val quadratic_curve_to :
    cpx:float -> cpy:float -> x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/quadraticCurveTo} \
     [quadraticCurveTo] on MDN}."]

  val line_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/lineTo} \
     [lineTo] on MDN}."]

  val move_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/moveTo} \
     [moveTo] on MDN}."]

  val close_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/closePath} \
     [closePath] on MDN}."]

  val image_smoothing_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val set_image_smoothing_enabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/imageSmoothingEnabled} \
     [imageSmoothingEnabled] on MDN}."]

  val create_pattern :
    image:Canvas_image_source.t ->
    repetition:string ->
    t ->
    Canvas_pattern.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/createPattern} \
     [createPattern] on MDN}."]

  val create_radial_gradient :
    x0:float ->
    y0:float ->
    r0:float ->
    x1:float ->
    y1:float ->
    r1:float ->
    t ->
    Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/createRadialGradient} \
     [createRadialGradient] on MDN}."]

  val create_linear_gradient :
    x0:float -> y0:float -> x1:float -> y1:float -> t -> Canvas_gradient.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/createLinearGradient} \
     [createLinearGradient] on MDN}."]

  val fill_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val set_fill_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/fillStyle} \
     [fillStyle] on MDN}."]

  val stroke_style : t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val set_stroke_style :
    t -> [< `String | `Canvas_gradient | `Canvas_pattern ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/strokeStyle} \
     [strokeStyle] on MDN}."]

  val is_point_in_path :
    x:float -> y:float -> ?fill_rule:Canvas_fill_rule.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/isPointInPath} \
     [isPointInPath] on MDN}."]

  val clip : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/clip} \
     [clip] on MDN}."]

  val stroke : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/stroke} \
     [stroke] on MDN}."]

  val fill : ?fill_rule:Canvas_fill_rule.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/fill} \
     [fill] on MDN}."]

  val begin_path : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/beginPath} \
     [beginPath] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    sx:float ->
    sy:float ->
    sw:float ->
    sh:float ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t ->
    dx:float ->
    dy:float ->
    dw:float ->
    dh:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val draw_image :
    image:Canvas_image_source.t -> dx:float -> dy:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/drawImage} \
     [drawImage] on MDN}."]

  val global_composite_operation : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val set_global_composite_operation : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/globalCompositeOperation} \
     [globalCompositeOperation] on MDN}."]

  val global_alpha : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]

  val set_global_alpha : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D/globalAlpha} \
     [globalAlpha] on MDN}."]
end = struct
  type t = [ `Paint_rendering_context2_d ] Js.t

  let t = Js.Ffi.constr "PaintRenderingContext2D"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let reset_transform this =
    Js.to_unit (Js.Ffi.meth_call this "resetTransform" [||])

  let set_transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "setTransform" [| a; b; c; d; e; f |])

  let get_transform this =
    Dom_matrix.of_any (Js.Ffi.meth_call this "getTransform" [||])

  let transform ~a ~b ~c ~d ~e ~f this =
    let a = Js.Any.of_float a in
    let b = Js.Any.of_float b in
    let c = Js.Any.of_float c in
    let d = Js.Any.of_float d in
    let e = Js.Any.of_float e in
    let f = Js.Any.of_float f in
    Js.to_unit (Js.Ffi.meth_call this "transform" [| a; b; c; d; e; f |])

  let translate ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "translate" [| x; y |])

  let rotate ~angle this =
    let angle = Js.Any.of_float angle in
    Js.to_unit (Js.Ffi.meth_call this "rotate" [| angle |])

  let scale ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scale" [| x; y |])

  let shadow_color this = Js.Any.to_string (Js.Ffi.get this "shadowColor")

  let set_shadow_color this x =
    Js.Ffi.set this "shadowColor" (Js.Any.of_string x)

  let shadow_blur this = Js.Any.to_float (Js.Ffi.get this "shadowBlur")
  let set_shadow_blur this x = Js.Ffi.set this "shadowBlur" (Js.Any.of_float x)
  let shadow_offset_y this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetY")

  let set_shadow_offset_y this x =
    Js.Ffi.set this "shadowOffsetY" (Js.Any.of_float x)

  let shadow_offset_x this = Js.Any.to_float (Js.Ffi.get this "shadowOffsetX")

  let set_shadow_offset_x this x =
    Js.Ffi.set this "shadowOffsetX" (Js.Any.of_float x)

  let stroke_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "strokeRect" [| x; y; w; h |])

  let fill_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "fillRect" [| x; y; w; h |])

  let clear_rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "clearRect" [| x; y; w; h |])

  let miter_limit this = Js.Any.to_float (Js.Ffi.get this "miterLimit")
  let set_miter_limit this x = Js.Ffi.set this "miterLimit" (Js.Any.of_float x)
  let line_join this = Canvas_line_join.of_any (Js.Ffi.get this "lineJoin")

  let set_line_join this x =
    Js.Ffi.set this "lineJoin" (Canvas_line_join.to_any x)

  let line_cap this = Canvas_line_cap.of_any (Js.Ffi.get this "lineCap")
  let set_line_cap this x = Js.Ffi.set this "lineCap" (Canvas_line_cap.to_any x)
  let line_width this = Js.Any.to_float (Js.Ffi.get this "lineWidth")
  let set_line_width this x = Js.Ffi.set this "lineWidth" (Js.Any.of_float x)

  let ellipse ~x ~y ~radius_x ~radius_y ~rotation ~start_angle ~end_angle
      ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius_x = Js.Any.of_float radius_x in
    let radius_y = Js.Any.of_float radius_y in
    let rotation = Js.Any.of_float rotation in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "ellipse"
         [|
           x;
           y;
           radius_x;
           radius_y;
           rotation;
           start_angle;
           end_angle;
           anticlockwise;
         |]
      )

  let arc ~x ~y ~radius ~start_angle ~end_angle ?anticlockwise this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let radius = Js.Any.of_float radius in
    let start_angle = Js.Any.of_float start_angle in
    let end_angle = Js.Any.of_float end_angle in
    let anticlockwise =
      (Js.Any.undefined_of_option Js.Any.of_bool) anticlockwise
    in
    Js.to_unit
      (Js.Ffi.meth_call this "arc"
         [| x; y; radius; start_angle; end_angle; anticlockwise |]
      )

  let rect ~x ~y ~w ~h this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let w = Js.Any.of_float w in
    let h = Js.Any.of_float h in
    Js.to_unit (Js.Ffi.meth_call this "rect" [| x; y; w; h |])

  let arc_to ~x1 ~y1 ~x2 ~y2 ~radius this =
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let x2 = Js.Any.of_float x2 in
    let y2 = Js.Any.of_float y2 in
    let radius = Js.Any.of_float radius in
    Js.to_unit (Js.Ffi.meth_call this "arcTo" [| x1; y1; x2; y2; radius |])

  let bezier_curve_to ~cp1x ~cp1y ~cp2x ~cp2y ~x ~y this =
    let cp1x = Js.Any.of_float cp1x in
    let cp1y = Js.Any.of_float cp1y in
    let cp2x = Js.Any.of_float cp2x in
    let cp2y = Js.Any.of_float cp2y in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit
      (Js.Ffi.meth_call this "bezierCurveTo" [| cp1x; cp1y; cp2x; cp2y; x; y |])

  let quadratic_curve_to ~cpx ~cpy ~x ~y this =
    let cpx = Js.Any.of_float cpx in
    let cpy = Js.Any.of_float cpy in
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "quadraticCurveTo" [| cpx; cpy; x; y |])

  let line_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "lineTo" [| x; y |])

  let move_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "moveTo" [| x; y |])

  let close_path this = Js.to_unit (Js.Ffi.meth_call this "closePath" [||])

  let image_smoothing_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "imageSmoothingEnabled")

  let set_image_smoothing_enabled this x =
    Js.Ffi.set this "imageSmoothingEnabled" (Js.Any.of_bool x)

  let create_pattern ~image ~repetition this =
    let image = Canvas_image_source.to_any image in
    let repetition = Js.Any.of_string repetition in
    (Js.Any.nullable_to_option Canvas_pattern.of_any)
      (Js.Ffi.meth_call this "createPattern" [| image; repetition |])

  let create_radial_gradient ~x0 ~y0 ~r0 ~x1 ~y1 ~r1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let r0 = Js.Any.of_float r0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    let r1 = Js.Any.of_float r1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createRadialGradient" [| x0; y0; r0; x1; y1; r1 |])

  let create_linear_gradient ~x0 ~y0 ~x1 ~y1 this =
    let x0 = Js.Any.of_float x0 in
    let y0 = Js.Any.of_float y0 in
    let x1 = Js.Any.of_float x1 in
    let y1 = Js.Any.of_float y1 in
    Canvas_gradient.of_any
      (Js.Ffi.meth_call this "createLinearGradient" [| x0; y0; x1; y1 |])

  let fill_style this = Js.of_any (Js.Ffi.get this "fillStyle")
  let set_fill_style this x = Js.Ffi.set this "fillStyle" (Js.to_any x)
  let stroke_style this = Js.of_any (Js.Ffi.get this "strokeStyle")
  let set_stroke_style this x = Js.Ffi.set this "strokeStyle" (Js.to_any x)

  let is_point_in_path ~x ~y ?fill_rule this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.Any.to_bool (Js.Ffi.meth_call this "isPointInPath" [| x; y; fill_rule |])

  let clip ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "clip" [| fill_rule |])

  let stroke this = Js.to_unit (Js.Ffi.meth_call this "stroke" [||])

  let fill ?fill_rule this =
    let fill_rule =
      (Js.Any.undefined_of_option Canvas_fill_rule.to_any) fill_rule
    in
    Js.to_unit (Js.Ffi.meth_call this "fill" [| fill_rule |])

  let begin_path this = Js.to_unit (Js.Ffi.meth_call this "beginPath" [||])

  let draw_image ~image ~sx ~sy ~sw ~sh ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let sx = Js.Any.of_float sx in
    let sy = Js.Any.of_float sy in
    let sw = Js.Any.of_float sw in
    let sh = Js.Any.of_float sh in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit
      (Js.Ffi.meth_call this "drawImage"
         [| image; sx; sy; sw; sh; dx; dy; dw; dh |]
      )

  let draw_image ~image ~dx ~dy ~dw ~dh this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    let dw = Js.Any.of_float dw in
    let dh = Js.Any.of_float dh in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy; dw; dh |])

  let draw_image ~image ~dx ~dy this =
    let image = Canvas_image_source.to_any image in
    let dx = Js.Any.of_float dx in
    let dy = Js.Any.of_float dy in
    Js.to_unit (Js.Ffi.meth_call this "drawImage" [| image; dx; dy |])

  let global_composite_operation this =
    Js.Any.to_string (Js.Ffi.get this "globalCompositeOperation")

  let set_global_composite_operation this x =
    Js.Ffi.set this "globalCompositeOperation" (Js.Any.of_string x)

  let global_alpha this = Js.Any.to_float (Js.Ffi.get this "globalAlpha")
  let set_global_alpha this x = Js.Ffi.set this "globalAlpha" (Js.Any.of_float x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PaintRenderingContext2D} \
   [PaintRenderingContext2D] on MDN}."]

and Paint_size : sig
  type t = [ `Paint_size ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintSize} [PaintSize]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val width : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PaintSize/width} \
     [width] on MDN}."]

  val height : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintSize/height} \
     [height] on MDN}."]
end = struct
  type t = [ `Paint_size ] Js.t

  let t = Js.Ffi.constr "PaintSize"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let width this = Js.Any.to_float (Js.Ffi.get this "width")
  let height this = Js.Any.to_float (Js.Ffi.get this "height")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PaintSize} \
   [PaintSize] on MDN}."]

and Paint_worklet_global_scope : sig
  type t = [ `Paint_worklet_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope} \
     [PaintWorkletGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Paint_worklet_global_scope
      | `Worklet_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope} \
     [PaintWorkletGlobalScope]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val register_paint : name:string -> paint_ctor:Void_function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope/registerPaint} \
     [registerPaint] on MDN}."]

  val sleep : ms:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope/sleep} \
     [sleep] on MDN}."]
end = struct
  type t = [ `Paint_worklet_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Paint_worklet_global_scope
      | `Worklet_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope} \
     [PaintWorkletGlobalScope]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "PaintWorkletGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_worklet_global_scope this = Js.Ffi.magic this

  let register_paint ~name ~paint_ctor this =
    let name = Js.Any.of_string name in
    let paint_ctor = Void_function.to_any paint_ctor in
    Js.to_unit (Js.Ffi.meth_call this "registerPaint" [| name; paint_ctor |])

  let sleep ~ms this =
    let ms = Js.Any.of_int ms in
    Js.to_unit (Js.Ffi.meth_call this "sleep" [| ms |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope} \
   [PaintWorkletGlobalScope] on MDN}."]

and Panner_options : sig
  type t [@@ocaml.doc "The type for the [PannerOptions] dictionary."]

  val make :
    ?panning_model:Panning_model_type.t ->
    ?distance_model:Distance_model_type.t ->
    ?position_x:float ->
    ?position_y:float ->
    ?position_z:float ->
    ?orientation_x:float ->
    ?orientation_y:float ->
    ?orientation_z:float ->
    ?ref_distance:float ->
    ?max_distance:float ->
    ?rolloff_factor:float ->
    ?cone_inner_angle:float ->
    ?cone_outer_angle:float ->
    ?cone_outer_gain:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val panning_model : t -> Panning_model_type.t option
  val distance_model : t -> Distance_model_type.t option
  val position_x : t -> float option
  val position_y : t -> float option
  val position_z : t -> float option
  val orientation_x : t -> float option
  val orientation_y : t -> float option
  val orientation_z : t -> float option
  val ref_distance : t -> float option
  val max_distance : t -> float option
  val rolloff_factor : t -> float option
  val cone_inner_angle : t -> float option
  val cone_outer_angle : t -> float option
  val cone_outer_gain : t -> float option
end = struct
  type t = Js.any

  let make ?panning_model ?distance_model ?position_x ?position_y ?position_z
      ?orientation_x ?orientation_y ?orientation_z ?ref_distance ?max_distance
      ?rolloff_factor ?cone_inner_angle ?cone_outer_angle ?cone_outer_gain () =
    let panning_model =
      (Js.Any.nullable_of_option Panning_model_type.to_any) panning_model
    in
    let distance_model =
      (Js.Any.nullable_of_option Distance_model_type.to_any) distance_model
    in
    let position_x = (Js.Any.nullable_of_option Js.Any.of_float) position_x in
    let position_y = (Js.Any.nullable_of_option Js.Any.of_float) position_y in
    let position_z = (Js.Any.nullable_of_option Js.Any.of_float) position_z in
    let orientation_x =
      (Js.Any.nullable_of_option Js.Any.of_float) orientation_x
    in
    let orientation_y =
      (Js.Any.nullable_of_option Js.Any.of_float) orientation_y
    in
    let orientation_z =
      (Js.Any.nullable_of_option Js.Any.of_float) orientation_z
    in
    let ref_distance =
      (Js.Any.nullable_of_option Js.Any.of_float) ref_distance
    in
    let max_distance =
      (Js.Any.nullable_of_option Js.Any.of_float) max_distance
    in
    let rolloff_factor =
      (Js.Any.nullable_of_option Js.Any.of_float) rolloff_factor
    in
    let cone_inner_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) cone_inner_angle
    in
    let cone_outer_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) cone_outer_angle
    in
    let cone_outer_gain =
      (Js.Any.nullable_of_option Js.Any.of_float) cone_outer_gain
    in
    Js.Ffi.obj
      [|
        ("panningModel", panning_model);
        ("distanceModel", distance_model);
        ("positionX", position_x);
        ("positionY", position_y);
        ("positionZ", position_z);
        ("orientationX", orientation_x);
        ("orientationY", orientation_y);
        ("orientationZ", orientation_z);
        ("refDistance", ref_distance);
        ("maxDistance", max_distance);
        ("rolloffFactor", rolloff_factor);
        ("coneInnerAngle", cone_inner_angle);
        ("coneOuterAngle", cone_outer_angle);
        ("coneOuterGain", cone_outer_gain);
      |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let panning_model this =
    (Js.Any.nullable_to_option Panning_model_type.of_any)
      (Js.Ffi.get this "panningModel")

  let distance_model this =
    (Js.Any.nullable_to_option Distance_model_type.of_any)
      (Js.Ffi.get this "distanceModel")

  let position_x this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "positionX")

  let position_y this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "positionY")

  let position_z this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "positionZ")

  let orientation_x this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "orientationX")

  let orientation_y this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "orientationY")

  let orientation_z this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "orientationZ")

  let ref_distance this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "refDistance")

  let max_distance this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "maxDistance")

  let rolloff_factor this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "rolloffFactor")

  let cone_inner_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "coneInnerAngle")

  let cone_outer_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "coneOuterAngle")

  let cone_outer_gain this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "coneOuterGain")
end

and Distance_model_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val linear : t
  val inverse : t
  val exponential : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let linear = Js.of_string "linear"
  let inverse = Js.of_string "inverse"
  let exponential = Js.of_string "exponential"
end

and Panning_model_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val equalpower : t
  val hrtf : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let equalpower = Js.of_string "equalpower"
  let hrtf = Js.of_string "HRTF"
end

and Panner_node : sig
  type t = [ `Panner_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode} \
     [PannerNode]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Panner_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode} \
     [PannerNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Panner_options.t ->
    unit ->
    'a super

  val panning_model : t -> Panning_model_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel} \
     [panningModel] on MDN}."]

  val set_panning_model : t -> Panning_model_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel} \
     [panningModel] on MDN}."]

  val position_x : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX} \
     [positionX] on MDN}."]

  val position_y : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY} \
     [positionY] on MDN}."]

  val position_z : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ} \
     [positionZ] on MDN}."]

  val orientation_x : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX} \
     [orientationX] on MDN}."]

  val orientation_y : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY} \
     [orientationY] on MDN}."]

  val orientation_z : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ} \
     [orientationZ] on MDN}."]

  val distance_model : t -> Distance_model_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel} \
     [distanceModel] on MDN}."]

  val set_distance_model : t -> Distance_model_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel} \
     [distanceModel] on MDN}."]

  val ref_distance : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance} \
     [refDistance] on MDN}."]

  val set_ref_distance : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance} \
     [refDistance] on MDN}."]

  val max_distance : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance} \
     [maxDistance] on MDN}."]

  val set_max_distance : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance} \
     [maxDistance] on MDN}."]

  val rolloff_factor : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor} \
     [rolloffFactor] on MDN}."]

  val set_rolloff_factor : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor} \
     [rolloffFactor] on MDN}."]

  val cone_inner_angle : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle} \
     [coneInnerAngle] on MDN}."]

  val set_cone_inner_angle : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle} \
     [coneInnerAngle] on MDN}."]

  val cone_outer_angle : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle} \
     [coneOuterAngle] on MDN}."]

  val set_cone_outer_angle : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle} \
     [coneOuterAngle] on MDN}."]

  val cone_outer_gain : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain} \
     [coneOuterGain] on MDN}."]

  val set_cone_outer_gain : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain} \
     [coneOuterGain] on MDN}."]

  val set_position : x:float -> y:float -> z:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition} \
     [setPosition] on MDN}."]

  val set_orientation : x:float -> y:float -> z:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation} \
     [setOrientation] on MDN}."]
end = struct
  type t = [ `Panner_node ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Panner_node | `Audio_node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PannerNode} \
     [PannerNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PannerNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options = (Js.Any.undefined_of_option Panner_options.to_any) options in
    Js.Ffi.obj_new t [| context; options |]

  let panning_model this =
    Panning_model_type.of_any (Js.Ffi.get this "panningModel")

  let set_panning_model this x =
    Js.Ffi.set this "panningModel" (Panning_model_type.to_any x)

  let position_x this = Audio_param.of_any (Js.Ffi.get this "positionX")
  let position_y this = Audio_param.of_any (Js.Ffi.get this "positionY")
  let position_z this = Audio_param.of_any (Js.Ffi.get this "positionZ")
  let orientation_x this = Audio_param.of_any (Js.Ffi.get this "orientationX")
  let orientation_y this = Audio_param.of_any (Js.Ffi.get this "orientationY")
  let orientation_z this = Audio_param.of_any (Js.Ffi.get this "orientationZ")

  let distance_model this =
    Distance_model_type.of_any (Js.Ffi.get this "distanceModel")

  let set_distance_model this x =
    Js.Ffi.set this "distanceModel" (Distance_model_type.to_any x)

  let ref_distance this = Js.Any.to_float (Js.Ffi.get this "refDistance")
  let set_ref_distance this x = Js.Ffi.set this "refDistance" (Js.Any.of_float x)
  let max_distance this = Js.Any.to_float (Js.Ffi.get this "maxDistance")
  let set_max_distance this x = Js.Ffi.set this "maxDistance" (Js.Any.of_float x)
  let rolloff_factor this = Js.Any.to_float (Js.Ffi.get this "rolloffFactor")

  let set_rolloff_factor this x =
    Js.Ffi.set this "rolloffFactor" (Js.Any.of_float x)

  let cone_inner_angle this = Js.Any.to_float (Js.Ffi.get this "coneInnerAngle")

  let set_cone_inner_angle this x =
    Js.Ffi.set this "coneInnerAngle" (Js.Any.of_float x)

  let cone_outer_angle this = Js.Any.to_float (Js.Ffi.get this "coneOuterAngle")

  let set_cone_outer_angle this x =
    Js.Ffi.set this "coneOuterAngle" (Js.Any.of_float x)

  let cone_outer_gain this = Js.Any.to_float (Js.Ffi.get this "coneOuterGain")

  let set_cone_outer_gain this x =
    Js.Ffi.set this "coneOuterGain" (Js.Any.of_float x)

  let set_position ~x ~y ~z this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let z = Js.Any.of_float z in
    Js.to_unit (Js.Ffi.meth_call this "setPosition" [| x; y; z |])

  let set_orientation ~x ~y ~z this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let z = Js.Any.of_float z in
    Js.to_unit (Js.Ffi.meth_call this "setOrientation" [| x; y; z |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PannerNode} \
   [PannerNode] on MDN}."]

and Dom_high_res_time_stamp : sig
  type nonrec t = float

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Dom_high_res_time_stamp

and Performance_entry_list : sig
  type nonrec t = Performance_entry.t array

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Performance_entry_list

and Performance : sig
  type t = [ `Performance ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance} \
     [Performance]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Performance | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance} \
     [Performance]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val now : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now} \
     [now] on MDN}."]

  val time_origin : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin} \
     [timeOrigin] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON} \
     [toJSON] on MDN}."]

  val timing : t -> 'a Performance_navigation_timing.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing} \
     [timing] on MDN}."]

  val navigation : t -> Performance_navigation.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation} \
     [navigation] on MDN}."]

  val clear_resource_timings : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings} \
     [clearResourceTimings] on MDN}."]

  val set_resource_timing_buffer_size : max_size:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize} \
     [setResourceTimingBufferSize] on MDN}."]

  val onresourcetimingbufferfull : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull} \
     [onresourcetimingbufferfull] on MDN}."]

  val set_onresourcetimingbufferfull : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull} \
     [onresourcetimingbufferfull] on MDN}."]

  val mark : mark_name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark} [mark] \
     on MDN}."]

  val clear_marks : ?mark_name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks} \
     [clearMarks] on MDN}."]

  val measure :
    measure_name:string -> ?start_mark:string -> ?end_mark:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure} \
     [measure] on MDN}."]

  val clear_measures : ?measure_name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures} \
     [clearMeasures] on MDN}."]

  val get_entries : t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries} \
     [getEntries] on MDN}."]

  val get_entries_by_type : type':string -> t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType} \
     [getEntriesByType] on MDN}."]

  val get_entries_by_name :
    name:string -> ?type':string -> t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName} \
     [getEntriesByName] on MDN}."]
end = struct
  type t = [ `Performance ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Performance | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Performance} \
     [Performance]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Performance"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let now this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.meth_call this "now" [||])

  let time_origin this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "timeOrigin")

  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])

  let timing this =
    Performance_navigation_timing.of_any (Js.Ffi.get this "timing")

  let navigation this =
    Performance_navigation.of_any (Js.Ffi.get this "navigation")

  let clear_resource_timings this =
    Js.to_unit (Js.Ffi.meth_call this "clearResourceTimings" [||])

  let set_resource_timing_buffer_size ~max_size this =
    let max_size = Js.Any.of_int max_size in
    Js.to_unit
      (Js.Ffi.meth_call this "setResourceTimingBufferSize" [| max_size |])

  let onresourcetimingbufferfull this =
    Event_handler.of_any (Js.Ffi.get this "onresourcetimingbufferfull")

  let set_onresourcetimingbufferfull this x =
    Js.Ffi.set this "onresourcetimingbufferfull" (Event_handler.to_any x)

  let mark ~mark_name this =
    let mark_name = Js.Any.of_string mark_name in
    Js.to_unit (Js.Ffi.meth_call this "mark" [| mark_name |])

  let clear_marks ?mark_name this =
    let mark_name = (Js.Any.undefined_of_option Js.Any.of_string) mark_name in
    Js.to_unit (Js.Ffi.meth_call this "clearMarks" [| mark_name |])

  let measure ~measure_name ?start_mark ?end_mark this =
    let measure_name = Js.Any.of_string measure_name in
    let start_mark = (Js.Any.undefined_of_option Js.Any.of_string) start_mark in
    let end_mark = (Js.Any.undefined_of_option Js.Any.of_string) end_mark in
    Js.to_unit
      (Js.Ffi.meth_call this "measure" [| measure_name; start_mark; end_mark |])

  let clear_measures ?measure_name this =
    let measure_name =
      (Js.Any.undefined_of_option Js.Any.of_string) measure_name
    in
    Js.to_unit (Js.Ffi.meth_call this "clearMeasures" [| measure_name |])

  let get_entries this =
    Performance_entry_list.of_any (Js.Ffi.meth_call this "getEntries" [||])

  let get_entries_by_type ~type' this =
    let type' = Js.Any.of_string type' in
    Performance_entry_list.of_any
      (Js.Ffi.meth_call this "getEntriesByType" [| type' |])

  let get_entries_by_name ~name ?type' this =
    let name = Js.Any.of_string name in
    let type' = (Js.Any.undefined_of_option Js.Any.of_string) type' in
    Performance_entry_list.of_any
      (Js.Ffi.meth_call this "getEntriesByName" [| name; type' |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Performance} \
   [Performance] on MDN}."]

and Performance_entry : sig
  type t = [ `Performance_entry ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry} \
     [PerformanceEntry]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name} \
     [name] on MDN}."]

  val entry_type : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType} \
     [entryType] on MDN}."]

  val start_time : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime} \
     [startTime] on MDN}."]

  val duration : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration} \
     [duration] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Performance_entry ] Js.t

  let t = Js.Ffi.constr "PerformanceEntry"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let entry_type this = Js.Any.to_string (Js.Ffi.get this "entryType")

  let start_time this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "startTime")

  let duration this = Dom_high_res_time_stamp.of_any (Js.Ffi.get this "duration")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry} \
   [PerformanceEntry] on MDN}."]

and Performance_mark : sig
  type t = [ `Performance_mark ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark} \
     [PerformanceMark]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_mark | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark} \
     [PerformanceMark]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Performance_mark ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_mark | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark} \
     [PerformanceMark]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PerformanceMark"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_performance_entry this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark} \
   [PerformanceMark] on MDN}."]

and Performance_measure : sig
  type t = [ `Performance_measure ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure} \
     [PerformanceMeasure]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_measure | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure} \
     [PerformanceMeasure]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Performance_measure ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_measure | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure} \
     [PerformanceMeasure]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PerformanceMeasure"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_performance_entry this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure} \
   [PerformanceMeasure] on MDN}."]

and Performance_navigation : sig
  type t = [ `Performance_navigation ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation} \
     [PerformanceNavigation]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type_navigate : int
  val type_reload : int
  val type_back_forward : int
  val type_reserved : int

  val type' : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/type} \
     [type] on MDN}."]

  val redirect_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/redirectCount} \
     [redirectCount] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Performance_navigation ] Js.t

  let t = Js.Ffi.constr "PerformanceNavigation"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let type_navigate = 0
  let type_reload = 1
  let type_back_forward = 2
  let type_reserved = 255
  let type' this = Js.Any.to_int (Js.Ffi.get this "type")
  let redirect_count this = Js.Any.to_int (Js.Ffi.get this "redirectCount")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation} \
   [PerformanceNavigation] on MDN}."]

and Navigation_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val navigate : t
  val reload : t
  val back_forward : t
  val prerender : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let navigate = Js.of_string "navigate"
  let reload = Js.of_string "reload"
  let back_forward = Js.of_string "back_forward"
  let prerender = Js.of_string "prerender"
end

and Performance_navigation_timing : sig
  type t = [ `Performance_navigation_timing ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming} \
     [PerformanceNavigationTiming]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Performance_navigation_timing
      | `Performance_resource_timing
      | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming} \
     [PerformanceNavigationTiming]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val unload_event_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/unloadEventStart} \
     [unloadEventStart] on MDN}."]

  val unload_event_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd} \
     [unloadEventEnd] on MDN}."]

  val dom_interactive : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domInteractive} \
     [domInteractive] on MDN}."]

  val dom_content_loaded_event_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart} \
     [domContentLoadedEventStart] on MDN}."]

  val dom_content_loaded_event_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd} \
     [domContentLoadedEventEnd] on MDN}."]

  val dom_complete : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domComplete} \
     [domComplete] on MDN}."]

  val load_event_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/loadEventStart} \
     [loadEventStart] on MDN}."]

  val load_event_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/loadEventEnd} \
     [loadEventEnd] on MDN}."]

  val type' : t -> Navigation_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/type} \
     [type] on MDN}."]

  val redirect_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/redirectCount} \
     [redirectCount] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/toJSON} \
     [toJSON] on MDN}."]

  val top_level_dom_complete : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/topLevelDomComplete} \
     [topLevelDomComplete] on MDN}."]
end = struct
  type t = [ `Performance_navigation_timing ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Performance_navigation_timing
      | `Performance_resource_timing
      | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming} \
     [PerformanceNavigationTiming]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "PerformanceNavigationTiming"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_performance_resource_timing this = Js.Ffi.magic this

  let unload_event_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "unloadEventStart")

  let unload_event_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "unloadEventEnd")

  let dom_interactive this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domInteractive")

  let dom_content_loaded_event_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domContentLoadedEventStart")

  let dom_content_loaded_event_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domContentLoadedEventEnd")

  let dom_complete this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domComplete")

  let load_event_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "loadEventStart")

  let load_event_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "loadEventEnd")

  let type' this = Navigation_type.of_any (Js.Ffi.get this "type")
  let redirect_count this = Js.Any.to_int (Js.Ffi.get this "redirectCount")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])

  let top_level_dom_complete this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "topLevelDomComplete")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming} \
   [PerformanceNavigationTiming] on MDN}."]

and Performance_observer_init : sig
  type t [@@ocaml.doc "The type for the [PerformanceObserverInit] dictionary."]

  val make :
    ?entry_types:string array -> ?type':string -> ?buffered:bool -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val entry_types : t -> string array option
  val type' : t -> string option
  val buffered : t -> bool option
end = struct
  type t = Js.any

  let make ?entry_types ?type' ?buffered () =
    let entry_types =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.Any.of_string)) entry_types
    in
    let type' = (Js.Any.nullable_of_option Js.Any.of_string) type' in
    let buffered = (Js.Any.nullable_of_option Js.Any.of_bool) buffered in
    Js.Ffi.obj
      [| ("entryTypes", entry_types); ("type", type'); ("buffered", buffered) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let entry_types this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_string))
      (Js.Ffi.get this "entryTypes")

  let type' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "type")

  let buffered this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "buffered")
end

and Performance_observer_callback : sig
  type t = Performance_observer_entry_list.t -> Performance_observer.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Performance_observer_callback

and Performance_observer : sig
  type t = [ `Performance_observer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver} \
     [PerformanceObserver]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : callback:Performance_observer_callback.t -> unit -> t

  val observe : ?options:Performance_observer_init.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe} \
     [observe] on MDN}."]

  val disconnect : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect} \
     [disconnect] on MDN}."]

  val take_records : t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/takeRecords} \
     [takeRecords] on MDN}."]

  val supported_entry_types : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/supportedEntryTypes} \
     [supportedEntryTypes] on MDN}."]
end = struct
  type t = [ `Performance_observer ] Js.t

  let t = Js.Ffi.constr "PerformanceObserver"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~callback () =
    let callback = Performance_observer_callback.to_any callback in
    Js.Ffi.obj_new t [| callback |]

  let observe ?options this =
    let options =
      (Js.Any.undefined_of_option Performance_observer_init.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "observe" [| options |])

  let disconnect this = Js.to_unit (Js.Ffi.meth_call this "disconnect" [||])

  let take_records this =
    Performance_entry_list.of_any (Js.Ffi.meth_call this "takeRecords" [||])

  let supported_entry_types this =
    Js.to_any (Js.Ffi.get this "supportedEntryTypes")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver} \
   [PerformanceObserver] on MDN}."]

and Performance_observer_entry_list : sig
  type t = [ `Performance_observer_entry_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList} \
     [PerformanceObserverEntryList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_entries : t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries} \
     [getEntries] on MDN}."]

  val get_entries_by_type : entry_type:string -> t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType} \
     [getEntriesByType] on MDN}."]

  val get_entries_by_name :
    name:string -> ?entry_type:string -> t -> Performance_entry_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName} \
     [getEntriesByName] on MDN}."]
end = struct
  type t = [ `Performance_observer_entry_list ] Js.t

  let t = Js.Ffi.constr "PerformanceObserverEntryList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_entries this =
    Performance_entry_list.of_any (Js.Ffi.meth_call this "getEntries" [||])

  let get_entries_by_type ~entry_type this =
    let entry_type = Js.Any.of_string entry_type in
    Performance_entry_list.of_any
      (Js.Ffi.meth_call this "getEntriesByType" [| entry_type |])

  let get_entries_by_name ~name ?entry_type this =
    let name = Js.Any.of_string name in
    let entry_type = (Js.Any.undefined_of_option Js.Any.of_string) entry_type in
    Performance_entry_list.of_any
      (Js.Ffi.meth_call this "getEntriesByName" [| name; entry_type |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList} \
   [PerformanceObserverEntryList] on MDN}."]

and Performance_paint_timing : sig
  type t = [ `Performance_paint_timing ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming} \
     [PerformancePaintTiming]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_paint_timing | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming} \
     [PerformancePaintTiming]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Performance_paint_timing ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_paint_timing | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming} \
     [PerformancePaintTiming]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "PerformancePaintTiming"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_performance_entry this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming} \
   [PerformancePaintTiming] on MDN}."]

and Performance_resource_timing : sig
  type t = [ `Performance_resource_timing ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming} \
     [PerformanceResourceTiming]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_resource_timing | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming} \
     [PerformanceResourceTiming]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val initiator_type : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType} \
     [initiatorType] on MDN}."]

  val next_hop_protocol : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol} \
     [nextHopProtocol] on MDN}."]

  val redirect_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart} \
     [redirectStart] on MDN}."]

  val redirect_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd} \
     [redirectEnd] on MDN}."]

  val fetch_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart} \
     [fetchStart] on MDN}."]

  val domain_lookup_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart} \
     [domainLookupStart] on MDN}."]

  val domain_lookup_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd} \
     [domainLookupEnd] on MDN}."]

  val connect_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart} \
     [connectStart] on MDN}."]

  val connect_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd} \
     [connectEnd] on MDN}."]

  val secure_connection_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart} \
     [secureConnectionStart] on MDN}."]

  val request_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart} \
     [requestStart] on MDN}."]

  val response_start : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart} \
     [responseStart] on MDN}."]

  val response_end : t -> Dom_high_res_time_stamp.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd} \
     [responseEnd] on MDN}."]

  val transfer_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize} \
     [transferSize] on MDN}."]

  val encoded_body_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize} \
     [encodedBodySize] on MDN}."]

  val decoded_body_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize} \
     [decodedBodySize] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Performance_resource_timing ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Performance_resource_timing | `Performance_entry ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming} \
     [PerformanceResourceTiming]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "PerformanceResourceTiming"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_performance_entry this = Js.Ffi.magic this
  let initiator_type this = Js.Any.to_string (Js.Ffi.get this "initiatorType")

  let next_hop_protocol this =
    Js.Any.to_string (Js.Ffi.get this "nextHopProtocol")

  let redirect_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "redirectStart")

  let redirect_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "redirectEnd")

  let fetch_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "fetchStart")

  let domain_lookup_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domainLookupStart")

  let domain_lookup_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "domainLookupEnd")

  let connect_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "connectStart")

  let connect_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "connectEnd")

  let secure_connection_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "secureConnectionStart")

  let request_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "requestStart")

  let response_start this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "responseStart")

  let response_end this =
    Dom_high_res_time_stamp.of_any (Js.Ffi.get this "responseEnd")

  let transfer_size this = Js.Any.to_int (Js.Ffi.get this "transferSize")
  let encoded_body_size this = Js.Any.to_int (Js.Ffi.get this "encodedBodySize")
  let decoded_body_size this = Js.Any.to_int (Js.Ffi.get this "decodedBodySize")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming} \
   [PerformanceResourceTiming] on MDN}."]

and Permission_descriptor : sig
  type t [@@ocaml.doc "The type for the [PermissionDescriptor] dictionary."]

  val make : name:Permission_name.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val name : t -> Permission_name.t
end = struct
  type t = Js.any

  let make ~name () =
    let name = Permission_name.to_any name in
    Js.Ffi.obj [| ("name", name) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let name this = Permission_name.of_any (Js.Ffi.get this "name")
end

and Permission_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val granted : t
  val denied : t
  val prompt : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let granted = Js.of_string "granted"
  let denied = Js.of_string "denied"
  let prompt = Js.of_string "prompt"
end

and Permission_name : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val geolocation : t
  val notifications : t
  val push : t
  val midi : t
  val camera : t
  val microphone : t
  val speaker : t
  val device_info : t
  val background_sync : t
  val bluetooth : t
  val persistent_storage : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let geolocation = Js.of_string "geolocation"
  let notifications = Js.of_string "notifications"
  let push = Js.of_string "push"
  let midi = Js.of_string "midi"
  let camera = Js.of_string "camera"
  let microphone = Js.of_string "microphone"
  let speaker = Js.of_string "speaker"
  let device_info = Js.of_string "device-info"
  let background_sync = Js.of_string "background-sync"
  let bluetooth = Js.of_string "bluetooth"
  let persistent_storage = Js.of_string "persistent-storage"
end

and Permission_status : sig
  type t = [ `Permission_status ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus} \
     [PermissionStatus]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Permission_status | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus} \
     [PermissionStatus]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val state : t -> Permission_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/state} \
     [state] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/onchange} \
     [onchange] on MDN}."]
end = struct
  type t = [ `Permission_status ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Permission_status | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus} \
     [PermissionStatus]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PermissionStatus"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let state this = Permission_state.of_any (Js.Ffi.get this "state")
  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus} \
   [PermissionStatus] on MDN}."]

and Push_permission_descriptor : sig
  type t [@@ocaml.doc "The type for the [PushPermissionDescriptor] dictionary."]

  val make : ?user_visible_only:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_permission_descriptor : t -> Permission_descriptor.t
  val user_visible_only : t -> bool option
end = struct
  type t = Js.any

  let make ?user_visible_only () =
    let user_visible_only =
      (Js.Any.nullable_of_option Js.Any.of_bool) user_visible_only
    in
    Js.Ffi.obj [| ("userVisibleOnly", user_visible_only) |]

  let to_permission_descriptor this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let user_visible_only this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "userVisibleOnly")
end

and Midi_permission_descriptor : sig
  type t [@@ocaml.doc "The type for the [MidiPermissionDescriptor] dictionary."]

  val make : ?sysex:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_permission_descriptor : t -> Permission_descriptor.t
  val sysex : t -> bool option
end = struct
  type t = Js.any

  let make ?sysex () =
    let sysex = (Js.Any.nullable_of_option Js.Any.of_bool) sysex in
    Js.Ffi.obj [| ("sysex", sysex) |]

  let to_permission_descriptor this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let sysex this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "sysex")
end

and Device_permission_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [DevicePermissionDescriptor] dictionary."]

  val make : ?device_id:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_permission_descriptor : t -> Permission_descriptor.t
  val device_id : t -> string option
end = struct
  type t = Js.any

  let make ?device_id () =
    let device_id = (Js.Any.nullable_of_option Js.Any.of_string) device_id in
    Js.Ffi.obj [| ("deviceId", device_id) |]

  let to_permission_descriptor this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let device_id this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "deviceId")
end

and Permissions : sig
  type t = [ `Permissions ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Permissions} \
     [Permissions]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val query :
    permission_desc:'todo_object -> t -> Permission_status.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query} \
     [query] on MDN}."]

  val request :
    permission_desc:'todo_object -> t -> Permission_status.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Permissions/request} \
     [request] on MDN}."]

  val revoke :
    permission_desc:'todo_object -> t -> Permission_status.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Permissions/revoke} \
     [revoke] on MDN}."]
end = struct
  type t = [ `Permissions ] Js.t

  let t = Js.Ffi.constr "Permissions"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let query ~permission_desc this =
    let permission_desc = Js.object_todo permission_desc in
    (Promise.of_any Permission_status.of_any)
      (Js.Ffi.meth_call this "query" [| permission_desc |])

  let request ~permission_desc this =
    let permission_desc = Js.object_todo permission_desc in
    (Promise.of_any Permission_status.of_any)
      (Js.Ffi.meth_call this "request" [| permission_desc |])

  let revoke ~permission_desc this =
    let permission_desc = Js.object_todo permission_desc in
    (Promise.of_any Permission_status.of_any)
      (Js.Ffi.meth_call this "revoke" [| permission_desc |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Permissions} \
   [Permissions] on MDN}."]

and Plugin : sig
  type t = [ `Plugin ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Plugin} [Plugin]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Plugin/name} \
     [name] on MDN}."]

  val description : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Plugin/description} \
     [description] on MDN}."]

  val filename : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Plugin/filename} \
     [filename] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Plugin/length} \
     [length] on MDN}."]

  val item : index:int -> t -> Mime_type.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Plugin/item} \
     [item] on MDN}."]

  val named_item : name:string -> t -> Mime_type.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Plugin/namedItem} \
     [namedItem] on MDN}."]
end = struct
  type t = [ `Plugin ] Js.t

  let t = Js.Ffi.constr "Plugin"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let description this = Js.Any.to_string (Js.Ffi.get this "description")
  let filename this = Js.Any.to_string (Js.Ffi.get this "filename")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Mime_type.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let named_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Mime_type.of_any)
      (Js.Ffi.meth_call this "namedItem" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Plugin} [Plugin] \
   on MDN}."]

and Plugin_array : sig
  type t = [ `Plugin_array ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PluginArray} \
     [PluginArray]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val refresh : ?reload:bool -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PluginArray/refresh} \
     [refresh] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PluginArray/length} \
     [length] on MDN}."]

  val item : index:int -> t -> Plugin.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PluginArray/item} [item] \
     on MDN}."]

  val named_item : name:string -> t -> Plugin.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PluginArray/namedItem} \
     [namedItem] on MDN}."]
end = struct
  type t = [ `Plugin_array ] Js.t

  let t = Js.Ffi.constr "PluginArray"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let refresh ?reload this =
    let reload = (Js.Any.undefined_of_option Js.Any.of_bool) reload in
    Js.to_unit (Js.Ffi.meth_call this "refresh" [| reload |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Plugin.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let named_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Plugin.of_any)
      (Js.Ffi.meth_call this "namedItem" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PluginArray} \
   [PluginArray] on MDN}."]

and Pop_state_event : sig
  type t = [ `Pop_state_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent} \
     [PopStateEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Pop_state_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent} \
     [PopStateEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Pop_state_event_init.t -> unit -> 'a super

  val state : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent/state} \
     [state] on MDN}."]
end = struct
  type t = [ `Pop_state_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Pop_state_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent} \
     [PopStateEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "PopStateEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Pop_state_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let state this = Js.to_any (Js.Ffi.get this "state")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent} \
   [PopStateEvent] on MDN}."]

and Pop_state_event_init : sig
  type t [@@ocaml.doc "The type for the [PopStateEventInit] dictionary."]

  val make : ?state:Js.any -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val state : t -> Js.any option
end = struct
  type t = Js.any

  let make ?state () =
    let state = (Js.Any.nullable_of_option Js.of_any) state in
    Js.Ffi.obj [| ("state", state) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let state this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "state")
end

and Processing_instruction : sig
  type t = [ `Processing_instruction ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction} \
     [ProcessingInstruction]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Processing_instruction | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction} \
     [ProcessingInstruction]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val target : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/target} \
     [target] on MDN}."]
end = struct
  type t = [ `Processing_instruction ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Processing_instruction | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction} \
     [ProcessingInstruction]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "ProcessingInstruction"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_character_data this = Js.Ffi.magic this
  let target this = Js.Any.to_string (Js.Ffi.get this "target")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction} \
   [ProcessingInstruction] on MDN}."]

and Progress_event : sig
  type t = [ `Progress_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent} \
     [ProgressEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Progress_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent} \
     [ProgressEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Progress_event_init.t -> unit -> 'a super

  val length_computable : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable} \
     [lengthComputable] on MDN}."]

  val loaded : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded} \
     [loaded] on MDN}."]

  val total : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total} \
     [total] on MDN}."]
end = struct
  type t = [ `Progress_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Progress_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent} \
     [ProgressEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ProgressEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Progress_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let length_computable this =
    Js.Any.to_bool (Js.Ffi.get this "lengthComputable")

  let loaded this = Js.Any.to_int (Js.Ffi.get this "loaded")
  let total this = Js.Any.to_int (Js.Ffi.get this "total")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent} \
   [ProgressEvent] on MDN}."]

and Progress_event_init : sig
  type t [@@ocaml.doc "The type for the [ProgressEventInit] dictionary."]

  val make : ?length_computable:bool -> ?loaded:int -> ?total:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val length_computable : t -> bool option
  val loaded : t -> int option
  val total : t -> int option
end = struct
  type t = Js.any

  let make ?length_computable ?loaded ?total () =
    let length_computable =
      (Js.Any.nullable_of_option Js.Any.of_bool) length_computable
    in
    let loaded = (Js.Any.nullable_of_option Js.Any.of_int) loaded in
    let total = (Js.Any.nullable_of_option Js.Any.of_int) total in
    Js.Ffi.obj
      [|
        ("lengthComputable", length_computable);
        ("loaded", loaded);
        ("total", total);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let length_computable this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "lengthComputable")

  let loaded this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "loaded")

  let total this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "total")
end

and Promise_job_callback : sig
  type t = unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Promise_job_callback

and Any_callback : sig
  type t = Js.any -> Js.any

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Any_callback

and Promise_native_handler : sig
  type t = [ `Promise_native_handler ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseNativeHandler} \
     [PromiseNativeHandler]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Promise_native_handler ] Js.t

  let t = Js.Ffi.constr "PromiseNativeHandler"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PromiseNativeHandler} \
   [PromiseNativeHandler] on MDN}."]

and Promise_rejection_event : sig
  type t = [ `Promise_rejection_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent} \
     [PromiseRejectionEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Promise_rejection_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent} \
     [PromiseRejectionEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    event_init_dict:Promise_rejection_event_init.t ->
    unit ->
    'a super

  val promise : t -> Js.any Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise} \
     [promise] on MDN}."]

  val reason : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason} \
     [reason] on MDN}."]
end = struct
  type t = [ `Promise_rejection_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Promise_rejection_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent} \
     [PromiseRejectionEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "PromiseRejectionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Promise_rejection_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let promise this = (Promise.of_any Js.to_any) (Js.Ffi.get this "promise")
  let reason this = Js.to_any (Js.Ffi.get this "reason")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent} \
   [PromiseRejectionEvent] on MDN}."]

and Promise_rejection_event_init : sig
  type t
  [@@ocaml.doc "The type for the [PromiseRejectionEventInit] dictionary."]

  val make : promise:Js.any Js.promise -> ?reason:Js.any -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val promise : t -> Js.any Js.promise
  val reason : t -> Js.any option
end = struct
  type t = Js.any

  let make ~promise ?reason () =
    let promise = (Promise.of_any Js.of_any) promise in
    let reason = (Js.Any.nullable_of_option Js.of_any) reason in
    Js.Ffi.obj [| ("promise", promise); ("reason", reason) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let promise this = (Promise.of_any Js.to_any) (Js.Ffi.get this "promise")

  let reason this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "reason")
end

and Rtc_data_channel : sig
  type t = [ `Rtc_data_channel ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel} \
     [RTCDataChannel]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_data_channel | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel} \
     [RTCDataChannel]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/label} \
     [label] on MDN}."]

  val ordered : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/ordered} \
     [ordered] on MDN}."]

  val max_packet_life_time : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxPacketLifeTime} \
     [maxPacketLifeTime] on MDN}."]

  val max_retransmits : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxRetransmits} \
     [maxRetransmits] on MDN}."]

  val protocol : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/protocol} \
     [protocol] on MDN}."]

  val negotiated : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/negotiated} \
     [negotiated] on MDN}."]

  val id : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/id} [id] \
     on MDN}."]

  val ready_state : t -> Rtc_data_channel_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/readyState} \
     [readyState] on MDN}."]

  val onopen : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen} \
     [onopen] on MDN}."]

  val set_onopen : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen} \
     [onopen] on MDN}."]

  val onbufferedamountlow : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow} \
     [onbufferedamountlow] on MDN}."]

  val set_onbufferedamountlow : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow} \
     [onbufferedamountlow] on MDN}."]

  val onerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror} \
     [onerror] on MDN}."]

  val onclosing : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclosing} \
     [onclosing] on MDN}."]

  val set_onclosing : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclosing} \
     [onclosing] on MDN}."]

  val onclose : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose} \
     [onclose] on MDN}."]

  val set_onclose : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose} \
     [onclose] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close} \
     [close] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage} \
     [onmessage] on MDN}."]

  val binary_type : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType} \
     [binaryType] on MDN}."]

  val set_binary_type : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType} \
     [binaryType] on MDN}."]

  val send : data:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send} \
     [send] on MDN}."]

  val send : data:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send} \
     [send] on MDN}."]

  val send : data:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send} \
     [send] on MDN}."]

  val send : data:Array_buffer_view.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send} \
     [send] on MDN}."]
end = struct
  type t = [ `Rtc_data_channel ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_data_channel | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel} \
     [RTCDataChannel]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCDataChannel"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let ordered this = Js.Any.to_bool (Js.Ffi.get this "ordered")

  let max_packet_life_time this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "maxPacketLifeTime")

  let max_retransmits this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "maxRetransmits")

  let protocol this = Js.Any.to_string (Js.Ffi.get this "protocol")
  let negotiated this = Js.Any.to_bool (Js.Ffi.get this "negotiated")
  let id this = (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "id")

  let ready_state this =
    Rtc_data_channel_state.of_any (Js.Ffi.get this "readyState")

  let onopen this = Event_handler.of_any (Js.Ffi.get this "onopen")
  let set_onopen this x = Js.Ffi.set this "onopen" (Event_handler.to_any x)

  let onbufferedamountlow this =
    Event_handler.of_any (Js.Ffi.get this "onbufferedamountlow")

  let set_onbufferedamountlow this x =
    Js.Ffi.set this "onbufferedamountlow" (Event_handler.to_any x)

  let onerror this = Event_handler.of_any (Js.Ffi.get this "onerror")
  let set_onerror this x = Js.Ffi.set this "onerror" (Event_handler.to_any x)
  let onclosing this = Event_handler.of_any (Js.Ffi.get this "onclosing")
  let set_onclosing this x = Js.Ffi.set this "onclosing" (Event_handler.to_any x)
  let onclose this = Event_handler.of_any (Js.Ffi.get this "onclose")
  let set_onclose this x = Js.Ffi.set this "onclose" (Event_handler.to_any x)
  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)
  let binary_type this = Js.Any.to_string (Js.Ffi.get this "binaryType")
  let set_binary_type this x = Js.Ffi.set this "binaryType" (Js.Any.of_string x)

  let send ~data this =
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Blob.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Array_buffer.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Array_buffer_view.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel} \
   [RTCDataChannel] on MDN}."]

and Rtc_data_channel_init : sig
  type t [@@ocaml.doc "The type for the [RTCDataChannelInit] dictionary."]

  val make :
    ?ordered:bool ->
    ?max_packet_life_time:int ->
    ?max_retransmits:int ->
    ?protocol:string ->
    ?negotiated:bool ->
    ?id:int ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val ordered : t -> bool option
  val max_packet_life_time : t -> int option
  val max_retransmits : t -> int option
  val protocol : t -> string option
  val negotiated : t -> bool option
  val id : t -> int option
end = struct
  type t = Js.any

  let make ?ordered ?max_packet_life_time ?max_retransmits ?protocol ?negotiated
      ?id () =
    let ordered = (Js.Any.nullable_of_option Js.Any.of_bool) ordered in
    let max_packet_life_time =
      (Js.Any.nullable_of_option Js.Any.of_int) max_packet_life_time
    in
    let max_retransmits =
      (Js.Any.nullable_of_option Js.Any.of_int) max_retransmits
    in
    let protocol = (Js.Any.nullable_of_option Js.Any.of_string) protocol in
    let negotiated = (Js.Any.nullable_of_option Js.Any.of_bool) negotiated in
    let id = (Js.Any.nullable_of_option Js.Any.of_int) id in
    Js.Ffi.obj
      [|
        ("ordered", ordered);
        ("maxPacketLifeTime", max_packet_life_time);
        ("maxRetransmits", max_retransmits);
        ("protocol", protocol);
        ("negotiated", negotiated);
        ("id", id);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let ordered this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "ordered")

  let max_packet_life_time this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "maxPacketLifeTime")

  let max_retransmits this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "maxRetransmits")

  let protocol this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "protocol")

  let negotiated this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "negotiated")

  let id this = (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "id")
end

and Rtc_data_channel_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val connecting : t
  val open' : t
  val closing : t
  val closed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let connecting = Js.of_string "connecting"
  let open' = Js.of_string "open"
  let closing = Js.of_string "closing"
  let closed = Js.of_string "closed"
end

and Rtc_data_channel_event : sig
  type t = [ `Rtc_data_channel_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent} \
     [RTCDataChannelEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_data_channel_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent} \
     [RTCDataChannelEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    event_init_dict:Rtc_data_channel_event_init.t ->
    unit ->
    'a super

  val channel : t -> 'a Rtc_data_channel.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/channel} \
     [channel] on MDN}."]
end = struct
  type t = [ `Rtc_data_channel_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_data_channel_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent} \
     [RTCDataChannelEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCDataChannelEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Rtc_data_channel_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let channel this = Rtc_data_channel.of_any (Js.Ffi.get this "channel")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent} \
   [RTCDataChannelEvent] on MDN}."]

and Rtc_data_channel_event_init : sig
  type t [@@ocaml.doc "The type for the [RTCDataChannelEventInit] dictionary."]

  val make : channel:Rtc_data_channel.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val channel : t -> Rtc_data_channel.t
end = struct
  type t = Js.any

  let make ~channel () =
    let channel = Rtc_data_channel.to_any channel in
    Js.Ffi.obj [| ("channel", channel) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let channel this = Rtc_data_channel.of_any (Js.Ffi.get this "channel")
end

and Rtc_error : sig
  type t = [ `Rtc_error ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError} [RTCError]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_error | `Dom_exception ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError} [RTCError]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_init_and_message :
    init:Rtc_error_init.t -> ?message:string -> unit -> 'a super

  val error_detail : t -> Rtc_error_detail_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/errorDetail} \
     [errorDetail] on MDN}."]

  val sdp_line_number : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sdpLineNumber} \
     [sdpLineNumber] on MDN}."]

  val http_request_status_code : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/httpRequestStatusCode} \
     [httpRequestStatusCode] on MDN}."]

  val sctp_cause_code : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sctpCauseCode} \
     [sctpCauseCode] on MDN}."]

  val received_alert : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/receivedAlert} \
     [receivedAlert] on MDN}."]

  val sent_alert : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sentAlert} \
     [sentAlert] on MDN}."]
end = struct
  type t = [ `Rtc_error ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_error | `Dom_exception ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCError} [RTCError]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCError"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_dom_exception this = Js.Ffi.magic this

  let with_init_and_message ~init ?message () =
    let init = Rtc_error_init.to_any init in
    let message = (Js.Any.undefined_of_option Js.Any.of_string) message in
    Js.Ffi.obj_new t [| init; message |]

  let error_detail this =
    Rtc_error_detail_type.of_any (Js.Ffi.get this "errorDetail")

  let sdp_line_number this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sdpLineNumber")

  let http_request_status_code this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "httpRequestStatusCode")

  let sctp_cause_code this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sctpCauseCode")

  let received_alert this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "receivedAlert")

  let sent_alert this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sentAlert")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCError} \
   [RTCError] on MDN}."]

and Rtc_error_init : sig
  type t [@@ocaml.doc "The type for the [RTCErrorInit] dictionary."]

  val make :
    error_detail:Rtc_error_detail_type.t ->
    ?sdp_line_number:int ->
    ?http_request_status_code:int ->
    ?sctp_cause_code:int ->
    ?received_alert:int ->
    ?sent_alert:int ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val error_detail : t -> Rtc_error_detail_type.t
  val sdp_line_number : t -> int option
  val http_request_status_code : t -> int option
  val sctp_cause_code : t -> int option
  val received_alert : t -> int option
  val sent_alert : t -> int option
end = struct
  type t = Js.any

  let make ~error_detail ?sdp_line_number ?http_request_status_code
      ?sctp_cause_code ?received_alert ?sent_alert () =
    let error_detail = Rtc_error_detail_type.to_any error_detail in
    let sdp_line_number =
      (Js.Any.nullable_of_option Js.Any.of_int) sdp_line_number
    in
    let http_request_status_code =
      (Js.Any.nullable_of_option Js.Any.of_int) http_request_status_code
    in
    let sctp_cause_code =
      (Js.Any.nullable_of_option Js.Any.of_int) sctp_cause_code
    in
    let received_alert =
      (Js.Any.nullable_of_option Js.Any.of_int) received_alert
    in
    let sent_alert = (Js.Any.nullable_of_option Js.Any.of_int) sent_alert in
    Js.Ffi.obj
      [|
        ("errorDetail", error_detail);
        ("sdpLineNumber", sdp_line_number);
        ("httpRequestStatusCode", http_request_status_code);
        ("sctpCauseCode", sctp_cause_code);
        ("receivedAlert", received_alert);
        ("sentAlert", sent_alert);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let error_detail this =
    Rtc_error_detail_type.of_any (Js.Ffi.get this "errorDetail")

  let sdp_line_number this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sdpLineNumber")

  let http_request_status_code this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "httpRequestStatusCode")

  let sctp_cause_code this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sctpCauseCode")

  let received_alert this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "receivedAlert")

  let sent_alert this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sentAlert")
end

and Rtc_error_detail_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val data_channel_failure : t
  val dtls_failure : t
  val fingerprint_failure : t
  val sctp_failure : t
  val sdp_syntax_error : t
  val hardware_encoder_not_available : t
  val hardware_encoder_error : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let data_channel_failure = Js.of_string "data-channel-failure"
  let dtls_failure = Js.of_string "dtls-failure"
  let fingerprint_failure = Js.of_string "fingerprint-failure"
  let sctp_failure = Js.of_string "sctp-failure"
  let sdp_syntax_error = Js.of_string "sdp-syntax-error"

  let hardware_encoder_not_available =
    Js.of_string "hardware-encoder-not-available"

  let hardware_encoder_error = Js.of_string "hardware-encoder-error"
end

and Rtc_error_event : sig
  type t = [ `Rtc_error_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent} \
     [RTCErrorEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent} \
     [RTCErrorEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Rtc_error_event_init.t -> unit -> 'a super

  val error : t -> 'a Rtc_error.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent/error} \
     [error] on MDN}."]
end = struct
  type t = [ `Rtc_error_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent} \
     [RTCErrorEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCErrorEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Rtc_error_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let error this = Rtc_error.of_any (Js.Ffi.get this "error")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent} \
   [RTCErrorEvent] on MDN}."]

and Rtc_error_event_init : sig
  type t [@@ocaml.doc "The type for the [RTCErrorEventInit] dictionary."]

  val make : error:Rtc_error.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val error : t -> Rtc_error.t
end = struct
  type t = Js.any

  let make ~error () =
    let error = Rtc_error.to_any error in
    Js.Ffi.obj [| ("error", error) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let error this = Rtc_error.of_any (Js.Ffi.get this "error")
end

and Rtc_ice_candidate : sig
  type t = [ `Rtc_ice_candidate ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate} \
     [RTCIceCandidate]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?candidate_init_dict:Rtc_ice_candidate_init.t -> unit -> t

  val candidate : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/candidate} \
     [candidate] on MDN}."]

  val sdp_mid : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMid} \
     [sdpMid] on MDN}."]

  val sdp_m_line_index : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMLineIndex} \
     [sdpMLineIndex] on MDN}."]

  val username_fragment : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/usernameFragment} \
     [usernameFragment] on MDN}."]

  val to_json : t -> Rtc_ice_candidate_init.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Rtc_ice_candidate ] Js.t

  let t = Js.Ffi.constr "RTCIceCandidate"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?candidate_init_dict () =
    let candidate_init_dict =
      (Js.Any.undefined_of_option Rtc_ice_candidate_init.to_any)
        candidate_init_dict
    in
    Js.Ffi.obj_new t [| candidate_init_dict |]

  let candidate this = Js.Any.to_string (Js.Ffi.get this "candidate")

  let sdp_mid this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "sdpMid")

  let sdp_m_line_index this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "sdpMLineIndex")

  let username_fragment this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "usernameFragment")

  let to_json this =
    Rtc_ice_candidate_init.of_any (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate} \
   [RTCIceCandidate] on MDN}."]

and Rtc_ice_candidate_init : sig
  type t [@@ocaml.doc "The type for the [RTCIceCandidateInit] dictionary."]

  val make :
    ?candidate:string ->
    ?sdp_mid:string option ->
    ?sdp_m_line_index:int option ->
    ?username_fragment:string ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val candidate : t -> string option
  val sdp_mid : t -> string option option
  val sdp_m_line_index : t -> int option option
  val username_fragment : t -> string option
end = struct
  type t = Js.any

  let make ?candidate ?sdp_mid ?sdp_m_line_index ?username_fragment () =
    let candidate = (Js.Any.nullable_of_option Js.Any.of_string) candidate in
    let sdp_mid =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        sdp_mid
    in
    let sdp_m_line_index =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        sdp_m_line_index
    in
    let username_fragment =
      (Js.Any.nullable_of_option Js.Any.of_string) username_fragment
    in
    Js.Ffi.obj
      [|
        ("candidate", candidate);
        ("sdpMid", sdp_mid);
        ("sdpMLineIndex", sdp_m_line_index);
        ("usernameFragment", username_fragment);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let candidate this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "candidate")

  let sdp_mid this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "sdpMid")

  let sdp_m_line_index this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "sdpMLineIndex")

  let username_fragment this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "usernameFragment")
end

and Rtc_peer_connection : sig
  type t = [ `Rtc_peer_connection ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} \
     [RTCPeerConnection]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Rtc_peer_connection | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} \
     [RTCPeerConnection]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : ?configuration:Rtc_configuration.t -> unit -> 'a super

  val create_offer :
    ?options:Rtc_offer_options.t ->
    t ->
    Rtc_session_description_init.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer} \
     [createOffer] on MDN}."]

  val create_answer :
    ?options:Rtc_answer_options.t ->
    t ->
    Rtc_session_description_init.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer} \
     [createAnswer] on MDN}."]

  val set_local_description :
    description:Rtc_session_description_init.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription} \
     [setLocalDescription] on MDN}."]

  val local_description : t -> Rtc_session_description.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/localDescription} \
     [localDescription] on MDN}."]

  val set_remote_description :
    description:Rtc_session_description_init.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription} \
     [setRemoteDescription] on MDN}."]

  val remote_description : t -> Rtc_session_description.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/remoteDescription} \
     [remoteDescription] on MDN}."]

  val add_ice_candidate :
    ?candidate:Rtc_ice_candidate_init.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate} \
     [addIceCandidate] on MDN}."]

  val signaling_state : t -> Rtc_signaling_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState} \
     [signalingState] on MDN}."]

  val ice_gathering_state : t -> Rtc_ice_gathering_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState} \
     [iceGatheringState] on MDN}."]

  val ice_connection_state : t -> Rtc_ice_connection_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState} \
     [iceConnectionState] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/close} \
     [close] on MDN}."]

  val onnegotiationneeded : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded} \
     [onnegotiationneeded] on MDN}."]

  val set_onnegotiationneeded : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded} \
     [onnegotiationneeded] on MDN}."]

  val onicecandidate : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate} \
     [onicecandidate] on MDN}."]

  val set_onicecandidate : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate} \
     [onicecandidate] on MDN}."]

  val onsignalingstatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange} \
     [onsignalingstatechange] on MDN}."]

  val set_onsignalingstatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange} \
     [onsignalingstatechange] on MDN}."]

  val oniceconnectionstatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange} \
     [oniceconnectionstatechange] on MDN}."]

  val set_oniceconnectionstatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange} \
     [oniceconnectionstatechange] on MDN}."]

  val onicegatheringstatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange} \
     [onicegatheringstatechange] on MDN}."]

  val set_onicegatheringstatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange} \
     [onicegatheringstatechange] on MDN}."]

  val add_stream : stream:Media_stream.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream} \
     [addStream] on MDN}."]

  val create_data_channel :
    label:string ->
    ?data_channel_dict:Rtc_data_channel_init.t ->
    t ->
    'a Rtc_data_channel.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel} \
     [createDataChannel] on MDN}."]

  val ondatachannel : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel} \
     [ondatachannel] on MDN}."]

  val set_ondatachannel : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel} \
     [ondatachannel] on MDN}."]

  val add_transceiver :
    track_or_kind:[< `Media_stream_track | `String ] Js.t ->
    ?init:Rtc_rtp_transceiver_init.t ->
    t ->
    Rtc_rtp_transceiver.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTransceiver} \
     [addTransceiver] on MDN}."]

  val ontrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack} \
     [ontrack] on MDN}."]

  val set_ontrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack} \
     [ontrack] on MDN}."]
end = struct
  type t = [ `Rtc_peer_connection ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Rtc_peer_connection | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} \
     [RTCPeerConnection]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCPeerConnection"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let make ?configuration () =
    let configuration =
      (Js.Any.undefined_of_option Rtc_configuration.to_any) configuration
    in
    Js.Ffi.obj_new t [| configuration |]

  let create_offer ?options this =
    let options =
      (Js.Any.undefined_of_option Rtc_offer_options.to_any) options
    in
    (Promise.of_any Rtc_session_description_init.of_any)
      (Js.Ffi.meth_call this "createOffer" [| options |])

  let create_answer ?options this =
    let options =
      (Js.Any.undefined_of_option Rtc_answer_options.to_any) options
    in
    (Promise.of_any Rtc_session_description_init.of_any)
      (Js.Ffi.meth_call this "createAnswer" [| options |])

  let set_local_description ~description this =
    let description = Rtc_session_description_init.to_any description in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "setLocalDescription" [| description |])

  let local_description this =
    (Js.Any.nullable_to_option Rtc_session_description.of_any)
      (Js.Ffi.get this "localDescription")

  let set_remote_description ~description this =
    let description = Rtc_session_description_init.to_any description in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "setRemoteDescription" [| description |])

  let remote_description this =
    (Js.Any.nullable_to_option Rtc_session_description.of_any)
      (Js.Ffi.get this "remoteDescription")

  let add_ice_candidate ?candidate this =
    let candidate =
      (Js.Any.undefined_of_option Rtc_ice_candidate_init.to_any) candidate
    in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "addIceCandidate" [| candidate |])

  let signaling_state this =
    Rtc_signaling_state.of_any (Js.Ffi.get this "signalingState")

  let ice_gathering_state this =
    Rtc_ice_gathering_state.of_any (Js.Ffi.get this "iceGatheringState")

  let ice_connection_state this =
    Rtc_ice_connection_state.of_any (Js.Ffi.get this "iceConnectionState")

  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])

  let onnegotiationneeded this =
    Event_handler.of_any (Js.Ffi.get this "onnegotiationneeded")

  let set_onnegotiationneeded this x =
    Js.Ffi.set this "onnegotiationneeded" (Event_handler.to_any x)

  let onicecandidate this =
    Event_handler.of_any (Js.Ffi.get this "onicecandidate")

  let set_onicecandidate this x =
    Js.Ffi.set this "onicecandidate" (Event_handler.to_any x)

  let onsignalingstatechange this =
    Event_handler.of_any (Js.Ffi.get this "onsignalingstatechange")

  let set_onsignalingstatechange this x =
    Js.Ffi.set this "onsignalingstatechange" (Event_handler.to_any x)

  let oniceconnectionstatechange this =
    Event_handler.of_any (Js.Ffi.get this "oniceconnectionstatechange")

  let set_oniceconnectionstatechange this x =
    Js.Ffi.set this "oniceconnectionstatechange" (Event_handler.to_any x)

  let onicegatheringstatechange this =
    Event_handler.of_any (Js.Ffi.get this "onicegatheringstatechange")

  let set_onicegatheringstatechange this x =
    Js.Ffi.set this "onicegatheringstatechange" (Event_handler.to_any x)

  let add_stream ~stream this =
    let stream = Media_stream.to_any stream in
    Js.to_unit (Js.Ffi.meth_call this "addStream" [| stream |])

  let create_data_channel ~label ?data_channel_dict this =
    let label = Js.Any.of_string label in
    let data_channel_dict =
      (Js.Any.undefined_of_option Rtc_data_channel_init.to_any)
        data_channel_dict
    in
    Rtc_data_channel.of_any
      (Js.Ffi.meth_call this "createDataChannel" [| label; data_channel_dict |])

  let ondatachannel this = Event_handler.of_any (Js.Ffi.get this "ondatachannel")

  let set_ondatachannel this x =
    Js.Ffi.set this "ondatachannel" (Event_handler.to_any x)

  let add_transceiver ~track_or_kind ?init this =
    let track_or_kind = Js.to_any track_or_kind in
    let init =
      (Js.Any.undefined_of_option Rtc_rtp_transceiver_init.to_any) init
    in
    Rtc_rtp_transceiver.of_any
      (Js.Ffi.meth_call this "addTransceiver" [| track_or_kind; init |])

  let ontrack this = Event_handler.of_any (Js.Ffi.get this "ontrack")
  let set_ontrack this x = Js.Ffi.set this "ontrack" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} \
   [RTCPeerConnection] on MDN}."]

and Rtc_configuration : sig
  type t [@@ocaml.doc "The type for the [RTCConfiguration] dictionary."]

  val make :
    ?ice_servers:Rtc_ice_server.t array ->
    ?ice_transport_policy:Rtc_ice_transport_policy.t ->
    ?bundle_policy:Rtc_bundle_policy.t ->
    ?rtcp_mux_policy:Rtc_rtcp_mux_policy.t ->
    ?peer_identity:string ->
    ?ice_candidate_pool_size:char ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val ice_servers : t -> Rtc_ice_server.t array option
  val ice_transport_policy : t -> Rtc_ice_transport_policy.t option
  val bundle_policy : t -> Rtc_bundle_policy.t option
  val rtcp_mux_policy : t -> Rtc_rtcp_mux_policy.t option
  val peer_identity : t -> string option
  val ice_candidate_pool_size : t -> char option
end = struct
  type t = Js.any

  let make ?ice_servers ?ice_transport_policy ?bundle_policy ?rtcp_mux_policy
      ?peer_identity ?ice_candidate_pool_size () =
    let ice_servers =
      (Js.Any.nullable_of_option (Js.Any.of_array Rtc_ice_server.to_any))
        ice_servers
    in
    let ice_transport_policy =
      (Js.Any.nullable_of_option Rtc_ice_transport_policy.to_any)
        ice_transport_policy
    in
    let bundle_policy =
      (Js.Any.nullable_of_option Rtc_bundle_policy.to_any) bundle_policy
    in
    let rtcp_mux_policy =
      (Js.Any.nullable_of_option Rtc_rtcp_mux_policy.to_any) rtcp_mux_policy
    in
    let peer_identity =
      (Js.Any.nullable_of_option Js.Any.of_string) peer_identity
    in
    let ice_candidate_pool_size =
      (Js.Any.nullable_of_option Js.Any.of_char) ice_candidate_pool_size
    in
    Js.Ffi.obj
      [|
        ("iceServers", ice_servers);
        ("iceTransportPolicy", ice_transport_policy);
        ("bundlePolicy", bundle_policy);
        ("rtcpMuxPolicy", rtcp_mux_policy);
        ("peerIdentity", peer_identity);
        ("iceCandidatePoolSize", ice_candidate_pool_size);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let ice_servers this =
    (Js.Any.nullable_to_option (Js.Any.to_array Rtc_ice_server.of_any))
      (Js.Ffi.get this "iceServers")

  let ice_transport_policy this =
    (Js.Any.nullable_to_option Rtc_ice_transport_policy.of_any)
      (Js.Ffi.get this "iceTransportPolicy")

  let bundle_policy this =
    (Js.Any.nullable_to_option Rtc_bundle_policy.of_any)
      (Js.Ffi.get this "bundlePolicy")

  let rtcp_mux_policy this =
    (Js.Any.nullable_to_option Rtc_rtcp_mux_policy.of_any)
      (Js.Ffi.get this "rtcpMuxPolicy")

  let peer_identity this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "peerIdentity")

  let ice_candidate_pool_size this =
    (Js.Any.nullable_to_option Js.Any.to_char)
      (Js.Ffi.get this "iceCandidatePoolSize")
end

and Rtc_ice_transport_policy : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val relay : t
  val all : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let relay = Js.of_string "relay"
  let all = Js.of_string "all"
end

and Rtc_bundle_policy : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val balanced : t
  val max_compat : t
  val max_bundle : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let balanced = Js.of_string "balanced"
  let max_compat = Js.of_string "max-compat"
  let max_bundle = Js.of_string "max-bundle"
end

and Rtc_rtcp_mux_policy : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val negotiate : t
  val require : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let negotiate = Js.of_string "negotiate"
  let require = Js.of_string "require"
end

and Rtc_ice_server : sig
  type t [@@ocaml.doc "The type for the [RTCIceServer] dictionary."]

  val make :
    urls:[< `String | `Sequence ] Js.t ->
    ?username:string ->
    ?credential:string ->
    ?credential_type:Rtc_ice_credential_type.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val urls : t -> [< `String | `Sequence ] Js.t
  val username : t -> string option
  val credential : t -> string option
  val credential_type : t -> Rtc_ice_credential_type.t option
end = struct
  type t = Js.any

  let make ~urls ?username ?credential ?credential_type () =
    let urls = Js.to_any urls in
    let username = (Js.Any.nullable_of_option Js.Any.of_string) username in
    let credential = (Js.Any.nullable_of_option Js.Any.of_string) credential in
    let credential_type =
      (Js.Any.nullable_of_option Rtc_ice_credential_type.to_any) credential_type
    in
    Js.Ffi.obj
      [|
        ("urls", urls);
        ("username", username);
        ("credential", credential);
        ("credentialType", credential_type);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let urls this = Js.of_any (Js.Ffi.get this "urls")

  let username this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "username")

  let credential this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "credential")

  let credential_type this =
    (Js.Any.nullable_to_option Rtc_ice_credential_type.of_any)
      (Js.Ffi.get this "credentialType")
end

and Rtc_ice_credential_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val password : t
  val oauth : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let password = Js.of_string "password"
  let oauth = Js.of_string "oauth"
end

and Rtc_offer_answer_options : sig
  type t [@@ocaml.doc "The type for the [RTCOfferAnswerOptions] dictionary."]

  val make : ?voice_activity_detection:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val voice_activity_detection : t -> bool option
end = struct
  type t = Js.any

  let make ?voice_activity_detection () =
    let voice_activity_detection =
      (Js.Any.nullable_of_option Js.Any.of_bool) voice_activity_detection
    in
    Js.Ffi.obj [| ("voiceActivityDetection", voice_activity_detection) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let voice_activity_detection this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "voiceActivityDetection")
end

and Rtc_offer_options : sig
  type t [@@ocaml.doc "The type for the [RTCOfferOptions] dictionary."]

  val make : ?ice_restart:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_rtc_offer_answer_options : t -> Rtc_offer_answer_options.t
  val ice_restart : t -> bool option
end = struct
  type t = Js.any

  let make ?ice_restart () =
    let ice_restart = (Js.Any.nullable_of_option Js.Any.of_bool) ice_restart in
    Js.Ffi.obj [| ("iceRestart", ice_restart) |]

  let to_rtc_offer_answer_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let ice_restart this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "iceRestart")
end

and Rtc_answer_options : sig
  type t [@@ocaml.doc "The type for the [RTCAnswerOptions] dictionary."]

  val make : unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_rtc_offer_answer_options : t -> Rtc_offer_answer_options.t
end = struct
  type t = Js.any

  let make () = Js.Ffi.obj [||]
  let to_rtc_offer_answer_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
end

and Rtc_ice_gathering_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val new' : t
  val gathering : t
  val complete : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let new' = Js.of_string "new"
  let gathering = Js.of_string "gathering"
  let complete = Js.of_string "complete"
end

and Rtc_ice_connection_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val new' : t
  val checking : t
  val connected : t
  val completed : t
  val disconnected : t
  val failed : t
  val closed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let new' = Js.of_string "new"
  let checking = Js.of_string "checking"
  let connected = Js.of_string "connected"
  let completed = Js.of_string "completed"
  let disconnected = Js.of_string "disconnected"
  let failed = Js.of_string "failed"
  let closed = Js.of_string "closed"
end

and Rtc_signaling_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val stable : t
  val have_local_offer : t
  val have_remote_offer : t
  val have_local_pranswer : t
  val have_remote_pranswer : t
  val closed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let stable = Js.of_string "stable"
  let have_local_offer = Js.of_string "have-local-offer"
  let have_remote_offer = Js.of_string "have-remote-offer"
  let have_local_pranswer = Js.of_string "have-local-pranswer"
  let have_remote_pranswer = Js.of_string "have-remote-pranswer"
  let closed = Js.of_string "closed"
end

and Rtc_rtp_coding_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtpCodingParameters] dictionary."]

  val make : ?rid:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val rid : t -> string option
end = struct
  type t = Js.any

  let make ?rid () =
    let rid = (Js.Any.nullable_of_option Js.Any.of_string) rid in
    Js.Ffi.obj [| ("rid", rid) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let rid this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "rid")
end

and Rtc_rtp_encoding_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtpEncodingParameters] dictionary."]

  val make :
    ?active:bool ->
    ?max_bitrate:int ->
    ?scale_resolution_down_by:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_rtc_rtp_coding_parameters : t -> Rtc_rtp_coding_parameters.t
  val active : t -> bool option
  val max_bitrate : t -> int option
  val scale_resolution_down_by : t -> float option
end = struct
  type t = Js.any

  let make ?active ?max_bitrate ?scale_resolution_down_by () =
    let active = (Js.Any.nullable_of_option Js.Any.of_bool) active in
    let max_bitrate = (Js.Any.nullable_of_option Js.Any.of_int) max_bitrate in
    let scale_resolution_down_by =
      (Js.Any.nullable_of_option Js.Any.of_float) scale_resolution_down_by
    in
    Js.Ffi.obj
      [|
        ("active", active);
        ("maxBitrate", max_bitrate);
        ("scaleResolutionDownBy", scale_resolution_down_by);
      |]

  let to_rtc_rtp_coding_parameters this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let active this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "active")

  let max_bitrate this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "maxBitrate")

  let scale_resolution_down_by this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "scaleResolutionDownBy")
end

and Rtc_rtp_transceiver_init : sig
  type t [@@ocaml.doc "The type for the [RTCRtpTransceiverInit] dictionary."]

  val make :
    ?direction:Rtc_rtp_transceiver_direction.t ->
    ?streams:Media_stream.t array ->
    ?send_encodings:Rtc_rtp_encoding_parameters.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val direction : t -> Rtc_rtp_transceiver_direction.t option
  val streams : t -> Media_stream.t array option
  val send_encodings : t -> Rtc_rtp_encoding_parameters.t array option
end = struct
  type t = Js.any

  let make ?direction ?streams ?send_encodings () =
    let direction =
      (Js.Any.nullable_of_option Rtc_rtp_transceiver_direction.to_any) direction
    in
    let streams =
      (Js.Any.nullable_of_option (Js.Any.of_array Media_stream.to_any)) streams
    in
    let send_encodings =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Rtc_rtp_encoding_parameters.to_any)
      )
        send_encodings
    in
    Js.Ffi.obj
      [|
        ("direction", direction);
        ("streams", streams);
        ("sendEncodings", send_encodings);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let direction this =
    (Js.Any.nullable_to_option Rtc_rtp_transceiver_direction.of_any)
      (Js.Ffi.get this "direction")

  let streams this =
    (Js.Any.nullable_to_option (Js.Any.to_array Media_stream.of_any))
      (Js.Ffi.get this "streams")

  let send_encodings this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Rtc_rtp_encoding_parameters.of_any)
    )
      (Js.Ffi.get this "sendEncodings")
end

and Rtc_peer_connection_ice_event : sig
  type t = [ `Rtc_peer_connection_ice_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent} \
     [RTCPeerConnectionIceEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Rtc_peer_connection_ice_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent} \
     [RTCPeerConnectionIceEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    ?event_init_dict:Rtc_peer_connection_ice_event_init.t ->
    unit ->
    'a super

  val candidate : t -> Rtc_ice_candidate.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/candidate} \
     [candidate] on MDN}."]

  val url : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/url} \
     [url] on MDN}."]
end = struct
  type t = [ `Rtc_peer_connection_ice_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Rtc_peer_connection_ice_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent} \
     [RTCPeerConnectionIceEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "RTCPeerConnectionIceEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Rtc_peer_connection_ice_event_init.to_any)
        event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let candidate this =
    (Js.Any.nullable_to_option Rtc_ice_candidate.of_any)
      (Js.Ffi.get this "candidate")

  let url this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "url")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent} \
   [RTCPeerConnectionIceEvent] on MDN}."]

and Rtc_peer_connection_ice_event_init : sig
  type t
  [@@ocaml.doc "The type for the [RTCPeerConnectionIceEventInit] dictionary."]

  val make :
    ?candidate:Rtc_ice_candidate.t option -> ?url:string option -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val candidate : t -> Rtc_ice_candidate.t option option
  val url : t -> string option option
end = struct
  type t = Js.any

  let make ?candidate ?url () =
    let candidate =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Rtc_ice_candidate.to_any)
      )
        candidate
    in
    let url =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        url
    in
    Js.Ffi.obj [| ("candidate", candidate); ("url", url) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let candidate this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Rtc_ice_candidate.of_any)
    )
      (Js.Ffi.get this "candidate")

  let url this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "url")
end

and Rtc_rtp_header_extension_parameters : sig
  type t
  [@@ocaml.doc "The type for the [RTCRtpHeaderExtensionParameters] dictionary."]

  val make : uri:string -> id:int -> ?encrypted:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val uri : t -> string
  val id : t -> int
  val encrypted : t -> bool option
end = struct
  type t = Js.any

  let make ~uri ~id ?encrypted () =
    let uri = Js.Any.of_string uri in
    let id = Js.Any.of_int id in
    let encrypted = (Js.Any.nullable_of_option Js.Any.of_bool) encrypted in
    Js.Ffi.obj [| ("uri", uri); ("id", id); ("encrypted", encrypted) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let uri this = Js.Any.to_string (Js.Ffi.get this "uri")
  let id this = Js.Any.to_int (Js.Ffi.get this "id")

  let encrypted this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "encrypted")
end

and Rtc_rtcp_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtcpParameters] dictionary."]

  val make : ?cname:string -> ?reduced_size:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val cname : t -> string option
  val reduced_size : t -> bool option
end = struct
  type t = Js.any

  let make ?cname ?reduced_size () =
    let cname = (Js.Any.nullable_of_option Js.Any.of_string) cname in
    let reduced_size =
      (Js.Any.nullable_of_option Js.Any.of_bool) reduced_size
    in
    Js.Ffi.obj [| ("cname", cname); ("reducedSize", reduced_size) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let cname this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "cname")

  let reduced_size this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "reducedSize")
end

and Rtc_rtp_codec_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtpCodecParameters] dictionary."]

  val make :
    payload_type:char ->
    mime_type:string ->
    clock_rate:int ->
    ?channels:int ->
    ?sdp_fmtp_line:string ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val payload_type : t -> char
  val mime_type : t -> string
  val clock_rate : t -> int
  val channels : t -> int option
  val sdp_fmtp_line : t -> string option
end = struct
  type t = Js.any

  let make ~payload_type ~mime_type ~clock_rate ?channels ?sdp_fmtp_line () =
    let payload_type = Js.Any.of_char payload_type in
    let mime_type = Js.Any.of_string mime_type in
    let clock_rate = Js.Any.of_int clock_rate in
    let channels = (Js.Any.nullable_of_option Js.Any.of_int) channels in
    let sdp_fmtp_line =
      (Js.Any.nullable_of_option Js.Any.of_string) sdp_fmtp_line
    in
    Js.Ffi.obj
      [|
        ("payloadType", payload_type);
        ("mimeType", mime_type);
        ("clockRate", clock_rate);
        ("channels", channels);
        ("sdpFmtpLine", sdp_fmtp_line);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let payload_type this = Js.Any.to_char (Js.Ffi.get this "payloadType")
  let mime_type this = Js.Any.to_string (Js.Ffi.get this "mimeType")
  let clock_rate this = Js.Any.to_int (Js.Ffi.get this "clockRate")

  let channels this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "channels")

  let sdp_fmtp_line this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "sdpFmtpLine")
end

and Rtc_rtp_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtpParameters] dictionary."]

  val make :
    header_extensions:Rtc_rtp_header_extension_parameters.t array ->
    rtcp:Rtc_rtcp_parameters.t ->
    codecs:Rtc_rtp_codec_parameters.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val header_extensions : t -> Rtc_rtp_header_extension_parameters.t array
  val rtcp : t -> Rtc_rtcp_parameters.t
  val codecs : t -> Rtc_rtp_codec_parameters.t array
end = struct
  type t = Js.any

  let make ~header_extensions ~rtcp ~codecs () =
    let header_extensions =
      (Js.Any.of_array Rtc_rtp_header_extension_parameters.to_any)
        header_extensions
    in
    let rtcp = Rtc_rtcp_parameters.to_any rtcp in
    let codecs = (Js.Any.of_array Rtc_rtp_codec_parameters.to_any) codecs in
    Js.Ffi.obj
      [|
        ("headerExtensions", header_extensions);
        ("rtcp", rtcp);
        ("codecs", codecs);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let header_extensions this =
    (Js.Any.to_array Rtc_rtp_header_extension_parameters.of_any)
      (Js.Ffi.get this "headerExtensions")

  let rtcp this = Rtc_rtcp_parameters.of_any (Js.Ffi.get this "rtcp")

  let codecs this =
    (Js.Any.to_array Rtc_rtp_codec_parameters.of_any) (Js.Ffi.get this "codecs")
end

and Rtc_rtp_send_parameters : sig
  type t [@@ocaml.doc "The type for the [RTCRtpSendParameters] dictionary."]

  val make :
    transaction_id:string ->
    encodings:Rtc_rtp_encoding_parameters.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val transaction_id : t -> string
  val encodings : t -> Rtc_rtp_encoding_parameters.t array
end = struct
  type t = Js.any

  let make ~transaction_id ~encodings () =
    let transaction_id = Js.Any.of_string transaction_id in
    let encodings =
      (Js.Any.of_array Rtc_rtp_encoding_parameters.to_any) encodings
    in
    Js.Ffi.obj [| ("transactionId", transaction_id); ("encodings", encodings) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let transaction_id this = Js.Any.to_string (Js.Ffi.get this "transactionId")

  let encodings this =
    (Js.Any.to_array Rtc_rtp_encoding_parameters.of_any)
      (Js.Ffi.get this "encodings")
end

and Rtc_rtp_sender : sig
  type t = [ `Rtc_rtp_sender ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender} \
     [RTCRtpSender]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_parameters :
    parameters:Rtc_rtp_send_parameters.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters} \
     [setParameters] on MDN}."]

  val get_parameters : t -> Rtc_rtp_send_parameters.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getParameters} \
     [getParameters] on MDN}."]
end = struct
  type t = [ `Rtc_rtp_sender ] Js.t

  let t = Js.Ffi.constr "RTCRtpSender"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_parameters ~parameters this =
    let parameters = Rtc_rtp_send_parameters.to_any parameters in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "setParameters" [| parameters |])

  let get_parameters this =
    Rtc_rtp_send_parameters.of_any (Js.Ffi.meth_call this "getParameters" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender} \
   [RTCRtpSender] on MDN}."]

and Rtc_rtp_transceiver : sig
  type t = [ `Rtc_rtp_transceiver ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver} \
     [RTCRtpTransceiver]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val sender : t -> Rtc_rtp_sender.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/sender} \
     [sender] on MDN}."]

  val direction : t -> Rtc_rtp_transceiver_direction.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/direction} \
     [direction] on MDN}."]

  val set_direction : t -> Rtc_rtp_transceiver_direction.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/direction} \
     [direction] on MDN}."]
end = struct
  type t = [ `Rtc_rtp_transceiver ] Js.t

  let t = Js.Ffi.constr "RTCRtpTransceiver"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let sender this = Rtc_rtp_sender.of_any (Js.Ffi.get this "sender")

  let direction this =
    Rtc_rtp_transceiver_direction.of_any (Js.Ffi.get this "direction")

  let set_direction this x =
    Js.Ffi.set this "direction" (Rtc_rtp_transceiver_direction.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver} \
   [RTCRtpTransceiver] on MDN}."]

and Rtc_rtp_transceiver_direction : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val sendrecv : t
  val sendonly : t
  val recvonly : t
  val inactive : t
  val stopped : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let sendrecv = Js.of_string "sendrecv"
  let sendonly = Js.of_string "sendonly"
  let recvonly = Js.of_string "recvonly"
  let inactive = Js.of_string "inactive"
  let stopped = Js.of_string "stopped"
end

and Rtc_session_description : sig
  type t = [ `Rtc_session_description ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription} \
     [RTCSessionDescription]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : description_init_dict:Rtc_session_description_init.t -> unit -> t

  val type' : t -> Rtc_sdp_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/type} \
     [type] on MDN}."]

  val sdp : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/sdp} \
     [sdp] on MDN}."]

  val to_json : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Rtc_session_description ] Js.t

  let t = Js.Ffi.constr "RTCSessionDescription"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~description_init_dict () =
    let description_init_dict =
      Rtc_session_description_init.to_any description_init_dict
    in
    Js.Ffi.obj_new t [| description_init_dict |]

  let type' this = Rtc_sdp_type.of_any (Js.Ffi.get this "type")
  let sdp this = Js.Any.to_string (Js.Ffi.get this "sdp")
  let to_json this = Js.object_todo (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription} \
   [RTCSessionDescription] on MDN}."]

and Rtc_session_description_init : sig
  type t
  [@@ocaml.doc "The type for the [RTCSessionDescriptionInit] dictionary."]

  val make : type':Rtc_sdp_type.t -> ?sdp:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> Rtc_sdp_type.t
  val sdp : t -> string option
end = struct
  type t = Js.any

  let make ~type' ?sdp () =
    let type' = Rtc_sdp_type.to_any type' in
    let sdp = (Js.Any.nullable_of_option Js.Any.of_string) sdp in
    Js.Ffi.obj [| ("type", type'); ("sdp", sdp) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let type' this = Rtc_sdp_type.of_any (Js.Ffi.get this "type")

  let sdp this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "sdp")
end

and Rtc_sdp_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val offer : t
  val pranswer : t
  val answer : t
  val rollback : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let offer = Js.of_string "offer"
  let pranswer = Js.of_string "pranswer"
  let answer = Js.of_string "answer"
  let rollback = Js.of_string "rollback"
end

and Rtc_track_event : sig
  type t = [ `Rtc_track_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent} \
     [RTCTrackEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_track_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent} \
     [RTCTrackEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Rtc_track_event_init.t -> unit -> 'a super

  val track : t -> 'a Media_stream_track.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/track} \
     [track] on MDN}."]
end = struct
  type t = [ `Rtc_track_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Rtc_track_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent} \
     [RTCTrackEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RTCTrackEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Rtc_track_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let track this = Media_stream_track.of_any (Js.Ffi.get this "track")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent} \
   [RTCTrackEvent] on MDN}."]

and Rtc_track_event_init : sig
  type t [@@ocaml.doc "The type for the [RTCTrackEventInit] dictionary."]

  val make : track:Media_stream_track.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val track : t -> Media_stream_track.t
end = struct
  type t = Js.any

  let make ~track () =
    let track = Media_stream_track.to_any track in
    Js.Ffi.obj [| ("track", track) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let track this = Media_stream_track.of_any (Js.Ffi.get this "track")
end

and Radio_node_list : sig
  type t = [ `Radio_node_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList} \
     [RadioNodeList]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Radio_node_list | `Node_list ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList} \
     [RadioNodeList]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val value : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value} \
     [value] on MDN}."]

  val set_value : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value} \
     [value] on MDN}."]
end = struct
  type t = [ `Radio_node_list ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Radio_node_list | `Node_list ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList} \
     [RadioNodeList]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "RadioNodeList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_node_list this = Js.Ffi.magic this
  let value this = Js.Any.to_string (Js.Ffi.get this "value")
  let set_value this x = Js.Ffi.set this "value" (Js.Any.of_string x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList} \
   [RadioNodeList] on MDN}."]

and Range : sig
  type t = [ `Range ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range} [Range]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Range | `Abstract_range ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range} [Range]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val common_ancestor_container : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer} \
     [commonAncestorContainer] on MDN}."]

  val set_start : ref_node:Node.t -> offset:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart} \
     [setStart] on MDN}."]

  val set_end : ref_node:Node.t -> offset:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd} \
     [setEnd] on MDN}."]

  val set_start_before : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore} \
     [setStartBefore] on MDN}."]

  val set_start_after : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter} \
     [setStartAfter] on MDN}."]

  val set_end_before : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore} \
     [setEndBefore] on MDN}."]

  val set_end_after : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter} \
     [setEndAfter] on MDN}."]

  val collapse : ?to_start:bool -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse} \
     [collapse] on MDN}."]

  val select_node : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode} \
     [selectNode] on MDN}."]

  val select_node_contents : ref_node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents} \
     [selectNodeContents] on MDN}."]

  val start_to_start : int
  val start_to_end : int
  val end_to_end : int
  val end_to_start : int

  val compare_boundary_points : how:int -> source_range:t -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints} \
     [compareBoundaryPoints] on MDN}."]

  val delete_contents : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents} \
     [deleteContents] on MDN}."]

  val extract_contents : t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents} \
     [extractContents] on MDN}."]

  val clone_contents : t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents} \
     [cloneContents] on MDN}."]

  val insert_node : node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode} \
     [insertNode] on MDN}."]

  val surround_contents : new_parent:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents} \
     [surroundContents] on MDN}."]

  val clone_range : t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange} \
     [cloneRange] on MDN}."]

  val detach : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Range/detach} \
     [detach] on MDN}."]

  val is_point_in_range : node:Node.t -> offset:int -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange} \
     [isPointInRange] on MDN}."]

  val compare_point : node:Node.t -> offset:int -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint} \
     [comparePoint] on MDN}."]

  val intersects_node : node:Node.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode} \
     [intersectsNode] on MDN}."]

  val create_contextual_fragment :
    fragment:string -> t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment} \
     [createContextualFragment] on MDN}."]
end = struct
  type t = [ `Range ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Range | `Abstract_range ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Range} [Range]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Range"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_abstract_range this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let common_ancestor_container this =
    Node.of_any (Js.Ffi.get this "commonAncestorContainer")

  let set_start ~ref_node ~offset this =
    let ref_node = Node.to_any ref_node in
    let offset = Js.Any.of_int offset in
    Js.to_unit (Js.Ffi.meth_call this "setStart" [| ref_node; offset |])

  let set_end ~ref_node ~offset this =
    let ref_node = Node.to_any ref_node in
    let offset = Js.Any.of_int offset in
    Js.to_unit (Js.Ffi.meth_call this "setEnd" [| ref_node; offset |])

  let set_start_before ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "setStartBefore" [| ref_node |])

  let set_start_after ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "setStartAfter" [| ref_node |])

  let set_end_before ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "setEndBefore" [| ref_node |])

  let set_end_after ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "setEndAfter" [| ref_node |])

  let collapse ?to_start this =
    let to_start = (Js.Any.undefined_of_option Js.Any.of_bool) to_start in
    Js.to_unit (Js.Ffi.meth_call this "collapse" [| to_start |])

  let select_node ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "selectNode" [| ref_node |])

  let select_node_contents ~ref_node this =
    let ref_node = Node.to_any ref_node in
    Js.to_unit (Js.Ffi.meth_call this "selectNodeContents" [| ref_node |])

  let start_to_start = 0
  let start_to_end = 1
  let end_to_end = 2
  let end_to_start = 3

  let compare_boundary_points ~how ~source_range this =
    let how = Js.Any.of_int how in
    let source_range = to_any source_range in
    Js.Any.to_int
      (Js.Ffi.meth_call this "compareBoundaryPoints" [| how; source_range |])

  let delete_contents this =
    Js.to_unit (Js.Ffi.meth_call this "deleteContents" [||])

  let extract_contents this =
    Document_fragment.of_any (Js.Ffi.meth_call this "extractContents" [||])

  let clone_contents this =
    Document_fragment.of_any (Js.Ffi.meth_call this "cloneContents" [||])

  let insert_node ~node this =
    let node = Node.to_any node in
    Js.to_unit (Js.Ffi.meth_call this "insertNode" [| node |])

  let surround_contents ~new_parent this =
    let new_parent = Node.to_any new_parent in
    Js.to_unit (Js.Ffi.meth_call this "surroundContents" [| new_parent |])

  let clone_range this = of_any (Js.Ffi.meth_call this "cloneRange" [||])
  let detach this = Js.to_unit (Js.Ffi.meth_call this "detach" [||])

  let is_point_in_range ~node ~offset this =
    let node = Node.to_any node in
    let offset = Js.Any.of_int offset in
    Js.Any.to_bool (Js.Ffi.meth_call this "isPointInRange" [| node; offset |])

  let compare_point ~node ~offset this =
    let node = Node.to_any node in
    let offset = Js.Any.of_int offset in
    Js.Any.to_int (Js.Ffi.meth_call this "comparePoint" [| node; offset |])

  let intersects_node ~node this =
    let node = Node.to_any node in
    Js.Any.to_bool (Js.Ffi.meth_call this "intersectsNode" [| node |])

  let create_contextual_fragment ~fragment this =
    let fragment = Js.Any.of_string fragment in
    Document_fragment.of_any
      (Js.Ffi.meth_call this "createContextualFragment" [| fragment |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Range} [Range] on \
   MDN}."]

and Readable_stream : sig
  type t = [ `Readable_stream ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream} \
     [ReadableStream]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Readable_stream ] Js.t

  let t = Js.Ffi.constr "ReadableStream"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream} \
   [ReadableStream] on MDN}."]

and Request_info : sig
  type t

  val with_request : Request.t -> t
  val with_string : string -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_request = Js.repr
  let with_string = Js.repr
end

and Request : sig
  type t = [ `Request ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request} [Request]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_input_and_init :
    input:Request_info.t -> ?init:Request_init.t -> unit -> t

  val method' : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/method} \
     [method] on MDN}."]

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/url} \
     [url] on MDN}."]

  val headers : t -> Headers.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/headers} \
     [headers] on MDN}."]

  val destination : t -> Request_destination.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/destination} \
     [destination] on MDN}."]

  val referrer : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer} \
     [referrer] on MDN}."]

  val referrer_policy : t -> Referrer_policy.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy} \
     [referrerPolicy] on MDN}."]

  val mode : t -> Request_mode.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/mode} \
     [mode] on MDN}."]

  val credentials : t -> Request_credentials.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials} \
     [credentials] on MDN}."]

  val cache : t -> Request_cache.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/cache} \
     [cache] on MDN}."]

  val redirect : t -> Request_redirect.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect} \
     [redirect] on MDN}."]

  val integrity : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity} \
     [integrity] on MDN}."]

  val clone : t -> t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request/clone} \
     [clone] on MDN}."]
end = struct
  type t = [ `Request ] Js.t

  let t = Js.Ffi.constr "Request"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_input_and_init ~input ?init () =
    let input = Request_info.to_any input in
    let init = (Js.Any.undefined_of_option Request_init.to_any) init in
    Js.Ffi.obj_new t [| input; init |]

  let method' this = Js.Any.to_string (Js.Ffi.get this "method")
  let url this = Js.Any.to_string (Js.Ffi.get this "url")
  let headers this = Headers.of_any (Js.Ffi.get this "headers")

  let destination this =
    Request_destination.of_any (Js.Ffi.get this "destination")

  let referrer this = Js.Any.to_string (Js.Ffi.get this "referrer")

  let referrer_policy this =
    Referrer_policy.of_any (Js.Ffi.get this "referrerPolicy")

  let mode this = Request_mode.of_any (Js.Ffi.get this "mode")

  let credentials this =
    Request_credentials.of_any (Js.Ffi.get this "credentials")

  let cache this = Request_cache.of_any (Js.Ffi.get this "cache")
  let redirect this = Request_redirect.of_any (Js.Ffi.get this "redirect")
  let integrity this = Js.Any.to_string (Js.Ffi.get this "integrity")
  let clone this = of_any (Js.Ffi.meth_call this "clone" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Request} [Request] \
   on MDN}."]

and Request_init : sig
  type t [@@ocaml.doc "The type for the [RequestInit] dictionary."]

  val make :
    ?method':string ->
    ?headers:Headers_init.t ->
    ?body:Body_init.t option ->
    ?referrer:string ->
    ?referrer_policy:Referrer_policy.t ->
    ?mode:Request_mode.t ->
    ?credentials:Request_credentials.t ->
    ?cache:Request_cache.t ->
    ?redirect:Request_redirect.t ->
    ?integrity:string ->
    ?window:Js.any ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val method' : t -> string option
  val headers : t -> Headers_init.t option
  val body : t -> Body_init.t option option
  val referrer : t -> string option
  val referrer_policy : t -> Referrer_policy.t option
  val mode : t -> Request_mode.t option
  val credentials : t -> Request_credentials.t option
  val cache : t -> Request_cache.t option
  val redirect : t -> Request_redirect.t option
  val integrity : t -> string option
  val window : t -> Js.any option
end = struct
  type t = Js.any

  let make ?method' ?headers ?body ?referrer ?referrer_policy ?mode ?credentials
      ?cache ?redirect ?integrity ?window () =
    let method' = (Js.Any.nullable_of_option Js.Any.of_string) method' in
    let headers = (Js.Any.nullable_of_option Headers_init.to_any) headers in
    let body =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Body_init.to_any))
        body
    in
    let referrer = (Js.Any.nullable_of_option Js.Any.of_string) referrer in
    let referrer_policy =
      (Js.Any.nullable_of_option Referrer_policy.to_any) referrer_policy
    in
    let mode = (Js.Any.nullable_of_option Request_mode.to_any) mode in
    let credentials =
      (Js.Any.nullable_of_option Request_credentials.to_any) credentials
    in
    let cache = (Js.Any.nullable_of_option Request_cache.to_any) cache in
    let redirect =
      (Js.Any.nullable_of_option Request_redirect.to_any) redirect
    in
    let integrity = (Js.Any.nullable_of_option Js.Any.of_string) integrity in
    let window = (Js.Any.nullable_of_option Js.of_any) window in
    Js.Ffi.obj
      [|
        ("method", method');
        ("headers", headers);
        ("body", body);
        ("referrer", referrer);
        ("referrerPolicy", referrer_policy);
        ("mode", mode);
        ("credentials", credentials);
        ("cache", cache);
        ("redirect", redirect);
        ("integrity", integrity);
        ("window", window);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let method' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "method")

  let headers this =
    (Js.Any.nullable_to_option Headers_init.of_any) (Js.Ffi.get this "headers")

  let body this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Body_init.of_any))
      (Js.Ffi.get this "body")

  let referrer this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "referrer")

  let referrer_policy this =
    (Js.Any.nullable_to_option Referrer_policy.of_any)
      (Js.Ffi.get this "referrerPolicy")

  let mode this =
    (Js.Any.nullable_to_option Request_mode.of_any) (Js.Ffi.get this "mode")

  let credentials this =
    (Js.Any.nullable_to_option Request_credentials.of_any)
      (Js.Ffi.get this "credentials")

  let cache this =
    (Js.Any.nullable_to_option Request_cache.of_any) (Js.Ffi.get this "cache")

  let redirect this =
    (Js.Any.nullable_to_option Request_redirect.of_any)
      (Js.Ffi.get this "redirect")

  let integrity this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "integrity")

  let window this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "window")
end

and Request_destination : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val audio : t
  val document : t
  val embed : t
  val font : t
  val image : t
  val manifest : t
  val object' : t
  val report : t
  val script : t
  val sharedworker : t
  val style : t
  val track : t
  val video : t
  val worker : t
  val xslt : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let audio = Js.of_string "audio"
  let document = Js.of_string "document"
  let embed = Js.of_string "embed"
  let font = Js.of_string "font"
  let image = Js.of_string "image"
  let manifest = Js.of_string "manifest"
  let object' = Js.of_string "object"
  let report = Js.of_string "report"
  let script = Js.of_string "script"
  let sharedworker = Js.of_string "sharedworker"
  let style = Js.of_string "style"
  let track = Js.of_string "track"
  let video = Js.of_string "video"
  let worker = Js.of_string "worker"
  let xslt = Js.of_string "xslt"
end

and Request_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val navigate : t
  val same_origin : t
  val no_cors : t
  val cors : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let navigate = Js.of_string "navigate"
  let same_origin = Js.of_string "same-origin"
  let no_cors = Js.of_string "no-cors"
  let cors = Js.of_string "cors"
end

and Request_credentials : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val omit : t
  val same_origin : t
  val include' : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let omit = Js.of_string "omit"
  let same_origin = Js.of_string "same-origin"
  let include' = Js.of_string "include"
end

and Request_cache : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val default : t
  val no_store : t
  val reload : t
  val no_cache : t
  val force_cache : t
  val only_if_cached : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let default = Js.of_string "default"
  let no_store = Js.of_string "no-store"
  let reload = Js.of_string "reload"
  let no_cache = Js.of_string "no-cache"
  let force_cache = Js.of_string "force-cache"
  let only_if_cached = Js.of_string "only-if-cached"
end

and Request_redirect : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val follow : t
  val error : t
  val manual : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let follow = Js.of_string "follow"
  let error = Js.of_string "error"
  let manual = Js.of_string "manual"
end

and Referrer_policy : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val no_referrer : t
  val no_referrer_when_downgrade : t
  val origin : t
  val origin_when_cross_origin : t
  val unsafe_url : t
  val same_origin : t
  val strict_origin : t
  val strict_origin_when_cross_origin : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let no_referrer = Js.of_string "no-referrer"
  let no_referrer_when_downgrade = Js.of_string "no-referrer-when-downgrade"
  let origin = Js.of_string "origin"
  let origin_when_cross_origin = Js.of_string "origin-when-cross-origin"
  let unsafe_url = Js.of_string "unsafe-url"
  let same_origin = Js.of_string "same-origin"
  let strict_origin = Js.of_string "strict-origin"

  let strict_origin_when_cross_origin =
    Js.of_string "strict-origin-when-cross-origin"
end

and Response : sig
  type t = [ `Response ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Response} [Response]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_body_and_init :
    ?body:Body_init.t option -> ?init:Response_init.t -> unit -> t

  val error : unit -> t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/error} \
     [error] on MDN}."]

  val redirect : url:string -> ?status:int -> unit -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect} \
     [redirect] on MDN}."]

  val type' : t -> Response_type.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/type} \
     [type] on MDN}."]

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/url} \
     [url] on MDN}."]

  val redirected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected} \
     [redirected] on MDN}."]

  val status : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/status} \
     [status] on MDN}."]

  val ok : t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/ok} \
     [ok] on MDN}."]

  val status_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText} \
     [statusText] on MDN}."]

  val headers : t -> Headers.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Response/headers} \
     [headers] on MDN}."]

  val clone : t -> t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response/clone} \
     [clone] on MDN}."]
end = struct
  type t = [ `Response ] Js.t

  let t = Js.Ffi.constr "Response"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_body_and_init ?body ?init () =
    let body =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Body_init.to_any))
        body
    in
    let init = (Js.Any.undefined_of_option Response_init.to_any) init in
    Js.Ffi.obj_new t [| body; init |]

  let error () = of_any (Js.Ffi.meth_call t "error" [||])

  let redirect ~url ?status () =
    let url = Js.Any.of_string url in
    let status = (Js.Any.undefined_of_option Js.Any.of_int) status in
    of_any (Js.Ffi.meth_call t "redirect" [| url; status |])

  let type' this = Response_type.of_any (Js.Ffi.get this "type")
  let url this = Js.Any.to_string (Js.Ffi.get this "url")
  let redirected this = Js.Any.to_bool (Js.Ffi.get this "redirected")
  let status this = Js.Any.to_int (Js.Ffi.get this "status")
  let ok this = Js.Any.to_bool (Js.Ffi.get this "ok")
  let status_text this = Js.Any.to_string (Js.Ffi.get this "statusText")
  let headers this = Headers.of_any (Js.Ffi.get this "headers")
  let clone this = of_any (Js.Ffi.meth_call this "clone" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Response} \
   [Response] on MDN}."]

and Response_init : sig
  type t [@@ocaml.doc "The type for the [ResponseInit] dictionary."]

  val make :
    ?status:int -> ?status_text:string -> ?headers:Headers_init.t -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val status : t -> int option
  val status_text : t -> string option
  val headers : t -> Headers_init.t option
end = struct
  type t = Js.any

  let make ?status ?status_text ?headers () =
    let status = (Js.Any.nullable_of_option Js.Any.of_int) status in
    let status_text =
      (Js.Any.nullable_of_option Js.Any.of_string) status_text
    in
    let headers = (Js.Any.nullable_of_option Headers_init.to_any) headers in
    Js.Ffi.obj
      [|
        ("status", status); ("statusText", status_text); ("headers", headers);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let status this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "status")

  let status_text this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "statusText")

  let headers this =
    (Js.Any.nullable_to_option Headers_init.of_any) (Js.Ffi.get this "headers")
end

and Response_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val basic : t
  val cors : t
  val default : t
  val error : t
  val opaque : t
  val opaqueredirect : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let basic = Js.of_string "basic"
  let cors = Js.of_string "cors"
  let default = Js.of_string "default"
  let error = Js.of_string "error"
  let opaque = Js.of_string "opaque"
  let opaqueredirect = Js.of_string "opaqueredirect"
end

and Svg_element : sig
  type t = [ `Svg_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGElement} \
     [SVGElement]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Svg_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGElement} \
     [SVGElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Svg_element ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Svg_element | `Element | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGElement} \
     [SVGElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "SVGElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_element this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/SVGElement} \
   [SVGElement] on MDN}."]

and Svg_graphics_element : sig
  type t = [ `Svg_graphics_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement} \
     [SVGGraphicsElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Svg_graphics_element
      | `Svg_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement} \
     [SVGGraphicsElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Svg_graphics_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Svg_graphics_element
      | `Svg_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement} \
     [SVGGraphicsElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "SVGGraphicsElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_svg_element this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement} \
   [SVGGraphicsElement] on MDN}."]

and Svgsvg_element : sig
  type t = [ `Svgsvg_element ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement} \
     [SVGSVGElement]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Svgsvg_element
      | `Svg_graphics_element
      | `Svg_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement} \
     [SVGSVGElement]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Svgsvg_element ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Svgsvg_element
      | `Svg_graphics_element
      | `Svg_element
      | `Element
      | `Node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement} \
     [SVGSVGElement]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "SVGSVGElement"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_svg_graphics_element this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement} \
   [SVGSVGElement] on MDN}."]

and Screen : sig
  type t = [ `Screen ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Screen} [Screen]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val avail_width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth} \
     [availWidth] on MDN}."]

  val avail_height : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight} \
     [availHeight] on MDN}."]

  val width : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Screen/width} \
     [width] on MDN}."]

  val height : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Screen/height} \
     [height] on MDN}."]

  val color_depth : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth} \
     [colorDepth] on MDN}."]

  val pixel_depth : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth} \
     [pixelDepth] on MDN}."]
end = struct
  type t = [ `Screen ] Js.t

  let t = Js.Ffi.constr "Screen"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let avail_width this = Js.Any.to_float (Js.Ffi.get this "availWidth")
  let avail_height this = Js.Any.to_float (Js.Ffi.get this "availHeight")
  let width this = Js.Any.to_float (Js.Ffi.get this "width")
  let height this = Js.Any.to_float (Js.Ffi.get this "height")
  let color_depth this = Js.Any.to_int (Js.Ffi.get this "colorDepth")
  let pixel_depth this = Js.Any.to_int (Js.Ffi.get this "pixelDepth")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Screen} [Screen] \
   on MDN}."]

and Selection : sig
  type t = [ `Selection ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection} [Selection]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val anchor_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode} \
     [anchorNode] on MDN}."]

  val anchor_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset} \
     [anchorOffset] on MDN}."]

  val focus_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode} \
     [focusNode] on MDN}."]

  val focus_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset} \
     [focusOffset] on MDN}."]

  val is_collapsed : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed} \
     [isCollapsed] on MDN}."]

  val range_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount} \
     [rangeCount] on MDN}."]

  val type' : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Selection/type} \
     [type] on MDN}."]

  val get_range_at : index:int -> t -> 'a Range.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt} \
     [getRangeAt] on MDN}."]

  val add_range : range:Range.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange} \
     [addRange] on MDN}."]

  val remove_range : range:Range.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange} \
     [removeRange] on MDN}."]

  val remove_all_ranges : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges} \
     [removeAllRanges] on MDN}."]

  val empty : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Selection/empty} \
     [empty] on MDN}."]

  val collapse : node:Node.t option -> ?offset:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse} \
     [collapse] on MDN}."]

  val set_position : node:Node.t option -> ?offset:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/setPosition} \
     [setPosition] on MDN}."]

  val collapse_to_start : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart} \
     [collapseToStart] on MDN}."]

  val collapse_to_end : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd} \
     [collapseToEnd] on MDN}."]

  val extend : node:Node.t -> ?offset:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/extend} \
     [extend] on MDN}."]

  val set_base_and_extent :
    anchor_node:Node.t ->
    anchor_offset:int ->
    focus_node:Node.t ->
    focus_offset:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/setBaseAndExtent} \
     [setBaseAndExtent] on MDN}."]

  val select_all_children : node:Node.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren} \
     [selectAllChildren] on MDN}."]

  val delete_from_document : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument} \
     [deleteFromDocument] on MDN}."]

  val contains_node :
    node:Node.t -> ?allow_partial_containment:bool -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode} \
     [containsNode] on MDN}."]
end = struct
  type t = [ `Selection ] Js.t

  let t = Js.Ffi.constr "Selection"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let anchor_node this =
    (Js.Any.nullable_to_option Node.of_any) (Js.Ffi.get this "anchorNode")

  let anchor_offset this = Js.Any.to_int (Js.Ffi.get this "anchorOffset")

  let focus_node this =
    (Js.Any.nullable_to_option Node.of_any) (Js.Ffi.get this "focusNode")

  let focus_offset this = Js.Any.to_int (Js.Ffi.get this "focusOffset")
  let is_collapsed this = Js.Any.to_bool (Js.Ffi.get this "isCollapsed")
  let range_count this = Js.Any.to_int (Js.Ffi.get this "rangeCount")
  let type' this = Js.Any.to_string (Js.Ffi.get this "type")

  let get_range_at ~index this =
    let index = Js.Any.of_int index in
    Range.of_any (Js.Ffi.meth_call this "getRangeAt" [| index |])

  let add_range ~range this =
    let range = Range.to_any range in
    Js.to_unit (Js.Ffi.meth_call this "addRange" [| range |])

  let remove_range ~range this =
    let range = Range.to_any range in
    Js.to_unit (Js.Ffi.meth_call this "removeRange" [| range |])

  let remove_all_ranges this =
    Js.to_unit (Js.Ffi.meth_call this "removeAllRanges" [||])

  let empty this = Js.to_unit (Js.Ffi.meth_call this "empty" [||])

  let collapse ~node ?offset this =
    let node = (Js.Any.nullable_of_option Node.to_any) node in
    let offset = (Js.Any.undefined_of_option Js.Any.of_int) offset in
    Js.to_unit (Js.Ffi.meth_call this "collapse" [| node; offset |])

  let set_position ~node ?offset this =
    let node = (Js.Any.nullable_of_option Node.to_any) node in
    let offset = (Js.Any.undefined_of_option Js.Any.of_int) offset in
    Js.to_unit (Js.Ffi.meth_call this "setPosition" [| node; offset |])

  let collapse_to_start this =
    Js.to_unit (Js.Ffi.meth_call this "collapseToStart" [||])

  let collapse_to_end this =
    Js.to_unit (Js.Ffi.meth_call this "collapseToEnd" [||])

  let extend ~node ?offset this =
    let node = Node.to_any node in
    let offset = (Js.Any.undefined_of_option Js.Any.of_int) offset in
    Js.to_unit (Js.Ffi.meth_call this "extend" [| node; offset |])

  let set_base_and_extent ~anchor_node ~anchor_offset ~focus_node ~focus_offset
      this =
    let anchor_node = Node.to_any anchor_node in
    let anchor_offset = Js.Any.of_int anchor_offset in
    let focus_node = Node.to_any focus_node in
    let focus_offset = Js.Any.of_int focus_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "setBaseAndExtent"
         [| anchor_node; anchor_offset; focus_node; focus_offset |]
      )

  let select_all_children ~node this =
    let node = Node.to_any node in
    Js.to_unit (Js.Ffi.meth_call this "selectAllChildren" [| node |])

  let delete_from_document this =
    Js.to_unit (Js.Ffi.meth_call this "deleteFromDocument" [||])

  let contains_node ~node ?allow_partial_containment this =
    let node = Node.to_any node in
    let allow_partial_containment =
      (Js.Any.undefined_of_option Js.Any.of_bool) allow_partial_containment
    in
    Js.Any.to_bool
      (Js.Ffi.meth_call this "containsNode"
         [| node; allow_partial_containment |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Selection} \
   [Selection] on MDN}."]

and Service_worker : sig
  type t = [ `Service_worker ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker} \
     [ServiceWorker]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Service_worker | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker} \
     [ServiceWorker]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val script_url : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL} \
     [scriptURL] on MDN}."]

  val state : t -> Service_worker_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state} \
     [state] on MDN}."]

  val post_message : message:Js.any -> transfer:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage} \
     [postMessage] on MDN}."]

  val onstatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange} \
     [onstatechange] on MDN}."]

  val set_onstatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange} \
     [onstatechange] on MDN}."]
end = struct
  type t = [ `Service_worker ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Service_worker | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker} \
     [ServiceWorker]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ServiceWorker"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let script_url this = Js.Any.to_string (Js.Ffi.get this "scriptURL")
  let state this = Service_worker_state.of_any (Js.Ffi.get this "state")

  let post_message ~message ~transfer this =
    let message = Js.of_any message in
    let transfer = (Js.Any.of_array Js.object_todo) transfer in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; transfer |])

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let onstatechange this = Event_handler.of_any (Js.Ffi.get this "onstatechange")

  let set_onstatechange this x =
    Js.Ffi.set this "onstatechange" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker} \
   [ServiceWorker] on MDN}."]

and Service_worker_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val installing : t
  val installed : t
  val activating : t
  val activated : t
  val redundant : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let installing = Js.of_string "installing"
  let installed = Js.of_string "installed"
  let activating = Js.of_string "activating"
  let activated = Js.of_string "activated"
  let redundant = Js.of_string "redundant"
end

and Service_worker_container : sig
  type t = [ `Service_worker_container ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer} \
     [ServiceWorkerContainer]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Service_worker_container | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer} \
     [ServiceWorkerContainer]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val controller : t -> 'a Service_worker.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller} \
     [controller] on MDN}."]

  val register :
    script_url:string ->
    ?options:Registration_options.t ->
    t ->
    Service_worker_registration.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register} \
     [register] on MDN}."]
end = struct
  type t = [ `Service_worker_container ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Service_worker_container | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer} \
     [ServiceWorkerContainer]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "ServiceWorkerContainer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let controller this =
    (Js.Any.nullable_to_option Service_worker.of_any)
      (Js.Ffi.get this "controller")

  let register ~script_url ?options this =
    let script_url = Js.Any.of_string script_url in
    let options =
      (Js.Any.undefined_of_option Registration_options.to_any) options
    in
    (Promise.of_any Service_worker_registration.of_any)
      (Js.Ffi.meth_call this "register" [| script_url; options |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer} \
   [ServiceWorkerContainer] on MDN}."]

and Registration_options : sig
  type t [@@ocaml.doc "The type for the [RegistrationOptions] dictionary."]

  val make :
    ?scope:string ->
    ?type':Worker_type.t ->
    ?update_via_cache:Service_worker_update_via_cache.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val scope : t -> string option
  val type' : t -> Worker_type.t option
  val update_via_cache : t -> Service_worker_update_via_cache.t option
end = struct
  type t = Js.any

  let make ?scope ?type' ?update_via_cache () =
    let scope = (Js.Any.nullable_of_option Js.Any.of_string) scope in
    let type' = (Js.Any.nullable_of_option Worker_type.to_any) type' in
    let update_via_cache =
      (Js.Any.nullable_of_option Service_worker_update_via_cache.to_any)
        update_via_cache
    in
    Js.Ffi.obj
      [|
        ("scope", scope); ("type", type'); ("updateViaCache", update_via_cache);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let scope this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "scope")

  let type' this =
    (Js.Any.nullable_to_option Worker_type.of_any) (Js.Ffi.get this "type")

  let update_via_cache this =
    (Js.Any.nullable_to_option Service_worker_update_via_cache.of_any)
      (Js.Ffi.get this "updateViaCache")
end

and Service_worker_global_scope : sig
  type t = [ `Service_worker_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope} \
     [ServiceWorkerGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Service_worker_global_scope
      | `Worker_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope} \
     [ServiceWorkerGlobalScope]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessage} \
     [onmessage] on MDN}."]

  val onmessageerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessageerror} \
     [onmessageerror] on MDN}."]

  val set_onmessageerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessageerror} \
     [onmessageerror] on MDN}."]
end = struct
  type t = [ `Service_worker_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Service_worker_global_scope
      | `Worker_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope} \
     [ServiceWorkerGlobalScope]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "ServiceWorkerGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_worker_global_scope this = Js.Ffi.magic this
  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)

  let onmessageerror this =
    Event_handler.of_any (Js.Ffi.get this "onmessageerror")

  let set_onmessageerror this x =
    Js.Ffi.set this "onmessageerror" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope} \
   [ServiceWorkerGlobalScope] on MDN}."]

and Service_worker_registration : sig
  type t = [ `Service_worker_registration ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration} \
     [ServiceWorkerRegistration]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Service_worker_registration | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration} \
     [ServiceWorkerRegistration]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val installing : t -> 'a Service_worker.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/installing} \
     [installing] on MDN}."]

  val waiting : t -> 'a Service_worker.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/waiting} \
     [waiting] on MDN}."]

  val active : t -> 'a Service_worker.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/active} \
     [active] on MDN}."]

  val navigation_preload : t -> Navigation_preload_manager.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/navigationPreload} \
     [navigationPreload] on MDN}."]

  val scope : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope} \
     [scope] on MDN}."]

  val update_via_cache : t -> Service_worker_update_via_cache.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/updateViaCache} \
     [updateViaCache] on MDN}."]
end = struct
  type t = [ `Service_worker_registration ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Service_worker_registration | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration} \
     [ServiceWorkerRegistration]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "ServiceWorkerRegistration"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let installing this =
    (Js.Any.nullable_to_option Service_worker.of_any)
      (Js.Ffi.get this "installing")

  let waiting this =
    (Js.Any.nullable_to_option Service_worker.of_any) (Js.Ffi.get this "waiting")

  let active this =
    (Js.Any.nullable_to_option Service_worker.of_any) (Js.Ffi.get this "active")

  let navigation_preload this =
    Navigation_preload_manager.of_any (Js.Ffi.get this "navigationPreload")

  let scope this = Js.Any.to_string (Js.Ffi.get this "scope")

  let update_via_cache this =
    Service_worker_update_via_cache.of_any (Js.Ffi.get this "updateViaCache")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration} \
   [ServiceWorkerRegistration] on MDN}."]

and Service_worker_update_via_cache : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val imports : t
  val all : t
  val none : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let imports = Js.of_string "imports"
  let all = Js.of_string "all"
  let none = Js.of_string "none"
end

and Servo_parser : sig
  type t = [ `Servo_parser ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ServoParser} \
     [ServoParser]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Servo_parser ] Js.t

  let t = Js.Ffi.constr "ServoParser"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ServoParser} \
   [ServoParser] on MDN}."]

and Shadow_root : sig
  type t = [ `Shadow_root ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot} \
     [ShadowRoot]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Shadow_root | `Document_fragment | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot} \
     [ShadowRoot]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val mode : t -> Shadow_root_mode.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode} \
     [mode] on MDN}."]

  val host : t -> 'a Element.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host} \
     [host] on MDN}."]
end = struct
  type t = [ `Shadow_root ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Shadow_root | `Document_fragment | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot} \
     [ShadowRoot]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "ShadowRoot"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_document_fragment this = Js.Ffi.magic this
  let mode this = Shadow_root_mode.of_any (Js.Ffi.get this "mode")
  let host this = Element.of_any (Js.Ffi.get this "host")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot} \
   [ShadowRoot] on MDN}."]

and Shadow_root_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val open' : t
  val closed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let open' = Js.of_string "open"
  let closed = Js.of_string "closed"
end

and Static_range_init : sig
  type t [@@ocaml.doc "The type for the [StaticRangeInit] dictionary."]

  val make :
    start_container:Node.t ->
    start_offset:int ->
    end_container:Node.t ->
    end_offset:int ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val start_container : t -> Node.t
  val start_offset : t -> int
  val end_container : t -> Node.t
  val end_offset : t -> int
end = struct
  type t = Js.any

  let make ~start_container ~start_offset ~end_container ~end_offset () =
    let start_container = Node.to_any start_container in
    let start_offset = Js.Any.of_int start_offset in
    let end_container = Node.to_any end_container in
    let end_offset = Js.Any.of_int end_offset in
    Js.Ffi.obj
      [|
        ("startContainer", start_container);
        ("startOffset", start_offset);
        ("endContainer", end_container);
        ("endOffset", end_offset);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let start_container this = Node.of_any (Js.Ffi.get this "startContainer")
  let start_offset this = Js.Any.to_int (Js.Ffi.get this "startOffset")
  let end_container this = Node.of_any (Js.Ffi.get this "endContainer")
  let end_offset this = Js.Any.to_int (Js.Ffi.get this "endOffset")
end

and Static_range : sig
  type t = [ `Static_range ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StaticRange} \
     [StaticRange]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Static_range | `Abstract_range ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StaticRange} \
     [StaticRange]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : init:Static_range_init.t -> unit -> 'a super
end = struct
  type t = [ `Static_range ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Static_range | `Abstract_range ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StaticRange} \
     [StaticRange]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "StaticRange"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_abstract_range this = Js.Ffi.magic this

  let make ~init () =
    let init = Static_range_init.to_any init in
    Js.Ffi.obj_new t [| init |]
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StaticRange} \
   [StaticRange] on MDN}."]

and Stereo_panner_options : sig
  type t [@@ocaml.doc "The type for the [StereoPannerOptions] dictionary."]

  val make : ?pan:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_audio_node_options : t -> Audio_node_options.t
  val pan : t -> float option
end = struct
  type t = Js.any

  let make ?pan () =
    let pan = (Js.Any.nullable_of_option Js.Any.of_float) pan in
    Js.Ffi.obj [| ("pan", pan) |]

  let to_audio_node_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let pan this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "pan")
end

and Stereo_panner_node : sig
  type t = [ `Stereo_panner_node ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode} \
     [StereoPannerNode]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Stereo_panner_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode} \
     [StereoPannerNode]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_context_and_options :
    context:Base_audio_context.t ->
    ?options:Stereo_panner_options.t ->
    unit ->
    'a super

  val pan : t -> Audio_param.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan} \
     [pan] on MDN}."]
end = struct
  type t = [ `Stereo_panner_node ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Stereo_panner_node
      | `Audio_scheduled_source_node
      | `Audio_node
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode} \
     [StereoPannerNode]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "StereoPannerNode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_audio_scheduled_source_node this = Js.Ffi.magic this

  let with_context_and_options ~context ?options () =
    let context = Base_audio_context.to_any context in
    let options =
      (Js.Any.undefined_of_option Stereo_panner_options.to_any) options
    in
    Js.Ffi.obj_new t [| context; options |]

  let pan this = Audio_param.of_any (Js.Ffi.get this "pan")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode} \
   [StereoPannerNode] on MDN}."]

and Storage : sig
  type t = [ `Storage ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Storage} [Storage]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage/length} \
     [length] on MDN}."]

  val key : index:int -> t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage/key} \
     [key] on MDN}."]

  val get_item : name:string -> t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem} \
     [getItem] on MDN}."]

  val set_item : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem} \
     [setItem] on MDN}."]

  val remove_item : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem} \
     [removeItem] on MDN}."]

  val clear : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear} \
     [clear] on MDN}."]
end = struct
  type t = [ `Storage ] Js.t

  let t = Js.Ffi.constr "Storage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let key ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "key" [| index |])

  let get_item ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "getItem" [| name |])

  let set_item ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "setItem" [| name; value |])

  let remove_item ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "removeItem" [| name |])

  let clear this = Js.to_unit (Js.Ffi.meth_call this "clear" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Storage} [Storage] \
   on MDN}."]

and Storage_event : sig
  type t = [ `Storage_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent} \
     [StorageEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Storage_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent} \
     [StorageEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Storage_event_init.t -> unit -> 'a super

  val key : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/key} [key] \
     on MDN}."]

  val old_value : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/oldValue} \
     [oldValue] on MDN}."]

  val new_value : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/newValue} \
     [newValue] on MDN}."]

  val url : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/url} [url] \
     on MDN}."]

  val storage_area : t -> Storage.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/storageArea} \
     [storageArea] on MDN}."]

  val init_storage_event :
    type':string ->
    ?bubbles:bool ->
    ?cancelable:bool ->
    ?key:string option ->
    ?old_value:string option ->
    ?new_value:string option ->
    ?url:string ->
    ?storage_area:Storage.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent/initStorageEvent} \
     [initStorageEvent] on MDN}."]
end = struct
  type t = [ `Storage_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Storage_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent} \
     [StorageEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "StorageEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Storage_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let key this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "key")

  let old_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "oldValue")

  let new_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "newValue")

  let url this = Js.Any.to_string (Js.Ffi.get this "url")

  let storage_area this =
    (Js.Any.nullable_to_option Storage.of_any) (Js.Ffi.get this "storageArea")

  let init_storage_event ~type' ?bubbles ?cancelable ?key ?old_value ?new_value
      ?url ?storage_area this =
    let type' = Js.Any.of_string type' in
    let bubbles = (Js.Any.undefined_of_option Js.Any.of_bool) bubbles in
    let cancelable = (Js.Any.undefined_of_option Js.Any.of_bool) cancelable in
    let key =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        key
    in
    let old_value =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        old_value
    in
    let new_value =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        new_value
    in
    let url = (Js.Any.undefined_of_option Js.Any.of_string) url in
    let storage_area =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Storage.to_any))
        storage_area
    in
    Js.to_unit
      (Js.Ffi.meth_call this "initStorageEvent"
         [|
           type';
           bubbles;
           cancelable;
           key;
           old_value;
           new_value;
           url;
           storage_area;
         |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent} \
   [StorageEvent] on MDN}."]

and Storage_event_init : sig
  type t [@@ocaml.doc "The type for the [StorageEventInit] dictionary."]

  val make :
    ?key:string option ->
    ?old_value:string option ->
    ?new_value:string option ->
    ?url:string ->
    ?storage_area:Storage.t option ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val key : t -> string option option
  val old_value : t -> string option option
  val new_value : t -> string option option
  val url : t -> string option
  val storage_area : t -> Storage.t option option
end = struct
  type t = Js.any

  let make ?key ?old_value ?new_value ?url ?storage_area () =
    let key =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        key
    in
    let old_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        old_value
    in
    let new_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        new_value
    in
    let url = (Js.Any.nullable_of_option Js.Any.of_string) url in
    let storage_area =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Storage.to_any))
        storage_area
    in
    Js.Ffi.obj
      [|
        ("key", key);
        ("oldValue", old_value);
        ("newValue", new_value);
        ("url", url);
        ("storageArea", storage_area);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let key this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "key")

  let old_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "oldValue")

  let new_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "newValue")

  let url this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "url")

  let storage_area this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Storage.of_any))
      (Js.Ffi.get this "storageArea")
end

and Style_property_map_read_only : sig
  type t = [ `Style_property_map_read_only ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly} \
     [StylePropertyMapReadOnly]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get : property:string -> t -> Css_style_value.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly/get} \
     [get] on MDN}."]

  val has : property:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly/has} \
     [has] on MDN}."]

  val get_properties : t -> string array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly/getProperties} \
     [getProperties] on MDN}."]
end = struct
  type t = [ `Style_property_map_read_only ] Js.t

  let t = Js.Ffi.constr "StylePropertyMapReadOnly"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get ~property this =
    let property = Js.Any.of_string property in
    (Js.Any.nullable_to_option Css_style_value.of_any)
      (Js.Ffi.meth_call this "get" [| property |])

  let has ~property this =
    let property = Js.Any.of_string property in
    Js.Any.to_bool (Js.Ffi.meth_call this "has" [| property |])

  let get_properties this =
    (Js.Any.to_array Js.Any.to_string)
      (Js.Ffi.meth_call this "getProperties" [||])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly} \
   [StylePropertyMapReadOnly] on MDN}."]

and Style_sheet : sig
  type t = [ `Style_sheet ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet} \
     [StyleSheet]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val type_ : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/type_} \
     [type_] on MDN}."]

  val href : t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/href} \
     [href] on MDN}."]

  val owner_node : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/ownerNode} \
     [ownerNode] on MDN}."]

  val title : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/title} \
     [title] on MDN}."]

  val media : t -> Media_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/media} \
     [media] on MDN}."]

  val disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled} \
     [disabled] on MDN}."]

  val set_disabled : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled} \
     [disabled] on MDN}."]
end = struct
  type t = [ `Style_sheet ] Js.t

  let t = Js.Ffi.constr "StyleSheet"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let type_ this = Js.Any.to_string (Js.Ffi.get this "type_")

  let href this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "href")

  let owner_node this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "ownerNode")

  let title this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "title")

  let media this = Media_list.of_any (Js.Ffi.get this "media")
  let disabled this = Js.Any.to_bool (Js.Ffi.get this "disabled")
  let set_disabled this x = Js.Ffi.set this "disabled" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet} \
   [StyleSheet] on MDN}."]

and Style_sheet_list : sig
  type t = [ `Style_sheet_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList} \
     [StyleSheetList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val item : index:int -> t -> Style_sheet.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList/item} \
     [item] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList/length} \
     [length] on MDN}."]
end = struct
  type t = [ `Style_sheet_list ] Js.t

  let t = Js.Ffi.constr "StyleSheetList"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Style_sheet.of_any)
      (Js.Ffi.meth_call this "item" [| index |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList} \
   [StyleSheetList] on MDN}."]

and Submit_event : sig
  type t = [ `Submit_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent} \
     [SubmitEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Submit_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent} \
     [SubmitEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_arg_and_event_init_dict :
    type_arg:string -> ?event_init_dict:Submit_event_init.t -> unit -> 'a super

  val submitter : t -> 'a Html_element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter} \
     [submitter] on MDN}."]
end = struct
  type t = [ `Submit_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Submit_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent} \
     [SubmitEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "SubmitEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_arg_and_event_init_dict ~type_arg ?event_init_dict () =
    let type_arg = Js.Any.of_string type_arg in
    let event_init_dict =
      (Js.Any.undefined_of_option Submit_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type_arg; event_init_dict |]

  let submitter this =
    (Js.Any.nullable_to_option Html_element.of_any) (Js.Ffi.get this "submitter")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent} \
   [SubmitEvent] on MDN}."]

and Submit_event_init : sig
  type t [@@ocaml.doc "The type for the [SubmitEventInit] dictionary."]

  val make : ?submitter:Html_element.t option -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val submitter : t -> Html_element.t option option
end = struct
  type t = Js.any

  let make ?submitter () =
    let submitter =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Html_element.to_any))
        submitter
    in
    Js.Ffi.obj [| ("submitter", submitter) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let submitter this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Html_element.of_any))
      (Js.Ffi.get this "submitter")
end

and Test_enum : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val foo : t
  val bar : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let foo = Js.of_string "foo"
  let bar = Js.of_string "bar"
end

and Test_typedef : sig
  type t

  val with_string : string -> t
  val with_url : Url.t -> t
  val with_blob : Blob.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_url = Js.repr
  let with_blob = Js.repr
end

and Test_typedef_nullable_union : sig
  type t

  val with_string : string -> t
  val with_url : Url.t -> t
  val with_blob : Blob.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_url = Js.repr
  let with_blob = Js.repr
end

and Test_typedef_string : sig
  type nonrec t = string

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Test_typedef_string

and Test_typedef_interface : sig
  type nonrec t = Blob.t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Test_typedef_interface

and Test_dictionary : sig
  type t [@@ocaml.doc "The type for the [TestDictionary] dictionary."]

  val make :
    required_value:bool ->
    ?boolean_value:bool ->
    ?byte_value:char ->
    ?octet_value:char ->
    ?short_value:int ->
    ?unsigned_short_value:int ->
    ?long_value:int ->
    ?unsigned_long_value:int ->
    ?long_long_value:int ->
    ?unsigned_long_long_value:int ->
    ?unrestricted_float_value:float ->
    ?float_value:float ->
    ?unrestricted_double_value:float ->
    ?double_value:float ->
    ?string_value:string ->
    ?usvstring_value:string ->
    ?enum_value:Test_enum.t ->
    ?interface_value:Blob.t ->
    ?any_value:Js.any ->
    ?object_value:'todo_object ->
    ?dict:Test_dictionary_defaults.t ->
    ?seq_dict:Test_dictionary_defaults.t array ->
    ?element_sequence:Element.t array ->
    ?type':string ->
    ?non_required_nullable:string option ->
    ?non_required_nullable2:string option ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val required_value : t -> bool
  val boolean_value : t -> bool option
  val byte_value : t -> char option
  val octet_value : t -> char option
  val short_value : t -> int option
  val unsigned_short_value : t -> int option
  val long_value : t -> int option
  val unsigned_long_value : t -> int option
  val long_long_value : t -> int option
  val unsigned_long_long_value : t -> int option
  val unrestricted_float_value : t -> float option
  val float_value : t -> float option
  val unrestricted_double_value : t -> float option
  val double_value : t -> float option
  val string_value : t -> string option
  val usvstring_value : t -> string option
  val enum_value : t -> Test_enum.t option
  val interface_value : t -> Blob.t option
  val any_value : t -> Js.any option
  val object_value : t -> 'todo_object option
  val dict : t -> Test_dictionary_defaults.t option
  val seq_dict : t -> Test_dictionary_defaults.t array option
  val element_sequence : t -> Element.t array option
  val type' : t -> string option
  val non_required_nullable : t -> string option option
  val non_required_nullable2 : t -> string option option
end = struct
  type t = Js.any

  let make ~required_value ?boolean_value ?byte_value ?octet_value ?short_value
      ?unsigned_short_value ?long_value ?unsigned_long_value ?long_long_value
      ?unsigned_long_long_value ?unrestricted_float_value ?float_value
      ?unrestricted_double_value ?double_value ?string_value ?usvstring_value
      ?enum_value ?interface_value ?any_value ?object_value ?dict ?seq_dict
      ?element_sequence ?type' ?non_required_nullable ?non_required_nullable2 ()
      =
    let required_value = Js.Any.of_bool required_value in
    let boolean_value =
      (Js.Any.nullable_of_option Js.Any.of_bool) boolean_value
    in
    let byte_value = (Js.Any.nullable_of_option Js.Any.of_char) byte_value in
    let octet_value = (Js.Any.nullable_of_option Js.Any.of_char) octet_value in
    let short_value = (Js.Any.nullable_of_option Js.Any.of_int) short_value in
    let unsigned_short_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_short_value
    in
    let long_value = (Js.Any.nullable_of_option Js.Any.of_int) long_value in
    let unsigned_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_long_value
    in
    let long_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) long_long_value
    in
    let unsigned_long_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_long_long_value
    in
    let unrestricted_float_value =
      (Js.Any.nullable_of_option Js.Any.of_float) unrestricted_float_value
    in
    let float_value = (Js.Any.nullable_of_option Js.Any.of_float) float_value in
    let unrestricted_double_value =
      (Js.Any.nullable_of_option Js.Any.of_float) unrestricted_double_value
    in
    let double_value =
      (Js.Any.nullable_of_option Js.Any.of_float) double_value
    in
    let string_value =
      (Js.Any.nullable_of_option Js.Any.of_string) string_value
    in
    let usvstring_value =
      (Js.Any.nullable_of_option Js.Any.of_string) usvstring_value
    in
    let enum_value = (Js.Any.nullable_of_option Test_enum.to_any) enum_value in
    let interface_value =
      (Js.Any.nullable_of_option Blob.to_any) interface_value
    in
    let any_value = (Js.Any.nullable_of_option Js.of_any) any_value in
    let object_value =
      (Js.Any.nullable_of_option Js.object_todo) object_value
    in
    let dict =
      (Js.Any.nullable_of_option Test_dictionary_defaults.to_any) dict
    in
    let seq_dict =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Test_dictionary_defaults.to_any)
      )
        seq_dict
    in
    let element_sequence =
      (Js.Any.nullable_of_option (Js.Any.of_array Element.to_any))
        element_sequence
    in
    let type' = (Js.Any.nullable_of_option Js.Any.of_string) type' in
    let non_required_nullable =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        non_required_nullable
    in
    let non_required_nullable2 =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        non_required_nullable2
    in
    Js.Ffi.obj
      [|
        ("requiredValue", required_value);
        ("booleanValue", boolean_value);
        ("byteValue", byte_value);
        ("octetValue", octet_value);
        ("shortValue", short_value);
        ("unsignedShortValue", unsigned_short_value);
        ("longValue", long_value);
        ("unsignedLongValue", unsigned_long_value);
        ("longLongValue", long_long_value);
        ("unsignedLongLongValue", unsigned_long_long_value);
        ("unrestrictedFloatValue", unrestricted_float_value);
        ("floatValue", float_value);
        ("unrestrictedDoubleValue", unrestricted_double_value);
        ("doubleValue", double_value);
        ("stringValue", string_value);
        ("usvstringValue", usvstring_value);
        ("enumValue", enum_value);
        ("interfaceValue", interface_value);
        ("anyValue", any_value);
        ("objectValue", object_value);
        ("dict", dict);
        ("seqDict", seq_dict);
        ("elementSequence", element_sequence);
        ("type", type');
        ("nonRequiredNullable", non_required_nullable);
        ("nonRequiredNullable2", non_required_nullable2);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let required_value this = Js.Any.to_bool (Js.Ffi.get this "requiredValue")

  let boolean_value this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "booleanValue")

  let byte_value this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "byteValue")

  let octet_value this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "octetValue")

  let short_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "shortValue")

  let unsigned_short_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedShortValue")

  let long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "longValue")

  let unsigned_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongValue")

  let long_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "longLongValue")

  let unsigned_long_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongLongValue")

  let unrestricted_float_value this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "unrestrictedFloatValue")

  let float_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "floatValue")

  let unrestricted_double_value this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "unrestrictedDoubleValue")

  let double_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "doubleValue")

  let string_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "stringValue")

  let usvstring_value this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "usvstringValue")

  let enum_value this =
    (Js.Any.nullable_to_option Test_enum.of_any) (Js.Ffi.get this "enumValue")

  let interface_value this =
    (Js.Any.nullable_to_option Blob.of_any) (Js.Ffi.get this "interfaceValue")

  let any_value this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "anyValue")

  let object_value this =
    (Js.Any.nullable_to_option Js.object_todo) (Js.Ffi.get this "objectValue")

  let dict this =
    (Js.Any.nullable_to_option Test_dictionary_defaults.of_any)
      (Js.Ffi.get this "dict")

  let seq_dict this =
    (Js.Any.nullable_to_option (Js.Any.to_array Test_dictionary_defaults.of_any))
      (Js.Ffi.get this "seqDict")

  let element_sequence this =
    (Js.Any.nullable_to_option (Js.Any.to_array Element.of_any))
      (Js.Ffi.get this "elementSequence")

  let type' this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "type")

  let non_required_nullable this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "nonRequiredNullable")

  let non_required_nullable2 this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "nonRequiredNullable2")
end

and Test_dictionary_parent : sig
  type t [@@ocaml.doc "The type for the [TestDictionaryParent] dictionary."]

  val make : ?parent_string_member:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val parent_string_member : t -> string option
end = struct
  type t = Js.any

  let make ?parent_string_member () =
    let parent_string_member =
      (Js.Any.nullable_of_option Js.Any.of_string) parent_string_member
    in
    Js.Ffi.obj [| ("parentStringMember", parent_string_member) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let parent_string_member this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "parentStringMember")
end

and Test_dictionary_with_parent : sig
  type t [@@ocaml.doc "The type for the [TestDictionaryWithParent] dictionary."]

  val make : ?string_member:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val string_member : t -> string option
end = struct
  type t = Js.any

  let make ?string_member () =
    let string_member =
      (Js.Any.nullable_of_option Js.Any.of_string) string_member
    in
    Js.Ffi.obj [| ("stringMember", string_member) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let string_member this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "stringMember")
end

and Test_dictionary_defaults : sig
  type t [@@ocaml.doc "The type for the [TestDictionaryDefaults] dictionary."]

  val make :
    ?boolean_value:bool ->
    ?byte_value:char ->
    ?octet_value:char ->
    ?short_value:int ->
    ?unsigned_short_value:int ->
    ?long_value:int ->
    ?unsigned_long_value:int ->
    ?long_long_value:int ->
    ?unsigned_long_long_value:int ->
    ?unrestricted_float_value:float ->
    ?float_value:float ->
    ?unrestricted_double_value:float ->
    ?double_value:float ->
    ?bytestring_value:string ->
    ?string_value:string ->
    ?usvstring_value:string ->
    ?enum_value:Test_enum.t ->
    ?any_value:Js.any ->
    ?array_value:'todo_object array ->
    ?nullable_boolean_value:bool option ->
    ?nullable_byte_value:char option ->
    ?nullable_octet_value:char option ->
    ?nullable_short_value:int option ->
    ?nullable_unsigned_short_value:int option ->
    ?nullable_long_value:int option ->
    ?nullable_unsigned_long_value:int option ->
    ?nullable_long_long_value:int option ->
    ?nullable_unsigned_long_long_value:int option ->
    ?nullable_unrestricted_float_value:float option ->
    ?nullable_float_value:float option ->
    ?nullable_unrestricted_double_value:float option ->
    ?nullable_double_value:float option ->
    ?nullable_bytestring_value:string option ->
    ?nullable_string_value:string option ->
    ?nullable_usvstring_value:string option ->
    ?nullable_object_value:'todo_object option ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val boolean_value : t -> bool option
  val byte_value : t -> char option
  val octet_value : t -> char option
  val short_value : t -> int option
  val unsigned_short_value : t -> int option
  val long_value : t -> int option
  val unsigned_long_value : t -> int option
  val long_long_value : t -> int option
  val unsigned_long_long_value : t -> int option
  val unrestricted_float_value : t -> float option
  val float_value : t -> float option
  val unrestricted_double_value : t -> float option
  val double_value : t -> float option
  val bytestring_value : t -> string option
  val string_value : t -> string option
  val usvstring_value : t -> string option
  val enum_value : t -> Test_enum.t option
  val any_value : t -> Js.any option
  val array_value : t -> 'todo_object array option
  val nullable_boolean_value : t -> bool option option
  val nullable_byte_value : t -> char option option
  val nullable_octet_value : t -> char option option
  val nullable_short_value : t -> int option option
  val nullable_unsigned_short_value : t -> int option option
  val nullable_long_value : t -> int option option
  val nullable_unsigned_long_value : t -> int option option
  val nullable_long_long_value : t -> int option option
  val nullable_unsigned_long_long_value : t -> int option option
  val nullable_unrestricted_float_value : t -> float option option
  val nullable_float_value : t -> float option option
  val nullable_unrestricted_double_value : t -> float option option
  val nullable_double_value : t -> float option option
  val nullable_bytestring_value : t -> string option option
  val nullable_string_value : t -> string option option
  val nullable_usvstring_value : t -> string option option
  val nullable_object_value : t -> 'todo_object option option
end = struct
  type t = Js.any

  let make ?boolean_value ?byte_value ?octet_value ?short_value
      ?unsigned_short_value ?long_value ?unsigned_long_value ?long_long_value
      ?unsigned_long_long_value ?unrestricted_float_value ?float_value
      ?unrestricted_double_value ?double_value ?bytestring_value ?string_value
      ?usvstring_value ?enum_value ?any_value ?array_value
      ?nullable_boolean_value ?nullable_byte_value ?nullable_octet_value
      ?nullable_short_value ?nullable_unsigned_short_value ?nullable_long_value
      ?nullable_unsigned_long_value ?nullable_long_long_value
      ?nullable_unsigned_long_long_value ?nullable_unrestricted_float_value
      ?nullable_float_value ?nullable_unrestricted_double_value
      ?nullable_double_value ?nullable_bytestring_value ?nullable_string_value
      ?nullable_usvstring_value ?nullable_object_value () =
    let boolean_value =
      (Js.Any.nullable_of_option Js.Any.of_bool) boolean_value
    in
    let byte_value = (Js.Any.nullable_of_option Js.Any.of_char) byte_value in
    let octet_value = (Js.Any.nullable_of_option Js.Any.of_char) octet_value in
    let short_value = (Js.Any.nullable_of_option Js.Any.of_int) short_value in
    let unsigned_short_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_short_value
    in
    let long_value = (Js.Any.nullable_of_option Js.Any.of_int) long_value in
    let unsigned_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_long_value
    in
    let long_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) long_long_value
    in
    let unsigned_long_long_value =
      (Js.Any.nullable_of_option Js.Any.of_int) unsigned_long_long_value
    in
    let unrestricted_float_value =
      (Js.Any.nullable_of_option Js.Any.of_float) unrestricted_float_value
    in
    let float_value = (Js.Any.nullable_of_option Js.Any.of_float) float_value in
    let unrestricted_double_value =
      (Js.Any.nullable_of_option Js.Any.of_float) unrestricted_double_value
    in
    let double_value =
      (Js.Any.nullable_of_option Js.Any.of_float) double_value
    in
    let bytestring_value =
      (Js.Any.nullable_of_option Js.Any.of_string) bytestring_value
    in
    let string_value =
      (Js.Any.nullable_of_option Js.Any.of_string) string_value
    in
    let usvstring_value =
      (Js.Any.nullable_of_option Js.Any.of_string) usvstring_value
    in
    let enum_value = (Js.Any.nullable_of_option Test_enum.to_any) enum_value in
    let any_value = (Js.Any.nullable_of_option Js.of_any) any_value in
    let array_value =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.object_todo)) array_value
    in
    let nullable_boolean_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_bool))
        nullable_boolean_value
    in
    let nullable_byte_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        nullable_byte_value
    in
    let nullable_octet_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        nullable_octet_value
    in
    let nullable_short_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_short_value
    in
    let nullable_unsigned_short_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_unsigned_short_value
    in
    let nullable_long_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_long_value
    in
    let nullable_unsigned_long_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_unsigned_long_value
    in
    let nullable_long_long_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_long_long_value
    in
    let nullable_unsigned_long_long_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_int))
        nullable_unsigned_long_long_value
    in
    let nullable_unrestricted_float_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        nullable_unrestricted_float_value
    in
    let nullable_float_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        nullable_float_value
    in
    let nullable_unrestricted_double_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        nullable_unrestricted_double_value
    in
    let nullable_double_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        nullable_double_value
    in
    let nullable_bytestring_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        nullable_bytestring_value
    in
    let nullable_string_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        nullable_string_value
    in
    let nullable_usvstring_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        nullable_usvstring_value
    in
    let nullable_object_value =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Js.object_todo))
        nullable_object_value
    in
    Js.Ffi.obj
      [|
        ("booleanValue", boolean_value);
        ("byteValue", byte_value);
        ("octetValue", octet_value);
        ("shortValue", short_value);
        ("unsignedShortValue", unsigned_short_value);
        ("longValue", long_value);
        ("unsignedLongValue", unsigned_long_value);
        ("longLongValue", long_long_value);
        ("unsignedLongLongValue", unsigned_long_long_value);
        ("unrestrictedFloatValue", unrestricted_float_value);
        ("floatValue", float_value);
        ("UnrestrictedDoubleValue", unrestricted_double_value);
        ("doubleValue", double_value);
        ("bytestringValue", bytestring_value);
        ("stringValue", string_value);
        ("usvstringValue", usvstring_value);
        ("enumValue", enum_value);
        ("anyValue", any_value);
        ("arrayValue", array_value);
        ("nullableBooleanValue", nullable_boolean_value);
        ("nullableByteValue", nullable_byte_value);
        ("nullableOctetValue", nullable_octet_value);
        ("nullableShortValue", nullable_short_value);
        ("nullableUnsignedShortValue", nullable_unsigned_short_value);
        ("nullableLongValue", nullable_long_value);
        ("nullableUnsignedLongValue", nullable_unsigned_long_value);
        ("nullableLongLongValue", nullable_long_long_value);
        ("nullableUnsignedLongLongValue", nullable_unsigned_long_long_value);
        ("nullableUnrestrictedFloatValue", nullable_unrestricted_float_value);
        ("nullableFloatValue", nullable_float_value);
        ("nullableUnrestrictedDoubleValue", nullable_unrestricted_double_value);
        ("nullableDoubleValue", nullable_double_value);
        ("nullableBytestringValue", nullable_bytestring_value);
        ("nullableStringValue", nullable_string_value);
        ("nullableUsvstringValue", nullable_usvstring_value);
        ("nullableObjectValue", nullable_object_value);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let boolean_value this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "booleanValue")

  let byte_value this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "byteValue")

  let octet_value this =
    (Js.Any.nullable_to_option Js.Any.to_char) (Js.Ffi.get this "octetValue")

  let short_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "shortValue")

  let unsigned_short_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedShortValue")

  let long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "longValue")

  let unsigned_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongValue")

  let long_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "longLongValue")

  let unsigned_long_long_value this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongLongValue")

  let unrestricted_float_value this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "unrestrictedFloatValue")

  let float_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "floatValue")

  let unrestricted_double_value this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "UnrestrictedDoubleValue")

  let double_value this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "doubleValue")

  let bytestring_value this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "bytestringValue")

  let string_value this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "stringValue")

  let usvstring_value this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "usvstringValue")

  let enum_value this =
    (Js.Any.nullable_to_option Test_enum.of_any) (Js.Ffi.get this "enumValue")

  let any_value this =
    (Js.Any.nullable_to_option Js.to_any) (Js.Ffi.get this "anyValue")

  let array_value this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.object_todo))
      (Js.Ffi.get this "arrayValue")

  let nullable_boolean_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_bool))
      (Js.Ffi.get this "nullableBooleanValue")

  let nullable_byte_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_char))
      (Js.Ffi.get this "nullableByteValue")

  let nullable_octet_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_char))
      (Js.Ffi.get this "nullableOctetValue")

  let nullable_short_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableShortValue")

  let nullable_unsigned_short_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableUnsignedShortValue")

  let nullable_long_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableLongValue")

  let nullable_unsigned_long_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableUnsignedLongValue")

  let nullable_long_long_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableLongLongValue")

  let nullable_unsigned_long_long_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_int))
      (Js.Ffi.get this "nullableUnsignedLongLongValue")

  let nullable_unrestricted_float_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_float))
      (Js.Ffi.get this "nullableUnrestrictedFloatValue")

  let nullable_float_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_float))
      (Js.Ffi.get this "nullableFloatValue")

  let nullable_unrestricted_double_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_float))
      (Js.Ffi.get this "nullableUnrestrictedDoubleValue")

  let nullable_double_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_float))
      (Js.Ffi.get this "nullableDoubleValue")

  let nullable_bytestring_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "nullableBytestringValue")

  let nullable_string_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "nullableStringValue")

  let nullable_usvstring_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.Any.to_string))
      (Js.Ffi.get this "nullableUsvstringValue")

  let nullable_object_value this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Js.object_todo))
      (Js.Ffi.get this "nullableObjectValue")
end

and Test_url_like : sig
  type t [@@ocaml.doc "The type for the [TestURLLike] dictionary."]

  val make : href:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val href : t -> string
end = struct
  type t = Js.any

  let make ~href () =
    let href = Js.Any.of_string href in
    Js.Ffi.obj [| ("href", href) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
end

and Test_binding : sig
  type t = [ `Test_binding ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding} \
     [TestBinding]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t
  val make : number_sequence:float array -> unit -> t
  val make : num:float -> unit -> t

  val boolean_attribute : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttribute} \
     [booleanAttribute] on MDN}."]

  val set_boolean_attribute : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttribute} \
     [booleanAttribute] on MDN}."]

  val byte_attribute : t -> char
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteAttribute} \
     [byteAttribute] on MDN}."]

  val set_byte_attribute : t -> char -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteAttribute} \
     [byteAttribute] on MDN}."]

  val octet_attribute : t -> char
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/octetAttribute} \
     [octetAttribute] on MDN}."]

  val set_octet_attribute : t -> char -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/octetAttribute} \
     [octetAttribute] on MDN}."]

  val short_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/shortAttribute} \
     [shortAttribute] on MDN}."]

  val set_short_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/shortAttribute} \
     [shortAttribute] on MDN}."]

  val unsigned_short_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedShortAttribute} \
     [unsignedShortAttribute] on MDN}."]

  val set_unsigned_short_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedShortAttribute} \
     [unsignedShortAttribute] on MDN}."]

  val long_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longAttribute} \
     [longAttribute] on MDN}."]

  val set_long_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longAttribute} \
     [longAttribute] on MDN}."]

  val unsigned_long_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongAttribute} \
     [unsignedLongAttribute] on MDN}."]

  val set_unsigned_long_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongAttribute} \
     [unsignedLongAttribute] on MDN}."]

  val long_long_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longLongAttribute} \
     [longLongAttribute] on MDN}."]

  val set_long_long_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longLongAttribute} \
     [longLongAttribute] on MDN}."]

  val unsigned_long_long_attribute : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongLongAttribute} \
     [unsignedLongLongAttribute] on MDN}."]

  val set_unsigned_long_long_attribute : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongLongAttribute} \
     [unsignedLongLongAttribute] on MDN}."]

  val unrestricted_float_attribute : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedFloatAttribute} \
     [unrestrictedFloatAttribute] on MDN}."]

  val set_unrestricted_float_attribute : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedFloatAttribute} \
     [unrestrictedFloatAttribute] on MDN}."]

  val float_attribute : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/floatAttribute} \
     [floatAttribute] on MDN}."]

  val set_float_attribute : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/floatAttribute} \
     [floatAttribute] on MDN}."]

  val unrestricted_double_attribute : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedDoubleAttribute} \
     [unrestrictedDoubleAttribute] on MDN}."]

  val set_unrestricted_double_attribute : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedDoubleAttribute} \
     [unrestrictedDoubleAttribute] on MDN}."]

  val double_attribute : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/doubleAttribute} \
     [doubleAttribute] on MDN}."]

  val set_double_attribute : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/doubleAttribute} \
     [doubleAttribute] on MDN}."]

  val string_attribute : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/stringAttribute} \
     [stringAttribute] on MDN}."]

  val set_string_attribute : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/stringAttribute} \
     [stringAttribute] on MDN}."]

  val usvstring_attribute : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/usvstringAttribute} \
     [usvstringAttribute] on MDN}."]

  val set_usvstring_attribute : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/usvstringAttribute} \
     [usvstringAttribute] on MDN}."]

  val byte_string_attribute : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteStringAttribute} \
     [byteStringAttribute] on MDN}."]

  val set_byte_string_attribute : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteStringAttribute} \
     [byteStringAttribute] on MDN}."]

  val enum_attribute : t -> Test_enum.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/enumAttribute} \
     [enumAttribute] on MDN}."]

  val set_enum_attribute : t -> Test_enum.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/enumAttribute} \
     [enumAttribute] on MDN}."]

  val interface_attribute : t -> Blob.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttribute} \
     [interfaceAttribute] on MDN}."]

  val set_interface_attribute : t -> Blob.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttribute} \
     [interfaceAttribute] on MDN}."]

  val union_attribute : t -> [< `Html_element | `Long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unionAttribute} \
     [unionAttribute] on MDN}."]

  val set_union_attribute : t -> [< `Html_element | `Long ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unionAttribute} \
     [unionAttribute] on MDN}."]

  val union2_attribute : t -> [< `Event | `String ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union2Attribute} \
     [union2Attribute] on MDN}."]

  val set_union2_attribute : t -> [< `Event | `String ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union2Attribute} \
     [union2Attribute] on MDN}."]

  val union3_attribute : t -> [< `Event | `String ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union3Attribute} \
     [union3Attribute] on MDN}."]

  val set_union3_attribute : t -> [< `Event | `String ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union3Attribute} \
     [union3Attribute] on MDN}."]

  val union4_attribute : t -> [< `String | `Unsigned_long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union4Attribute} \
     [union4Attribute] on MDN}."]

  val set_union4_attribute : t -> [< `String | `Unsigned_long ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union4Attribute} \
     [union4Attribute] on MDN}."]

  val union5_attribute : t -> [< `String | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union5Attribute} \
     [union5Attribute] on MDN}."]

  val set_union5_attribute : t -> [< `String | `Bool ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union5Attribute} \
     [union5Attribute] on MDN}."]

  val union6_attribute : t -> [< `Unsigned_long | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union6Attribute} \
     [union6Attribute] on MDN}."]

  val set_union6_attribute : t -> [< `Unsigned_long | `Bool ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union6Attribute} \
     [union6Attribute] on MDN}."]

  val union7_attribute : t -> [< `Blob | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union7Attribute} \
     [union7Attribute] on MDN}."]

  val set_union7_attribute : t -> [< `Blob | `Bool ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union7Attribute} \
     [union7Attribute] on MDN}."]

  val union8_attribute : t -> [< `Blob | `Unsigned_long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union8Attribute} \
     [union8Attribute] on MDN}."]

  val set_union8_attribute : t -> [< `Blob | `Unsigned_long ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union8Attribute} \
     [union8Attribute] on MDN}."]

  val union9_attribute : t -> [< `String | `Long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union9Attribute} \
     [union9Attribute] on MDN}."]

  val set_union9_attribute : t -> [< `String | `Long ] Js.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union9Attribute} \
     [union9Attribute] on MDN}."]

  val array_attribute : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/arrayAttribute} \
     [arrayAttribute] on MDN}."]

  val any_attribute : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/anyAttribute} \
     [anyAttribute] on MDN}."]

  val set_any_attribute : t -> Js.any -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/anyAttribute} \
     [anyAttribute] on MDN}."]

  val object_attribute : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/objectAttribute} \
     [objectAttribute] on MDN}."]

  val set_object_attribute : t -> 'todo_object -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/objectAttribute} \
     [objectAttribute] on MDN}."]

  val boolean_attribute_nullable : t -> bool option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttributeNullable} \
     [booleanAttributeNullable] on MDN}."]

  val set_boolean_attribute_nullable : t -> bool option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttributeNullable} \
     [booleanAttributeNullable] on MDN}."]

  val byte_attribute_nullable : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteAttributeNullable} \
     [byteAttributeNullable] on MDN}."]

  val set_byte_attribute_nullable : t -> char option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteAttributeNullable} \
     [byteAttributeNullable] on MDN}."]

  val octet_attribute_nullable : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/octetAttributeNullable} \
     [octetAttributeNullable] on MDN}."]

  val set_octet_attribute_nullable : t -> char option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/octetAttributeNullable} \
     [octetAttributeNullable] on MDN}."]

  val short_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/shortAttributeNullable} \
     [shortAttributeNullable] on MDN}."]

  val set_short_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/shortAttributeNullable} \
     [shortAttributeNullable] on MDN}."]

  val unsigned_short_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedShortAttributeNullable} \
     [unsignedShortAttributeNullable] on MDN}."]

  val set_unsigned_short_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedShortAttributeNullable} \
     [unsignedShortAttributeNullable] on MDN}."]

  val long_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longAttributeNullable} \
     [longAttributeNullable] on MDN}."]

  val set_long_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longAttributeNullable} \
     [longAttributeNullable] on MDN}."]

  val unsigned_long_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongAttributeNullable} \
     [unsignedLongAttributeNullable] on MDN}."]

  val set_unsigned_long_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongAttributeNullable} \
     [unsignedLongAttributeNullable] on MDN}."]

  val long_long_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longLongAttributeNullable} \
     [longLongAttributeNullable] on MDN}."]

  val set_long_long_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/longLongAttributeNullable} \
     [longLongAttributeNullable] on MDN}."]

  val unsigned_long_long_attribute_nullable : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongLongAttributeNullable} \
     [unsignedLongLongAttributeNullable] on MDN}."]

  val set_unsigned_long_long_attribute_nullable : t -> int option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unsignedLongLongAttributeNullable} \
     [unsignedLongLongAttributeNullable] on MDN}."]

  val unrestricted_float_attribute_nullable : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedFloatAttributeNullable} \
     [unrestrictedFloatAttributeNullable] on MDN}."]

  val set_unrestricted_float_attribute_nullable : t -> float option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedFloatAttributeNullable} \
     [unrestrictedFloatAttributeNullable] on MDN}."]

  val float_attribute_nullable : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/floatAttributeNullable} \
     [floatAttributeNullable] on MDN}."]

  val set_float_attribute_nullable : t -> float option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/floatAttributeNullable} \
     [floatAttributeNullable] on MDN}."]

  val unrestricted_double_attribute_nullable : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedDoubleAttributeNullable} \
     [unrestrictedDoubleAttributeNullable] on MDN}."]

  val set_unrestricted_double_attribute_nullable : t -> float option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unrestrictedDoubleAttributeNullable} \
     [unrestrictedDoubleAttributeNullable] on MDN}."]

  val double_attribute_nullable : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/doubleAttributeNullable} \
     [doubleAttributeNullable] on MDN}."]

  val set_double_attribute_nullable : t -> float option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/doubleAttributeNullable} \
     [doubleAttributeNullable] on MDN}."]

  val string_attribute_nullable : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/stringAttributeNullable} \
     [stringAttributeNullable] on MDN}."]

  val set_string_attribute_nullable : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/stringAttributeNullable} \
     [stringAttributeNullable] on MDN}."]

  val usvstring_attribute_nullable : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/usvstringAttributeNullable} \
     [usvstringAttributeNullable] on MDN}."]

  val set_usvstring_attribute_nullable : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/usvstringAttributeNullable} \
     [usvstringAttributeNullable] on MDN}."]

  val byte_string_attribute_nullable : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteStringAttributeNullable} \
     [byteStringAttributeNullable] on MDN}."]

  val set_byte_string_attribute_nullable : t -> string option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/byteStringAttributeNullable} \
     [byteStringAttributeNullable] on MDN}."]

  val enum_attribute_nullable : t -> Test_enum.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/enumAttributeNullable} \
     [enumAttributeNullable] on MDN}."]

  val interface_attribute_nullable : t -> Blob.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttributeNullable} \
     [interfaceAttributeNullable] on MDN}."]

  val set_interface_attribute_nullable : t -> Blob.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttributeNullable} \
     [interfaceAttributeNullable] on MDN}."]

  val interface_attribute_weak : t -> Url.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttributeWeak} \
     [interfaceAttributeWeak] on MDN}."]

  val set_interface_attribute_weak : t -> Url.t option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/interfaceAttributeWeak} \
     [interfaceAttributeWeak] on MDN}."]

  val object_attribute_nullable : t -> 'todo_object option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/objectAttributeNullable} \
     [objectAttributeNullable] on MDN}."]

  val set_object_attribute_nullable : t -> 'todo_object option -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/objectAttributeNullable} \
     [objectAttributeNullable] on MDN}."]

  val union_attribute_nullable : t -> [< `Html_element | `Long ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unionAttributeNullable} \
     [unionAttributeNullable] on MDN}."]

  val set_union_attribute_nullable :
    t -> [< `Html_element | `Long ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/unionAttributeNullable} \
     [unionAttributeNullable] on MDN}."]

  val union2_attribute_nullable : t -> [< `Event | `String ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union2AttributeNullable} \
     [union2AttributeNullable] on MDN}."]

  val set_union2_attribute_nullable :
    t -> [< `Event | `String ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union2AttributeNullable} \
     [union2AttributeNullable] on MDN}."]

  val union3_attribute_nullable : t -> [< `Blob | `Bool ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union3AttributeNullable} \
     [union3AttributeNullable] on MDN}."]

  val set_union3_attribute_nullable :
    t -> [< `Blob | `Bool ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union3AttributeNullable} \
     [union3AttributeNullable] on MDN}."]

  val union4_attribute_nullable : t -> [< `Unsigned_long | `Bool ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union4AttributeNullable} \
     [union4AttributeNullable] on MDN}."]

  val set_union4_attribute_nullable :
    t -> [< `Unsigned_long | `Bool ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union4AttributeNullable} \
     [union4AttributeNullable] on MDN}."]

  val union5_attribute_nullable : t -> [< `String | `Bool ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union5AttributeNullable} \
     [union5AttributeNullable] on MDN}."]

  val set_union5_attribute_nullable :
    t -> [< `String | `Bool ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union5AttributeNullable} \
     [union5AttributeNullable] on MDN}."]

  val union6_attribute_nullable : t -> [< `String | `Long ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union6AttributeNullable} \
     [union6AttributeNullable] on MDN}."]

  val set_union6_attribute_nullable :
    t -> [< `String | `Long ] Js.nullable -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/union6AttributeNullable} \
     [union6AttributeNullable] on MDN}."]

  val attr_to_binary_rename : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attrToBinaryRename} \
     [attrToBinaryRename] on MDN}."]

  val set_attr_to_binary_rename : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attrToBinaryRename} \
     [attrToBinaryRename] on MDN}."]

  val attr_to_binary_rename : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attr-to-binary-rename} \
     [attr-to-binary-rename] on MDN}."]

  val set_attr_to_binary_rename : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attr-to-binary-rename} \
     [attr-to-binary-rename] on MDN}."]

  val attr_to_automatically_rename : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attr-to-automatically-rename} \
     [attr-to-automatically-rename] on MDN}."]

  val set_attr_to_automatically_rename : t -> string -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/attr-to-automatically-rename} \
     [attr-to-automatically-rename] on MDN}."]

  val constant_int64 : int
  val constant_uint64 : int
  val constant_float32 : float
  val constant_float64 : float
  val constant_unrestricted_float32 : float
  val constant_unrestricted_float64 : float

  val forwarded_attribute : t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/forwardedAttribute} \
     [forwardedAttribute] on MDN}."]

  val meth_to_binary_rename : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/methToBinaryRename} \
     [methToBinaryRename] on MDN}."]

  val receive_void : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveVoid} \
     [receiveVoid] on MDN}."]

  val receive_boolean : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveBoolean} \
     [receiveBoolean] on MDN}."]

  val receive_byte : t -> char
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveByte} \
     [receiveByte] on MDN}."]

  val receive_octet : t -> char
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveOctet} \
     [receiveOctet] on MDN}."]

  val receive_short : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveShort} \
     [receiveShort] on MDN}."]

  val receive_unsigned_short : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnsignedShort} \
     [receiveUnsignedShort] on MDN}."]

  val receive_long : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveLong} \
     [receiveLong] on MDN}."]

  val receive_unsigned_long : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnsignedLong} \
     [receiveUnsignedLong] on MDN}."]

  val receive_long_long : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveLongLong} \
     [receiveLongLong] on MDN}."]

  val receive_unsigned_long_long : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnsignedLongLong} \
     [receiveUnsignedLongLong] on MDN}."]

  val receive_unrestricted_float : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnrestrictedFloat} \
     [receiveUnrestrictedFloat] on MDN}."]

  val receive_float : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveFloat} \
     [receiveFloat] on MDN}."]

  val receive_unrestricted_double : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnrestrictedDouble} \
     [receiveUnrestrictedDouble] on MDN}."]

  val receive_double : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveDouble} \
     [receiveDouble] on MDN}."]

  val receive_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveString} \
     [receiveString] on MDN}."]

  val receive_usvstring : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUsvstring} \
     [receiveUsvstring] on MDN}."]

  val receive_byte_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveByteString} \
     [receiveByteString] on MDN}."]

  val receive_enum : t -> Test_enum.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveEnum} \
     [receiveEnum] on MDN}."]

  val receive_interface : t -> Blob.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveInterface} \
     [receiveInterface] on MDN}."]

  val receive_any : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveAny} \
     [receiveAny] on MDN}."]

  val receive_object : t -> 'todo_object
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveObject} \
     [receiveObject] on MDN}."]

  val receive_union : t -> [< `Html_element | `Long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion} \
     [receiveUnion] on MDN}."]

  val receive_union2 : t -> [< `Event | `String ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion2} \
     [receiveUnion2] on MDN}."]

  val receive_union3 : t -> [< `String | `Sequence ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion3} \
     [receiveUnion3] on MDN}."]

  val receive_union4 : t -> [< `String | `Sequence ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion4} \
     [receiveUnion4] on MDN}."]

  val receive_union5 : t -> [< `Blob | `Sequence ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion5} \
     [receiveUnion5] on MDN}."]

  val receive_union6 : t -> [< `String | `Unsigned_long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion6} \
     [receiveUnion6] on MDN}."]

  val receive_union7 : t -> [< `String | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion7} \
     [receiveUnion7] on MDN}."]

  val receive_union8 : t -> [< `Unsigned_long | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion8} \
     [receiveUnion8] on MDN}."]

  val receive_union9 :
    t -> [< `Html_element | `Unsigned_long | `String | `Bool ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion9} \
     [receiveUnion9] on MDN}."]

  val receive_union10 : t -> [< `String | `Long ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion10} \
     [receiveUnion10] on MDN}."]

  val receive_union11 : t -> [< `Sequence | `Long | `String ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnion11} \
     [receiveUnion11] on MDN}."]

  val receive_sequence : t -> int array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveSequence} \
     [receiveSequence] on MDN}."]

  val receive_interface_sequence : t -> Blob.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveInterfaceSequence} \
     [receiveInterfaceSequence] on MDN}."]

  val receive_nullable_byte : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableByte} \
     [receiveNullableByte] on MDN}."]

  val receive_nullable_boolean : t -> bool option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableBoolean} \
     [receiveNullableBoolean] on MDN}."]

  val receive_nullable_octet : t -> char option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableOctet} \
     [receiveNullableOctet] on MDN}."]

  val receive_nullable_short : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableShort} \
     [receiveNullableShort] on MDN}."]

  val receive_nullable_unsigned_short : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnsignedShort} \
     [receiveNullableUnsignedShort] on MDN}."]

  val receive_nullable_long : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableLong} \
     [receiveNullableLong] on MDN}."]

  val receive_nullable_unsigned_long : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnsignedLong} \
     [receiveNullableUnsignedLong] on MDN}."]

  val receive_nullable_long_long : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableLongLong} \
     [receiveNullableLongLong] on MDN}."]

  val receive_nullable_unsigned_long_long : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnsignedLongLong} \
     [receiveNullableUnsignedLongLong] on MDN}."]

  val receive_nullable_unrestricted_float : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnrestrictedFloat} \
     [receiveNullableUnrestrictedFloat] on MDN}."]

  val receive_nullable_float : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableFloat} \
     [receiveNullableFloat] on MDN}."]

  val receive_nullable_unrestricted_double : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnrestrictedDouble} \
     [receiveNullableUnrestrictedDouble] on MDN}."]

  val receive_nullable_double : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableDouble} \
     [receiveNullableDouble] on MDN}."]

  val receive_nullable_string : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableString} \
     [receiveNullableString] on MDN}."]

  val receive_nullable_usvstring : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUsvstring} \
     [receiveNullableUsvstring] on MDN}."]

  val receive_nullable_byte_string : t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableByteString} \
     [receiveNullableByteString] on MDN}."]

  val receive_nullable_enum : t -> Test_enum.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableEnum} \
     [receiveNullableEnum] on MDN}."]

  val receive_nullable_interface : t -> Blob.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableInterface} \
     [receiveNullableInterface] on MDN}."]

  val receive_nullable_object : t -> 'todo_object option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableObject} \
     [receiveNullableObject] on MDN}."]

  val receive_nullable_union : t -> [< `Html_element | `Long ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion} \
     [receiveNullableUnion] on MDN}."]

  val receive_nullable_union2 : t -> [< `Event | `String ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion2} \
     [receiveNullableUnion2] on MDN}."]

  val receive_nullable_union3 : t -> [< `String | `Sequence ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion3} \
     [receiveNullableUnion3] on MDN}."]

  val receive_nullable_union4 : t -> [< `Sequence | `Bool ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion4} \
     [receiveNullableUnion4] on MDN}."]

  val receive_nullable_union5 : t -> [< `Unsigned_long | `Bool ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion5} \
     [receiveNullableUnion5] on MDN}."]

  val receive_nullable_union6 : t -> [< `String | `Long ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableUnion6} \
     [receiveNullableUnion6] on MDN}."]

  val receive_nullable_sequence : t -> int array option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableSequence} \
     [receiveNullableSequence] on MDN}."]

  val receive_test_dictionary_with_success_on_keyword : t -> Test_dictionary.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveTestDictionaryWithSuccessOnKeyword} \
     [receiveTestDictionaryWithSuccessOnKeyword] on MDN}."]

  val dict_matches_passed_values : arg:Test_dictionary.t -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/dictMatchesPassedValues} \
     [dictMatchesPassedValues] on MDN}."]

  val receive_union_identity :
    arg:[< `String | `Object ] Js.t -> t -> [< `String | `Object ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveUnionIdentity} \
     [receiveUnionIdentity] on MDN}."]

  val pass_boolean : arg:bool -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passBoolean} \
     [passBoolean] on MDN}."]

  val pass_byte : arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passByte} \
     [passByte] on MDN}."]

  val pass_octet : arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOctet} \
     [passOctet] on MDN}."]

  val pass_short : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passShort} \
     [passShort] on MDN}."]

  val pass_unsigned_short : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnsignedShort} \
     [passUnsignedShort] on MDN}."]

  val pass_long : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passLong} \
     [passLong] on MDN}."]

  val pass_unsigned_long : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnsignedLong} \
     [passUnsignedLong] on MDN}."]

  val pass_long_long : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passLongLong} \
     [passLongLong] on MDN}."]

  val pass_unsigned_long_long : arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnsignedLongLong} \
     [passUnsignedLongLong] on MDN}."]

  val pass_unrestricted_float : arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnrestrictedFloat} \
     [passUnrestrictedFloat] on MDN}."]

  val pass_float : arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passFloat} \
     [passFloat] on MDN}."]

  val pass_unrestricted_double : arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnrestrictedDouble} \
     [passUnrestrictedDouble] on MDN}."]

  val pass_double : arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passDouble} \
     [passDouble] on MDN}."]

  val pass_string : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passString} \
     [passString] on MDN}."]

  val pass_usvstring : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUsvstring} \
     [passUsvstring] on MDN}."]

  val pass_byte_string : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passByteString} \
     [passByteString] on MDN}."]

  val pass_enum : arg:Test_enum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passEnum} \
     [passEnum] on MDN}."]

  val pass_interface : arg:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passInterface} \
     [passInterface] on MDN}."]

  val pass_typed_array : arg:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passTypedArray} \
     [passTypedArray] on MDN}."]

  val pass_typed_array2 : arg:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passTypedArray2} \
     [passTypedArray2] on MDN}."]

  val pass_typed_array3 : arg:Array_buffer_view.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passTypedArray3} \
     [passTypedArray3] on MDN}."]

  val pass_union : arg:[< `Html_element | `Long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion} \
     [passUnion] on MDN}."]

  val pass_union2 : data:[< `Event | `String ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion2} \
     [passUnion2] on MDN}."]

  val pass_union3 : data:[< `Blob | `String ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion3} \
     [passUnion3] on MDN}."]

  val pass_union4 : seq:[< `String | `Sequence ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion4} \
     [passUnion4] on MDN}."]

  val pass_union5 : data:[< `String | `Bool ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion5} \
     [passUnion5] on MDN}."]

  val pass_union6 : bool:[< `Unsigned_long | `Bool ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion6} \
     [passUnion6] on MDN}."]

  val pass_union7 : arg:[< `Sequence | `Unsigned_long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion7} \
     [passUnion7] on MDN}."]

  val pass_union8 : arg:[< `Sequence | `Long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion8} \
     [passUnion8] on MDN}."]

  val pass_union9 : arg:[< `Test_dictionary | `Long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion9} \
     [passUnion9] on MDN}."]

  val pass_union10 : arg:[< `String | `Object ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion10} \
     [passUnion10] on MDN}."]

  val pass_union11 :
    arg:[< `ArrayBuffer | `Array_buffer_view ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnion11} \
     [passUnion11] on MDN}."]

  val pass_union_with_typedef :
    arg:[< `Document | `Test_typedef ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnionWithTypedef} \
     [passUnionWithTypedef] on MDN}."]

  val pass_union_with_typedef2 :
    arg:[< `Sequence | `Test_typedef ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnionWithTypedef2} \
     [passUnionWithTypedef2] on MDN}."]

  val pass_any : arg:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passAny} \
     [passAny] on MDN}."]

  val pass_object : arg:'todo_object -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passObject} \
     [passObject] on MDN}."]

  val pass_callback_function : fun':Function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passCallbackFunction} \
     [passCallbackFunction] on MDN}."]

  val pass_callback_interface : listener:Event_listener.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passCallbackInterface} \
     [passCallbackInterface] on MDN}."]

  val pass_sequence : seq:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passSequence} \
     [passSequence] on MDN}."]

  val pass_any_sequence : seq:Js.any array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passAnySequence} \
     [passAnySequence] on MDN}."]

  val any_sequence_passthrough : seq:Js.any array -> t -> Js.any array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/anySequencePassthrough} \
     [anySequencePassthrough] on MDN}."]

  val pass_object_sequence : seq:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passObjectSequence} \
     [passObjectSequence] on MDN}."]

  val pass_string_sequence : seq:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passStringSequence} \
     [passStringSequence] on MDN}."]

  val pass_interface_sequence : seq:Blob.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passInterfaceSequence} \
     [passInterfaceSequence] on MDN}."]

  val pass_overloaded : arg:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOverloaded} \
     [passOverloaded] on MDN}."]

  val pass_overloaded : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOverloaded} \
     [passOverloaded] on MDN}."]

  val pass_overloaded_dict : arg:Node.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOverloadedDict} \
     [passOverloadedDict] on MDN}."]

  val pass_overloaded_dict : arg:Test_url_like.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOverloadedDict} \
     [passOverloadedDict] on MDN}."]

  val pass_nullable_boolean : arg:bool option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableBoolean} \
     [passNullableBoolean] on MDN}."]

  val pass_nullable_byte : arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableByte} \
     [passNullableByte] on MDN}."]

  val pass_nullable_octet : arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableOctet} \
     [passNullableOctet] on MDN}."]

  val pass_nullable_short : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableShort} \
     [passNullableShort] on MDN}."]

  val pass_nullable_unsigned_short : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnsignedShort} \
     [passNullableUnsignedShort] on MDN}."]

  val pass_nullable_long : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableLong} \
     [passNullableLong] on MDN}."]

  val pass_nullable_unsigned_long : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnsignedLong} \
     [passNullableUnsignedLong] on MDN}."]

  val pass_nullable_long_long : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableLongLong} \
     [passNullableLongLong] on MDN}."]

  val pass_nullable_unsigned_long_long : arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnsignedLongLong} \
     [passNullableUnsignedLongLong] on MDN}."]

  val pass_nullable_unrestricted_float : arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnrestrictedFloat} \
     [passNullableUnrestrictedFloat] on MDN}."]

  val pass_nullable_float : arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableFloat} \
     [passNullableFloat] on MDN}."]

  val pass_nullable_unrestricted_double : arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnrestrictedDouble} \
     [passNullableUnrestrictedDouble] on MDN}."]

  val pass_nullable_double : arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableDouble} \
     [passNullableDouble] on MDN}."]

  val pass_nullable_string : arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableString} \
     [passNullableString] on MDN}."]

  val pass_nullable_usvstring : arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUsvstring} \
     [passNullableUsvstring] on MDN}."]

  val pass_nullable_byte_string : arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableByteString} \
     [passNullableByteString] on MDN}."]

  val pass_nullable_interface : arg:Blob.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableInterface} \
     [passNullableInterface] on MDN}."]

  val pass_nullable_object : arg:'todo_object option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableObject} \
     [passNullableObject] on MDN}."]

  val pass_nullable_typed_array : arg:'todo_buffer option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableTypedArray} \
     [passNullableTypedArray] on MDN}."]

  val pass_nullable_union :
    arg:[< `Html_element | `Long ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion} \
     [passNullableUnion] on MDN}."]

  val pass_nullable_union2 : data:[< `Event | `String ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion2} \
     [passNullableUnion2] on MDN}."]

  val pass_nullable_union3 :
    data:[< `String | `Sequence ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion3} \
     [passNullableUnion3] on MDN}."]

  val pass_nullable_union4 :
    bool:[< `Sequence | `Bool ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion4} \
     [passNullableUnion4] on MDN}."]

  val pass_nullable_union5 :
    arg:[< `Unsigned_long | `Bool ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion5} \
     [passNullableUnion5] on MDN}."]

  val pass_nullable_union6 : arg:[< `String | `Long ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableUnion6} \
     [passNullableUnion6] on MDN}."]

  val pass_nullable_callback_function : fun':Function.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableCallbackFunction} \
     [passNullableCallbackFunction] on MDN}."]

  val pass_nullable_callback_interface :
    listener:Event_listener.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableCallbackInterface} \
     [passNullableCallbackInterface] on MDN}."]

  val pass_nullable_sequence : seq:int array option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableSequence} \
     [passNullableSequence] on MDN}."]

  val pass_optional_boolean : ?arg:bool -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalBoolean} \
     [passOptionalBoolean] on MDN}."]

  val pass_optional_byte : ?arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalByte} \
     [passOptionalByte] on MDN}."]

  val pass_optional_octet : ?arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalOctet} \
     [passOptionalOctet] on MDN}."]

  val pass_optional_short : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalShort} \
     [passOptionalShort] on MDN}."]

  val pass_optional_unsigned_short : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedShort} \
     [passOptionalUnsignedShort] on MDN}."]

  val pass_optional_long : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalLong} \
     [passOptionalLong] on MDN}."]

  val pass_optional_unsigned_long : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedLong} \
     [passOptionalUnsignedLong] on MDN}."]

  val pass_optional_long_long : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalLongLong} \
     [passOptionalLongLong] on MDN}."]

  val pass_optional_unsigned_long_long : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedLongLong} \
     [passOptionalUnsignedLongLong] on MDN}."]

  val pass_optional_unrestricted_float : ?arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnrestrictedFloat} \
     [passOptionalUnrestrictedFloat] on MDN}."]

  val pass_optional_float : ?arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalFloat} \
     [passOptionalFloat] on MDN}."]

  val pass_optional_unrestricted_double : ?arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnrestrictedDouble} \
     [passOptionalUnrestrictedDouble] on MDN}."]

  val pass_optional_double : ?arg:float -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalDouble} \
     [passOptionalDouble] on MDN}."]

  val pass_optional_string : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalString} \
     [passOptionalString] on MDN}."]

  val pass_optional_usvstring : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUsvstring} \
     [passOptionalUsvstring] on MDN}."]

  val pass_optional_byte_string : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalByteString} \
     [passOptionalByteString] on MDN}."]

  val pass_optional_enum : ?arg:Test_enum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalEnum} \
     [passOptionalEnum] on MDN}."]

  val pass_optional_interface : ?arg:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalInterface} \
     [passOptionalInterface] on MDN}."]

  val pass_optional_union : ?arg:[< `Html_element | `Long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion} \
     [passOptionalUnion] on MDN}."]

  val pass_optional_union2 : ?data:[< `Event | `String ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion2} \
     [passOptionalUnion2] on MDN}."]

  val pass_optional_union3 : ?arg:[< `String | `Sequence ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion3} \
     [passOptionalUnion3] on MDN}."]

  val pass_optional_union4 : ?data:[< `Sequence | `Bool ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion4} \
     [passOptionalUnion4] on MDN}."]

  val pass_optional_union5 : ?bool:[< `Unsigned_long | `Bool ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion5} \
     [passOptionalUnion5] on MDN}."]

  val pass_optional_union6 : ?arg:[< `String | `Long ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnion6} \
     [passOptionalUnion6] on MDN}."]

  val pass_optional_any : ?arg:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalAny} \
     [passOptionalAny] on MDN}."]

  val pass_optional_object : ?arg:'todo_object -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalObject} \
     [passOptionalObject] on MDN}."]

  val pass_optional_callback_function : ?fun':Function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalCallbackFunction} \
     [passOptionalCallbackFunction] on MDN}."]

  val pass_optional_callback_interface : ?listener:Event_listener.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalCallbackInterface} \
     [passOptionalCallbackInterface] on MDN}."]

  val pass_optional_sequence : ?seq:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalSequence} \
     [passOptionalSequence] on MDN}."]

  val pass_optional_nullable_boolean : ?arg:bool option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableBoolean} \
     [passOptionalNullableBoolean] on MDN}."]

  val pass_optional_nullable_byte : ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableByte} \
     [passOptionalNullableByte] on MDN}."]

  val pass_optional_nullable_octet : ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableOctet} \
     [passOptionalNullableOctet] on MDN}."]

  val pass_optional_nullable_short : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableShort} \
     [passOptionalNullableShort] on MDN}."]

  val pass_optional_nullable_unsigned_short : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedShort} \
     [passOptionalNullableUnsignedShort] on MDN}."]

  val pass_optional_nullable_long : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLong} \
     [passOptionalNullableLong] on MDN}."]

  val pass_optional_nullable_unsigned_long : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLong} \
     [passOptionalNullableUnsignedLong] on MDN}."]

  val pass_optional_nullable_long_long : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLongLong} \
     [passOptionalNullableLongLong] on MDN}."]

  val pass_optional_nullable_unsigned_long_long : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLongLong} \
     [passOptionalNullableUnsignedLongLong] on MDN}."]

  val pass_optional_nullable_unrestricted_float : ?arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnrestrictedFloat} \
     [passOptionalNullableUnrestrictedFloat] on MDN}."]

  val pass_optional_nullable_float : ?arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableFloat} \
     [passOptionalNullableFloat] on MDN}."]

  val pass_optional_nullable_unrestricted_double :
    ?arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnrestrictedDouble} \
     [passOptionalNullableUnrestrictedDouble] on MDN}."]

  val pass_optional_nullable_double : ?arg:float option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableDouble} \
     [passOptionalNullableDouble] on MDN}."]

  val pass_optional_nullable_string : ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableString} \
     [passOptionalNullableString] on MDN}."]

  val pass_optional_nullable_usvstring : ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUsvstring} \
     [passOptionalNullableUsvstring] on MDN}."]

  val pass_optional_nullable_byte_string : ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableByteString} \
     [passOptionalNullableByteString] on MDN}."]

  val pass_optional_nullable_interface : ?arg:Blob.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableInterface} \
     [passOptionalNullableInterface] on MDN}."]

  val pass_optional_nullable_object : ?arg:'todo_object option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableObject} \
     [passOptionalNullableObject] on MDN}."]

  val pass_optional_nullable_union :
    ?arg:[< `Html_element | `Long ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion} \
     [passOptionalNullableUnion] on MDN}."]

  val pass_optional_nullable_union2 :
    ?data:[< `Event | `String ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion2} \
     [passOptionalNullableUnion2] on MDN}."]

  val pass_optional_nullable_union3 :
    ?arg:[< `String | `Sequence ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion3} \
     [passOptionalNullableUnion3] on MDN}."]

  val pass_optional_nullable_union4 :
    ?data:[< `Sequence | `Bool ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion4} \
     [passOptionalNullableUnion4] on MDN}."]

  val pass_optional_nullable_union5 :
    ?bool:[< `Unsigned_long | `Bool ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion5} \
     [passOptionalNullableUnion5] on MDN}."]

  val pass_optional_nullable_union6 :
    ?arg:[< `String | `Long ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion6} \
     [passOptionalNullableUnion6] on MDN}."]

  val pass_optional_nullable_callback_function :
    ?fun':Function.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableCallbackFunction} \
     [passOptionalNullableCallbackFunction] on MDN}."]

  val pass_optional_nullable_callback_interface :
    ?listener:Event_listener.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableCallbackInterface} \
     [passOptionalNullableCallbackInterface] on MDN}."]

  val pass_optional_nullable_sequence : ?seq:int array option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableSequence} \
     [passOptionalNullableSequence] on MDN}."]

  val pass_optional_boolean_with_default : ?arg:bool -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalBooleanWithDefault} \
     [passOptionalBooleanWithDefault] on MDN}."]

  val pass_optional_byte_with_default : ?arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalByteWithDefault} \
     [passOptionalByteWithDefault] on MDN}."]

  val pass_optional_octet_with_default : ?arg:char -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalOctetWithDefault} \
     [passOptionalOctetWithDefault] on MDN}."]

  val pass_optional_short_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalShortWithDefault} \
     [passOptionalShortWithDefault] on MDN}."]

  val pass_optional_unsigned_short_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedShortWithDefault} \
     [passOptionalUnsignedShortWithDefault] on MDN}."]

  val pass_optional_long_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalLongWithDefault} \
     [passOptionalLongWithDefault] on MDN}."]

  val pass_optional_unsigned_long_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedLongWithDefault} \
     [passOptionalUnsignedLongWithDefault] on MDN}."]

  val pass_optional_long_long_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalLongLongWithDefault} \
     [passOptionalLongLongWithDefault] on MDN}."]

  val pass_optional_unsigned_long_long_with_default : ?arg:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUnsignedLongLongWithDefault} \
     [passOptionalUnsignedLongLongWithDefault] on MDN}."]

  val pass_optional_bytestring_with_default : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalBytestringWithDefault} \
     [passOptionalBytestringWithDefault] on MDN}."]

  val pass_optional_string_with_default : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalStringWithDefault} \
     [passOptionalStringWithDefault] on MDN}."]

  val pass_optional_usvstring_with_default : ?arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalUsvstringWithDefault} \
     [passOptionalUsvstringWithDefault] on MDN}."]

  val pass_optional_enum_with_default : ?arg:Test_enum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalEnumWithDefault} \
     [passOptionalEnumWithDefault] on MDN}."]

  val pass_optional_sequence_with_default : ?seq:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalSequenceWithDefault} \
     [passOptionalSequenceWithDefault] on MDN}."]

  val pass_optional_nullable_boolean_with_default :
    ?arg:bool option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableBooleanWithDefault} \
     [passOptionalNullableBooleanWithDefault] on MDN}."]

  val pass_optional_nullable_byte_with_default : ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableByteWithDefault} \
     [passOptionalNullableByteWithDefault] on MDN}."]

  val pass_optional_nullable_octet_with_default : ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableOctetWithDefault} \
     [passOptionalNullableOctetWithDefault] on MDN}."]

  val pass_optional_nullable_short_with_default : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableShortWithDefault} \
     [passOptionalNullableShortWithDefault] on MDN}."]

  val pass_optional_nullable_unsigned_short_with_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedShortWithDefault} \
     [passOptionalNullableUnsignedShortWithDefault] on MDN}."]

  val pass_optional_nullable_long_with_default : ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLongWithDefault} \
     [passOptionalNullableLongWithDefault] on MDN}."]

  val pass_optional_nullable_unsigned_long_with_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLongWithDefault} \
     [passOptionalNullableUnsignedLongWithDefault] on MDN}."]

  val pass_optional_nullable_long_long_with_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLongLongWithDefault} \
     [passOptionalNullableLongLongWithDefault] on MDN}."]

  val pass_optional_nullable_unsigned_long_long_with_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLongLongWithDefault} \
     [passOptionalNullableUnsignedLongLongWithDefault] on MDN}."]

  val pass_optional_nullable_string_with_default :
    ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableStringWithDefault} \
     [passOptionalNullableStringWithDefault] on MDN}."]

  val pass_optional_nullable_usvstring_with_default :
    ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUsvstringWithDefault} \
     [passOptionalNullableUsvstringWithDefault] on MDN}."]

  val pass_optional_nullable_byte_string_with_default :
    ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableByteStringWithDefault} \
     [passOptionalNullableByteStringWithDefault] on MDN}."]

  val pass_optional_nullable_interface_with_default :
    ?arg:Blob.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableInterfaceWithDefault} \
     [passOptionalNullableInterfaceWithDefault] on MDN}."]

  val pass_optional_nullable_object_with_default :
    ?arg:'todo_object option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableObjectWithDefault} \
     [passOptionalNullableObjectWithDefault] on MDN}."]

  val pass_optional_nullable_union_with_default :
    ?arg:[< `Html_element | `Long ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnionWithDefault} \
     [passOptionalNullableUnionWithDefault] on MDN}."]

  val pass_optional_nullable_union2_with_default :
    ?data:[< `Event | `String ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnion2WithDefault} \
     [passOptionalNullableUnion2WithDefault] on MDN}."]

  val pass_optional_nullable_callback_interface_with_default :
    ?listener:Event_listener.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableCallbackInterfaceWithDefault} \
     [passOptionalNullableCallbackInterfaceWithDefault] on MDN}."]

  val pass_optional_any_with_default : ?arg:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalAnyWithDefault} \
     [passOptionalAnyWithDefault] on MDN}."]

  val pass_optional_nullable_boolean_with_non_null_default :
    ?arg:bool option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableBooleanWithNonNullDefault} \
     [passOptionalNullableBooleanWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_byte_with_non_null_default :
    ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableByteWithNonNullDefault} \
     [passOptionalNullableByteWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_octet_with_non_null_default :
    ?arg:char option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableOctetWithNonNullDefault} \
     [passOptionalNullableOctetWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_short_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableShortWithNonNullDefault} \
     [passOptionalNullableShortWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_unsigned_short_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedShortWithNonNullDefault} \
     [passOptionalNullableUnsignedShortWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_long_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLongWithNonNullDefault} \
     [passOptionalNullableLongWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_unsigned_long_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLongWithNonNullDefault} \
     [passOptionalNullableUnsignedLongWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_long_long_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableLongLongWithNonNullDefault} \
     [passOptionalNullableLongLongWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_unsigned_long_long_with_non_null_default :
    ?arg:int option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUnsignedLongLongWithNonNullDefault} \
     [passOptionalNullableUnsignedLongLongWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_string_with_non_null_default :
    ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableStringWithNonNullDefault} \
     [passOptionalNullableStringWithNonNullDefault] on MDN}."]

  val pass_optional_nullable_usvstring_with_non_null_default :
    ?arg:string option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableUsvstringWithNonNullDefault} \
     [passOptionalNullableUsvstringWithNonNullDefault] on MDN}."]

  val pass_optional_overloaded : arg0:t -> ?arg1:int -> ?arg2:int -> t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalOverloaded} \
     [passOptionalOverloaded] on MDN}."]

  val pass_optional_overloaded : arg0:Blob.t -> ?arg1:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalOverloaded} \
     [passOptionalOverloaded] on MDN}."]

  val pass_variadic_boolean : args:bool array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicBoolean} \
     [passVariadicBoolean] on MDN}."]

  val pass_variadic_boolean_and_default :
    ?arg:bool -> args:bool array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicBooleanAndDefault} \
     [passVariadicBooleanAndDefault] on MDN}."]

  val pass_variadic_byte : args:char array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicByte} \
     [passVariadicByte] on MDN}."]

  val pass_variadic_octet : args:char array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicOctet} \
     [passVariadicOctet] on MDN}."]

  val pass_variadic_short : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicShort} \
     [passVariadicShort] on MDN}."]

  val pass_variadic_unsigned_short : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnsignedShort} \
     [passVariadicUnsignedShort] on MDN}."]

  val pass_variadic_long : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicLong} \
     [passVariadicLong] on MDN}."]

  val pass_variadic_unsigned_long : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnsignedLong} \
     [passVariadicUnsignedLong] on MDN}."]

  val pass_variadic_long_long : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicLongLong} \
     [passVariadicLongLong] on MDN}."]

  val pass_variadic_unsigned_long_long : args:int array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnsignedLongLong} \
     [passVariadicUnsignedLongLong] on MDN}."]

  val pass_variadic_unrestricted_float : args:float array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnrestrictedFloat} \
     [passVariadicUnrestrictedFloat] on MDN}."]

  val pass_variadic_float : args:float array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicFloat} \
     [passVariadicFloat] on MDN}."]

  val pass_variadic_unrestricted_double : args:float array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnrestrictedDouble} \
     [passVariadicUnrestrictedDouble] on MDN}."]

  val pass_variadic_double : args:float array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicDouble} \
     [passVariadicDouble] on MDN}."]

  val pass_variadic_string : args:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicString} \
     [passVariadicString] on MDN}."]

  val pass_variadic_usvstring : args:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUsvstring} \
     [passVariadicUsvstring] on MDN}."]

  val pass_variadic_byte_string : args:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicByteString} \
     [passVariadicByteString] on MDN}."]

  val pass_variadic_enum : args:Test_enum.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicEnum} \
     [passVariadicEnum] on MDN}."]

  val pass_variadic_interface : args:Blob.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicInterface} \
     [passVariadicInterface] on MDN}."]

  val pass_variadic_union :
    args:[< `Html_element | `Long ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion} \
     [passVariadicUnion] on MDN}."]

  val pass_variadic_union2 : args:[< `Event | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion2} \
     [passVariadicUnion2] on MDN}."]

  val pass_variadic_union3 : args:[< `Blob | `String ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion3} \
     [passVariadicUnion3] on MDN}."]

  val pass_variadic_union4 : args:[< `Blob | `Bool ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion4} \
     [passVariadicUnion4] on MDN}."]

  val pass_variadic_union5 :
    args:[< `String | `Unsigned_long ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion5} \
     [passVariadicUnion5] on MDN}."]

  val pass_variadic_union6 :
    args:[< `Unsigned_long | `Bool ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion6} \
     [passVariadicUnion6] on MDN}."]

  val pass_variadic_union7 : args:[< `String | `Long ] Js.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicUnion7} \
     [passVariadicUnion7] on MDN}."]

  val pass_variadic_any : args:Js.any array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicAny} \
     [passVariadicAny] on MDN}."]

  val pass_variadic_object : args:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passVariadicObject} \
     [passVariadicObject] on MDN}."]

  val pass_sequence_sequence : seq:int array array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passSequenceSequence} \
     [passSequenceSequence] on MDN}."]

  val return_sequence_sequence : t -> int array array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/returnSequenceSequence} \
     [returnSequenceSequence] on MDN}."]

  val pass_union_sequence_sequence :
    seq:[< `Long | `Sequence ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passUnionSequenceSequence} \
     [passUnionSequenceSequence] on MDN}."]

  val pass_record : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecord} \
     [passRecord] on MDN}."]

  val pass_record_with_usv_string_key : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordWithUSVStringKey} \
     [passRecordWithUSVStringKey] on MDN}."]

  val pass_record_with_byte_string_key : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordWithByteStringKey} \
     [passRecordWithByteStringKey] on MDN}."]

  val pass_nullable_record : arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableRecord} \
     [passNullableRecord] on MDN}."]

  val pass_record_of_nullable_ints : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordOfNullableInts} \
     [passRecordOfNullableInts] on MDN}."]

  val pass_optional_record_of_nullable_ints : ?arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalRecordOfNullableInts} \
     [passOptionalRecordOfNullableInts] on MDN}."]

  val pass_optional_nullable_record_of_nullable_ints :
    ?arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableRecordOfNullableInts} \
     [passOptionalNullableRecordOfNullableInts] on MDN}."]

  val pass_castable_object_record : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passCastableObjectRecord} \
     [passCastableObjectRecord] on MDN}."]

  val pass_nullable_castable_object_record : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableCastableObjectRecord} \
     [passNullableCastableObjectRecord] on MDN}."]

  val pass_castable_object_nullable_record :
    arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passCastableObjectNullableRecord} \
     [passCastableObjectNullableRecord] on MDN}."]

  val pass_nullable_castable_object_nullable_record :
    arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passNullableCastableObjectNullableRecord} \
     [passNullableCastableObjectNullableRecord] on MDN}."]

  val pass_optional_record : ?arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalRecord} \
     [passOptionalRecord] on MDN}."]

  val pass_optional_nullable_record : ?arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableRecord} \
     [passOptionalNullableRecord] on MDN}."]

  val pass_optional_nullable_record_with_default_value :
    ?arg:'todo_record option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalNullableRecordWithDefaultValue} \
     [passOptionalNullableRecordWithDefaultValue] on MDN}."]

  val pass_optional_object_record : ?arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passOptionalObjectRecord} \
     [passOptionalObjectRecord] on MDN}."]

  val pass_string_record : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passStringRecord} \
     [passStringRecord] on MDN}."]

  val pass_byte_string_record : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passByteStringRecord} \
     [passByteStringRecord] on MDN}."]

  val pass_record_of_records : arg:'todo_record -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordOfRecords} \
     [passRecordOfRecords] on MDN}."]

  val pass_record_union : init:[< `Long | `Record ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordUnion} \
     [passRecordUnion] on MDN}."]

  val pass_record_union2 : init:[< `Test_binding | `Record ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordUnion2} \
     [passRecordUnion2] on MDN}."]

  val pass_record_union3 :
    init:[< `Test_binding | `Sequence | `Record ] Js.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/passRecordUnion3} \
     [passRecordUnion3] on MDN}."]

  val receive_record : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveRecord} \
     [receiveRecord] on MDN}."]

  val receive_record_with_usv_string_key : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveRecordWithUSVStringKey} \
     [receiveRecordWithUSVStringKey] on MDN}."]

  val receive_record_with_byte_string_key : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveRecordWithByteStringKey} \
     [receiveRecordWithByteStringKey] on MDN}."]

  val receive_nullable_record : t -> 'todo_record option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableRecord} \
     [receiveNullableRecord] on MDN}."]

  val receive_record_of_nullable_ints : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveRecordOfNullableInts} \
     [receiveRecordOfNullableInts] on MDN}."]

  val receive_nullable_record_of_nullable_ints : t -> 'todo_record option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveNullableRecordOfNullableInts} \
     [receiveNullableRecordOfNullableInts] on MDN}."]

  val receive_record_of_records : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveRecordOfRecords} \
     [receiveRecordOfRecords] on MDN}."]

  val receive_any_record : t -> 'todo_record
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveAnyRecord} \
     [receiveAnyRecord] on MDN}."]

  val boolean_attribute_static : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttributeStatic} \
     [booleanAttributeStatic] on MDN}."]

  val set_boolean_attribute_static : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/booleanAttributeStatic} \
     [booleanAttributeStatic] on MDN}."]

  val receive_void_static : unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/receiveVoidStatic} \
     [receiveVoidStatic] on MDN}."]

  val boolean_moz_preference : pref_name:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/BooleanMozPreference} \
     [BooleanMozPreference] on MDN}."]

  val string_moz_preference : pref_name:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/StringMozPreference} \
     [StringMozPreference] on MDN}."]

  val pref_controlled_attribute_disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledAttributeDisabled} \
     [prefControlledAttributeDisabled] on MDN}."]

  val pref_controlled_static_attribute_disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledStaticAttributeDisabled} \
     [prefControlledStaticAttributeDisabled] on MDN}."]

  val pref_controlled_method_disabled : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledMethodDisabled} \
     [prefControlledMethodDisabled] on MDN}."]

  val pref_controlled_static_method_disabled : unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledStaticMethodDisabled} \
     [prefControlledStaticMethodDisabled] on MDN}."]

  val pref_controlled_const_disabled : int

  val advance_clock : millis:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/advanceClock} \
     [advanceClock] on MDN}."]

  val pref_controlled_attribute_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledAttributeEnabled} \
     [prefControlledAttributeEnabled] on MDN}."]

  val pref_controlled_static_attribute_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledStaticAttributeEnabled} \
     [prefControlledStaticAttributeEnabled] on MDN}."]

  val pref_controlled_method_enabled : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledMethodEnabled} \
     [prefControlledMethodEnabled] on MDN}."]

  val pref_controlled_static_method_enabled : unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/prefControlledStaticMethodEnabled} \
     [prefControlledStaticMethodEnabled] on MDN}."]

  val pref_controlled_const_enabled : int

  val func_controlled_attribute_disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledAttributeDisabled} \
     [funcControlledAttributeDisabled] on MDN}."]

  val func_controlled_static_attribute_disabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledStaticAttributeDisabled} \
     [funcControlledStaticAttributeDisabled] on MDN}."]

  val func_controlled_method_disabled : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledMethodDisabled} \
     [funcControlledMethodDisabled] on MDN}."]

  val func_controlled_static_method_disabled : unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledStaticMethodDisabled} \
     [funcControlledStaticMethodDisabled] on MDN}."]

  val func_controlled_const_disabled : int

  val func_controlled_attribute_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledAttributeEnabled} \
     [funcControlledAttributeEnabled] on MDN}."]

  val func_controlled_static_attribute_enabled : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledStaticAttributeEnabled} \
     [funcControlledStaticAttributeEnabled] on MDN}."]

  val func_controlled_method_enabled : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledMethodEnabled} \
     [funcControlledMethodEnabled] on MDN}."]

  val func_controlled_static_method_enabled : unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/funcControlledStaticMethodEnabled} \
     [funcControlledStaticMethodEnabled] on MDN}."]

  val func_controlled_const_enabled : int

  val return_resolved_promise : value:Js.any -> t -> Js.any Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/returnResolvedPromise} \
     [returnResolvedPromise] on MDN}."]

  val return_rejected_promise : value:Js.any -> t -> Js.any Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/returnRejectedPromise} \
     [returnRejectedPromise] on MDN}."]

  val promise_attribute : t -> bool Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/promiseAttribute} \
     [promiseAttribute] on MDN}."]

  val accept_promise : string:string Js.promise -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/acceptPromise} \
     [acceptPromise] on MDN}."]

  val promise_native_handler :
    resolve:Simple_callback.t option ->
    reject:Simple_callback.t option ->
    t ->
    Js.any Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/promiseNativeHandler} \
     [promiseNativeHandler] on MDN}."]

  val promise_resolve_native : p:Js.any Js.promise -> value:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/promiseResolveNative} \
     [promiseResolveNative] on MDN}."]

  val promise_reject_native : p:Js.any Js.promise -> value:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/promiseRejectNative} \
     [promiseRejectNative] on MDN}."]

  val promise_reject_with_type_error :
    p:Js.any Js.promise -> message:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/promiseRejectWithTypeError} \
     [promiseRejectWithTypeError] on MDN}."]

  val resolve_promise_delayed :
    p:Js.any Js.promise -> value:string -> ms:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/resolvePromiseDelayed} \
     [resolvePromiseDelayed] on MDN}."]

  val panic : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/panic} \
     [panic] on MDN}."]

  val entry_global : t -> 'a Global_scope.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/entryGlobal} \
     [entryGlobal] on MDN}."]

  val incumbent_global : t -> 'a Global_scope.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/incumbentGlobal} \
     [incumbentGlobal] on MDN}."]

  val semi_exposed_bool_from_interface : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/semiExposedBoolFromInterface} \
     [semiExposedBoolFromInterface] on MDN}."]

  val get_dictionary_with_parent :
    parent:string -> child:string -> t -> Test_dictionary_with_parent.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/getDictionaryWithParent} \
     [getDictionaryWithParent] on MDN}."]

  val crash_hard : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/crashHard} \
     [crashHard] on MDN}."]

  val semi_exposed_bool_from_partial_interface : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/semiExposedBoolFromPartialInterface} \
     [semiExposedBoolFromPartialInterface] on MDN}."]

  val bool_from_semi_exposed_partial_interface : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBinding/boolFromSemiExposedPartialInterface} \
     [boolFromSemiExposedPartialInterface] on MDN}."]
end = struct
  type t = [ `Test_binding ] Js.t

  let t = Js.Ffi.constr "TestBinding"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let make ~number_sequence () =
    let number_sequence = (Js.Any.of_array Js.Any.of_float) number_sequence in
    Js.Ffi.obj_new t [| number_sequence |]

  let make ~num () =
    let num = Js.Any.of_float num in
    Js.Ffi.obj_new t [| num |]

  let boolean_attribute this =
    Js.Any.to_bool (Js.Ffi.get this "booleanAttribute")

  let set_boolean_attribute this x =
    Js.Ffi.set this "booleanAttribute" (Js.Any.of_bool x)

  let byte_attribute this = Js.Any.to_char (Js.Ffi.get this "byteAttribute")

  let set_byte_attribute this x =
    Js.Ffi.set this "byteAttribute" (Js.Any.of_char x)

  let octet_attribute this = Js.Any.to_char (Js.Ffi.get this "octetAttribute")

  let set_octet_attribute this x =
    Js.Ffi.set this "octetAttribute" (Js.Any.of_char x)

  let short_attribute this = Js.Any.to_int (Js.Ffi.get this "shortAttribute")

  let set_short_attribute this x =
    Js.Ffi.set this "shortAttribute" (Js.Any.of_int x)

  let unsigned_short_attribute this =
    Js.Any.to_int (Js.Ffi.get this "unsignedShortAttribute")

  let set_unsigned_short_attribute this x =
    Js.Ffi.set this "unsignedShortAttribute" (Js.Any.of_int x)

  let long_attribute this = Js.Any.to_int (Js.Ffi.get this "longAttribute")

  let set_long_attribute this x =
    Js.Ffi.set this "longAttribute" (Js.Any.of_int x)

  let unsigned_long_attribute this =
    Js.Any.to_int (Js.Ffi.get this "unsignedLongAttribute")

  let set_unsigned_long_attribute this x =
    Js.Ffi.set this "unsignedLongAttribute" (Js.Any.of_int x)

  let long_long_attribute this =
    Js.Any.to_int (Js.Ffi.get this "longLongAttribute")

  let set_long_long_attribute this x =
    Js.Ffi.set this "longLongAttribute" (Js.Any.of_int x)

  let unsigned_long_long_attribute this =
    Js.Any.to_int (Js.Ffi.get this "unsignedLongLongAttribute")

  let set_unsigned_long_long_attribute this x =
    Js.Ffi.set this "unsignedLongLongAttribute" (Js.Any.of_int x)

  let unrestricted_float_attribute this =
    Js.Any.to_float (Js.Ffi.get this "unrestrictedFloatAttribute")

  let set_unrestricted_float_attribute this x =
    Js.Ffi.set this "unrestrictedFloatAttribute" (Js.Any.of_float x)

  let float_attribute this = Js.Any.to_float (Js.Ffi.get this "floatAttribute")

  let set_float_attribute this x =
    Js.Ffi.set this "floatAttribute" (Js.Any.of_float x)

  let unrestricted_double_attribute this =
    Js.Any.to_float (Js.Ffi.get this "unrestrictedDoubleAttribute")

  let set_unrestricted_double_attribute this x =
    Js.Ffi.set this "unrestrictedDoubleAttribute" (Js.Any.of_float x)

  let double_attribute this = Js.Any.to_float (Js.Ffi.get this "doubleAttribute")

  let set_double_attribute this x =
    Js.Ffi.set this "doubleAttribute" (Js.Any.of_float x)

  let string_attribute this =
    Js.Any.to_string (Js.Ffi.get this "stringAttribute")

  let set_string_attribute this x =
    Js.Ffi.set this "stringAttribute" (Js.Any.of_string x)

  let usvstring_attribute this =
    Js.Any.to_string (Js.Ffi.get this "usvstringAttribute")

  let set_usvstring_attribute this x =
    Js.Ffi.set this "usvstringAttribute" (Js.Any.of_string x)

  let byte_string_attribute this =
    Js.Any.to_string (Js.Ffi.get this "byteStringAttribute")

  let set_byte_string_attribute this x =
    Js.Ffi.set this "byteStringAttribute" (Js.Any.of_string x)

  let enum_attribute this = Test_enum.of_any (Js.Ffi.get this "enumAttribute")

  let set_enum_attribute this x =
    Js.Ffi.set this "enumAttribute" (Test_enum.to_any x)

  let interface_attribute this =
    Blob.of_any (Js.Ffi.get this "interfaceAttribute")

  let set_interface_attribute this x =
    Js.Ffi.set this "interfaceAttribute" (Blob.to_any x)

  let union_attribute this = Js.of_any (Js.Ffi.get this "unionAttribute")
  let set_union_attribute this x = Js.Ffi.set this "unionAttribute" (Js.to_any x)
  let union2_attribute this = Js.of_any (Js.Ffi.get this "union2Attribute")

  let set_union2_attribute this x =
    Js.Ffi.set this "union2Attribute" (Js.to_any x)

  let union3_attribute this = Js.of_any (Js.Ffi.get this "union3Attribute")

  let set_union3_attribute this x =
    Js.Ffi.set this "union3Attribute" (Js.to_any x)

  let union4_attribute this = Js.of_any (Js.Ffi.get this "union4Attribute")

  let set_union4_attribute this x =
    Js.Ffi.set this "union4Attribute" (Js.to_any x)

  let union5_attribute this = Js.of_any (Js.Ffi.get this "union5Attribute")

  let set_union5_attribute this x =
    Js.Ffi.set this "union5Attribute" (Js.to_any x)

  let union6_attribute this = Js.of_any (Js.Ffi.get this "union6Attribute")

  let set_union6_attribute this x =
    Js.Ffi.set this "union6Attribute" (Js.to_any x)

  let union7_attribute this = Js.of_any (Js.Ffi.get this "union7Attribute")

  let set_union7_attribute this x =
    Js.Ffi.set this "union7Attribute" (Js.to_any x)

  let union8_attribute this = Js.of_any (Js.Ffi.get this "union8Attribute")

  let set_union8_attribute this x =
    Js.Ffi.set this "union8Attribute" (Js.to_any x)

  let union9_attribute this = Js.of_any (Js.Ffi.get this "union9Attribute")

  let set_union9_attribute this x =
    Js.Ffi.set this "union9Attribute" (Js.to_any x)

  let array_attribute this =
    Uint8_clamped_array.of_any (Js.Ffi.get this "arrayAttribute")

  let any_attribute this = Js.to_any (Js.Ffi.get this "anyAttribute")
  let set_any_attribute this x = Js.Ffi.set this "anyAttribute" (Js.of_any x)
  let object_attribute this = Js.object_todo (Js.Ffi.get this "objectAttribute")

  let set_object_attribute this x =
    Js.Ffi.set this "objectAttribute" (Js.object_todo x)

  let boolean_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "booleanAttributeNullable")

  let set_boolean_attribute_nullable this x =
    Js.Ffi.set this "booleanAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_bool) x)

  let byte_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_char)
      (Js.Ffi.get this "byteAttributeNullable")

  let set_byte_attribute_nullable this x =
    Js.Ffi.set this "byteAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_char) x)

  let octet_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_char)
      (Js.Ffi.get this "octetAttributeNullable")

  let set_octet_attribute_nullable this x =
    Js.Ffi.set this "octetAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_char) x)

  let short_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "shortAttributeNullable")

  let set_short_attribute_nullable this x =
    Js.Ffi.set this "shortAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let unsigned_short_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedShortAttributeNullable")

  let set_unsigned_short_attribute_nullable this x =
    Js.Ffi.set this "unsignedShortAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let long_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "longAttributeNullable")

  let set_long_attribute_nullable this x =
    Js.Ffi.set this "longAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let unsigned_long_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongAttributeNullable")

  let set_unsigned_long_attribute_nullable this x =
    Js.Ffi.set this "unsignedLongAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let long_long_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "longLongAttributeNullable")

  let set_long_long_attribute_nullable this x =
    Js.Ffi.set this "longLongAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let unsigned_long_long_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.get this "unsignedLongLongAttributeNullable")

  let set_unsigned_long_long_attribute_nullable this x =
    Js.Ffi.set this "unsignedLongLongAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_int) x)

  let unrestricted_float_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "unrestrictedFloatAttributeNullable")

  let set_unrestricted_float_attribute_nullable this x =
    Js.Ffi.set this "unrestrictedFloatAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_float) x)

  let float_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "floatAttributeNullable")

  let set_float_attribute_nullable this x =
    Js.Ffi.set this "floatAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_float) x)

  let unrestricted_double_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "unrestrictedDoubleAttributeNullable")

  let set_unrestricted_double_attribute_nullable this x =
    Js.Ffi.set this "unrestrictedDoubleAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_float) x)

  let double_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "doubleAttributeNullable")

  let set_double_attribute_nullable this x =
    Js.Ffi.set this "doubleAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_float) x)

  let string_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "stringAttributeNullable")

  let set_string_attribute_nullable this x =
    Js.Ffi.set this "stringAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let usvstring_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "usvstringAttributeNullable")

  let set_usvstring_attribute_nullable this x =
    Js.Ffi.set this "usvstringAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let byte_string_attribute_nullable this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "byteStringAttributeNullable")

  let set_byte_string_attribute_nullable this x =
    Js.Ffi.set this "byteStringAttributeNullable"
      ((Js.Any.nullable_of_option Js.Any.of_string) x)

  let enum_attribute_nullable this =
    (Js.Any.nullable_to_option Test_enum.of_any)
      (Js.Ffi.get this "enumAttributeNullable")

  let interface_attribute_nullable this =
    (Js.Any.nullable_to_option Blob.of_any)
      (Js.Ffi.get this "interfaceAttributeNullable")

  let set_interface_attribute_nullable this x =
    Js.Ffi.set this "interfaceAttributeNullable"
      ((Js.Any.nullable_of_option Blob.to_any) x)

  let interface_attribute_weak this =
    (Js.Any.nullable_to_option Url.of_any)
      (Js.Ffi.get this "interfaceAttributeWeak")

  let set_interface_attribute_weak this x =
    Js.Ffi.set this "interfaceAttributeWeak"
      ((Js.Any.nullable_of_option Url.to_any) x)

  let object_attribute_nullable this =
    (Js.Any.nullable_to_option Js.object_todo)
      (Js.Ffi.get this "objectAttributeNullable")

  let set_object_attribute_nullable this x =
    Js.Ffi.set this "objectAttributeNullable"
      ((Js.Any.nullable_of_option Js.object_todo) x)

  let union_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "unionAttributeNullable")

  let set_union_attribute_nullable this x =
    Js.Ffi.set this "unionAttributeNullable" (Js.to_any x)

  let union2_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "union2AttributeNullable")

  let set_union2_attribute_nullable this x =
    Js.Ffi.set this "union2AttributeNullable" (Js.to_any x)

  let union3_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "union3AttributeNullable")

  let set_union3_attribute_nullable this x =
    Js.Ffi.set this "union3AttributeNullable" (Js.to_any x)

  let union4_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "union4AttributeNullable")

  let set_union4_attribute_nullable this x =
    Js.Ffi.set this "union4AttributeNullable" (Js.to_any x)

  let union5_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "union5AttributeNullable")

  let set_union5_attribute_nullable this x =
    Js.Ffi.set this "union5AttributeNullable" (Js.to_any x)

  let union6_attribute_nullable this =
    Js.of_any (Js.Ffi.get this "union6AttributeNullable")

  let set_union6_attribute_nullable this x =
    Js.Ffi.set this "union6AttributeNullable" (Js.to_any x)

  let attr_to_binary_rename this =
    Js.Any.to_string (Js.Ffi.get this "attrToBinaryRename")

  let set_attr_to_binary_rename this x =
    Js.Ffi.set this "attrToBinaryRename" (Js.Any.of_string x)

  let attr_to_binary_rename this =
    Js.Any.to_string (Js.Ffi.get this "attr-to-binary-rename")

  let set_attr_to_binary_rename this x =
    Js.Ffi.set this "attr-to-binary-rename" (Js.Any.of_string x)

  let attr_to_automatically_rename this =
    Js.Any.to_string (Js.Ffi.get this "attr-to-automatically-rename")

  let set_attr_to_automatically_rename this x =
    Js.Ffi.set this "attr-to-automatically-rename" (Js.Any.of_string x)

  let constant_int64 = -1
  let constant_uint64 = 1
  let constant_float32 = 1.
  let constant_float64 = 1.
  let constant_unrestricted_float32 = 1.
  let constant_unrestricted_float64 = 1.
  let forwarded_attribute this = of_any (Js.Ffi.get this "forwardedAttribute")

  let meth_to_binary_rename this =
    Js.to_unit (Js.Ffi.meth_call this "methToBinaryRename" [||])

  let receive_void this = Js.to_unit (Js.Ffi.meth_call this "receiveVoid" [||])

  let receive_boolean this =
    Js.Any.to_bool (Js.Ffi.meth_call this "receiveBoolean" [||])

  let receive_byte this =
    Js.Any.to_char (Js.Ffi.meth_call this "receiveByte" [||])

  let receive_octet this =
    Js.Any.to_char (Js.Ffi.meth_call this "receiveOctet" [||])

  let receive_short this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveShort" [||])

  let receive_unsigned_short this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveUnsignedShort" [||])

  let receive_long this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveLong" [||])

  let receive_unsigned_long this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveUnsignedLong" [||])

  let receive_long_long this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveLongLong" [||])

  let receive_unsigned_long_long this =
    Js.Any.to_int (Js.Ffi.meth_call this "receiveUnsignedLongLong" [||])

  let receive_unrestricted_float this =
    Js.Any.to_float (Js.Ffi.meth_call this "receiveUnrestrictedFloat" [||])

  let receive_float this =
    Js.Any.to_float (Js.Ffi.meth_call this "receiveFloat" [||])

  let receive_unrestricted_double this =
    Js.Any.to_float (Js.Ffi.meth_call this "receiveUnrestrictedDouble" [||])

  let receive_double this =
    Js.Any.to_float (Js.Ffi.meth_call this "receiveDouble" [||])

  let receive_string this =
    Js.Any.to_string (Js.Ffi.meth_call this "receiveString" [||])

  let receive_usvstring this =
    Js.Any.to_string (Js.Ffi.meth_call this "receiveUsvstring" [||])

  let receive_byte_string this =
    Js.Any.to_string (Js.Ffi.meth_call this "receiveByteString" [||])

  let receive_enum this =
    Test_enum.of_any (Js.Ffi.meth_call this "receiveEnum" [||])

  let receive_interface this =
    Blob.of_any (Js.Ffi.meth_call this "receiveInterface" [||])

  let receive_any this = Js.to_any (Js.Ffi.meth_call this "receiveAny" [||])

  let receive_object this =
    Js.object_todo (Js.Ffi.meth_call this "receiveObject" [||])

  let receive_union this = Js.of_any (Js.Ffi.meth_call this "receiveUnion" [||])

  let receive_union2 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion2" [||])

  let receive_union3 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion3" [||])

  let receive_union4 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion4" [||])

  let receive_union5 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion5" [||])

  let receive_union6 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion6" [||])

  let receive_union7 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion7" [||])

  let receive_union8 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion8" [||])

  let receive_union9 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion9" [||])

  let receive_union10 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion10" [||])

  let receive_union11 this =
    Js.of_any (Js.Ffi.meth_call this "receiveUnion11" [||])

  let receive_sequence this =
    (Js.Any.to_array Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveSequence" [||])

  let receive_interface_sequence this =
    (Js.Any.to_array Blob.of_any)
      (Js.Ffi.meth_call this "receiveInterfaceSequence" [||])

  let receive_nullable_byte this =
    (Js.Any.nullable_to_option Js.Any.to_char)
      (Js.Ffi.meth_call this "receiveNullableByte" [||])

  let receive_nullable_boolean this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.meth_call this "receiveNullableBoolean" [||])

  let receive_nullable_octet this =
    (Js.Any.nullable_to_option Js.Any.to_char)
      (Js.Ffi.meth_call this "receiveNullableOctet" [||])

  let receive_nullable_short this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableShort" [||])

  let receive_nullable_unsigned_short this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableUnsignedShort" [||])

  let receive_nullable_long this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableLong" [||])

  let receive_nullable_unsigned_long this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableUnsignedLong" [||])

  let receive_nullable_long_long this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableLongLong" [||])

  let receive_nullable_unsigned_long_long this =
    (Js.Any.nullable_to_option Js.Any.to_int)
      (Js.Ffi.meth_call this "receiveNullableUnsignedLongLong" [||])

  let receive_nullable_unrestricted_float this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.meth_call this "receiveNullableUnrestrictedFloat" [||])

  let receive_nullable_float this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.meth_call this "receiveNullableFloat" [||])

  let receive_nullable_unrestricted_double this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.meth_call this "receiveNullableUnrestrictedDouble" [||])

  let receive_nullable_double this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.meth_call this "receiveNullableDouble" [||])

  let receive_nullable_string this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "receiveNullableString" [||])

  let receive_nullable_usvstring this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "receiveNullableUsvstring" [||])

  let receive_nullable_byte_string this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "receiveNullableByteString" [||])

  let receive_nullable_enum this =
    (Js.Any.nullable_to_option Test_enum.of_any)
      (Js.Ffi.meth_call this "receiveNullableEnum" [||])

  let receive_nullable_interface this =
    (Js.Any.nullable_to_option Blob.of_any)
      (Js.Ffi.meth_call this "receiveNullableInterface" [||])

  let receive_nullable_object this =
    (Js.Any.nullable_to_option Js.object_todo)
      (Js.Ffi.meth_call this "receiveNullableObject" [||])

  let receive_nullable_union this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion" [||])

  let receive_nullable_union2 this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion2" [||])

  let receive_nullable_union3 this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion3" [||])

  let receive_nullable_union4 this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion4" [||])

  let receive_nullable_union5 this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion5" [||])

  let receive_nullable_union6 this =
    Js.of_any (Js.Ffi.meth_call this "receiveNullableUnion6" [||])

  let receive_nullable_sequence this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_int))
      (Js.Ffi.meth_call this "receiveNullableSequence" [||])

  let receive_test_dictionary_with_success_on_keyword this =
    Test_dictionary.of_any
      (Js.Ffi.meth_call this "receiveTestDictionaryWithSuccessOnKeyword" [||])

  let dict_matches_passed_values ~arg this =
    let arg = Test_dictionary.to_any arg in
    Js.Any.to_bool (Js.Ffi.meth_call this "dictMatchesPassedValues" [| arg |])

  let receive_union_identity ~arg this =
    let arg = Js.to_any arg in
    Js.of_any (Js.Ffi.meth_call this "receiveUnionIdentity" [| arg |])

  let pass_boolean ~arg this =
    let arg = Js.Any.of_bool arg in
    Js.to_unit (Js.Ffi.meth_call this "passBoolean" [| arg |])

  let pass_byte ~arg this =
    let arg = Js.Any.of_char arg in
    Js.to_unit (Js.Ffi.meth_call this "passByte" [| arg |])

  let pass_octet ~arg this =
    let arg = Js.Any.of_char arg in
    Js.to_unit (Js.Ffi.meth_call this "passOctet" [| arg |])

  let pass_short ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passShort" [| arg |])

  let pass_unsigned_short ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnsignedShort" [| arg |])

  let pass_long ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passLong" [| arg |])

  let pass_unsigned_long ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnsignedLong" [| arg |])

  let pass_long_long ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passLongLong" [| arg |])

  let pass_unsigned_long_long ~arg this =
    let arg = Js.Any.of_int arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnsignedLongLong" [| arg |])

  let pass_unrestricted_float ~arg this =
    let arg = Js.Any.of_float arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnrestrictedFloat" [| arg |])

  let pass_float ~arg this =
    let arg = Js.Any.of_float arg in
    Js.to_unit (Js.Ffi.meth_call this "passFloat" [| arg |])

  let pass_unrestricted_double ~arg this =
    let arg = Js.Any.of_float arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnrestrictedDouble" [| arg |])

  let pass_double ~arg this =
    let arg = Js.Any.of_float arg in
    Js.to_unit (Js.Ffi.meth_call this "passDouble" [| arg |])

  let pass_string ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "passString" [| arg |])

  let pass_usvstring ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "passUsvstring" [| arg |])

  let pass_byte_string ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "passByteString" [| arg |])

  let pass_enum ~arg this =
    let arg = Test_enum.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passEnum" [| arg |])

  let pass_interface ~arg this =
    let arg = Blob.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passInterface" [| arg |])

  let pass_typed_array ~arg this =
    let arg = Int8_array.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passTypedArray" [| arg |])

  let pass_typed_array2 ~arg this =
    let arg = Array_buffer.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passTypedArray2" [| arg |])

  let pass_typed_array3 ~arg this =
    let arg = Array_buffer_view.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passTypedArray3" [| arg |])

  let pass_union ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion" [| arg |])

  let pass_union2 ~data this =
    let data = Js.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "passUnion2" [| data |])

  let pass_union3 ~data this =
    let data = Js.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "passUnion3" [| data |])

  let pass_union4 ~seq this =
    let seq = Js.to_any seq in
    Js.to_unit (Js.Ffi.meth_call this "passUnion4" [| seq |])

  let pass_union5 ~data this =
    let data = Js.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "passUnion5" [| data |])

  let pass_union6 ~bool this =
    let bool = Js.to_any bool in
    Js.to_unit (Js.Ffi.meth_call this "passUnion6" [| bool |])

  let pass_union7 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion7" [| arg |])

  let pass_union8 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion8" [| arg |])

  let pass_union9 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion9" [| arg |])

  let pass_union10 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion10" [| arg |])

  let pass_union11 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnion11" [| arg |])

  let pass_union_with_typedef ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnionWithTypedef" [| arg |])

  let pass_union_with_typedef2 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passUnionWithTypedef2" [| arg |])

  let pass_any ~arg this =
    let arg = Js.of_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passAny" [| arg |])

  let pass_object ~arg this =
    let arg = Js.object_todo arg in
    Js.to_unit (Js.Ffi.meth_call this "passObject" [| arg |])

  let pass_callback_function ~fun' this =
    let fun' = Function.to_any fun' in
    Js.to_unit (Js.Ffi.meth_call this "passCallbackFunction" [| fun' |])

  let pass_callback_interface ~listener this =
    let listener = Event_listener.to_any listener in
    Js.to_unit (Js.Ffi.meth_call this "passCallbackInterface" [| listener |])

  let pass_sequence ~seq this =
    let seq = (Js.Any.of_array Js.Any.of_int) seq in
    Js.to_unit (Js.Ffi.meth_call this "passSequence" [| seq |])

  let pass_any_sequence ~seq this =
    let seq = (Js.Any.of_array Js.of_any) seq in
    Js.to_unit (Js.Ffi.meth_call this "passAnySequence" [| seq |])

  let any_sequence_passthrough ~seq this =
    let seq = (Js.Any.of_array Js.of_any) seq in
    (Js.Any.to_array Js.to_any)
      (Js.Ffi.meth_call this "anySequencePassthrough" [| seq |])

  let pass_object_sequence ~seq this =
    let seq = (Js.Any.of_array Js.object_todo) seq in
    Js.to_unit (Js.Ffi.meth_call this "passObjectSequence" [| seq |])

  let pass_string_sequence ~seq this =
    let seq = (Js.Any.of_array Js.Any.of_string) seq in
    Js.to_unit (Js.Ffi.meth_call this "passStringSequence" [| seq |])

  let pass_interface_sequence ~seq this =
    let seq = (Js.Any.of_array Blob.to_any) seq in
    Js.to_unit (Js.Ffi.meth_call this "passInterfaceSequence" [| seq |])

  let pass_overloaded ~arg this =
    let arg = Array_buffer.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passOverloaded" [| arg |])

  let pass_overloaded ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "passOverloaded" [| arg |])

  let pass_overloaded_dict ~arg this =
    let arg = Node.to_any arg in
    Js.Any.to_string (Js.Ffi.meth_call this "passOverloadedDict" [| arg |])

  let pass_overloaded_dict ~arg this =
    let arg = Test_url_like.to_any arg in
    Js.Any.to_string (Js.Ffi.meth_call this "passOverloadedDict" [| arg |])

  let pass_nullable_boolean ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_bool) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableBoolean" [| arg |])

  let pass_nullable_byte ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableByte" [| arg |])

  let pass_nullable_octet ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableOctet" [| arg |])

  let pass_nullable_short ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableShort" [| arg |])

  let pass_nullable_unsigned_short ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnsignedShort" [| arg |])

  let pass_nullable_long ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableLong" [| arg |])

  let pass_nullable_unsigned_long ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnsignedLong" [| arg |])

  let pass_nullable_long_long ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableLongLong" [| arg |])

  let pass_nullable_unsigned_long_long ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnsignedLongLong" [| arg |])

  let pass_nullable_unrestricted_float ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnrestrictedFloat" [| arg |])

  let pass_nullable_float ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableFloat" [| arg |])

  let pass_nullable_unrestricted_double ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnrestrictedDouble" [| arg |])

  let pass_nullable_double ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableDouble" [| arg |])

  let pass_nullable_string ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableString" [| arg |])

  let pass_nullable_usvstring ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUsvstring" [| arg |])

  let pass_nullable_byte_string ~arg this =
    let arg = (Js.Any.nullable_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableByteString" [| arg |])

  let pass_nullable_interface ~arg this =
    let arg = (Js.Any.nullable_of_option Blob.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableInterface" [| arg |])

  let pass_nullable_object ~arg this =
    let arg = (Js.Any.nullable_of_option Js.object_todo) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableObject" [| arg |])

  let pass_nullable_typed_array ~arg this =
    let arg = (Js.Any.nullable_of_option Int8_array.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableTypedArray" [| arg |])

  let pass_nullable_union ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion" [| arg |])

  let pass_nullable_union2 ~data this =
    let data = Js.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion2" [| data |])

  let pass_nullable_union3 ~data this =
    let data = Js.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion3" [| data |])

  let pass_nullable_union4 ~bool this =
    let bool = Js.to_any bool in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion4" [| bool |])

  let pass_nullable_union5 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion5" [| arg |])

  let pass_nullable_union6 ~arg this =
    let arg = Js.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableUnion6" [| arg |])

  let pass_nullable_callback_function ~fun' this =
    let fun' = (Js.Any.nullable_of_option Function.to_any) fun' in
    Js.to_unit (Js.Ffi.meth_call this "passNullableCallbackFunction" [| fun' |])

  let pass_nullable_callback_interface ~listener this =
    let listener = (Js.Any.nullable_of_option Event_listener.to_any) listener in
    Js.to_unit
      (Js.Ffi.meth_call this "passNullableCallbackInterface" [| listener |])

  let pass_nullable_sequence ~seq this =
    let seq = (Js.Any.nullable_of_option (Js.Any.of_array Js.Any.of_int)) seq in
    Js.to_unit (Js.Ffi.meth_call this "passNullableSequence" [| seq |])

  let pass_optional_boolean ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_bool) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalBoolean" [| arg |])

  let pass_optional_byte ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalByte" [| arg |])

  let pass_optional_octet ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalOctet" [| arg |])

  let pass_optional_short ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalShort" [| arg |])

  let pass_optional_unsigned_short ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnsignedShort" [| arg |])

  let pass_optional_long ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalLong" [| arg |])

  let pass_optional_unsigned_long ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnsignedLong" [| arg |])

  let pass_optional_long_long ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalLongLong" [| arg |])

  let pass_optional_unsigned_long_long ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnsignedLongLong" [| arg |])

  let pass_optional_unrestricted_float ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnrestrictedFloat" [| arg |])

  let pass_optional_float ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalFloat" [| arg |])

  let pass_optional_unrestricted_double ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnrestrictedDouble" [| arg |])

  let pass_optional_double ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_float) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalDouble" [| arg |])

  let pass_optional_string ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalString" [| arg |])

  let pass_optional_usvstring ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUsvstring" [| arg |])

  let pass_optional_byte_string ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalByteString" [| arg |])

  let pass_optional_enum ?arg this =
    let arg = (Js.Any.undefined_of_option Test_enum.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalEnum" [| arg |])

  let pass_optional_interface ?arg this =
    let arg = (Js.Any.undefined_of_option Blob.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalInterface" [| arg |])

  let pass_optional_union ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion" [| arg |])

  let pass_optional_union2 ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion2" [| data |])

  let pass_optional_union3 ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion3" [| arg |])

  let pass_optional_union4 ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion4" [| data |])

  let pass_optional_union5 ?bool this =
    let bool = (Js.Any.undefined_of_option Js.to_any) bool in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion5" [| bool |])

  let pass_optional_union6 ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalUnion6" [| arg |])

  let pass_optional_any ?arg this =
    let arg = (Js.Any.undefined_of_option Js.of_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalAny" [| arg |])

  let pass_optional_object ?arg this =
    let arg = (Js.Any.undefined_of_option Js.object_todo) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalObject" [| arg |])

  let pass_optional_callback_function ?fun' this =
    let fun' = (Js.Any.undefined_of_option Function.to_any) fun' in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalCallbackFunction" [| fun' |])

  let pass_optional_callback_interface ?listener this =
    let listener =
      (Js.Any.undefined_of_option Event_listener.to_any) listener
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalCallbackInterface" [| listener |])

  let pass_optional_sequence ?seq this =
    let seq =
      (Js.Any.undefined_of_option (Js.Any.of_array Js.Any.of_int)) seq
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalSequence" [| seq |])

  let pass_optional_nullable_boolean ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_bool))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableBoolean" [| arg |])

  let pass_optional_nullable_byte ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableByte" [| arg |])

  let pass_optional_nullable_octet ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableOctet" [| arg |])

  let pass_optional_nullable_short ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableShort" [| arg |])

  let pass_optional_nullable_unsigned_short ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedShort" [| arg |])

  let pass_optional_nullable_long ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableLong" [| arg |])

  let pass_optional_nullable_unsigned_long ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedLong" [| arg |])

  let pass_optional_nullable_long_long ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableLongLong" [| arg |])

  let pass_optional_nullable_unsigned_long_long ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedLongLong" [| arg |])

  let pass_optional_nullable_unrestricted_float ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnrestrictedFloat" [| arg |])

  let pass_optional_nullable_float ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableFloat" [| arg |])

  let pass_optional_nullable_unrestricted_double ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnrestrictedDouble" [| arg |])

  let pass_optional_nullable_double ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_float))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableDouble" [| arg |])

  let pass_optional_nullable_string ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableString" [| arg |])

  let pass_optional_nullable_usvstring ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUsvstring" [| arg |])

  let pass_optional_nullable_byte_string ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableByteString" [| arg |])

  let pass_optional_nullable_interface ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Blob.to_any)) arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableInterface" [| arg |])

  let pass_optional_nullable_object ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.object_todo))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableObject" [| arg |])

  let pass_optional_nullable_union ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion" [| arg |])

  let pass_optional_nullable_union2 ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion2" [| data |])

  let pass_optional_nullable_union3 ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion3" [| arg |])

  let pass_optional_nullable_union4 ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion4" [| data |])

  let pass_optional_nullable_union5 ?bool this =
    let bool = (Js.Any.undefined_of_option Js.to_any) bool in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion5" [| bool |])

  let pass_optional_nullable_union6 ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableUnion6" [| arg |])

  let pass_optional_nullable_callback_function ?fun' this =
    let fun' =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Function.to_any))
        fun'
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableCallbackFunction" [| fun' |])

  let pass_optional_nullable_callback_interface ?listener this =
    let listener =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option Event_listener.to_any)
      )
        listener
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableCallbackInterface"
         [| listener |]
      )

  let pass_optional_nullable_sequence ?seq this =
    let seq =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option (Js.Any.of_array Js.Any.of_int))
      )
        seq
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableSequence" [| seq |])

  let pass_optional_boolean_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_bool) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalBooleanWithDefault" [| arg |])

  let pass_optional_byte_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalByteWithDefault" [| arg |])

  let pass_optional_octet_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_char) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalOctetWithDefault" [| arg |])

  let pass_optional_short_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalShortWithDefault" [| arg |])

  let pass_optional_unsigned_short_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalUnsignedShortWithDefault" [| arg |])

  let pass_optional_long_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalLongWithDefault" [| arg |])

  let pass_optional_unsigned_long_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalUnsignedLongWithDefault" [| arg |])

  let pass_optional_long_long_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalLongLongWithDefault" [| arg |])

  let pass_optional_unsigned_long_long_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_int) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalUnsignedLongLongWithDefault" [| arg |])

  let pass_optional_bytestring_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalBytestringWithDefault" [| arg |])

  let pass_optional_string_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalStringWithDefault" [| arg |])

  let pass_optional_usvstring_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_string) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalUsvstringWithDefault" [| arg |])

  let pass_optional_enum_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Test_enum.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalEnumWithDefault" [| arg |])

  let pass_optional_sequence_with_default ?seq this =
    let seq =
      (Js.Any.undefined_of_option (Js.Any.of_array Js.Any.of_int)) seq
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalSequenceWithDefault" [| seq |])

  let pass_optional_nullable_boolean_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_bool))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableBooleanWithDefault" [| arg |])

  let pass_optional_nullable_byte_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableByteWithDefault" [| arg |])

  let pass_optional_nullable_octet_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableOctetWithDefault" [| arg |])

  let pass_optional_nullable_short_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableShortWithDefault" [| arg |])

  let pass_optional_nullable_unsigned_short_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedShortWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_long_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableLongWithDefault" [| arg |])

  let pass_optional_nullable_unsigned_long_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedLongWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_long_long_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableLongLongWithDefault" [| arg |])

  let pass_optional_nullable_unsigned_long_long_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnsignedLongLongWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_string_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableStringWithDefault" [| arg |])

  let pass_optional_nullable_usvstring_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUsvstringWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_byte_string_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableByteStringWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_interface_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Blob.to_any)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableInterfaceWithDefault"
         [| arg |]
      )

  let pass_optional_nullable_object_with_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.object_todo))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableObjectWithDefault" [| arg |])

  let pass_optional_nullable_union_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.to_any) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnionWithDefault" [| arg |])

  let pass_optional_nullable_union2_with_default ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUnion2WithDefault" [| data |])

  let pass_optional_nullable_callback_interface_with_default ?listener this =
    let listener =
      (Js.Any.undefined_of_option
         (Js.Any.nullable_of_option Event_listener.to_any)
      )
        listener
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableCallbackInterfaceWithDefault"
         [| listener |]
      )

  let pass_optional_any_with_default ?arg this =
    let arg = (Js.Any.undefined_of_option Js.of_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalAnyWithDefault" [| arg |])

  let pass_optional_nullable_boolean_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_bool))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableBooleanWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_byte_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableByteWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_octet_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_char))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableOctetWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_short_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableShortWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_unsigned_short_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this
         "passOptionalNullableUnsignedShortWithNonNullDefault" [| arg |]
      )

  let pass_optional_nullable_long_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableLongWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_unsigned_long_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this
         "passOptionalNullableUnsignedLongWithNonNullDefault" [| arg |]
      )

  let pass_optional_nullable_long_long_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableLongLongWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_unsigned_long_long_with_non_null_default ?arg this
      =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_int)) arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this
         "passOptionalNullableUnsignedLongLongWithNonNullDefault" [| arg |]
      )

  let pass_optional_nullable_string_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableStringWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_nullable_usvstring_with_non_null_default ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableUsvstringWithNonNullDefault"
         [| arg |]
      )

  let pass_optional_overloaded ~arg0 ?arg1 ?arg2 this =
    let arg0 = to_any arg0 in
    let arg1 = (Js.Any.undefined_of_option Js.Any.of_int) arg1 in
    let arg2 = (Js.Any.undefined_of_option Js.Any.of_int) arg2 in
    of_any
      (Js.Ffi.meth_call this "passOptionalOverloaded" [| arg0; arg1; arg2 |])

  let pass_optional_overloaded ~arg0 ?arg1 this =
    let arg0 = Blob.to_any arg0 in
    let arg1 = (Js.Any.undefined_of_option Js.Any.of_int) arg1 in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalOverloaded" [| arg0; arg1 |])

  let pass_variadic_boolean ~args this =
    let args = (Js.Any.of_array Js.Any.of_bool) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicBoolean" [| args |])

  let pass_variadic_boolean_and_default ?arg ~args this =
    let arg = (Js.Any.undefined_of_option Js.Any.of_bool) arg in
    let args = (Js.Any.of_array Js.Any.of_bool) args in
    Js.to_unit
      (Js.Ffi.meth_call this "passVariadicBooleanAndDefault" [| arg; args |])

  let pass_variadic_byte ~args this =
    let args = (Js.Any.of_array Js.Any.of_char) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicByte" [| args |])

  let pass_variadic_octet ~args this =
    let args = (Js.Any.of_array Js.Any.of_char) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicOctet" [| args |])

  let pass_variadic_short ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicShort" [| args |])

  let pass_variadic_unsigned_short ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnsignedShort" [| args |])

  let pass_variadic_long ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicLong" [| args |])

  let pass_variadic_unsigned_long ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnsignedLong" [| args |])

  let pass_variadic_long_long ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicLongLong" [| args |])

  let pass_variadic_unsigned_long_long ~args this =
    let args = (Js.Any.of_array Js.Any.of_int) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnsignedLongLong" [| args |])

  let pass_variadic_unrestricted_float ~args this =
    let args = (Js.Any.of_array Js.Any.of_float) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnrestrictedFloat" [| args |])

  let pass_variadic_float ~args this =
    let args = (Js.Any.of_array Js.Any.of_float) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicFloat" [| args |])

  let pass_variadic_unrestricted_double ~args this =
    let args = (Js.Any.of_array Js.Any.of_float) args in
    Js.to_unit
      (Js.Ffi.meth_call this "passVariadicUnrestrictedDouble" [| args |])

  let pass_variadic_double ~args this =
    let args = (Js.Any.of_array Js.Any.of_float) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicDouble" [| args |])

  let pass_variadic_string ~args this =
    let args = (Js.Any.of_array Js.Any.of_string) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicString" [| args |])

  let pass_variadic_usvstring ~args this =
    let args = (Js.Any.of_array Js.Any.of_string) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUsvstring" [| args |])

  let pass_variadic_byte_string ~args this =
    let args = (Js.Any.of_array Js.Any.of_string) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicByteString" [| args |])

  let pass_variadic_enum ~args this =
    let args = (Js.Any.of_array Test_enum.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicEnum" [| args |])

  let pass_variadic_interface ~args this =
    let args = (Js.Any.of_array Blob.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicInterface" [| args |])

  let pass_variadic_union ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion" [| args |])

  let pass_variadic_union2 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion2" [| args |])

  let pass_variadic_union3 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion3" [| args |])

  let pass_variadic_union4 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion4" [| args |])

  let pass_variadic_union5 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion5" [| args |])

  let pass_variadic_union6 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion6" [| args |])

  let pass_variadic_union7 ~args this =
    let args = (Js.Any.of_array Js.to_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicUnion7" [| args |])

  let pass_variadic_any ~args this =
    let args = (Js.Any.of_array Js.of_any) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicAny" [| args |])

  let pass_variadic_object ~args this =
    let args = (Js.Any.of_array Js.object_todo) args in
    Js.to_unit (Js.Ffi.meth_call this "passVariadicObject" [| args |])

  let pass_sequence_sequence ~seq this =
    let seq = (Js.Any.of_array (Js.Any.of_array Js.Any.of_int)) seq in
    Js.to_unit (Js.Ffi.meth_call this "passSequenceSequence" [| seq |])

  let return_sequence_sequence this =
    (Js.Any.to_array (Js.Any.to_array Js.Any.to_int))
      (Js.Ffi.meth_call this "returnSequenceSequence" [||])

  let pass_union_sequence_sequence ~seq this =
    let seq = Js.to_any seq in
    Js.to_unit (Js.Ffi.meth_call this "passUnionSequenceSequence" [| seq |])

  let pass_record ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passRecord" [| arg |])

  let pass_record_with_usv_string_key ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passRecordWithUSVStringKey" [| arg |])

  let pass_record_with_byte_string_key ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passRecordWithByteStringKey" [| arg |])

  let pass_nullable_record ~arg this =
    let arg = (Js.Any.nullable_of_option Record_todo.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passNullableRecord" [| arg |])

  let pass_record_of_nullable_ints ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passRecordOfNullableInts" [| arg |])

  let pass_optional_record_of_nullable_ints ?arg this =
    let arg = (Js.Any.undefined_of_option Record_todo.to_any) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalRecordOfNullableInts" [| arg |])

  let pass_optional_nullable_record_of_nullable_ints ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Record_todo.to_any))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableRecordOfNullableInts"
         [| arg |]
      )

  let pass_castable_object_record ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passCastableObjectRecord" [| arg |])

  let pass_nullable_castable_object_record ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passNullableCastableObjectRecord" [| arg |])

  let pass_castable_object_nullable_record ~arg this =
    let arg = (Js.Any.nullable_of_option Record_todo.to_any) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passCastableObjectNullableRecord" [| arg |])

  let pass_nullable_castable_object_nullable_record ~arg this =
    let arg = (Js.Any.nullable_of_option Record_todo.to_any) arg in
    Js.to_unit
      (Js.Ffi.meth_call this "passNullableCastableObjectNullableRecord"
         [| arg |]
      )

  let pass_optional_record ?arg this =
    let arg = (Js.Any.undefined_of_option Record_todo.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalRecord" [| arg |])

  let pass_optional_nullable_record ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Record_todo.to_any))
        arg
    in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalNullableRecord" [| arg |])

  let pass_optional_nullable_record_with_default_value ?arg this =
    let arg =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Record_todo.to_any))
        arg
    in
    Js.to_unit
      (Js.Ffi.meth_call this "passOptionalNullableRecordWithDefaultValue"
         [| arg |]
      )

  let pass_optional_object_record ?arg this =
    let arg = (Js.Any.undefined_of_option Record_todo.to_any) arg in
    Js.to_unit (Js.Ffi.meth_call this "passOptionalObjectRecord" [| arg |])

  let pass_string_record ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passStringRecord" [| arg |])

  let pass_byte_string_record ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passByteStringRecord" [| arg |])

  let pass_record_of_records ~arg this =
    let arg = Record_todo.to_any arg in
    Js.to_unit (Js.Ffi.meth_call this "passRecordOfRecords" [| arg |])

  let pass_record_union ~init this =
    let init = Js.to_any init in
    Js.to_unit (Js.Ffi.meth_call this "passRecordUnion" [| init |])

  let pass_record_union2 ~init this =
    let init = Js.to_any init in
    Js.to_unit (Js.Ffi.meth_call this "passRecordUnion2" [| init |])

  let pass_record_union3 ~init this =
    let init = Js.to_any init in
    Js.to_unit (Js.Ffi.meth_call this "passRecordUnion3" [| init |])

  let receive_record this =
    Record_todo.of_any (Js.Ffi.meth_call this "receiveRecord" [||])

  let receive_record_with_usv_string_key this =
    Record_todo.of_any
      (Js.Ffi.meth_call this "receiveRecordWithUSVStringKey" [||])

  let receive_record_with_byte_string_key this =
    Record_todo.of_any
      (Js.Ffi.meth_call this "receiveRecordWithByteStringKey" [||])

  let receive_nullable_record this =
    (Js.Any.nullable_to_option Record_todo.of_any)
      (Js.Ffi.meth_call this "receiveNullableRecord" [||])

  let receive_record_of_nullable_ints this =
    Record_todo.of_any (Js.Ffi.meth_call this "receiveRecordOfNullableInts" [||])

  let receive_nullable_record_of_nullable_ints this =
    (Js.Any.nullable_to_option Record_todo.of_any)
      (Js.Ffi.meth_call this "receiveNullableRecordOfNullableInts" [||])

  let receive_record_of_records this =
    Record_todo.of_any (Js.Ffi.meth_call this "receiveRecordOfRecords" [||])

  let receive_any_record this =
    Record_todo.of_any (Js.Ffi.meth_call this "receiveAnyRecord" [||])

  let boolean_attribute_static this =
    Js.Any.to_bool (Js.Ffi.get this "booleanAttributeStatic")

  let set_boolean_attribute_static this x =
    Js.Ffi.set this "booleanAttributeStatic" (Js.Any.of_bool x)

  let receive_void_static () =
    Js.to_unit (Js.Ffi.meth_call t "receiveVoidStatic" [||])

  let boolean_moz_preference ~pref_name this =
    let pref_name = Js.Any.of_string pref_name in
    Js.Any.to_bool (Js.Ffi.meth_call this "BooleanMozPreference" [| pref_name |])

  let string_moz_preference ~pref_name this =
    let pref_name = Js.Any.of_string pref_name in
    Js.Any.to_string
      (Js.Ffi.meth_call this "StringMozPreference" [| pref_name |])

  let pref_controlled_attribute_disabled this =
    Js.Any.to_bool (Js.Ffi.get this "prefControlledAttributeDisabled")

  let pref_controlled_static_attribute_disabled this =
    Js.Any.to_bool (Js.Ffi.get this "prefControlledStaticAttributeDisabled")

  let pref_controlled_method_disabled this =
    Js.to_unit (Js.Ffi.meth_call this "prefControlledMethodDisabled" [||])

  let pref_controlled_static_method_disabled () =
    Js.to_unit (Js.Ffi.meth_call t "prefControlledStaticMethodDisabled" [||])

  let pref_controlled_const_disabled = 0

  let advance_clock ~millis this =
    let millis = Js.Any.of_int millis in
    Js.to_unit (Js.Ffi.meth_call this "advanceClock" [| millis |])

  let pref_controlled_attribute_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "prefControlledAttributeEnabled")

  let pref_controlled_static_attribute_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "prefControlledStaticAttributeEnabled")

  let pref_controlled_method_enabled this =
    Js.to_unit (Js.Ffi.meth_call this "prefControlledMethodEnabled" [||])

  let pref_controlled_static_method_enabled () =
    Js.to_unit (Js.Ffi.meth_call t "prefControlledStaticMethodEnabled" [||])

  let pref_controlled_const_enabled = 0

  let func_controlled_attribute_disabled this =
    Js.Any.to_bool (Js.Ffi.get this "funcControlledAttributeDisabled")

  let func_controlled_static_attribute_disabled this =
    Js.Any.to_bool (Js.Ffi.get this "funcControlledStaticAttributeDisabled")

  let func_controlled_method_disabled this =
    Js.to_unit (Js.Ffi.meth_call this "funcControlledMethodDisabled" [||])

  let func_controlled_static_method_disabled () =
    Js.to_unit (Js.Ffi.meth_call t "funcControlledStaticMethodDisabled" [||])

  let func_controlled_const_disabled = 0

  let func_controlled_attribute_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "funcControlledAttributeEnabled")

  let func_controlled_static_attribute_enabled this =
    Js.Any.to_bool (Js.Ffi.get this "funcControlledStaticAttributeEnabled")

  let func_controlled_method_enabled this =
    Js.to_unit (Js.Ffi.meth_call this "funcControlledMethodEnabled" [||])

  let func_controlled_static_method_enabled () =
    Js.to_unit (Js.Ffi.meth_call t "funcControlledStaticMethodEnabled" [||])

  let func_controlled_const_enabled = 0

  let return_resolved_promise ~value this =
    let value = Js.of_any value in
    (Promise.of_any Js.to_any)
      (Js.Ffi.meth_call this "returnResolvedPromise" [| value |])

  let return_rejected_promise ~value this =
    let value = Js.of_any value in
    (Promise.of_any Js.to_any)
      (Js.Ffi.meth_call this "returnRejectedPromise" [| value |])

  let promise_attribute this =
    (Promise.of_any Js.Any.to_bool) (Js.Ffi.get this "promiseAttribute")

  let accept_promise ~string this =
    let string = (Promise.of_any Js.Any.of_string) string in
    Js.to_unit (Js.Ffi.meth_call this "acceptPromise" [| string |])

  let promise_native_handler ~resolve ~reject this =
    let resolve = (Js.Any.nullable_of_option Simple_callback.to_any) resolve in
    let reject = (Js.Any.nullable_of_option Simple_callback.to_any) reject in
    (Promise.of_any Js.to_any)
      (Js.Ffi.meth_call this "promiseNativeHandler" [| resolve; reject |])

  let promise_resolve_native ~p ~value this =
    let p = (Promise.of_any Js.of_any) p in
    let value = Js.of_any value in
    Js.to_unit (Js.Ffi.meth_call this "promiseResolveNative" [| p; value |])

  let promise_reject_native ~p ~value this =
    let p = (Promise.of_any Js.of_any) p in
    let value = Js.of_any value in
    Js.to_unit (Js.Ffi.meth_call this "promiseRejectNative" [| p; value |])

  let promise_reject_with_type_error ~p ~message this =
    let p = (Promise.of_any Js.of_any) p in
    let message = Js.Any.of_string message in
    Js.to_unit
      (Js.Ffi.meth_call this "promiseRejectWithTypeError" [| p; message |])

  let resolve_promise_delayed ~p ~value ~ms this =
    let p = (Promise.of_any Js.of_any) p in
    let value = Js.Any.of_string value in
    let ms = Js.Any.of_int ms in
    Js.to_unit (Js.Ffi.meth_call this "resolvePromiseDelayed" [| p; value; ms |])

  let panic this = Js.to_unit (Js.Ffi.meth_call this "panic" [||])

  let entry_global this =
    Global_scope.of_any (Js.Ffi.meth_call this "entryGlobal" [||])

  let incumbent_global this =
    Global_scope.of_any (Js.Ffi.meth_call this "incumbentGlobal" [||])

  let semi_exposed_bool_from_interface this =
    Js.Any.to_bool (Js.Ffi.get this "semiExposedBoolFromInterface")

  let get_dictionary_with_parent ~parent ~child this =
    let parent = Js.Any.of_string parent in
    let child = Js.Any.of_string child in
    Test_dictionary_with_parent.of_any
      (Js.Ffi.meth_call this "getDictionaryWithParent" [| parent; child |])

  let crash_hard this = Js.to_unit (Js.Ffi.meth_call this "crashHard" [||])

  let semi_exposed_bool_from_partial_interface this =
    Js.Any.to_bool (Js.Ffi.get this "semiExposedBoolFromPartialInterface")

  let bool_from_semi_exposed_partial_interface this =
    Js.Any.to_bool (Js.Ffi.get this "boolFromSemiExposedPartialInterface")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TestBinding} \
   [TestBinding] on MDN}."]

and Simple_callback : sig
  type t = Js.any -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Simple_callback

and Test_binding_iterable : sig
  type t = [ `Test_binding_iterable ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingIterable} \
     [TestBindingIterable]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val add : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingIterable/add} \
     [add] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingIterable/length} \
     [length] on MDN}."]

  val get_item : index:int -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingIterable/getItem} \
     [getItem] on MDN}."]
end = struct
  type t = [ `Test_binding_iterable ] Js.t

  let t = Js.Ffi.constr "TestBindingIterable"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let add ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "add" [| arg |])

  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get_item ~index this =
    let index = Js.Any.of_int index in
    Js.Any.to_string (Js.Ffi.meth_call this "getItem" [| index |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/TestBindingIterable} \
   [TestBindingIterable] on MDN}."]

and Test_binding_maplike : sig
  type t = [ `Test_binding_maplike ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike} \
     [TestBindingMaplike]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t
  val maplike : _

  val set_internal : a_key:string -> a_value:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike/setInternal} \
     [setInternal] on MDN}."]

  val clear_internal : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike/clearInternal} \
     [clearInternal] on MDN}."]

  val delete_internal : a_key:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike/deleteInternal} \
     [deleteInternal] on MDN}."]

  val has_internal : a_key:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike/hasInternal} \
     [hasInternal] on MDN}."]

  val get_internal : a_key:string -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike/getInternal} \
     [getInternal] on MDN}."]
end = struct
  type t = [ `Test_binding_maplike ] Js.t

  let t = Js.Ffi.constr "TestBindingMaplike"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let set_internal ~a_key ~a_value this =
    let a_key = Js.Any.of_string a_key in
    let a_value = Js.Any.of_int a_value in
    Js.to_unit (Js.Ffi.meth_call this "setInternal" [| a_key; a_value |])

  let clear_internal this =
    Js.to_unit (Js.Ffi.meth_call this "clearInternal" [||])

  let delete_internal ~a_key this =
    let a_key = Js.Any.of_string a_key in
    Js.Any.to_bool (Js.Ffi.meth_call this "deleteInternal" [| a_key |])

  let has_internal ~a_key this =
    let a_key = Js.Any.of_string a_key in
    Js.Any.to_bool (Js.Ffi.meth_call this "hasInternal" [| a_key |])

  let get_internal ~a_key this =
    let a_key = Js.Any.of_string a_key in
    Js.Any.to_int (Js.Ffi.meth_call this "getInternal" [| a_key |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/TestBindingMaplike} \
   [TestBindingMaplike] on MDN}."]

and Test_binding_pair_iterable : sig
  type t = [ `Test_binding_pair_iterable ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingPairIterable} \
     [TestBindingPairIterable]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val add : key:string -> value:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingPairIterable/add} \
     [add] on MDN}."]
end = struct
  type t = [ `Test_binding_pair_iterable ] Js.t

  let t = Js.Ffi.constr "TestBindingPairIterable"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let add ~key ~value this =
    let key = Js.Any.of_string key in
    let value = Js.Any.of_int value in
    Js.to_unit (Js.Ffi.meth_call this "add" [| key; value |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/TestBindingPairIterable} \
   [TestBindingPairIterable] on MDN}."]

and Test_binding_proxy : sig
  type t = [ `Test_binding_proxy ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy} \
     [TestBindingProxy]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Test_binding_proxy | `Test_binding ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy} \
     [TestBindingProxy]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/length} \
     [length] on MDN}."]

  val get_named_item : item_name:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/getNamedItem} \
     [getNamedItem] on MDN}."]

  val set_named_item : item_name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/setNamedItem} \
     [setNamedItem] on MDN}."]

  val get_item : index:int -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/getItem} \
     [getItem] on MDN}."]

  val set_item : index:int -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/setItem} \
     [setItem] on MDN}."]

  val remove_item : name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy/removeItem} \
     [removeItem] on MDN}."]
end = struct
  type t = [ `Test_binding_proxy ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Test_binding_proxy | `Test_binding ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy} \
     [TestBindingProxy]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TestBindingProxy"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_test_binding this = Js.Ffi.magic this
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get_named_item ~item_name this =
    let item_name = Js.Any.of_string item_name in
    Js.Any.to_string (Js.Ffi.meth_call this "getNamedItem" [| item_name |])

  let set_named_item ~item_name ~value this =
    let item_name = Js.Any.of_string item_name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "setNamedItem" [| item_name; value |])

  let get_item ~index this =
    let index = Js.Any.of_int index in
    Js.Any.to_string (Js.Ffi.meth_call this "getItem" [| index |])

  let set_item ~index ~value this =
    let index = Js.Any.of_int index in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "setItem" [| index; value |])

  let remove_item ~name this =
    let name = Js.Any.of_string name in
    Js.to_unit (Js.Ffi.meth_call this "removeItem" [| name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TestBindingProxy} \
   [TestBindingProxy] on MDN}."]

and Test_binding_setlike : sig
  type t = [ `Test_binding_setlike ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestBindingSetlike} \
     [TestBindingSetlike]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t
  val setlike : _
end = struct
  type t = [ `Test_binding_setlike ] Js.t

  let t = Js.Ffi.constr "TestBindingSetlike"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/TestBindingSetlike} \
   [TestBindingSetlike] on MDN}."]

and Test_runner : sig
  type t = [ `Test_runner ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestRunner} \
     [TestRunner]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_bluetooth_mock_data_set : data_set_name:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestRunner/setBluetoothMockDataSet} \
     [setBluetoothMockDataSet] on MDN}."]
end = struct
  type t = [ `Test_runner ] Js.t

  let t = Js.Ffi.constr "TestRunner"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_bluetooth_mock_data_set ~data_set_name this =
    let data_set_name = Js.Any.of_string data_set_name in
    Js.to_unit
      (Js.Ffi.meth_call this "setBluetoothMockDataSet" [| data_set_name |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TestRunner} \
   [TestRunner] on MDN}."]

and Test_worklet : sig
  type t = [ `Test_worklet ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorklet} \
     [TestWorklet]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val add_module :
    module_url:string -> ?options:Worklet_options.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorklet/addModule} \
     [addModule] on MDN}."]

  val lookup : key:string -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorklet/lookup} \
     [lookup] on MDN}."]
end = struct
  type t = [ `Test_worklet ] Js.t

  let t = Js.Ffi.constr "TestWorklet"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let add_module ~module_url ?options this =
    let module_url = Js.Any.of_string module_url in
    let options = (Js.Any.undefined_of_option Worklet_options.to_any) options in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "addModule" [| module_url; options |])

  let lookup ~key this =
    let key = Js.Any.of_string key in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "lookup" [| key |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TestWorklet} \
   [TestWorklet] on MDN}."]

and Test_worklet_global_scope : sig
  type t = [ `Test_worklet_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorkletGlobalScope} \
     [TestWorkletGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Test_worklet_global_scope
      | `Worklet_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorkletGlobalScope} \
     [TestWorkletGlobalScope]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val register_key_value : key:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorkletGlobalScope/registerKeyValue} \
     [registerKeyValue] on MDN}."]
end = struct
  type t = [ `Test_worklet_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Test_worklet_global_scope
      | `Worklet_global_scope
      | `Global_scope
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TestWorkletGlobalScope} \
     [TestWorkletGlobalScope]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "TestWorkletGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_worklet_global_scope this = Js.Ffi.magic this

  let register_key_value ~key ~value this =
    let key = Js.Any.of_string key in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "registerKeyValue" [| key; value |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/TestWorkletGlobalScope} \
   [TestWorkletGlobalScope] on MDN}."]

and Text : sig
  type t = [ `Text ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Text} [Text]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Text | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Text} [Text]} interface \
     or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : ?data:string -> unit -> 'a super

  val split_text : offset:int -> t -> 'a super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText} \
     [splitText] on MDN}."]

  val whole_text : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText} \
     [wholeText] on MDN}."]
end = struct
  type t = [ `Text ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Text | `Character_data | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Text} [Text]} interface \
     or any base interface that it inherits."]

  let t = Js.Ffi.constr "Text"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_character_data this = Js.Ffi.magic this

  let make ?data () =
    let data = (Js.Any.undefined_of_option Js.Any.of_string) data in
    Js.Ffi.obj_new t [| data |]

  let split_text ~offset this =
    let offset = Js.Any.of_int offset in
    of_any (Js.Ffi.meth_call this "splitText" [| offset |])

  let whole_text this = Js.Any.to_string (Js.Ffi.get this "wholeText")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Text} [Text] on \
   MDN}."]

and Text_decoder_options : sig
  type t [@@ocaml.doc "The type for the [TextDecoderOptions] dictionary."]

  val make : ?fatal:bool -> ?ignore_bom:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val fatal : t -> bool option
  val ignore_bom : t -> bool option
end = struct
  type t = Js.any

  let make ?fatal ?ignore_bom () =
    let fatal = (Js.Any.nullable_of_option Js.Any.of_bool) fatal in
    let ignore_bom = (Js.Any.nullable_of_option Js.Any.of_bool) ignore_bom in
    Js.Ffi.obj [| ("fatal", fatal); ("ignoreBOM", ignore_bom) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let fatal this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "fatal")

  let ignore_bom this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "ignoreBOM")
end

and Text_decode_options : sig
  type t [@@ocaml.doc "The type for the [TextDecodeOptions] dictionary."]

  val make : ?stream:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val stream : t -> bool option
end = struct
  type t = Js.any

  let make ?stream () =
    let stream = (Js.Any.nullable_of_option Js.Any.of_bool) stream in
    Js.Ffi.obj [| ("stream", stream) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let stream this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "stream")
end

and Text_decoder : sig
  type t = [ `Text_decoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder} \
     [TextDecoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_label_and_options :
    ?label:string -> ?options:Text_decoder_options.t -> unit -> t

  val encoding : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding} \
     [encoding] on MDN}."]

  val fatal : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/fatal} \
     [fatal] on MDN}."]

  val ignore_bom : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/ignoreBOM} \
     [ignoreBOM] on MDN}."]

  val decode :
    ?input:Buffer_source.t -> ?options:Text_decode_options.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode} \
     [decode] on MDN}."]
end = struct
  type t = [ `Text_decoder ] Js.t

  let t = Js.Ffi.constr "TextDecoder"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_label_and_options ?label ?options () =
    let label = (Js.Any.undefined_of_option Js.Any.of_string) label in
    let options =
      (Js.Any.undefined_of_option Text_decoder_options.to_any) options
    in
    Js.Ffi.obj_new t [| label; options |]

  let encoding this = Js.Any.to_string (Js.Ffi.get this "encoding")
  let fatal this = Js.Any.to_bool (Js.Ffi.get this "fatal")
  let ignore_bom this = Js.Any.to_bool (Js.Ffi.get this "ignoreBOM")

  let decode ?input ?options this =
    let input = (Js.Any.undefined_of_option Buffer_source.to_any) input in
    let options =
      (Js.Any.undefined_of_option Text_decode_options.to_any) options
    in
    Js.Any.to_string (Js.Ffi.meth_call this "decode" [| input; options |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder} \
   [TextDecoder] on MDN}."]

and Text_encoder : sig
  type t = [ `Text_encoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder} \
     [TextEncoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val encoding : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encoding} \
     [encoding] on MDN}."]

  val encode : ?input:string -> t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode} \
     [encode] on MDN}."]
end = struct
  type t = [ `Text_encoder ] Js.t

  let t = Js.Ffi.constr "TextEncoder"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]
  let encoding this = Js.Any.to_string (Js.Ffi.get this "encoding")

  let encode ?input this =
    let input = (Js.Any.undefined_of_option Js.Any.of_string) input in
    Uint8_array.of_any (Js.Ffi.meth_call this "encode" [| input |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder} \
   [TextEncoder] on MDN}."]

and Text_metrics : sig
  type t = [ `Text_metrics ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics} \
     [TextMetrics]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val width : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width} \
     [width] on MDN}."]

  val actual_bounding_box_left : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxLeft} \
     [actualBoundingBoxLeft] on MDN}."]

  val actual_bounding_box_right : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxRight} \
     [actualBoundingBoxRight] on MDN}."]

  val font_bounding_box_ascent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxAscent} \
     [fontBoundingBoxAscent] on MDN}."]

  val font_bounding_box_descent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxDescent} \
     [fontBoundingBoxDescent] on MDN}."]

  val actual_bounding_box_ascent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxAscent} \
     [actualBoundingBoxAscent] on MDN}."]

  val actual_bounding_box_descent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxDescent} \
     [actualBoundingBoxDescent] on MDN}."]

  val em_height_ascent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightAscent} \
     [emHeightAscent] on MDN}."]

  val em_height_descent : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightDescent} \
     [emHeightDescent] on MDN}."]

  val hanging_baseline : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/hangingBaseline} \
     [hangingBaseline] on MDN}."]

  val alphabetic_baseline : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/alphabeticBaseline} \
     [alphabeticBaseline] on MDN}."]

  val ideographic_baseline : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/ideographicBaseline} \
     [ideographicBaseline] on MDN}."]
end = struct
  type t = [ `Text_metrics ] Js.t

  let t = Js.Ffi.constr "TextMetrics"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let width this = Js.Any.to_float (Js.Ffi.get this "width")

  let actual_bounding_box_left this =
    Js.Any.to_float (Js.Ffi.get this "actualBoundingBoxLeft")

  let actual_bounding_box_right this =
    Js.Any.to_float (Js.Ffi.get this "actualBoundingBoxRight")

  let font_bounding_box_ascent this =
    Js.Any.to_float (Js.Ffi.get this "fontBoundingBoxAscent")

  let font_bounding_box_descent this =
    Js.Any.to_float (Js.Ffi.get this "fontBoundingBoxDescent")

  let actual_bounding_box_ascent this =
    Js.Any.to_float (Js.Ffi.get this "actualBoundingBoxAscent")

  let actual_bounding_box_descent this =
    Js.Any.to_float (Js.Ffi.get this "actualBoundingBoxDescent")

  let em_height_ascent this = Js.Any.to_float (Js.Ffi.get this "emHeightAscent")

  let em_height_descent this =
    Js.Any.to_float (Js.Ffi.get this "emHeightDescent")

  let hanging_baseline this = Js.Any.to_float (Js.Ffi.get this "hangingBaseline")

  let alphabetic_baseline this =
    Js.Any.to_float (Js.Ffi.get this "alphabeticBaseline")

  let ideographic_baseline this =
    Js.Any.to_float (Js.Ffi.get this "ideographicBaseline")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics} \
   [TextMetrics] on MDN}."]

and Text_track_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val disabled : t
  val hidden : t
  val showing : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let disabled = Js.of_string "disabled"
  let hidden = Js.of_string "hidden"
  let showing = Js.of_string "showing"
end

and Text_track_kind : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val subtitles : t
  val captions : t
  val descriptions : t
  val chapters : t
  val metadata : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let subtitles = Js.of_string "subtitles"
  let captions = Js.of_string "captions"
  let descriptions = Js.of_string "descriptions"
  let chapters = Js.of_string "chapters"
  let metadata = Js.of_string "metadata"
end

and Text_track : sig
  type t = [ `Text_track ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack} [TextTrack]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Text_track | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack} [TextTrack]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val kind : t -> Text_track_kind.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind} \
     [kind] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/label} \
     [label] on MDN}."]

  val language : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/language} \
     [language] on MDN}."]

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/id} \
     [id] on MDN}."]

  val mode : t -> Text_track_mode.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/mode} \
     [mode] on MDN}."]

  val set_mode : t -> Text_track_mode.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/mode} \
     [mode] on MDN}."]

  val cues : t -> Text_track_cue_list.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/cues} \
     [cues] on MDN}."]

  val active_cues : t -> Text_track_cue_list.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/activeCues} \
     [activeCues] on MDN}."]

  val add_cue : cue:Text_track_cue.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/addCue} \
     [addCue] on MDN}."]

  val remove_cue : cue:Text_track_cue.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/removeCue} \
     [removeCue] on MDN}."]

  val oncuechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/oncuechange} \
     [oncuechange] on MDN}."]

  val set_oncuechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/oncuechange} \
     [oncuechange] on MDN}."]
end = struct
  type t = [ `Text_track ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Text_track | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrack} [TextTrack]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TextTrack"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let kind this = Text_track_kind.of_any (Js.Ffi.get this "kind")
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let language this = Js.Any.to_string (Js.Ffi.get this "language")
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let mode this = Text_track_mode.of_any (Js.Ffi.get this "mode")
  let set_mode this x = Js.Ffi.set this "mode" (Text_track_mode.to_any x)

  let cues this =
    (Js.Any.nullable_to_option Text_track_cue_list.of_any)
      (Js.Ffi.get this "cues")

  let active_cues this =
    (Js.Any.nullable_to_option Text_track_cue_list.of_any)
      (Js.Ffi.get this "activeCues")

  let add_cue ~cue this =
    let cue = Text_track_cue.to_any cue in
    Js.to_unit (Js.Ffi.meth_call this "addCue" [| cue |])

  let remove_cue ~cue this =
    let cue = Text_track_cue.to_any cue in
    Js.to_unit (Js.Ffi.meth_call this "removeCue" [| cue |])

  let oncuechange this = Event_handler.of_any (Js.Ffi.get this "oncuechange")

  let set_oncuechange this x =
    Js.Ffi.set this "oncuechange" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrack} \
   [TextTrack] on MDN}."]

and Text_track_cue : sig
  type t = [ `Text_track_cue ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue} \
     [TextTrackCue]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Text_track_cue | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue} \
     [TextTrackCue]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val track : t -> 'a Text_track.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/track} \
     [track] on MDN}."]

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/id} \
     [id] on MDN}."]

  val set_id : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/id} \
     [id] on MDN}."]

  val start_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/startTime} \
     [startTime] on MDN}."]

  val set_start_time : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/startTime} \
     [startTime] on MDN}."]

  val end_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/endTime} \
     [endTime] on MDN}."]

  val set_end_time : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/endTime} \
     [endTime] on MDN}."]

  val pause_on_exit : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/pauseOnExit} \
     [pauseOnExit] on MDN}."]

  val set_pause_on_exit : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/pauseOnExit} \
     [pauseOnExit] on MDN}."]

  val onenter : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/onenter} \
     [onenter] on MDN}."]

  val set_onenter : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/onenter} \
     [onenter] on MDN}."]

  val onexit : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/onexit} \
     [onexit] on MDN}."]

  val set_onexit : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/onexit} \
     [onexit] on MDN}."]
end = struct
  type t = [ `Text_track_cue ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Text_track_cue | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue} \
     [TextTrackCue]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TextTrackCue"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let track this =
    (Js.Any.nullable_to_option Text_track.of_any) (Js.Ffi.get this "track")

  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let set_id this x = Js.Ffi.set this "id" (Js.Any.of_string x)
  let start_time this = Js.Any.to_float (Js.Ffi.get this "startTime")
  let set_start_time this x = Js.Ffi.set this "startTime" (Js.Any.of_float x)
  let end_time this = Js.Any.to_float (Js.Ffi.get this "endTime")
  let set_end_time this x = Js.Ffi.set this "endTime" (Js.Any.of_float x)
  let pause_on_exit this = Js.Any.to_bool (Js.Ffi.get this "pauseOnExit")
  let set_pause_on_exit this x = Js.Ffi.set this "pauseOnExit" (Js.Any.of_bool x)
  let onenter this = Event_handler.of_any (Js.Ffi.get this "onenter")
  let set_onenter this x = Js.Ffi.set this "onenter" (Event_handler.to_any x)
  let onexit this = Event_handler.of_any (Js.Ffi.get this "onexit")
  let set_onexit this x = Js.Ffi.set this "onexit" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue} \
   [TextTrackCue] on MDN}."]

and Text_track_cue_list : sig
  type t = [ `Text_track_cue_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList} \
     [TextTrackCueList]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList/length} \
     [length] on MDN}."]

  val get : index:int -> t -> 'a Text_track_cue.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList/get} \
     [get] on MDN}."]

  val get_cue_by_id : id:string -> t -> 'a Text_track_cue.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList/getCueById} \
     [getCueById] on MDN}."]
end = struct
  type t = [ `Text_track_cue_list ] Js.t

  let t = Js.Ffi.constr "TextTrackCueList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Text_track_cue.of_any (Js.Ffi.meth_call this "get" [| index |])

  let get_cue_by_id ~id this =
    let id = Js.Any.of_string id in
    (Js.Any.nullable_to_option Text_track_cue.of_any)
      (Js.Ffi.meth_call this "getCueById" [| id |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList} \
   [TextTrackCueList] on MDN}."]

and Text_track_list : sig
  type t = [ `Text_track_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList} \
     [TextTrackList]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Text_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList} \
     [TextTrackList]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/length} \
     [length] on MDN}."]

  val get : index:int -> t -> 'a Text_track.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/get} [get] \
     on MDN}."]

  val get_track_by_id : id:string -> t -> 'a Text_track.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/getTrackById} \
     [getTrackById] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onchange} \
     [onchange] on MDN}."]

  val onaddtrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val set_onaddtrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val onremovetrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]

  val set_onremovetrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]
end = struct
  type t = [ `Text_track_list ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Text_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList} \
     [TextTrackList]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TextTrackList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Text_track.of_any (Js.Ffi.meth_call this "get" [| index |])

  let get_track_by_id ~id this =
    let id = Js.Any.of_string id in
    (Js.Any.nullable_to_option Text_track.of_any)
      (Js.Ffi.meth_call this "getTrackById" [| id |])

  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)
  let onaddtrack this = Event_handler.of_any (Js.Ffi.get this "onaddtrack")

  let set_onaddtrack this x =
    Js.Ffi.set this "onaddtrack" (Event_handler.to_any x)

  let onremovetrack this = Event_handler.of_any (Js.Ffi.get this "onremovetrack")

  let set_onremovetrack this x =
    Js.Ffi.set this "onremovetrack" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList} \
   [TextTrackList] on MDN}."]

and Time_ranges : sig
  type t = [ `Time_ranges ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges} \
     [TimeRanges]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length} \
     [length] on MDN}."]

  val start : index:int -> t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start} \
     [start] on MDN}."]

  val end' : index:int -> t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end} \
     [end] on MDN}."]
end = struct
  type t = [ `Time_ranges ] Js.t

  let t = Js.Ffi.constr "TimeRanges"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let start ~index this =
    let index = Js.Any.of_int index in
    Js.Any.to_float (Js.Ffi.meth_call this "start" [| index |])

  let end' ~index this =
    let index = Js.Any.of_int index in
    Js.Any.to_float (Js.Ffi.meth_call this "end" [| index |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges} \
   [TimeRanges] on MDN}."]

and Touch : sig
  type t = [ `Touch ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Touch} [Touch]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val identifier : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier} \
     [identifier] on MDN}."]

  val target : t -> Event_target.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target} \
     [target] on MDN}."]

  val screen_x : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX} \
     [screenX] on MDN}."]

  val screen_y : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY} \
     [screenY] on MDN}."]

  val client_x : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX} \
     [clientX] on MDN}."]

  val client_y : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY} \
     [clientY] on MDN}."]

  val page_x : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageX} \
     [pageX] on MDN}."]

  val page_y : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageY} \
     [pageY] on MDN}."]
end = struct
  type t = [ `Touch ] Js.t

  let t = Js.Ffi.constr "Touch"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let identifier this = Js.Any.to_int (Js.Ffi.get this "identifier")
  let target this = Event_target.of_any (Js.Ffi.get this "target")
  let screen_x this = Js.Any.to_float (Js.Ffi.get this "screenX")
  let screen_y this = Js.Any.to_float (Js.Ffi.get this "screenY")
  let client_x this = Js.Any.to_float (Js.Ffi.get this "clientX")
  let client_y this = Js.Any.to_float (Js.Ffi.get this "clientY")
  let page_x this = Js.Any.to_float (Js.Ffi.get this "pageX")
  let page_y this = Js.Any.to_float (Js.Ffi.get this "pageY")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Touch} [Touch] on \
   MDN}."]

and Touch_event : sig
  type t = [ `Touch_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent} \
     [TouchEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Touch_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent} \
     [TouchEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val touches : t -> Touch_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches} \
     [touches] on MDN}."]

  val target_touches : t -> Touch_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches} \
     [targetTouches] on MDN}."]

  val changed_touches : t -> Touch_list.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches} \
     [changedTouches] on MDN}."]

  val alt_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey} \
     [altKey] on MDN}."]

  val meta_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey} \
     [metaKey] on MDN}."]

  val ctrl_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey} \
     [ctrlKey] on MDN}."]

  val shift_key : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey} \
     [shiftKey] on MDN}."]
end = struct
  type t = [ `Touch_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Touch_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent} \
     [TouchEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TouchEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_ui_event this = Js.Ffi.magic this
  let touches this = Touch_list.of_any (Js.Ffi.get this "touches")
  let target_touches this = Touch_list.of_any (Js.Ffi.get this "targetTouches")
  let changed_touches this = Touch_list.of_any (Js.Ffi.get this "changedTouches")
  let alt_key this = Js.Any.to_bool (Js.Ffi.get this "altKey")
  let meta_key this = Js.Any.to_bool (Js.Ffi.get this "metaKey")
  let ctrl_key this = Js.Any.to_bool (Js.Ffi.get this "ctrlKey")
  let shift_key this = Js.Any.to_bool (Js.Ffi.get this "shiftKey")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent} \
   [TouchEvent] on MDN}."]

and Touch_list : sig
  type t = [ `Touch_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchList} [TouchList]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TouchList/length} \
     [length] on MDN}."]

  val item : index:int -> t -> Touch.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TouchList/item} \
     [item] on MDN}."]
end = struct
  type t = [ `Touch_list ] Js.t

  let t = Js.Ffi.constr "TouchList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let item ~index this =
    let index = Js.Any.of_int index in
    (Js.Any.nullable_to_option Touch.of_any)
      (Js.Ffi.meth_call this "item" [| index |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TouchList} \
   [TouchList] on MDN}."]

and Track_event : sig
  type t = [ `Track_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent} \
     [TrackEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Track_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent} \
     [TrackEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Track_event_init.t -> unit -> 'a super

  val track : t -> [< `Video_track | `Audio_track | `Text_track ] Js.nullable
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/track} \
     [track] on MDN}."]
end = struct
  type t = [ `Track_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Track_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent} \
     [TrackEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TrackEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Track_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let track this = Js.of_any (Js.Ffi.get this "track")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent} \
   [TrackEvent] on MDN}."]

and Track_event_init : sig
  type t [@@ocaml.doc "The type for the [TrackEventInit] dictionary."]

  val make :
    ?track:[< `Video_track | `Audio_track | `Text_track ] Js.nullable ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t

  val track :
    t -> [< `Video_track | `Audio_track | `Text_track ] Js.nullable option
end = struct
  type t = Js.any

  let make ?track () =
    let track = (Js.Any.nullable_of_option Js.to_any) track in
    Js.Ffi.obj [| ("track", track) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let track this =
    (Js.Any.nullable_to_option Js.of_any) (Js.Ffi.get this "track")
end

and Transition_event : sig
  type t = [ `Transition_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent} \
     [TransitionEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Transition_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent} \
     [TransitionEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_transition_event_init_dict :
    type':string ->
    ?transition_event_init_dict:Transition_event_init.t ->
    unit ->
    'a super

  val property_name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/propertyName} \
     [propertyName] on MDN}."]

  val elapsed_time : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime} \
     [elapsedTime] on MDN}."]

  val pseudo_element : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement} \
     [pseudoElement] on MDN}."]
end = struct
  type t = [ `Transition_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Transition_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent} \
     [TransitionEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "TransitionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_transition_event_init_dict ~type'
      ?transition_event_init_dict () =
    let type' = Js.Any.of_string type' in
    let transition_event_init_dict =
      (Js.Any.undefined_of_option Transition_event_init.to_any)
        transition_event_init_dict
    in
    Js.Ffi.obj_new t [| type'; transition_event_init_dict |]

  let property_name this = Js.Any.to_string (Js.Ffi.get this "propertyName")
  let elapsed_time this = Js.Any.to_float (Js.Ffi.get this "elapsedTime")
  let pseudo_element this = Js.Any.to_string (Js.Ffi.get this "pseudoElement")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent} \
   [TransitionEvent] on MDN}."]

and Transition_event_init : sig
  type t [@@ocaml.doc "The type for the [TransitionEventInit] dictionary."]

  val make :
    ?property_name:string ->
    ?elapsed_time:float ->
    ?pseudo_element:string ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val property_name : t -> string option
  val elapsed_time : t -> float option
  val pseudo_element : t -> string option
end = struct
  type t = Js.any

  let make ?property_name ?elapsed_time ?pseudo_element () =
    let property_name =
      (Js.Any.nullable_of_option Js.Any.of_string) property_name
    in
    let elapsed_time =
      (Js.Any.nullable_of_option Js.Any.of_float) elapsed_time
    in
    let pseudo_element =
      (Js.Any.nullable_of_option Js.Any.of_string) pseudo_element
    in
    Js.Ffi.obj
      [|
        ("propertyName", property_name);
        ("elapsedTime", elapsed_time);
        ("pseudoElement", pseudo_element);
      |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let property_name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "propertyName")

  let elapsed_time this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "elapsedTime")

  let pseudo_element this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "pseudoElement")
end

and Tree_walker : sig
  type t = [ `Tree_walker ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker} \
     [TreeWalker]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val root : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root} \
     [root] on MDN}."]

  val what_to_show : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow} \
     [whatToShow] on MDN}."]

  val filter : t -> Node_filter.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter} \
     [filter] on MDN}."]

  val current_node : t -> 'a Node.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode} \
     [currentNode] on MDN}."]

  val set_current_node : t -> Node.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode} \
     [currentNode] on MDN}."]

  val parent_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode} \
     [parentNode] on MDN}."]

  val first_child : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild} \
     [firstChild] on MDN}."]

  val last_child : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild} \
     [lastChild] on MDN}."]

  val previous_sibling : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling} \
     [previousSibling] on MDN}."]

  val next_sibling : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling} \
     [nextSibling] on MDN}."]

  val previous_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode} \
     [previousNode] on MDN}."]

  val next_node : t -> 'a Node.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode} \
     [nextNode] on MDN}."]
end = struct
  type t = [ `Tree_walker ] Js.t

  let t = Js.Ffi.constr "TreeWalker"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let root this = Node.of_any (Js.Ffi.get this "root")
  let what_to_show this = Js.Any.to_int (Js.Ffi.get this "whatToShow")

  let filter this =
    (Js.Any.nullable_to_option Node_filter.of_any) (Js.Ffi.get this "filter")

  let current_node this = Node.of_any (Js.Ffi.get this "currentNode")
  let set_current_node this x = Js.Ffi.set this "currentNode" (Node.to_any x)

  let parent_node this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "parentNode" [||])

  let first_child this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "firstChild" [||])

  let last_child this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "lastChild" [||])

  let previous_sibling this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "previousSibling" [||])

  let next_sibling this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "nextSibling" [||])

  let previous_node this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "previousNode" [||])

  let next_node this =
    (Js.Any.nullable_to_option Node.of_any)
      (Js.Ffi.meth_call this "nextNode" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker} \
   [TreeWalker] on MDN}."]

and Ui_event : sig
  type t = [ `Ui_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/UIEvent} [UIEvent]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/UIEvent} [UIEvent]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> ?event_init_dict:Ui_event_init.t -> unit -> 'a super

  val view : t -> 'a Window.super option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view} \
     [view] on MDN}."]

  val detail : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail} \
     [detail] on MDN}."]

  val init_ui_event :
    type_arg:string ->
    bubbles_arg:bool ->
    cancelable_arg:bool ->
    view_arg:Window.t option ->
    detail_arg:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent} \
     [initUIEvent] on MDN}."]
end = struct
  type t = [ `Ui_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/UIEvent} [UIEvent]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "UIEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ?event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      (Js.Any.undefined_of_option Ui_event_init.to_any) event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let view this =
    (Js.Any.nullable_to_option Window.of_any) (Js.Ffi.get this "view")

  let detail this = Js.Any.to_int (Js.Ffi.get this "detail")

  let init_ui_event ~type_arg ~bubbles_arg ~cancelable_arg ~view_arg ~detail_arg
      this =
    let type_arg = Js.Any.of_string type_arg in
    let bubbles_arg = Js.Any.of_bool bubbles_arg in
    let cancelable_arg = Js.Any.of_bool cancelable_arg in
    let view_arg = (Js.Any.nullable_of_option Window.to_any) view_arg in
    let detail_arg = Js.Any.of_int detail_arg in
    Js.to_unit
      (Js.Ffi.meth_call this "initUIEvent"
         [| type_arg; bubbles_arg; cancelable_arg; view_arg; detail_arg |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/UIEvent} [UIEvent] \
   on MDN}."]

and Ui_event_init : sig
  type t [@@ocaml.doc "The type for the [UIEventInit] dictionary."]

  val make : ?view:Window.t option -> ?detail:int -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val view : t -> Window.t option option
  val detail : t -> int option
end = struct
  type t = Js.any

  let make ?view ?detail () =
    let view =
      (Js.Any.nullable_of_option (Js.Any.nullable_of_option Window.to_any)) view
    in
    let detail = (Js.Any.nullable_of_option Js.Any.of_int) detail in
    Js.Ffi.obj [| ("view", view); ("detail", detail) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let view this =
    (Js.Any.nullable_to_option (Js.Any.nullable_to_option Window.of_any))
      (Js.Ffi.get this "view")

  let detail this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "detail")
end

and Url : sig
  type t = [ `Url ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URL} [URL]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val with_url_and_base : url:string -> ?base:string -> unit -> t

  val can_parse : url:string -> ?base:string -> unit -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse} \
     [canParse] on MDN}."]

  val to_string : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/to_string} \
     [to_string] on MDN}."]

  val href : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/href} [href] \
     on MDN}."]

  val set_href : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/href} [href] \
     on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/origin} \
     [origin] on MDN}."]

  val protocol : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol} \
     [protocol] on MDN}."]

  val set_protocol : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol} \
     [protocol] on MDN}."]

  val username : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/username} \
     [username] on MDN}."]

  val set_username : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/username} \
     [username] on MDN}."]

  val password : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/password} \
     [password] on MDN}."]

  val set_password : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/password} \
     [password] on MDN}."]

  val host : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/host} [host] \
     on MDN}."]

  val set_host : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/host} [host] \
     on MDN}."]

  val hostname : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/hostname} \
     [hostname] on MDN}."]

  val set_hostname : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/hostname} \
     [hostname] on MDN}."]

  val port : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/port} [port] \
     on MDN}."]

  val set_port : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/port} [port] \
     on MDN}."]

  val pathname : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname} \
     [pathname] on MDN}."]

  val set_pathname : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname} \
     [pathname] on MDN}."]

  val search : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/search} \
     [search] on MDN}."]

  val set_search : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/search} \
     [search] on MDN}."]

  val search_params : t -> Url_search_params.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams} \
     [searchParams] on MDN}."]

  val hash : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/hash} [hash] \
     on MDN}."]

  val set_hash : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/hash} [hash] \
     on MDN}."]

  val create_object_url : blob:Blob.t -> unit -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL} \
     [createObjectURL] on MDN}."]

  val revoke_object_url : url:string -> unit -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL} \
     [revokeObjectURL] on MDN}."]

  val to_json : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL/toJSON} \
     [toJSON] on MDN}."]
end = struct
  type t = [ `Url ] Js.t

  let t = Js.Ffi.constr "URL"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_url_and_base ~url ?base () =
    let url = Js.Any.of_string url in
    let base = (Js.Any.undefined_of_option Js.Any.of_string) base in
    Js.Ffi.obj_new t [| url; base |]

  let can_parse ~url ?base () =
    let url = Js.Any.of_string url in
    let base = (Js.Any.undefined_of_option Js.Any.of_string) base in
    Js.Any.to_bool (Js.Ffi.meth_call t "canParse" [| url; base |])

  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let set_href this x = Js.Ffi.set this "href" (Js.Any.of_string x)
  let to_string = href
  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let protocol this = Js.Any.to_string (Js.Ffi.get this "protocol")
  let set_protocol this x = Js.Ffi.set this "protocol" (Js.Any.of_string x)
  let username this = Js.Any.to_string (Js.Ffi.get this "username")
  let set_username this x = Js.Ffi.set this "username" (Js.Any.of_string x)
  let password this = Js.Any.to_string (Js.Ffi.get this "password")
  let set_password this x = Js.Ffi.set this "password" (Js.Any.of_string x)
  let host this = Js.Any.to_string (Js.Ffi.get this "host")
  let set_host this x = Js.Ffi.set this "host" (Js.Any.of_string x)
  let hostname this = Js.Any.to_string (Js.Ffi.get this "hostname")
  let set_hostname this x = Js.Ffi.set this "hostname" (Js.Any.of_string x)
  let port this = Js.Any.to_string (Js.Ffi.get this "port")
  let set_port this x = Js.Ffi.set this "port" (Js.Any.of_string x)
  let pathname this = Js.Any.to_string (Js.Ffi.get this "pathname")
  let set_pathname this x = Js.Ffi.set this "pathname" (Js.Any.of_string x)
  let search this = Js.Any.to_string (Js.Ffi.get this "search")
  let set_search this x = Js.Ffi.set this "search" (Js.Any.of_string x)

  let search_params this =
    Url_search_params.of_any (Js.Ffi.get this "searchParams")

  let hash this = Js.Any.to_string (Js.Ffi.get this "hash")
  let set_hash this x = Js.Ffi.set this "hash" (Js.Any.of_string x)

  let create_object_url ~blob () =
    let blob = Blob.to_any blob in
    Js.Any.to_string (Js.Ffi.meth_call t "createObjectURL" [| blob |])

  let revoke_object_url ~url () =
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call t "revokeObjectURL" [| url |])

  let to_json this = Js.Any.to_string (Js.Ffi.meth_call this "toJSON" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URL} [URL] on MDN}."]

and Url_search_params : sig
  type t = [ `Url_search_params ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams} \
     [URLSearchParams]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : ?init:[< `Sequence | `Record | `String ] Js.t -> unit -> t

  val size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/size} \
     [size] on MDN}."]

  val append : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append} \
     [append] on MDN}."]

  val delete : name:string -> ?value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/delete} \
     [delete] on MDN}."]

  val get : name:string -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/get} \
     [get] on MDN}."]

  val get_all : name:string -> t -> string array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/getAll} \
     [getAll] on MDN}."]

  val has : name:string -> ?value:string -> t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/has} \
     [has] on MDN}."]

  val set : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/set} \
     [set] on MDN}."]

  val sort : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/sort} \
     [sort] on MDN}."]
end = struct
  type t = [ `Url_search_params ] Js.t

  let t = Js.Ffi.constr "URLSearchParams"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ?init () =
    let init = (Js.Any.undefined_of_option Js.to_any) init in
    Js.Ffi.obj_new t [| init |]

  let size this = Js.Any.to_int (Js.Ffi.get this "size")

  let append ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "append" [| name; value |])

  let delete ~name ?value this =
    let name = Js.Any.of_string name in
    let value = (Js.Any.undefined_of_option Js.Any.of_string) value in
    Js.to_unit (Js.Ffi.meth_call this "delete" [| name; value |])

  let get ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "get" [| name |])

  let get_all ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.to_array Js.Any.to_string)
      (Js.Ffi.meth_call this "getAll" [| name |])

  let has ~name ?value this =
    let name = Js.Any.of_string name in
    let value = (Js.Any.undefined_of_option Js.Any.of_string) value in
    Js.Any.to_bool (Js.Ffi.meth_call this "has" [| name; value |])

  let set ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "set" [| name; value |])

  let sort this = Js.to_unit (Js.Ffi.meth_call this "sort" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams} \
   [URLSearchParams] on MDN}."]

and Auto_keyword : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val auto : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let auto = Js.of_string "auto"
end

and Line_and_position_setting : sig
  type t

  val with_double : float -> t
  val with_auto_keyword : Auto_keyword.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_double = Js.repr
  let with_auto_keyword = Js.repr
end

and Direction_setting : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val rl : t
  val lr : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let rl = Js.of_string "rl"
  let lr = Js.of_string "lr"
end

and Line_align_setting : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val start : t
  val center : t
  val end' : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let start = Js.of_string "start"
  let center = Js.of_string "center"
  let end' = Js.of_string "end"
end

and Position_align_setting : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val line_left : t
  val center : t
  val line_right : t
  val auto : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let line_left = Js.of_string "line-left"
  let center = Js.of_string "center"
  let line_right = Js.of_string "line-right"
  let auto = Js.of_string "auto"
end

and Align_setting : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val start : t
  val center : t
  val end' : t
  val left : t
  val right : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let start = Js.of_string "start"
  let center = Js.of_string "center"
  let end' = Js.of_string "end"
  let left = Js.of_string "left"
  let right = Js.of_string "right"
end

and Vtt_cue : sig
  type t = [ `Vtt_cue ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue} [VTTCue]} \
     interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Vtt_cue | `Text_track_cue | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue} [VTTCue]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_start_time_and_end_time_and_text :
    start_time:float -> end_time:float -> text:string -> unit -> 'a super

  val region : t -> Vtt_region.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/region} \
     [region] on MDN}."]

  val set_region : t -> Vtt_region.t option -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/region} \
     [region] on MDN}."]

  val vertical : t -> Direction_setting.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/vertical} \
     [vertical] on MDN}."]

  val set_vertical : t -> Direction_setting.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/vertical} \
     [vertical] on MDN}."]

  val snap_to_lines : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/snapToLines} \
     [snapToLines] on MDN}."]

  val set_snap_to_lines : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/snapToLines} \
     [snapToLines] on MDN}."]

  val line : t -> Line_and_position_setting.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/line} \
     [line] on MDN}."]

  val set_line : t -> Line_and_position_setting.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/line} \
     [line] on MDN}."]

  val line_align : t -> Line_align_setting.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/lineAlign} \
     [lineAlign] on MDN}."]

  val set_line_align : t -> Line_align_setting.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/lineAlign} \
     [lineAlign] on MDN}."]

  val position : t -> Line_and_position_setting.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/position} \
     [position] on MDN}."]

  val set_position : t -> Line_and_position_setting.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/position} \
     [position] on MDN}."]

  val position_align : t -> Position_align_setting.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/positionAlign} \
     [positionAlign] on MDN}."]

  val set_position_align : t -> Position_align_setting.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/positionAlign} \
     [positionAlign] on MDN}."]

  val size : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/size} \
     [size] on MDN}."]

  val set_size : t -> float -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/size} \
     [size] on MDN}."]

  val align : t -> Align_setting.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/align} \
     [align] on MDN}."]

  val set_align : t -> Align_setting.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/align} \
     [align] on MDN}."]

  val text : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/text} \
     [text] on MDN}."]

  val set_text : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/text} \
     [text] on MDN}."]

  val get_cue_as_html : t -> 'a Document_fragment.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/getCueAsHTML} \
     [getCueAsHTML] on MDN}."]
end = struct
  type t = [ `Vtt_cue ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Vtt_cue | `Text_track_cue | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTCue} [VTTCue]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "VTTCue"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_text_track_cue this = Js.Ffi.magic this

  let with_start_time_and_end_time_and_text ~start_time ~end_time ~text () =
    let start_time = Js.Any.of_float start_time in
    let end_time = Js.Any.of_float end_time in
    let text = Js.Any.of_string text in
    Js.Ffi.obj_new t [| start_time; end_time; text |]

  let region this =
    (Js.Any.nullable_to_option Vtt_region.of_any) (Js.Ffi.get this "region")

  let set_region this x =
    Js.Ffi.set this "region" ((Js.Any.nullable_of_option Vtt_region.to_any) x)

  let vertical this = Direction_setting.of_any (Js.Ffi.get this "vertical")

  let set_vertical this x =
    Js.Ffi.set this "vertical" (Direction_setting.to_any x)

  let snap_to_lines this = Js.Any.to_bool (Js.Ffi.get this "snapToLines")
  let set_snap_to_lines this x = Js.Ffi.set this "snapToLines" (Js.Any.of_bool x)
  let line this = Line_and_position_setting.of_any (Js.Ffi.get this "line")

  let set_line this x =
    Js.Ffi.set this "line" (Line_and_position_setting.to_any x)

  let line_align this = Line_align_setting.of_any (Js.Ffi.get this "lineAlign")

  let set_line_align this x =
    Js.Ffi.set this "lineAlign" (Line_align_setting.to_any x)

  let position this =
    Line_and_position_setting.of_any (Js.Ffi.get this "position")

  let set_position this x =
    Js.Ffi.set this "position" (Line_and_position_setting.to_any x)

  let position_align this =
    Position_align_setting.of_any (Js.Ffi.get this "positionAlign")

  let set_position_align this x =
    Js.Ffi.set this "positionAlign" (Position_align_setting.to_any x)

  let size this = Js.Any.to_float (Js.Ffi.get this "size")
  let set_size this x = Js.Ffi.set this "size" (Js.Any.of_float x)
  let align this = Align_setting.of_any (Js.Ffi.get this "align")
  let set_align this x = Js.Ffi.set this "align" (Align_setting.to_any x)
  let text this = Js.Any.to_string (Js.Ffi.get this "text")
  let set_text this x = Js.Ffi.set this "text" (Js.Any.of_string x)

  let get_cue_as_html this =
    Document_fragment.of_any (Js.Ffi.meth_call this "getCueAsHTML" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTCue} [VTTCue] \
   on MDN}."]

and Scroll_setting : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val up : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let up = Js.of_string "up"
end

and Vtt_region : sig
  type t = [ `Vtt_region ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion} [VTTRegion]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/id} \
     [id] on MDN}."]

  val set_id : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/id} \
     [id] on MDN}."]

  val width : t -> float
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/width} \
     [width] on MDN}."]

  val set_width : t -> float -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/width} \
     [width] on MDN}."]

  val lines : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/lines} \
     [lines] on MDN}."]

  val set_lines : t -> int -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/lines} \
     [lines] on MDN}."]

  val region_anchor_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/regionAnchorX} \
     [regionAnchorX] on MDN}."]

  val set_region_anchor_x : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/regionAnchorX} \
     [regionAnchorX] on MDN}."]

  val region_anchor_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/regionAnchorY} \
     [regionAnchorY] on MDN}."]

  val set_region_anchor_y : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/regionAnchorY} \
     [regionAnchorY] on MDN}."]

  val viewport_anchor_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/viewportAnchorX} \
     [viewportAnchorX] on MDN}."]

  val set_viewport_anchor_x : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/viewportAnchorX} \
     [viewportAnchorX] on MDN}."]

  val viewport_anchor_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/viewportAnchorY} \
     [viewportAnchorY] on MDN}."]

  val set_viewport_anchor_y : t -> float -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/viewportAnchorY} \
     [viewportAnchorY] on MDN}."]

  val scroll : t -> Scroll_setting.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/scroll} \
     [scroll] on MDN}."]

  val set_scroll : t -> Scroll_setting.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion/scroll} \
     [scroll] on MDN}."]
end = struct
  type t = [ `Vtt_region ] Js.t

  let t = Js.Ffi.constr "VTTRegion"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let set_id this x = Js.Ffi.set this "id" (Js.Any.of_string x)
  let width this = Js.Any.to_float (Js.Ffi.get this "width")
  let set_width this x = Js.Ffi.set this "width" (Js.Any.of_float x)
  let lines this = Js.Any.to_int (Js.Ffi.get this "lines")
  let set_lines this x = Js.Ffi.set this "lines" (Js.Any.of_int x)
  let region_anchor_x this = Js.Any.to_float (Js.Ffi.get this "regionAnchorX")

  let set_region_anchor_x this x =
    Js.Ffi.set this "regionAnchorX" (Js.Any.of_float x)

  let region_anchor_y this = Js.Any.to_float (Js.Ffi.get this "regionAnchorY")

  let set_region_anchor_y this x =
    Js.Ffi.set this "regionAnchorY" (Js.Any.of_float x)

  let viewport_anchor_x this =
    Js.Any.to_float (Js.Ffi.get this "viewportAnchorX")

  let set_viewport_anchor_x this x =
    Js.Ffi.set this "viewportAnchorX" (Js.Any.of_float x)

  let viewport_anchor_y this =
    Js.Any.to_float (Js.Ffi.get this "viewportAnchorY")

  let set_viewport_anchor_y this x =
    Js.Ffi.set this "viewportAnchorY" (Js.Any.of_float x)

  let scroll this = Scroll_setting.of_any (Js.Ffi.get this "scroll")
  let set_scroll this x = Js.Ffi.set this "scroll" (Scroll_setting.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion} \
   [VTTRegion] on MDN}."]

and Validity_state : sig
  type t = [ `Validity_state ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState} \
     [ValidityState]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val value_missing : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/valueMissing} \
     [valueMissing] on MDN}."]

  val type_mismatch : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/typeMismatch} \
     [typeMismatch] on MDN}."]

  val pattern_mismatch : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/patternMismatch} \
     [patternMismatch] on MDN}."]

  val too_long : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong} \
     [tooLong] on MDN}."]

  val too_short : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort} \
     [tooShort] on MDN}."]

  val range_underflow : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeUnderflow} \
     [rangeUnderflow] on MDN}."]

  val range_overflow : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeOverflow} \
     [rangeOverflow] on MDN}."]

  val step_mismatch : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/stepMismatch} \
     [stepMismatch] on MDN}."]

  val bad_input : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput} \
     [badInput] on MDN}."]

  val custom_error : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/customError} \
     [customError] on MDN}."]

  val valid : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/valid} \
     [valid] on MDN}."]
end = struct
  type t = [ `Validity_state ] Js.t

  let t = Js.Ffi.constr "ValidityState"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let value_missing this = Js.Any.to_bool (Js.Ffi.get this "valueMissing")
  let type_mismatch this = Js.Any.to_bool (Js.Ffi.get this "typeMismatch")
  let pattern_mismatch this = Js.Any.to_bool (Js.Ffi.get this "patternMismatch")
  let too_long this = Js.Any.to_bool (Js.Ffi.get this "tooLong")
  let too_short this = Js.Any.to_bool (Js.Ffi.get this "tooShort")
  let range_underflow this = Js.Any.to_bool (Js.Ffi.get this "rangeUnderflow")
  let range_overflow this = Js.Any.to_bool (Js.Ffi.get this "rangeOverflow")
  let step_mismatch this = Js.Any.to_bool (Js.Ffi.get this "stepMismatch")
  let bad_input this = Js.Any.to_bool (Js.Ffi.get this "badInput")
  let custom_error this = Js.Any.to_bool (Js.Ffi.get this "customError")
  let valid this = Js.Any.to_bool (Js.Ffi.get this "valid")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/ValidityState} \
   [ValidityState] on MDN}."]

and Video_track : sig
  type t = [ `Video_track ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack} \
     [VideoTrack]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val id : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/id} \
     [id] on MDN}."]

  val kind : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/kind} \
     [kind] on MDN}."]

  val label : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/label} \
     [label] on MDN}."]

  val language : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/language} \
     [language] on MDN}."]

  val selected : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/selected} \
     [selected] on MDN}."]

  val set_selected : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/selected} \
     [selected] on MDN}."]
end = struct
  type t = [ `Video_track ] Js.t

  let t = Js.Ffi.constr "VideoTrack"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let id this = Js.Any.to_string (Js.Ffi.get this "id")
  let kind this = Js.Any.to_string (Js.Ffi.get this "kind")
  let label this = Js.Any.to_string (Js.Ffi.get this "label")
  let language this = Js.Any.to_string (Js.Ffi.get this "language")
  let selected this = Js.Any.to_bool (Js.Ffi.get this "selected")
  let set_selected this x = Js.Ffi.set this "selected" (Js.Any.of_bool x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack} \
   [VideoTrack] on MDN}."]

and Video_track_list : sig
  type t = [ `Video_track_list ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList} \
     [VideoTrackList]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Video_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList} \
     [VideoTrackList]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/length} \
     [length] on MDN}."]

  val get : index:int -> t -> Video_track.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/get} \
     [get] on MDN}."]

  val get_track_by_id : id:string -> t -> Video_track.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/getTrackById} \
     [getTrackById] on MDN}."]

  val selected_index : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/selectedIndex} \
     [selectedIndex] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onchange} \
     [onchange] on MDN}."]

  val onaddtrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val set_onaddtrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onaddtrack} \
     [onaddtrack] on MDN}."]

  val onremovetrack : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]

  val set_onremovetrack : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onremovetrack} \
     [onremovetrack] on MDN}."]
end = struct
  type t = [ `Video_track_list ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Video_track_list | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList} \
     [VideoTrackList]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "VideoTrackList"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Video_track.of_any (Js.Ffi.meth_call this "get" [| index |])

  let get_track_by_id ~id this =
    let id = Js.Any.of_string id in
    (Js.Any.nullable_to_option Video_track.of_any)
      (Js.Ffi.meth_call this "getTrackById" [| id |])

  let selected_index this = Js.Any.to_int (Js.Ffi.get this "selectedIndex")
  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)
  let onaddtrack this = Event_handler.of_any (Js.Ffi.get this "onaddtrack")

  let set_onaddtrack this x =
    Js.Ffi.set this "onaddtrack" (Event_handler.to_any x)

  let onremovetrack this = Event_handler.of_any (Js.Ffi.get this "onremovetrack")

  let set_onremovetrack this x =
    Js.Ffi.set this "onremovetrack" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList} \
   [VideoTrackList] on MDN}."]

and Void_function : sig
  type t = unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Void_function

and Webgl_color_buffer_float : sig
  type t = [ `Webgl_color_buffer_float ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WEBGLColorBufferFloat} \
     [WEBGLColorBufferFloat]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val rgba32_f_ext : G_lenum.t
  val framebuffer_attachment_component_type_ext : G_lenum.t
  val unsigned_normalized_ext : G_lenum.t
end = struct
  type t = [ `Webgl_color_buffer_float ] Js.t

  let t = Js.Ffi.constr "WEBGLColorBufferFloat"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let rgba32_f_ext = 34836
  let framebuffer_attachment_component_type_ext = 33297
  let unsigned_normalized_ext = 35863
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WEBGLColorBufferFloat} \
   [WEBGLColorBufferFloat] on MDN}."]

and Webgl_compressed_texture_etc1 : sig
  type t = [ `Webgl_compressed_texture_etc1 ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WEBGLCompressedTextureETC1} \
     [WEBGLCompressedTextureETC1]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val compressed_rgb_etc1_webgl : G_lenum.t
end = struct
  type t = [ `Webgl_compressed_texture_etc1 ] Js.t

  let t = Js.Ffi.constr "WEBGLCompressedTextureETC1"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let compressed_rgb_etc1_webgl = 36196
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WEBGLCompressedTextureETC1} \
   [WEBGLCompressedTextureETC1] on MDN}."]

and Webgl_compressed_texture_s3_tc : sig
  type t = [ `Webgl_compressed_texture_s3_tc ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WEBGLCompressedTextureS3TC} \
     [WEBGLCompressedTextureS3TC]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val compressed_rgb_s3_tc_dxt1_ext : G_lenum.t
  val compressed_rgba_s3_tc_dxt1_ext : G_lenum.t
  val compressed_rgba_s3_tc_dxt3_ext : G_lenum.t
  val compressed_rgba_s3_tc_dxt5_ext : G_lenum.t
end = struct
  type t = [ `Webgl_compressed_texture_s3_tc ] Js.t

  let t = Js.Ffi.constr "WEBGLCompressedTextureS3TC"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let compressed_rgb_s3_tc_dxt1_ext = 33776
  let compressed_rgba_s3_tc_dxt1_ext = 33777
  let compressed_rgba_s3_tc_dxt3_ext = 33778
  let compressed_rgba_s3_tc_dxt5_ext = 33779
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WEBGLCompressedTextureS3TC} \
   [WEBGLCompressedTextureS3TC] on MDN}."]

and G_lint64 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lint64

and G_luint64 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_luint64

and Uint32_list : sig
  type t

  val with_uint32array : 'todo_buffer -> t
  val with_sequence : G_luint.t array -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_uint32array = Js.repr
  let with_sequence = Js.repr
end

and Web_gl2_rendering_context : sig
  type t = [ `Web_gl2_rendering_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext} \
     [WebGL2RenderingContext]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val read_pixels :
    x:G_lint.t ->
    y:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    dst_data:Array_buffer_view.t ->
    dst_offset:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readPixels} \
     [readPixels] on MDN}."]

  val read_pixels :
    x:G_lint.t ->
    y:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    offset:G_lintptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readPixels} \
     [readPixels] on MDN}."]

  val read_pixels :
    x:G_lint.t ->
    y:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    dst_data:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readPixels} \
     [readPixels] on MDN}."]

  val uniform_matrix4fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix4fv} \
     [uniformMatrix4fv] on MDN}."]

  val uniform_matrix3fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix3fv} \
     [uniformMatrix3fv] on MDN}."]

  val uniform_matrix2fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix2fv} \
     [uniformMatrix2fv] on MDN}."]

  val uniform4iv :
    location:Web_gl_uniform_location.t option ->
    data:Int32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform4iv} \
     [uniform4iv] on MDN}."]

  val uniform3iv :
    location:Web_gl_uniform_location.t option ->
    data:Int32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform3iv} \
     [uniform3iv] on MDN}."]

  val uniform2iv :
    location:Web_gl_uniform_location.t option ->
    data:Int32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform2iv} \
     [uniform2iv] on MDN}."]

  val uniform1iv :
    location:Web_gl_uniform_location.t option ->
    data:Int32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform1iv} \
     [uniform1iv] on MDN}."]

  val uniform4fv :
    location:Web_gl_uniform_location.t option ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform4fv} \
     [uniform4fv] on MDN}."]

  val uniform3fv :
    location:Web_gl_uniform_location.t option ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform3fv} \
     [uniform3fv] on MDN}."]

  val uniform2fv :
    location:Web_gl_uniform_location.t option ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform2fv} \
     [uniform2fv] on MDN}."]

  val uniform1fv :
    location:Web_gl_uniform_location.t option ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform1fv} \
     [uniform1fv] on MDN}."]

  val compressed_tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    src_data:Array_buffer_view.t ->
    ?src_offset:G_luint.t ->
    ?src_length_override:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage2D} \
     [compressedTexSubImage2D] on MDN}."]

  val compressed_tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lenum.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    src_data:Array_buffer_view.t ->
    ?src_offset:G_luint.t ->
    ?src_length_override:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexImage2D} \
     [compressedTexImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    src_data:Array_buffer_view.t ->
    src_offset:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    source:Tex_image_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pbo_offset:G_lintptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    source:Tex_image_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage2D} \
     [texSubImage2D] on MDN}."]

  val tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pixels:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage2D} \
     [texSubImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    source:Tex_image_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pixels:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val buffer_sub_data :
    target:G_lenum.t ->
    dst_byte_offset:G_lintptr.t ->
    src_data:Array_buffer_view.t ->
    src_offset:G_luint.t ->
    ?length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bufferSubData} \
     [bufferSubData] on MDN}."]

  val buffer_data :
    target:G_lenum.t ->
    src_data:Array_buffer_view.t ->
    usage:G_lenum.t ->
    src_offset:G_luint.t ->
    ?length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bufferData} \
     [bufferData] on MDN}."]

  val buffer_sub_data :
    target:G_lenum.t ->
    dst_byte_offset:G_lintptr.t ->
    src_data:Buffer_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bufferSubData} \
     [bufferSubData] on MDN}."]

  val buffer_data :
    target:G_lenum.t ->
    src_data:Buffer_source.t option ->
    usage:G_lenum.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bufferData} \
     [bufferData] on MDN}."]

  val buffer_data :
    target:G_lenum.t -> size:G_lsizeiptr.t -> usage:G_lenum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bufferData} \
     [bufferData] on MDN}."]

  val bind_vertex_array : array:Web_gl_vertex_array_object.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindVertexArray} \
     [bindVertexArray] on MDN}."]

  val is_vertex_array :
    vertex_array:Web_gl_vertex_array_object.t option -> t -> G_lboolean.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isVertexArray} \
     [isVertexArray] on MDN}."]

  val delete_vertex_array :
    vertex_array:Web_gl_vertex_array_object.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteVertexArray} \
     [deleteVertexArray] on MDN}."]

  val create_vertex_array : t -> 'a Web_gl_vertex_array_object.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createVertexArray} \
     [createVertexArray] on MDN}."]

  val uniform_block_binding :
    program:Web_gl_program.t ->
    uniform_block_index:G_luint.t ->
    uniform_block_binding:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding} \
     [uniformBlockBinding] on MDN}."]

  val get_active_uniform_block_name :
    program:Web_gl_program.t ->
    uniform_block_index:G_luint.t ->
    t ->
    string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName} \
     [getActiveUniformBlockName] on MDN}."]

  val get_active_uniform_block_parameter :
    program:Web_gl_program.t ->
    uniform_block_index:G_luint.t ->
    pname:G_lenum.t ->
    t ->
    Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter} \
     [getActiveUniformBlockParameter] on MDN}."]

  val get_uniform_block_index :
    program:Web_gl_program.t -> uniform_block_name:string -> t -> G_luint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex} \
     [getUniformBlockIndex] on MDN}."]

  val get_active_uniforms :
    program:Web_gl_program.t ->
    uniform_indices:G_luint.t array ->
    pname:G_lenum.t ->
    t ->
    Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms} \
     [getActiveUniforms] on MDN}."]

  val get_uniform_indices :
    program:Web_gl_program.t ->
    uniform_names:string array ->
    t ->
    G_luint.t array option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformIndices} \
     [getUniformIndices] on MDN}."]

  val get_indexed_parameter : target:G_lenum.t -> index:G_luint.t -> t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getIndexedParameter} \
     [getIndexedParameter] on MDN}."]

  val bind_buffer_range :
    target:G_lenum.t ->
    index:G_luint.t ->
    buffer:Web_gl_buffer.t option ->
    offset:G_lintptr.t ->
    size:G_lsizeiptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange} \
     [bindBufferRange] on MDN}."]

  val bind_buffer_base :
    target:G_lenum.t ->
    index:G_luint.t ->
    buffer:Web_gl_buffer.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferBase} \
     [bindBufferBase] on MDN}."]

  val resume_transform_feedback : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback} \
     [resumeTransformFeedback] on MDN}."]

  val pause_transform_feedback : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback} \
     [pauseTransformFeedback] on MDN}."]

  val get_transform_feedback_varying :
    program:Web_gl_program.t ->
    index:G_luint.t ->
    t ->
    Web_gl_active_info.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying} \
     [getTransformFeedbackVarying] on MDN}."]

  val transform_feedback_varyings :
    program:Web_gl_program.t ->
    varyings:string array ->
    buffer_mode:G_lenum.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings} \
     [transformFeedbackVaryings] on MDN}."]

  val end_transform_feedback : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endTransformFeedback} \
     [endTransformFeedback] on MDN}."]

  val begin_transform_feedback : primitive_mode:G_lenum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback} \
     [beginTransformFeedback] on MDN}."]

  val bind_transform_feedback :
    target:G_lenum.t -> tf:Web_gl_transform_feedback.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback} \
     [bindTransformFeedback] on MDN}."]

  val is_transform_feedback :
    tf:Web_gl_transform_feedback.t option -> t -> G_lboolean.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isTransformFeedback} \
     [isTransformFeedback] on MDN}."]

  val delete_transform_feedback :
    tf:Web_gl_transform_feedback.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback} \
     [deleteTransformFeedback] on MDN}."]

  val create_transform_feedback : t -> 'a Web_gl_transform_feedback.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createTransformFeedback} \
     [createTransformFeedback] on MDN}."]

  val get_sync_parameter : sync:Web_gl_sync.t -> pname:G_lenum.t -> t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSyncParameter} \
     [getSyncParameter] on MDN}."]

  val wait_sync :
    sync:Web_gl_sync.t -> flags:G_lbitfield.t -> timeout:G_lint64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/waitSync} \
     [waitSync] on MDN}."]

  val client_wait_sync :
    sync:Web_gl_sync.t ->
    flags:G_lbitfield.t ->
    timeout:G_luint64.t ->
    t ->
    G_lenum.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clientWaitSync} \
     [clientWaitSync] on MDN}."]

  val delete_sync : sync:Web_gl_sync.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSync} \
     [deleteSync] on MDN}."]

  val is_sync : sync:Web_gl_sync.t option -> t -> G_lboolean.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSync} \
     [isSync] on MDN}."]

  val fence_sync :
    condition:G_lenum.t ->
    flags:G_lbitfield.t ->
    t ->
    'a Web_gl_sync.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/fenceSync} \
     [fenceSync] on MDN}."]

  val get_sampler_parameter :
    sampler:Web_gl_sampler.t -> pname:G_lenum.t -> t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSamplerParameter} \
     [getSamplerParameter] on MDN}."]

  val sampler_parameterf :
    sampler:Web_gl_sampler.t -> pname:G_lenum.t -> param:G_lfloat.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameterf} \
     [samplerParameterf] on MDN}."]

  val sampler_parameteri :
    sampler:Web_gl_sampler.t -> pname:G_lenum.t -> param:G_lint.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameteri} \
     [samplerParameteri] on MDN}."]

  val bind_sampler :
    unit:G_luint.t -> sampler:Web_gl_sampler.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindSampler} \
     [bindSampler] on MDN}."]

  val is_sampler : sampler:Web_gl_sampler.t option -> t -> G_lboolean.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSampler} \
     [isSampler] on MDN}."]

  val delete_sampler : sampler:Web_gl_sampler.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSampler} \
     [deleteSampler] on MDN}."]

  val create_sampler : t -> 'a Web_gl_sampler.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createSampler} \
     [createSampler] on MDN}."]

  val get_query_parameter :
    query:Web_gl_query.t -> pname:G_lenum.t -> t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQueryParameter} \
     [getQueryParameter] on MDN}."]

  val get_query :
    target:G_lenum.t -> pname:G_lenum.t -> t -> 'a Web_gl_query.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQuery} \
     [getQuery] on MDN}."]

  val end_query : target:G_lenum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endQuery} \
     [endQuery] on MDN}."]

  val begin_query : target:G_lenum.t -> query:Web_gl_query.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginQuery} \
     [beginQuery] on MDN}."]

  val is_query : query:Web_gl_query.t option -> t -> G_lboolean.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isQuery} \
     [isQuery] on MDN}."]

  val delete_query : query:Web_gl_query.t option -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteQuery} \
     [deleteQuery] on MDN}."]

  val create_query : t -> 'a Web_gl_query.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createQuery} \
     [createQuery] on MDN}."]

  val clear_bufferfi :
    buffer:G_lenum.t ->
    drawbuffer:G_lint.t ->
    depth:G_lfloat.t ->
    stencil:G_lint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBufferfi} \
     [clearBufferfi] on MDN}."]

  val clear_bufferuiv :
    buffer:G_lenum.t ->
    drawbuffer:G_lint.t ->
    values:Uint32_list.t ->
    ?src_offset:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBufferuiv} \
     [clearBufferuiv] on MDN}."]

  val clear_bufferiv :
    buffer:G_lenum.t ->
    drawbuffer:G_lint.t ->
    values:Int32_list.t ->
    ?src_offset:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBufferiv} \
     [clearBufferiv] on MDN}."]

  val clear_bufferfv :
    buffer:G_lenum.t ->
    drawbuffer:G_lint.t ->
    values:Float32_list.t ->
    ?src_offset:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBufferfv} \
     [clearBufferfv] on MDN}."]

  val draw_buffers : buffers:G_lenum.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawBuffers} \
     [drawBuffers] on MDN}."]

  val draw_range_elements :
    mode:G_lenum.t ->
    start:G_luint.t ->
    end':G_luint.t ->
    count:G_lsizei.t ->
    type':G_lenum.t ->
    offset:G_lintptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawRangeElements} \
     [drawRangeElements] on MDN}."]

  val draw_elements_instanced :
    mode:G_lenum.t ->
    count:G_lsizei.t ->
    type':G_lenum.t ->
    offset:G_lintptr.t ->
    instance_count:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced} \
     [drawElementsInstanced] on MDN}."]

  val draw_arrays_instanced :
    mode:G_lenum.t ->
    first:G_lint.t ->
    count:G_lsizei.t ->
    instance_count:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced} \
     [drawArraysInstanced] on MDN}."]

  val vertex_attrib_divisor : index:G_luint.t -> divisor:G_luint.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor} \
     [vertexAttribDivisor] on MDN}."]

  val vertex_attrib_i_pointer :
    index:G_luint.t ->
    size:G_lint.t ->
    type':G_lenum.t ->
    stride:G_lsizei.t ->
    offset:G_lintptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer} \
     [vertexAttribIPointer] on MDN}."]

  val vertex_attrib_i4uiv : index:G_luint.t -> values:Uint32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI4uiv} \
     [vertexAttribI4uiv] on MDN}."]

  val vertex_attrib_i4ui :
    index:G_luint.t ->
    x:G_luint.t ->
    y:G_luint.t ->
    z:G_luint.t ->
    w:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI4ui} \
     [vertexAttribI4ui] on MDN}."]

  val vertex_attrib_i4iv : index:G_luint.t -> values:Int32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI4iv} \
     [vertexAttribI4iv] on MDN}."]

  val vertex_attrib_i4i :
    index:G_luint.t ->
    x:G_lint.t ->
    y:G_lint.t ->
    z:G_lint.t ->
    w:G_lint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI4i} \
     [vertexAttribI4i] on MDN}."]

  val uniform_matrix3x4fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix3x4fv} \
     [uniformMatrix3x4fv] on MDN}."]

  val uniform_matrix2x4fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix2x4fv} \
     [uniformMatrix2x4fv] on MDN}."]

  val uniform_matrix4x3fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix4x3fv} \
     [uniformMatrix4x3fv] on MDN}."]

  val uniform_matrix2x3fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix2x3fv} \
     [uniformMatrix2x3fv] on MDN}."]

  val uniform_matrix4x2fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix4x2fv} \
     [uniformMatrix4x2fv] on MDN}."]

  val uniform_matrix3x2fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    data:Float32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix3x2fv} \
     [uniformMatrix3x2fv] on MDN}."]

  val uniform4uiv :
    location:Web_gl_uniform_location.t option ->
    data:Uint32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform4uiv} \
     [uniform4uiv] on MDN}."]

  val uniform3uiv :
    location:Web_gl_uniform_location.t option ->
    data:Uint32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform3uiv} \
     [uniform3uiv] on MDN}."]

  val uniform2uiv :
    location:Web_gl_uniform_location.t option ->
    data:Uint32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform2uiv} \
     [uniform2uiv] on MDN}."]

  val uniform1uiv :
    location:Web_gl_uniform_location.t option ->
    data:Uint32_list.t ->
    ?src_offset:G_luint.t ->
    ?src_length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform1uiv} \
     [uniform1uiv] on MDN}."]

  val uniform4ui :
    location:Web_gl_uniform_location.t option ->
    v0:G_luint.t ->
    v1:G_luint.t ->
    v2:G_luint.t ->
    v3:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform4ui} \
     [uniform4ui] on MDN}."]

  val uniform3ui :
    location:Web_gl_uniform_location.t option ->
    v0:G_luint.t ->
    v1:G_luint.t ->
    v2:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform3ui} \
     [uniform3ui] on MDN}."]

  val uniform2ui :
    location:Web_gl_uniform_location.t option ->
    v0:G_luint.t ->
    v1:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform2ui} \
     [uniform2ui] on MDN}."]

  val uniform1ui :
    location:Web_gl_uniform_location.t option -> v0:G_luint.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform1ui} \
     [uniform1ui] on MDN}."]

  val get_frag_data_location :
    program:Web_gl_program.t -> name:string -> t -> G_lint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getFragDataLocation} \
     [getFragDataLocation] on MDN}."]

  val tex_storage3_d :
    target:G_lenum.t ->
    levels:G_lsizei.t ->
    internalformat:G_lenum.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    depth:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage3D} \
     [texStorage3D] on MDN}."]

  val tex_storage2_d :
    target:G_lenum.t ->
    levels:G_lsizei.t ->
    internalformat:G_lenum.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage2D} \
     [texStorage2D] on MDN}."]

  val renderbuffer_storage_multisample :
    target:G_lenum.t ->
    samples:G_lsizei.t ->
    internalformat:G_lenum.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample} \
     [renderbufferStorageMultisample] on MDN}."]

  val get_internalformat_parameter :
    target:G_lenum.t ->
    internalformat:G_lenum.t ->
    pname:G_lenum.t ->
    t ->
    Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter} \
     [getInternalformatParameter] on MDN}."]

  val read_buffer : src:G_lenum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readBuffer} \
     [readBuffer] on MDN}."]

  val invalidate_sub_framebuffer :
    target:G_lenum.t ->
    attachments:G_lenum.t array ->
    x:G_lint.t ->
    y:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer} \
     [invalidateSubFramebuffer] on MDN}."]

  val invalidate_framebuffer :
    target:G_lenum.t -> attachments:G_lenum.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer} \
     [invalidateFramebuffer] on MDN}."]

  val framebuffer_texture_layer :
    target:G_lenum.t ->
    attachment:G_lenum.t ->
    texture:Web_gl_texture.t option ->
    level:G_lint.t ->
    layer:G_lint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer} \
     [framebufferTextureLayer] on MDN}."]

  val get_buffer_sub_data :
    target:G_lenum.t ->
    src_byte_offset:G_lintptr.t ->
    dst_buffer:Array_buffer_view.t ->
    ?dst_offset:G_luint.t ->
    ?length:G_luint.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData} \
     [getBufferSubData] on MDN}."]

  val copy_buffer_sub_data :
    read_target:G_lenum.t ->
    write_target:G_lenum.t ->
    read_offset:G_lintptr.t ->
    write_offset:G_lintptr.t ->
    size:G_lsizeiptr.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyBufferSubData} \
     [copyBufferSubData] on MDN}."]

  val max_client_wait_timeout_webgl : G_lenum.t
  val timeout_ignored : G_lint64.t
  val texture_immutable_levels : G_lenum.t
  val max_element_index : G_lenum.t
  val texture_immutable_format : G_lenum.t
  val transform_feedback_binding : G_lenum.t
  val transform_feedback_active : G_lenum.t
  val transform_feedback_paused : G_lenum.t
  val transform_feedback : G_lenum.t
  val int_2_10_10_10_rev : G_lenum.t
  val rgb10_a2_ui : G_lenum.t
  val sampler_binding : G_lenum.t
  val any_samples_passed_conservative : G_lenum.t
  val any_samples_passed : G_lenum.t
  val vertex_attrib_array_divisor : G_lenum.t
  val sync_flush_commands_bit : G_lenum.t
  val wait_failed : G_lenum.t
  val condition_satisfied : G_lenum.t
  val timeout_expired : G_lenum.t
  val already_signaled : G_lenum.t
  val signaled : G_lenum.t
  val unsignaled : G_lenum.t
  val sync_gpu_commands_complete : G_lenum.t
  val sync_fence : G_lenum.t
  val sync_flags : G_lenum.t
  val sync_status : G_lenum.t
  val sync_condition : G_lenum.t
  val object_type : G_lenum.t
  val max_server_wait_timeout : G_lenum.t
  val max_fragment_input_components : G_lenum.t
  val max_vertex_output_components : G_lenum.t
  val invalid_index : G_lenum.t
  val uniform_block_referenced_by_fragment_shader : G_lenum.t
  val uniform_block_referenced_by_vertex_shader : G_lenum.t
  val uniform_block_active_uniform_indices : G_lenum.t
  val uniform_block_active_uniforms : G_lenum.t
  val uniform_block_data_size : G_lenum.t
  val uniform_block_binding : G_lenum.t
  val uniform_is_row_major : G_lenum.t
  val uniform_matrix_stride : G_lenum.t
  val uniform_array_stride : G_lenum.t
  val uniform_offset : G_lenum.t
  val uniform_block_index : G_lenum.t
  val uniform_size : G_lenum.t
  val uniform_type : G_lenum.t
  val active_uniform_blocks : G_lenum.t
  val uniform_buffer_offset_alignment : G_lenum.t
  val max_combined_fragment_uniform_components : G_lenum.t
  val max_combined_vertex_uniform_components : G_lenum.t
  val max_uniform_block_size : G_lenum.t
  val max_uniform_buffer_bindings : G_lenum.t
  val max_combined_uniform_blocks : G_lenum.t
  val max_fragment_uniform_blocks : G_lenum.t
  val max_vertex_uniform_blocks : G_lenum.t
  val uniform_buffer_size : G_lenum.t
  val uniform_buffer_start : G_lenum.t
  val uniform_buffer_binding : G_lenum.t
  val uniform_buffer : G_lenum.t
  val copy_write_buffer_binding : G_lenum.t
  val copy_read_buffer_binding : G_lenum.t
  val copy_write_buffer : G_lenum.t
  val copy_read_buffer : G_lenum.t
  val signed_normalized : G_lenum.t
  val rgba8_snorm : G_lenum.t
  val rgb8_snorm : G_lenum.t
  val rg8_snorm : G_lenum.t
  val r8_snorm : G_lenum.t
  val vertex_array_binding : G_lenum.t
  val rg32_ui : G_lenum.t
  val rg32_i : G_lenum.t
  val rg16_ui : G_lenum.t
  val rg16_i : G_lenum.t
  val rg8_ui : G_lenum.t
  val rg8_i : G_lenum.t
  val r32_ui : G_lenum.t
  val r32_i : G_lenum.t
  val r16_ui : G_lenum.t
  val r16_i : G_lenum.t
  val r8_ui : G_lenum.t
  val r8_i : G_lenum.t
  val rg32_f : G_lenum.t
  val rg16_f : G_lenum.t
  val r32_f : G_lenum.t
  val r16_f : G_lenum.t
  val rg8 : G_lenum.t
  val r8 : G_lenum.t
  val rg_integer : G_lenum.t
  val rg : G_lenum.t
  val half_float : G_lenum.t
  val max_samples : G_lenum.t
  val framebuffer_incomplete_multisample : G_lenum.t
  val color_attachment15 : G_lenum.t
  val color_attachment14 : G_lenum.t
  val color_attachment13 : G_lenum.t
  val color_attachment12 : G_lenum.t
  val color_attachment11 : G_lenum.t
  val color_attachment10 : G_lenum.t
  val color_attachment9 : G_lenum.t
  val color_attachment8 : G_lenum.t
  val color_attachment7 : G_lenum.t
  val color_attachment6 : G_lenum.t
  val color_attachment5 : G_lenum.t
  val color_attachment4 : G_lenum.t
  val color_attachment3 : G_lenum.t
  val color_attachment2 : G_lenum.t
  val color_attachment1 : G_lenum.t
  val max_color_attachments : G_lenum.t
  val framebuffer_attachment_texture_layer : G_lenum.t
  val renderbuffer_samples : G_lenum.t
  val read_framebuffer_binding : G_lenum.t
  val draw_framebuffer : G_lenum.t
  val read_framebuffer : G_lenum.t
  val draw_framebuffer_binding : G_lenum.t
  val unsigned_normalized : G_lenum.t
  val depth24_stencil8 : G_lenum.t
  val unsigned_int_24_8 : G_lenum.t
  val framebuffer_default : G_lenum.t
  val framebuffer_attachment_stencil_size : G_lenum.t
  val framebuffer_attachment_depth_size : G_lenum.t
  val framebuffer_attachment_alpha_size : G_lenum.t
  val framebuffer_attachment_blue_size : G_lenum.t
  val framebuffer_attachment_green_size : G_lenum.t
  val framebuffer_attachment_red_size : G_lenum.t
  val framebuffer_attachment_component_type : G_lenum.t
  val framebuffer_attachment_color_encoding : G_lenum.t
  val float_32_unsigned_int_24_8_rev : G_lenum.t
  val depth32_f_stencil8 : G_lenum.t
  val depth_component32_f : G_lenum.t
  val unsigned_int_sampler_2_d_array : G_lenum.t
  val unsigned_int_sampler_cube : G_lenum.t
  val unsigned_int_sampler_3_d : G_lenum.t
  val unsigned_int_sampler_2_d : G_lenum.t
  val int_sampler_2_d_array : G_lenum.t
  val int_sampler_cube : G_lenum.t
  val int_sampler_3_d : G_lenum.t
  val int_sampler_2_d : G_lenum.t
  val unsigned_int_vec4 : G_lenum.t
  val unsigned_int_vec3 : G_lenum.t
  val unsigned_int_vec2 : G_lenum.t
  val sampler_cube_shadow : G_lenum.t
  val sampler_2_d_array_shadow : G_lenum.t
  val sampler_2_d_array : G_lenum.t
  val rgba_integer : G_lenum.t
  val rgb_integer : G_lenum.t
  val red_integer : G_lenum.t
  val rgb8_i : G_lenum.t
  val rgba8_i : G_lenum.t
  val rgb16_i : G_lenum.t
  val rgba16_i : G_lenum.t
  val rgb32_i : G_lenum.t
  val rgba32_i : G_lenum.t
  val rgb8_ui : G_lenum.t
  val rgba8_ui : G_lenum.t
  val rgb16_ui : G_lenum.t
  val rgba16_ui : G_lenum.t
  val rgb32_ui : G_lenum.t
  val rgba32_ui : G_lenum.t
  val transform_feedback_buffer_binding : G_lenum.t
  val transform_feedback_buffer : G_lenum.t
  val separate_attribs : G_lenum.t
  val interleaved_attribs : G_lenum.t
  val max_transform_feedback_separate_attribs : G_lenum.t
  val max_transform_feedback_interleaved_components : G_lenum.t
  val rasterizer_discard : G_lenum.t
  val transform_feedback_primitives_written : G_lenum.t
  val transform_feedback_buffer_size : G_lenum.t
  val transform_feedback_buffer_start : G_lenum.t
  val transform_feedback_varyings : G_lenum.t
  val max_transform_feedback_separate_components : G_lenum.t
  val transform_feedback_buffer_mode : G_lenum.t
  val unsigned_int_5_9_9_9_rev : G_lenum.t
  val rgb9_e5 : G_lenum.t
  val unsigned_int_10_f_11_f_11_f_rev : G_lenum.t
  val r11_f_g11_f_b10_f : G_lenum.t
  val texture_binding_2_d_array : G_lenum.t
  val texture_2_d_array : G_lenum.t
  val max_varying_components : G_lenum.t
  val max_program_texel_offset : G_lenum.t
  val min_program_texel_offset : G_lenum.t
  val max_array_texture_layers : G_lenum.t
  val vertex_attrib_array_integer : G_lenum.t
  val rgb16_f : G_lenum.t
  val rgba16_f : G_lenum.t
  val rgb32_f : G_lenum.t
  val rgba32_f : G_lenum.t
  val compare_ref_to_texture : G_lenum.t
  val srgb8_alpha8 : G_lenum.t
  val srgb8 : G_lenum.t
  val srgb : G_lenum.t
  val float_mat4x3 : G_lenum.t
  val float_mat4x2 : G_lenum.t
  val float_mat3x4 : G_lenum.t
  val float_mat3x2 : G_lenum.t
  val float_mat2x4 : G_lenum.t
  val float_mat2x3 : G_lenum.t
  val pixel_unpack_buffer_binding : G_lenum.t
  val pixel_pack_buffer_binding : G_lenum.t
  val pixel_unpack_buffer : G_lenum.t
  val pixel_pack_buffer : G_lenum.t
  val fragment_shader_derivative_hint : G_lenum.t
  val sampler_2_d_shadow : G_lenum.t
  val sampler_3_d : G_lenum.t
  val max_vertex_uniform_components : G_lenum.t
  val max_fragment_uniform_components : G_lenum.t
  val draw_buffer15 : G_lenum.t
  val draw_buffer14 : G_lenum.t
  val draw_buffer13 : G_lenum.t
  val draw_buffer12 : G_lenum.t
  val draw_buffer11 : G_lenum.t
  val draw_buffer10 : G_lenum.t
  val draw_buffer9 : G_lenum.t
  val draw_buffer8 : G_lenum.t
  val draw_buffer7 : G_lenum.t
  val draw_buffer6 : G_lenum.t
  val draw_buffer5 : G_lenum.t
  val draw_buffer4 : G_lenum.t
  val draw_buffer3 : G_lenum.t
  val draw_buffer2 : G_lenum.t
  val draw_buffer1 : G_lenum.t
  val draw_buffer0 : G_lenum.t
  val max_draw_buffers : G_lenum.t
  val dynamic_copy : G_lenum.t
  val dynamic_read : G_lenum.t
  val static_copy : G_lenum.t
  val static_read : G_lenum.t
  val stream_copy : G_lenum.t
  val stream_read : G_lenum.t
  val query_result_available : G_lenum.t
  val query_result : G_lenum.t
  val current_query : G_lenum.t
  val texture_compare_func : G_lenum.t
  val texture_compare_mode : G_lenum.t
  val max_texture_lod_bias : G_lenum.t
  val depth_component24 : G_lenum.t
  val max : G_lenum.t
  val min : G_lenum.t
  val texture_max_level : G_lenum.t
  val texture_base_level : G_lenum.t
  val texture_max_lod : G_lenum.t
  val texture_min_lod : G_lenum.t
  val max_elements_indices : G_lenum.t
  val max_elements_vertices : G_lenum.t
  val unsigned_int_2_10_10_10_rev : G_lenum.t
  val max_3_d_texture_size : G_lenum.t
  val texture_wrap_r : G_lenum.t
  val texture_3_d : G_lenum.t
  val unpack_image_height : G_lenum.t
  val unpack_skip_images : G_lenum.t
  val texture_binding_3_d : G_lenum.t
  val rgb10_a2 : G_lenum.t
  val rgba8 : G_lenum.t
  val rgb8 : G_lenum.t
  val red : G_lenum.t
  val stencil : G_lenum.t
  val depth : G_lenum.t
  val color : G_lenum.t
  val pack_skip_pixels : G_lenum.t
  val pack_skip_rows : G_lenum.t
  val pack_row_length : G_lenum.t
  val unpack_skip_pixels : G_lenum.t
  val unpack_skip_rows : G_lenum.t
  val unpack_row_length : G_lenum.t
  val read_buffer : G_lenum.t
end = struct
  type t = [ `Web_gl2_rendering_context ] Js.t

  let t = Js.Ffi.constr "WebGL2RenderingContext"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let read_pixels ~x ~y ~width ~height ~format ~type' ~dst_data ~dst_offset this
      =
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let dst_data = Array_buffer_view.to_any dst_data in
    let dst_offset = G_luint.to_any dst_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "readPixels"
         [| x; y; width; height; format; type'; dst_data; dst_offset |]
      )

  let read_pixels ~x ~y ~width ~height ~format ~type' ~offset this =
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let offset = G_lintptr.to_any offset in
    Js.to_unit
      (Js.Ffi.meth_call this "readPixels"
         [| x; y; width; height; format; type'; offset |]
      )

  let read_pixels ~x ~y ~width ~height ~format ~type' ~dst_data this =
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let dst_data =
      (Js.Any.nullable_of_option Array_buffer_view.to_any) dst_data
    in
    Js.to_unit
      (Js.Ffi.meth_call this "readPixels"
         [| x; y; width; height; format; type'; dst_data |]
      )

  let uniform_matrix4fv ~location ~transpose ~data ?src_offset ?src_length this
      =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix4fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix3fv ~location ~transpose ~data ?src_offset ?src_length this
      =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix3fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix2fv ~location ~transpose ~data ?src_offset ?src_length this
      =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix2fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform4iv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Int32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform4iv"
         [| location; data; src_offset; src_length |]
      )

  let uniform3iv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Int32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform3iv"
         [| location; data; src_offset; src_length |]
      )

  let uniform2iv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Int32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform2iv"
         [| location; data; src_offset; src_length |]
      )

  let uniform1iv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Int32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform1iv"
         [| location; data; src_offset; src_length |]
      )

  let uniform4fv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform4fv"
         [| location; data; src_offset; src_length |]
      )

  let uniform3fv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform3fv"
         [| location; data; src_offset; src_length |]
      )

  let uniform2fv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform2fv"
         [| location; data; src_offset; src_length |]
      )

  let uniform1fv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform1fv"
         [| location; data; src_offset; src_length |]
      )

  let compressed_tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~width
      ~height ~format ~src_data ?src_offset ?src_length_override this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let src_data = Array_buffer_view.to_any src_data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length_override =
      (Js.Any.undefined_of_option G_luint.to_any) src_length_override
    in
    Js.to_unit
      (Js.Ffi.meth_call this "compressedTexSubImage2D"
         [|
           target;
           level;
           xoffset;
           yoffset;
           width;
           height;
           format;
           src_data;
           src_offset;
           src_length_override;
         |]
      )

  let compressed_tex_image2_d ~target ~level ~internalformat ~width ~height
      ~border ~src_data ?src_offset ?src_length_override this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lenum.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let src_data = Array_buffer_view.to_any src_data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length_override =
      (Js.Any.undefined_of_option G_luint.to_any) src_length_override
    in
    Js.to_unit
      (Js.Ffi.meth_call this "compressedTexImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           src_data;
           src_offset;
           src_length_override;
         |]
      )

  let tex_image2_d ~target ~level ~internalformat ~width ~height ~border ~format
      ~type' ~src_data ~src_offset this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let src_data = Array_buffer_view.to_any src_data in
    let src_offset = G_luint.to_any src_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           format;
           type';
           src_data;
           src_offset;
         |]
      )

  let tex_image2_d ~target ~level ~internalformat ~width ~height ~border ~format
      ~type' ~source this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let source = Tex_image_source.to_any source in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           format;
           type';
           source;
         |]
      )

  let tex_image2_d ~target ~level ~internalformat ~width ~height ~border ~format
      ~type' ~pbo_offset this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pbo_offset = G_lintptr.to_any pbo_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           format;
           type';
           pbo_offset;
         |]
      )

  let tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~format ~type' ~source
      this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let source = Tex_image_source.to_any source in
    Js.to_unit
      (Js.Ffi.meth_call this "texSubImage2D"
         [| target; level; xoffset; yoffset; format; type'; source |]
      )

  let tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~width ~height ~format
      ~type' ~pixels this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pixels = (Js.Any.nullable_of_option Array_buffer_view.to_any) pixels in
    Js.to_unit
      (Js.Ffi.meth_call this "texSubImage2D"
         [|
           target; level; xoffset; yoffset; width; height; format; type'; pixels;
         |]
      )

  let tex_image2_d ~target ~level ~internalformat ~format ~type' ~source this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let source = Tex_image_source.to_any source in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [| target; level; internalformat; format; type'; source |]
      )

  let tex_image2_d ~target ~level ~internalformat ~width ~height ~border ~format
      ~type' ~pixels this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pixels = (Js.Any.nullable_of_option Array_buffer_view.to_any) pixels in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           format;
           type';
           pixels;
         |]
      )

  let buffer_sub_data ~target ~dst_byte_offset ~src_data ~src_offset ?length
      this =
    let target = G_lenum.to_any target in
    let dst_byte_offset = G_lintptr.to_any dst_byte_offset in
    let src_data = Array_buffer_view.to_any src_data in
    let src_offset = G_luint.to_any src_offset in
    let length = (Js.Any.undefined_of_option G_luint.to_any) length in
    Js.to_unit
      (Js.Ffi.meth_call this "bufferSubData"
         [| target; dst_byte_offset; src_data; src_offset; length |]
      )

  let buffer_data ~target ~src_data ~usage ~src_offset ?length this =
    let target = G_lenum.to_any target in
    let src_data = Array_buffer_view.to_any src_data in
    let usage = G_lenum.to_any usage in
    let src_offset = G_luint.to_any src_offset in
    let length = (Js.Any.undefined_of_option G_luint.to_any) length in
    Js.to_unit
      (Js.Ffi.meth_call this "bufferData"
         [| target; src_data; usage; src_offset; length |]
      )

  let buffer_sub_data ~target ~dst_byte_offset ~src_data this =
    let target = G_lenum.to_any target in
    let dst_byte_offset = G_lintptr.to_any dst_byte_offset in
    let src_data = Buffer_source.to_any src_data in
    Js.to_unit
      (Js.Ffi.meth_call this "bufferSubData"
         [| target; dst_byte_offset; src_data |]
      )

  let buffer_data ~target ~src_data ~usage this =
    let target = G_lenum.to_any target in
    let src_data = (Js.Any.nullable_of_option Buffer_source.to_any) src_data in
    let usage = G_lenum.to_any usage in
    Js.to_unit (Js.Ffi.meth_call this "bufferData" [| target; src_data; usage |])

  let buffer_data ~target ~size ~usage this =
    let target = G_lenum.to_any target in
    let size = G_lsizeiptr.to_any size in
    let usage = G_lenum.to_any usage in
    Js.to_unit (Js.Ffi.meth_call this "bufferData" [| target; size; usage |])

  let bind_vertex_array ~array this =
    let array =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object.to_any) array
    in
    Js.to_unit (Js.Ffi.meth_call this "bindVertexArray" [| array |])

  let is_vertex_array ~vertex_array this =
    let vertex_array =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object.to_any) vertex_array
    in
    G_lboolean.of_any (Js.Ffi.meth_call this "isVertexArray" [| vertex_array |])

  let delete_vertex_array ~vertex_array this =
    let vertex_array =
      (Js.Any.nullable_of_option Web_gl_vertex_array_object.to_any) vertex_array
    in
    Js.to_unit (Js.Ffi.meth_call this "deleteVertexArray" [| vertex_array |])

  let create_vertex_array this =
    (Js.Any.nullable_to_option Web_gl_vertex_array_object.of_any)
      (Js.Ffi.meth_call this "createVertexArray" [||])

  let uniform_block_binding ~program ~uniform_block_index ~uniform_block_binding
      this =
    let program = Web_gl_program.to_any program in
    let uniform_block_index = G_luint.to_any uniform_block_index in
    let uniform_block_binding = G_luint.to_any uniform_block_binding in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformBlockBinding"
         [| program; uniform_block_index; uniform_block_binding |]
      )

  let get_active_uniform_block_name ~program ~uniform_block_index this =
    let program = Web_gl_program.to_any program in
    let uniform_block_index = G_luint.to_any uniform_block_index in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "getActiveUniformBlockName"
         [| program; uniform_block_index |]
      )

  let get_active_uniform_block_parameter ~program ~uniform_block_index ~pname
      this =
    let program = Web_gl_program.to_any program in
    let uniform_block_index = G_luint.to_any uniform_block_index in
    let pname = G_lenum.to_any pname in
    Js.to_any
      (Js.Ffi.meth_call this "getActiveUniformBlockParameter"
         [| program; uniform_block_index; pname |]
      )

  let get_uniform_block_index ~program ~uniform_block_name this =
    let program = Web_gl_program.to_any program in
    let uniform_block_name = Js.Any.of_string uniform_block_name in
    G_luint.of_any
      (Js.Ffi.meth_call this "getUniformBlockIndex"
         [| program; uniform_block_name |]
      )

  let get_active_uniforms ~program ~uniform_indices ~pname this =
    let program = Web_gl_program.to_any program in
    let uniform_indices = (Js.Any.of_array G_luint.to_any) uniform_indices in
    let pname = G_lenum.to_any pname in
    Js.to_any
      (Js.Ffi.meth_call this "getActiveUniforms"
         [| program; uniform_indices; pname |]
      )

  let get_uniform_indices ~program ~uniform_names this =
    let program = Web_gl_program.to_any program in
    let uniform_names = (Js.Any.of_array Js.Any.of_string) uniform_names in
    (Js.Any.nullable_to_option (Js.Any.to_array G_luint.of_any))
      (Js.Ffi.meth_call this "getUniformIndices" [| program; uniform_names |])

  let get_indexed_parameter ~target ~index this =
    let target = G_lenum.to_any target in
    let index = G_luint.to_any index in
    Js.to_any (Js.Ffi.meth_call this "getIndexedParameter" [| target; index |])

  let bind_buffer_range ~target ~index ~buffer ~offset ~size this =
    let target = G_lenum.to_any target in
    let index = G_luint.to_any index in
    let buffer = (Js.Any.nullable_of_option Web_gl_buffer.to_any) buffer in
    let offset = G_lintptr.to_any offset in
    let size = G_lsizeiptr.to_any size in
    Js.to_unit
      (Js.Ffi.meth_call this "bindBufferRange"
         [| target; index; buffer; offset; size |]
      )

  let bind_buffer_base ~target ~index ~buffer this =
    let target = G_lenum.to_any target in
    let index = G_luint.to_any index in
    let buffer = (Js.Any.nullable_of_option Web_gl_buffer.to_any) buffer in
    Js.to_unit
      (Js.Ffi.meth_call this "bindBufferBase" [| target; index; buffer |])

  let resume_transform_feedback this =
    Js.to_unit (Js.Ffi.meth_call this "resumeTransformFeedback" [||])

  let pause_transform_feedback this =
    Js.to_unit (Js.Ffi.meth_call this "pauseTransformFeedback" [||])

  let get_transform_feedback_varying ~program ~index this =
    let program = Web_gl_program.to_any program in
    let index = G_luint.to_any index in
    (Js.Any.nullable_to_option Web_gl_active_info.of_any)
      (Js.Ffi.meth_call this "getTransformFeedbackVarying" [| program; index |])

  let transform_feedback_varyings ~program ~varyings ~buffer_mode this =
    let program = Web_gl_program.to_any program in
    let varyings = (Js.Any.of_array Js.Any.of_string) varyings in
    let buffer_mode = G_lenum.to_any buffer_mode in
    Js.to_unit
      (Js.Ffi.meth_call this "transformFeedbackVaryings"
         [| program; varyings; buffer_mode |]
      )

  let end_transform_feedback this =
    Js.to_unit (Js.Ffi.meth_call this "endTransformFeedback" [||])

  let begin_transform_feedback ~primitive_mode this =
    let primitive_mode = G_lenum.to_any primitive_mode in
    Js.to_unit
      (Js.Ffi.meth_call this "beginTransformFeedback" [| primitive_mode |])

  let bind_transform_feedback ~target ~tf this =
    let target = G_lenum.to_any target in
    let tf = (Js.Any.nullable_of_option Web_gl_transform_feedback.to_any) tf in
    Js.to_unit (Js.Ffi.meth_call this "bindTransformFeedback" [| target; tf |])

  let is_transform_feedback ~tf this =
    let tf = (Js.Any.nullable_of_option Web_gl_transform_feedback.to_any) tf in
    G_lboolean.of_any (Js.Ffi.meth_call this "isTransformFeedback" [| tf |])

  let delete_transform_feedback ~tf this =
    let tf = (Js.Any.nullable_of_option Web_gl_transform_feedback.to_any) tf in
    Js.to_unit (Js.Ffi.meth_call this "deleteTransformFeedback" [| tf |])

  let create_transform_feedback this =
    (Js.Any.nullable_to_option Web_gl_transform_feedback.of_any)
      (Js.Ffi.meth_call this "createTransformFeedback" [||])

  let get_sync_parameter ~sync ~pname this =
    let sync = Web_gl_sync.to_any sync in
    let pname = G_lenum.to_any pname in
    Js.to_any (Js.Ffi.meth_call this "getSyncParameter" [| sync; pname |])

  let wait_sync ~sync ~flags ~timeout this =
    let sync = Web_gl_sync.to_any sync in
    let flags = G_lbitfield.to_any flags in
    let timeout = G_lint64.to_any timeout in
    Js.to_unit (Js.Ffi.meth_call this "waitSync" [| sync; flags; timeout |])

  let client_wait_sync ~sync ~flags ~timeout this =
    let sync = Web_gl_sync.to_any sync in
    let flags = G_lbitfield.to_any flags in
    let timeout = G_luint64.to_any timeout in
    G_lenum.of_any
      (Js.Ffi.meth_call this "clientWaitSync" [| sync; flags; timeout |])

  let delete_sync ~sync this =
    let sync = (Js.Any.nullable_of_option Web_gl_sync.to_any) sync in
    Js.to_unit (Js.Ffi.meth_call this "deleteSync" [| sync |])

  let is_sync ~sync this =
    let sync = (Js.Any.nullable_of_option Web_gl_sync.to_any) sync in
    G_lboolean.of_any (Js.Ffi.meth_call this "isSync" [| sync |])

  let fence_sync ~condition ~flags this =
    let condition = G_lenum.to_any condition in
    let flags = G_lbitfield.to_any flags in
    (Js.Any.nullable_to_option Web_gl_sync.of_any)
      (Js.Ffi.meth_call this "fenceSync" [| condition; flags |])

  let get_sampler_parameter ~sampler ~pname this =
    let sampler = Web_gl_sampler.to_any sampler in
    let pname = G_lenum.to_any pname in
    Js.to_any (Js.Ffi.meth_call this "getSamplerParameter" [| sampler; pname |])

  let sampler_parameterf ~sampler ~pname ~param this =
    let sampler = Web_gl_sampler.to_any sampler in
    let pname = G_lenum.to_any pname in
    let param = G_lfloat.to_any param in
    Js.to_unit
      (Js.Ffi.meth_call this "samplerParameterf" [| sampler; pname; param |])

  let sampler_parameteri ~sampler ~pname ~param this =
    let sampler = Web_gl_sampler.to_any sampler in
    let pname = G_lenum.to_any pname in
    let param = G_lint.to_any param in
    Js.to_unit
      (Js.Ffi.meth_call this "samplerParameteri" [| sampler; pname; param |])

  let bind_sampler ~unit ~sampler this =
    let unit = G_luint.to_any unit in
    let sampler = (Js.Any.nullable_of_option Web_gl_sampler.to_any) sampler in
    Js.to_unit (Js.Ffi.meth_call this "bindSampler" [| unit; sampler |])

  let is_sampler ~sampler this =
    let sampler = (Js.Any.nullable_of_option Web_gl_sampler.to_any) sampler in
    G_lboolean.of_any (Js.Ffi.meth_call this "isSampler" [| sampler |])

  let delete_sampler ~sampler this =
    let sampler = (Js.Any.nullable_of_option Web_gl_sampler.to_any) sampler in
    Js.to_unit (Js.Ffi.meth_call this "deleteSampler" [| sampler |])

  let create_sampler this =
    (Js.Any.nullable_to_option Web_gl_sampler.of_any)
      (Js.Ffi.meth_call this "createSampler" [||])

  let get_query_parameter ~query ~pname this =
    let query = Web_gl_query.to_any query in
    let pname = G_lenum.to_any pname in
    Js.to_any (Js.Ffi.meth_call this "getQueryParameter" [| query; pname |])

  let get_query ~target ~pname this =
    let target = G_lenum.to_any target in
    let pname = G_lenum.to_any pname in
    (Js.Any.nullable_to_option Web_gl_query.of_any)
      (Js.Ffi.meth_call this "getQuery" [| target; pname |])

  let end_query ~target this =
    let target = G_lenum.to_any target in
    Js.to_unit (Js.Ffi.meth_call this "endQuery" [| target |])

  let begin_query ~target ~query this =
    let target = G_lenum.to_any target in
    let query = Web_gl_query.to_any query in
    Js.to_unit (Js.Ffi.meth_call this "beginQuery" [| target; query |])

  let is_query ~query this =
    let query = (Js.Any.nullable_of_option Web_gl_query.to_any) query in
    G_lboolean.of_any (Js.Ffi.meth_call this "isQuery" [| query |])

  let delete_query ~query this =
    let query = (Js.Any.nullable_of_option Web_gl_query.to_any) query in
    Js.to_unit (Js.Ffi.meth_call this "deleteQuery" [| query |])

  let create_query this =
    (Js.Any.nullable_to_option Web_gl_query.of_any)
      (Js.Ffi.meth_call this "createQuery" [||])

  let clear_bufferfi ~buffer ~drawbuffer ~depth ~stencil this =
    let buffer = G_lenum.to_any buffer in
    let drawbuffer = G_lint.to_any drawbuffer in
    let depth = G_lfloat.to_any depth in
    let stencil = G_lint.to_any stencil in
    Js.to_unit
      (Js.Ffi.meth_call this "clearBufferfi"
         [| buffer; drawbuffer; depth; stencil |]
      )

  let clear_bufferuiv ~buffer ~drawbuffer ~values ?src_offset this =
    let buffer = G_lenum.to_any buffer in
    let drawbuffer = G_lint.to_any drawbuffer in
    let values = Uint32_list.to_any values in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "clearBufferuiv"
         [| buffer; drawbuffer; values; src_offset |]
      )

  let clear_bufferiv ~buffer ~drawbuffer ~values ?src_offset this =
    let buffer = G_lenum.to_any buffer in
    let drawbuffer = G_lint.to_any drawbuffer in
    let values = Int32_list.to_any values in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "clearBufferiv"
         [| buffer; drawbuffer; values; src_offset |]
      )

  let clear_bufferfv ~buffer ~drawbuffer ~values ?src_offset this =
    let buffer = G_lenum.to_any buffer in
    let drawbuffer = G_lint.to_any drawbuffer in
    let values = Float32_list.to_any values in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "clearBufferfv"
         [| buffer; drawbuffer; values; src_offset |]
      )

  let draw_buffers ~buffers this =
    let buffers = (Js.Any.of_array G_lenum.to_any) buffers in
    Js.to_unit (Js.Ffi.meth_call this "drawBuffers" [| buffers |])

  let draw_range_elements ~mode ~start ~end' ~count ~type' ~offset this =
    let mode = G_lenum.to_any mode in
    let start = G_luint.to_any start in
    let end' = G_luint.to_any end' in
    let count = G_lsizei.to_any count in
    let type' = G_lenum.to_any type' in
    let offset = G_lintptr.to_any offset in
    Js.to_unit
      (Js.Ffi.meth_call this "drawRangeElements"
         [| mode; start; end'; count; type'; offset |]
      )

  let draw_elements_instanced ~mode ~count ~type' ~offset ~instance_count this =
    let mode = G_lenum.to_any mode in
    let count = G_lsizei.to_any count in
    let type' = G_lenum.to_any type' in
    let offset = G_lintptr.to_any offset in
    let instance_count = G_lsizei.to_any instance_count in
    Js.to_unit
      (Js.Ffi.meth_call this "drawElementsInstanced"
         [| mode; count; type'; offset; instance_count |]
      )

  let draw_arrays_instanced ~mode ~first ~count ~instance_count this =
    let mode = G_lenum.to_any mode in
    let first = G_lint.to_any first in
    let count = G_lsizei.to_any count in
    let instance_count = G_lsizei.to_any instance_count in
    Js.to_unit
      (Js.Ffi.meth_call this "drawArraysInstanced"
         [| mode; first; count; instance_count |]
      )

  let vertex_attrib_divisor ~index ~divisor this =
    let index = G_luint.to_any index in
    let divisor = G_luint.to_any divisor in
    Js.to_unit (Js.Ffi.meth_call this "vertexAttribDivisor" [| index; divisor |])

  let vertex_attrib_i_pointer ~index ~size ~type' ~stride ~offset this =
    let index = G_luint.to_any index in
    let size = G_lint.to_any size in
    let type' = G_lenum.to_any type' in
    let stride = G_lsizei.to_any stride in
    let offset = G_lintptr.to_any offset in
    Js.to_unit
      (Js.Ffi.meth_call this "vertexAttribIPointer"
         [| index; size; type'; stride; offset |]
      )

  let vertex_attrib_i4uiv ~index ~values this =
    let index = G_luint.to_any index in
    let values = Uint32_list.to_any values in
    Js.to_unit (Js.Ffi.meth_call this "vertexAttribI4uiv" [| index; values |])

  let vertex_attrib_i4ui ~index ~x ~y ~z ~w this =
    let index = G_luint.to_any index in
    let x = G_luint.to_any x in
    let y = G_luint.to_any y in
    let z = G_luint.to_any z in
    let w = G_luint.to_any w in
    Js.to_unit (Js.Ffi.meth_call this "vertexAttribI4ui" [| index; x; y; z; w |])

  let vertex_attrib_i4iv ~index ~values this =
    let index = G_luint.to_any index in
    let values = Int32_list.to_any values in
    Js.to_unit (Js.Ffi.meth_call this "vertexAttribI4iv" [| index; values |])

  let vertex_attrib_i4i ~index ~x ~y ~z ~w this =
    let index = G_luint.to_any index in
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let z = G_lint.to_any z in
    let w = G_lint.to_any w in
    Js.to_unit (Js.Ffi.meth_call this "vertexAttribI4i" [| index; x; y; z; w |])

  let uniform_matrix3x4fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix3x4fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix2x4fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix2x4fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix4x3fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix4x3fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix2x3fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix2x3fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix4x2fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix4x2fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform_matrix3x2fv ~location ~transpose ~data ?src_offset ?src_length
      this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let data = Float32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix3x2fv"
         [| location; transpose; data; src_offset; src_length |]
      )

  let uniform4uiv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Uint32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform4uiv"
         [| location; data; src_offset; src_length |]
      )

  let uniform3uiv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Uint32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform3uiv"
         [| location; data; src_offset; src_length |]
      )

  let uniform2uiv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Uint32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform2uiv"
         [| location; data; src_offset; src_length |]
      )

  let uniform1uiv ~location ~data ?src_offset ?src_length this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let data = Uint32_list.to_any data in
    let src_offset = (Js.Any.undefined_of_option G_luint.to_any) src_offset in
    let src_length = (Js.Any.undefined_of_option G_luint.to_any) src_length in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform1uiv"
         [| location; data; src_offset; src_length |]
      )

  let uniform4ui ~location ~v0 ~v1 ~v2 ~v3 this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v0 = G_luint.to_any v0 in
    let v1 = G_luint.to_any v1 in
    let v2 = G_luint.to_any v2 in
    let v3 = G_luint.to_any v3 in
    Js.to_unit
      (Js.Ffi.meth_call this "uniform4ui" [| location; v0; v1; v2; v3 |])

  let uniform3ui ~location ~v0 ~v1 ~v2 this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v0 = G_luint.to_any v0 in
    let v1 = G_luint.to_any v1 in
    let v2 = G_luint.to_any v2 in
    Js.to_unit (Js.Ffi.meth_call this "uniform3ui" [| location; v0; v1; v2 |])

  let uniform2ui ~location ~v0 ~v1 this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v0 = G_luint.to_any v0 in
    let v1 = G_luint.to_any v1 in
    Js.to_unit (Js.Ffi.meth_call this "uniform2ui" [| location; v0; v1 |])

  let uniform1ui ~location ~v0 this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v0 = G_luint.to_any v0 in
    Js.to_unit (Js.Ffi.meth_call this "uniform1ui" [| location; v0 |])

  let get_frag_data_location ~program ~name this =
    let program = Web_gl_program.to_any program in
    let name = Js.Any.of_string name in
    G_lint.of_any
      (Js.Ffi.meth_call this "getFragDataLocation" [| program; name |])

  let tex_storage3_d ~target ~levels ~internalformat ~width ~height ~depth this
      =
    let target = G_lenum.to_any target in
    let levels = G_lsizei.to_any levels in
    let internalformat = G_lenum.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let depth = G_lsizei.to_any depth in
    Js.to_unit
      (Js.Ffi.meth_call this "texStorage3D"
         [| target; levels; internalformat; width; height; depth |]
      )

  let tex_storage2_d ~target ~levels ~internalformat ~width ~height this =
    let target = G_lenum.to_any target in
    let levels = G_lsizei.to_any levels in
    let internalformat = G_lenum.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    Js.to_unit
      (Js.Ffi.meth_call this "texStorage2D"
         [| target; levels; internalformat; width; height |]
      )

  let renderbuffer_storage_multisample ~target ~samples ~internalformat ~width
      ~height this =
    let target = G_lenum.to_any target in
    let samples = G_lsizei.to_any samples in
    let internalformat = G_lenum.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    Js.to_unit
      (Js.Ffi.meth_call this "renderbufferStorageMultisample"
         [| target; samples; internalformat; width; height |]
      )

  let get_internalformat_parameter ~target ~internalformat ~pname this =
    let target = G_lenum.to_any target in
    let internalformat = G_lenum.to_any internalformat in
    let pname = G_lenum.to_any pname in
    Js.to_any
      (Js.Ffi.meth_call this "getInternalformatParameter"
         [| target; internalformat; pname |]
      )

  let read_buffer ~src this =
    let src = G_lenum.to_any src in
    Js.to_unit (Js.Ffi.meth_call this "readBuffer" [| src |])

  let invalidate_sub_framebuffer ~target ~attachments ~x ~y ~width ~height this
      =
    let target = G_lenum.to_any target in
    let attachments = (Js.Any.of_array G_lenum.to_any) attachments in
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    Js.to_unit
      (Js.Ffi.meth_call this "invalidateSubFramebuffer"
         [| target; attachments; x; y; width; height |]
      )

  let invalidate_framebuffer ~target ~attachments this =
    let target = G_lenum.to_any target in
    let attachments = (Js.Any.of_array G_lenum.to_any) attachments in
    Js.to_unit
      (Js.Ffi.meth_call this "invalidateFramebuffer" [| target; attachments |])

  let framebuffer_texture_layer ~target ~attachment ~texture ~level ~layer this
      =
    let target = G_lenum.to_any target in
    let attachment = G_lenum.to_any attachment in
    let texture = (Js.Any.nullable_of_option Web_gl_texture.to_any) texture in
    let level = G_lint.to_any level in
    let layer = G_lint.to_any layer in
    Js.to_unit
      (Js.Ffi.meth_call this "framebufferTextureLayer"
         [| target; attachment; texture; level; layer |]
      )

  let get_buffer_sub_data ~target ~src_byte_offset ~dst_buffer ?dst_offset
      ?length this =
    let target = G_lenum.to_any target in
    let src_byte_offset = G_lintptr.to_any src_byte_offset in
    let dst_buffer = Array_buffer_view.to_any dst_buffer in
    let dst_offset = (Js.Any.undefined_of_option G_luint.to_any) dst_offset in
    let length = (Js.Any.undefined_of_option G_luint.to_any) length in
    Js.to_unit
      (Js.Ffi.meth_call this "getBufferSubData"
         [| target; src_byte_offset; dst_buffer; dst_offset; length |]
      )

  let copy_buffer_sub_data ~read_target ~write_target ~read_offset ~write_offset
      ~size this =
    let read_target = G_lenum.to_any read_target in
    let write_target = G_lenum.to_any write_target in
    let read_offset = G_lintptr.to_any read_offset in
    let write_offset = G_lintptr.to_any write_offset in
    let size = G_lsizeiptr.to_any size in
    Js.to_unit
      (Js.Ffi.meth_call this "copyBufferSubData"
         [| read_target; write_target; read_offset; write_offset; size |]
      )

  let max_client_wait_timeout_webgl = 37447
  let timeout_ignored = -1
  let texture_immutable_levels = 33503
  let max_element_index = 36203
  let texture_immutable_format = 37167
  let transform_feedback_binding = 36389
  let transform_feedback_active = 36388
  let transform_feedback_paused = 36387
  let transform_feedback = 36386
  let int_2_10_10_10_rev = 36255
  let rgb10_a2_ui = 36975
  let sampler_binding = 35097
  let any_samples_passed_conservative = 36202
  let any_samples_passed = 35887
  let vertex_attrib_array_divisor = 35070
  let sync_flush_commands_bit = 1
  let wait_failed = 37149
  let condition_satisfied = 37148
  let timeout_expired = 37147
  let already_signaled = 37146
  let signaled = 37145
  let unsignaled = 37144
  let sync_gpu_commands_complete = 37143
  let sync_fence = 37142
  let sync_flags = 37141
  let sync_status = 37140
  let sync_condition = 37139
  let object_type = 37138
  let max_server_wait_timeout = 37137
  let max_fragment_input_components = 37157
  let max_vertex_output_components = 37154
  let invalid_index = 4294967295
  let uniform_block_referenced_by_fragment_shader = 35398
  let uniform_block_referenced_by_vertex_shader = 35396
  let uniform_block_active_uniform_indices = 35395
  let uniform_block_active_uniforms = 35394
  let uniform_block_data_size = 35392
  let uniform_block_binding = 35391
  let uniform_is_row_major = 35390
  let uniform_matrix_stride = 35389
  let uniform_array_stride = 35388
  let uniform_offset = 35387
  let uniform_block_index = 35386
  let uniform_size = 35384
  let uniform_type = 35383
  let active_uniform_blocks = 35382
  let uniform_buffer_offset_alignment = 35380
  let max_combined_fragment_uniform_components = 35379
  let max_combined_vertex_uniform_components = 35377
  let max_uniform_block_size = 35376
  let max_uniform_buffer_bindings = 35375
  let max_combined_uniform_blocks = 35374
  let max_fragment_uniform_blocks = 35373
  let max_vertex_uniform_blocks = 35371
  let uniform_buffer_size = 35370
  let uniform_buffer_start = 35369
  let uniform_buffer_binding = 35368
  let uniform_buffer = 35345
  let copy_write_buffer_binding = 36663
  let copy_read_buffer_binding = 36662
  let copy_write_buffer = 36663
  let copy_read_buffer = 36662
  let signed_normalized = 36764
  let rgba8_snorm = 36759
  let rgb8_snorm = 36758
  let rg8_snorm = 36757
  let r8_snorm = 36756
  let vertex_array_binding = 34229
  let rg32_ui = 33340
  let rg32_i = 33339
  let rg16_ui = 33338
  let rg16_i = 33337
  let rg8_ui = 33336
  let rg8_i = 33335
  let r32_ui = 33334
  let r32_i = 33333
  let r16_ui = 33332
  let r16_i = 33331
  let r8_ui = 33330
  let r8_i = 33329
  let rg32_f = 33328
  let rg16_f = 33327
  let r32_f = 33326
  let r16_f = 33325
  let rg8 = 33323
  let r8 = 33321
  let rg_integer = 33320
  let rg = 33319
  let half_float = 5131
  let max_samples = 36183
  let framebuffer_incomplete_multisample = 36182
  let color_attachment15 = 36079
  let color_attachment14 = 36078
  let color_attachment13 = 36077
  let color_attachment12 = 36076
  let color_attachment11 = 36075
  let color_attachment10 = 36074
  let color_attachment9 = 36073
  let color_attachment8 = 36072
  let color_attachment7 = 36071
  let color_attachment6 = 36070
  let color_attachment5 = 36069
  let color_attachment4 = 36068
  let color_attachment3 = 36067
  let color_attachment2 = 36066
  let color_attachment1 = 36065
  let max_color_attachments = 36063
  let framebuffer_attachment_texture_layer = 36052
  let renderbuffer_samples = 36011
  let read_framebuffer_binding = 36010
  let draw_framebuffer = 36009
  let read_framebuffer = 36008
  let draw_framebuffer_binding = 36006
  let unsigned_normalized = 35863
  let depth24_stencil8 = 35056
  let unsigned_int_24_8 = 34042
  let framebuffer_default = 33304
  let framebuffer_attachment_stencil_size = 33303
  let framebuffer_attachment_depth_size = 33302
  let framebuffer_attachment_alpha_size = 33301
  let framebuffer_attachment_blue_size = 33300
  let framebuffer_attachment_green_size = 33299
  let framebuffer_attachment_red_size = 33298
  let framebuffer_attachment_component_type = 33297
  let framebuffer_attachment_color_encoding = 33296
  let float_32_unsigned_int_24_8_rev = 36269
  let depth32_f_stencil8 = 36013
  let depth_component32_f = 36012
  let unsigned_int_sampler_2_d_array = 36311
  let unsigned_int_sampler_cube = 36308
  let unsigned_int_sampler_3_d = 36307
  let unsigned_int_sampler_2_d = 36306
  let int_sampler_2_d_array = 36303
  let int_sampler_cube = 36300
  let int_sampler_3_d = 36299
  let int_sampler_2_d = 36298
  let unsigned_int_vec4 = 36296
  let unsigned_int_vec3 = 36295
  let unsigned_int_vec2 = 36294
  let sampler_cube_shadow = 36293
  let sampler_2_d_array_shadow = 36292
  let sampler_2_d_array = 36289
  let rgba_integer = 36249
  let rgb_integer = 36248
  let red_integer = 36244
  let rgb8_i = 36239
  let rgba8_i = 36238
  let rgb16_i = 36233
  let rgba16_i = 36232
  let rgb32_i = 36227
  let rgba32_i = 36226
  let rgb8_ui = 36221
  let rgba8_ui = 36220
  let rgb16_ui = 36215
  let rgba16_ui = 36214
  let rgb32_ui = 36209
  let rgba32_ui = 36208
  let transform_feedback_buffer_binding = 35983
  let transform_feedback_buffer = 35982
  let separate_attribs = 35981
  let interleaved_attribs = 35980
  let max_transform_feedback_separate_attribs = 35979
  let max_transform_feedback_interleaved_components = 35978
  let rasterizer_discard = 35977
  let transform_feedback_primitives_written = 35976
  let transform_feedback_buffer_size = 35973
  let transform_feedback_buffer_start = 35972
  let transform_feedback_varyings = 35971
  let max_transform_feedback_separate_components = 35968
  let transform_feedback_buffer_mode = 35967
  let unsigned_int_5_9_9_9_rev = 35902
  let rgb9_e5 = 35901
  let unsigned_int_10_f_11_f_11_f_rev = 35899
  let r11_f_g11_f_b10_f = 35898
  let texture_binding_2_d_array = 35869
  let texture_2_d_array = 35866
  let max_varying_components = 35659
  let max_program_texel_offset = 35077
  let min_program_texel_offset = 35076
  let max_array_texture_layers = 35071
  let vertex_attrib_array_integer = 35069
  let rgb16_f = 34843
  let rgba16_f = 34842
  let rgb32_f = 34837
  let rgba32_f = 34836
  let compare_ref_to_texture = 34894
  let srgb8_alpha8 = 35907
  let srgb8 = 35905
  let srgb = 35904
  let float_mat4x3 = 35690
  let float_mat4x2 = 35689
  let float_mat3x4 = 35688
  let float_mat3x2 = 35687
  let float_mat2x4 = 35686
  let float_mat2x3 = 35685
  let pixel_unpack_buffer_binding = 35055
  let pixel_pack_buffer_binding = 35053
  let pixel_unpack_buffer = 35052
  let pixel_pack_buffer = 35051
  let fragment_shader_derivative_hint = 35723
  let sampler_2_d_shadow = 35682
  let sampler_3_d = 35679
  let max_vertex_uniform_components = 35658
  let max_fragment_uniform_components = 35657
  let draw_buffer15 = 34868
  let draw_buffer14 = 34867
  let draw_buffer13 = 34866
  let draw_buffer12 = 34865
  let draw_buffer11 = 34864
  let draw_buffer10 = 34863
  let draw_buffer9 = 34862
  let draw_buffer8 = 34861
  let draw_buffer7 = 34860
  let draw_buffer6 = 34859
  let draw_buffer5 = 34858
  let draw_buffer4 = 34857
  let draw_buffer3 = 34856
  let draw_buffer2 = 34855
  let draw_buffer1 = 34854
  let draw_buffer0 = 34853
  let max_draw_buffers = 34852
  let dynamic_copy = 35050
  let dynamic_read = 35049
  let static_copy = 35046
  let static_read = 35045
  let stream_copy = 35042
  let stream_read = 35041
  let query_result_available = 34919
  let query_result = 34918
  let current_query = 34917
  let texture_compare_func = 34893
  let texture_compare_mode = 34892
  let max_texture_lod_bias = 34045
  let depth_component24 = 33190
  let max = 32776
  let min = 32775
  let texture_max_level = 33085
  let texture_base_level = 33084
  let texture_max_lod = 33083
  let texture_min_lod = 33082
  let max_elements_indices = 33001
  let max_elements_vertices = 33000
  let unsigned_int_2_10_10_10_rev = 33640
  let max_3_d_texture_size = 32883
  let texture_wrap_r = 32882
  let texture_3_d = 32879
  let unpack_image_height = 32878
  let unpack_skip_images = 32877
  let texture_binding_3_d = 32874
  let rgb10_a2 = 32857
  let rgba8 = 32856
  let rgb8 = 32849
  let red = 6403
  let stencil = 6146
  let depth = 6145
  let color = 6144
  let pack_skip_pixels = 3332
  let pack_skip_rows = 3331
  let pack_row_length = 3330
  let unpack_skip_pixels = 3316
  let unpack_skip_rows = 3315
  let unpack_row_length = 3314
  let read_buffer = 3074
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext} \
   [WebGL2RenderingContext] on MDN}."]

and Web_gl_active_info : sig
  type t = [ `Web_gl_active_info ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo} \
     [WebGLActiveInfo]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val size : t -> G_lint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/size} \
     [size] on MDN}."]

  val type' : t -> G_lenum.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/type} \
     [type] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/name} \
     [name] on MDN}."]
end = struct
  type t = [ `Web_gl_active_info ] Js.t

  let t = Js.Ffi.constr "WebGLActiveInfo"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let size this = G_lint.of_any (Js.Ffi.get this "size")
  let type' this = G_lenum.of_any (Js.Ffi.get this "type")
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo} \
   [WebGLActiveInfo] on MDN}."]

and Web_gl_buffer : sig
  type t = [ `Web_gl_buffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer} \
     [WebGLBuffer]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_buffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer} \
     [WebGLBuffer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_buffer ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_buffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer} \
     [WebGLBuffer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLBuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer} \
   [WebGLBuffer] on MDN}."]

and Web_gl_context_event : sig
  type t = [ `Web_gl_context_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent} \
     [WebGLContextEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_context_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent} \
     [WebGLContextEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init :
    type':string -> ?event_init:Web_gl_context_event_init.t -> unit -> 'a super

  val status_message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent/statusMessage} \
     [statusMessage] on MDN}."]
end = struct
  type t = [ `Web_gl_context_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_context_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent} \
     [WebGLContextEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLContextEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init ~type' ?event_init () =
    let type' = Js.Any.of_string type' in
    let event_init =
      (Js.Any.undefined_of_option Web_gl_context_event_init.to_any) event_init
    in
    Js.Ffi.obj_new t [| type'; event_init |]

  let status_message this = Js.Any.to_string (Js.Ffi.get this "statusMessage")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent} \
   [WebGLContextEvent] on MDN}."]

and Web_gl_context_event_init : sig
  type t [@@ocaml.doc "The type for the [WebGLContextEventInit] dictionary."]

  val make : ?status_message:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val status_message : t -> string option
end = struct
  type t = Js.any

  let make ?status_message () =
    let status_message =
      (Js.Any.nullable_of_option Js.Any.of_string) status_message
    in
    Js.Ffi.obj [| ("statusMessage", status_message) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let status_message this =
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.get this "statusMessage")
end

and Web_gl_framebuffer : sig
  type t = [ `Web_gl_framebuffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer} \
     [WebGLFramebuffer]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_framebuffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer} \
     [WebGLFramebuffer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_framebuffer ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_framebuffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer} \
     [WebGLFramebuffer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLFramebuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer} \
   [WebGLFramebuffer] on MDN}."]

and Web_gl_object : sig
  type t = [ `Web_gl_object ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLObject} \
     [WebGLObject]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_object ] Js.t

  let t = Js.Ffi.constr "WebGLObject"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLObject} \
   [WebGLObject] on MDN}."]

and Web_gl_program : sig
  type t = [ `Web_gl_program ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram} \
     [WebGLProgram]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_program | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram} \
     [WebGLProgram]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_program ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_program | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram} \
     [WebGLProgram]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLProgram"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram} \
   [WebGLProgram] on MDN}."]

and Web_gl_query : sig
  type t = [ `Web_gl_query ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery} \
     [WebGLQuery]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_query | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery} \
     [WebGLQuery]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_query ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_query | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery} \
     [WebGLQuery]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLQuery"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery} \
   [WebGLQuery] on MDN}."]

and Web_gl_renderbuffer : sig
  type t = [ `Web_gl_renderbuffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer} \
     [WebGLRenderbuffer]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_renderbuffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer} \
     [WebGLRenderbuffer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_renderbuffer ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_renderbuffer | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer} \
     [WebGLRenderbuffer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLRenderbuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer} \
   [WebGLRenderbuffer] on MDN}."]

and G_lenum : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lenum

and G_lboolean : sig
  type nonrec t = bool

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lboolean

and G_lbitfield : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lbitfield

and G_lbyte : sig
  type nonrec t = char

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lbyte

and G_lshort : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lshort

and G_lint : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lint

and G_lsizei : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lsizei

and G_lintptr : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lintptr

and G_lsizeiptr : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lsizeiptr

and G_lubyte : sig
  type nonrec t = char

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lubyte

and G_lushort : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lushort

and G_luint : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_luint

and G_lfloat : sig
  type nonrec t = float

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lfloat

and G_lclampf : sig
  type nonrec t = float

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  G_lclampf

and Tex_image_source : sig
  type t

  val with_image_data : Image_data.t -> t
  val with_html_image_element : Html_image_element.t -> t
  val with_html_canvas_element : Html_canvas_element.t -> t
  val with_html_video_element : Html_video_element.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_image_data = Js.repr
  let with_html_image_element = Js.repr
  let with_html_canvas_element = Js.repr
  let with_html_video_element = Js.repr
end

and Float32_list : sig
  type t

  val with_float32array : 'todo_buffer -> t
  val with_sequence : G_lfloat.t array -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_float32array = Js.repr
  let with_sequence = Js.repr
end

and Int32_list : sig
  type t

  val with_int32array : 'todo_buffer -> t
  val with_sequence : G_lint.t array -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_int32array = Js.repr
  let with_sequence = Js.repr
end

and Web_gl_context_attributes : sig
  type t [@@ocaml.doc "The type for the [WebGLContextAttributes] dictionary."]

  val make :
    ?alpha:G_lboolean.t ->
    ?depth:G_lboolean.t ->
    ?stencil:G_lboolean.t ->
    ?antialias:G_lboolean.t ->
    ?premultiplied_alpha:G_lboolean.t ->
    ?preserve_drawing_buffer:G_lboolean.t ->
    ?prefer_low_power_to_high_performance:G_lboolean.t ->
    ?fail_if_major_performance_caveat:G_lboolean.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val alpha : t -> G_lboolean.t option
  val depth : t -> G_lboolean.t option
  val stencil : t -> G_lboolean.t option
  val antialias : t -> G_lboolean.t option
  val premultiplied_alpha : t -> G_lboolean.t option
  val preserve_drawing_buffer : t -> G_lboolean.t option
  val prefer_low_power_to_high_performance : t -> G_lboolean.t option
  val fail_if_major_performance_caveat : t -> G_lboolean.t option
end = struct
  type t = Js.any

  let make ?alpha ?depth ?stencil ?antialias ?premultiplied_alpha
      ?preserve_drawing_buffer ?prefer_low_power_to_high_performance
      ?fail_if_major_performance_caveat () =
    let alpha = (Js.Any.nullable_of_option G_lboolean.to_any) alpha in
    let depth = (Js.Any.nullable_of_option G_lboolean.to_any) depth in
    let stencil = (Js.Any.nullable_of_option G_lboolean.to_any) stencil in
    let antialias = (Js.Any.nullable_of_option G_lboolean.to_any) antialias in
    let premultiplied_alpha =
      (Js.Any.nullable_of_option G_lboolean.to_any) premultiplied_alpha
    in
    let preserve_drawing_buffer =
      (Js.Any.nullable_of_option G_lboolean.to_any) preserve_drawing_buffer
    in
    let prefer_low_power_to_high_performance =
      (Js.Any.nullable_of_option G_lboolean.to_any)
        prefer_low_power_to_high_performance
    in
    let fail_if_major_performance_caveat =
      (Js.Any.nullable_of_option G_lboolean.to_any)
        fail_if_major_performance_caveat
    in
    Js.Ffi.obj
      [|
        ("alpha", alpha);
        ("depth", depth);
        ("stencil", stencil);
        ("antialias", antialias);
        ("premultipliedAlpha", premultiplied_alpha);
        ("preserveDrawingBuffer", preserve_drawing_buffer);
        ("preferLowPowerToHighPerformance", prefer_low_power_to_high_performance);
        ("failIfMajorPerformanceCaveat", fail_if_major_performance_caveat);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let alpha this =
    (Js.Any.nullable_to_option G_lboolean.of_any) (Js.Ffi.get this "alpha")

  let depth this =
    (Js.Any.nullable_to_option G_lboolean.of_any) (Js.Ffi.get this "depth")

  let stencil this =
    (Js.Any.nullable_to_option G_lboolean.of_any) (Js.Ffi.get this "stencil")

  let antialias this =
    (Js.Any.nullable_to_option G_lboolean.of_any) (Js.Ffi.get this "antialias")

  let premultiplied_alpha this =
    (Js.Any.nullable_to_option G_lboolean.of_any)
      (Js.Ffi.get this "premultipliedAlpha")

  let preserve_drawing_buffer this =
    (Js.Any.nullable_to_option G_lboolean.of_any)
      (Js.Ffi.get this "preserveDrawingBuffer")

  let prefer_low_power_to_high_performance this =
    (Js.Any.nullable_to_option G_lboolean.of_any)
      (Js.Ffi.get this "preferLowPowerToHighPerformance")

  let fail_if_major_performance_caveat this =
    (Js.Any.nullable_to_option G_lboolean.of_any)
      (Js.Ffi.get this "failIfMajorPerformanceCaveat")
end

and Web_gl_rendering_context : sig
  type t = [ `Web_gl_rendering_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext} \
     [WebGLRenderingContext]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val make_xr_compatible : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/makeXRCompatible} \
     [makeXRCompatible] on MDN}."]

  val uniform_matrix4fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    value:Float32_list.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix4fv} \
     [uniformMatrix4fv] on MDN}."]

  val uniform_matrix3fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    value:Float32_list.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix3fv} \
     [uniformMatrix3fv] on MDN}."]

  val uniform_matrix2fv :
    location:Web_gl_uniform_location.t option ->
    transpose:G_lboolean.t ->
    value:Float32_list.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix2fv} \
     [uniformMatrix2fv] on MDN}."]

  val uniform4iv :
    location:Web_gl_uniform_location.t option -> v:Int32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4iv} \
     [uniform4iv] on MDN}."]

  val uniform3iv :
    location:Web_gl_uniform_location.t option -> v:Int32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3iv} \
     [uniform3iv] on MDN}."]

  val uniform2iv :
    location:Web_gl_uniform_location.t option -> v:Int32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2iv} \
     [uniform2iv] on MDN}."]

  val uniform1iv :
    location:Web_gl_uniform_location.t option -> v:Int32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1iv} \
     [uniform1iv] on MDN}."]

  val uniform4fv :
    location:Web_gl_uniform_location.t option -> v:Float32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4fv} \
     [uniform4fv] on MDN}."]

  val uniform3fv :
    location:Web_gl_uniform_location.t option -> v:Float32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3fv} \
     [uniform3fv] on MDN}."]

  val uniform2fv :
    location:Web_gl_uniform_location.t option -> v:Float32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2fv} \
     [uniform2fv] on MDN}."]

  val uniform1fv :
    location:Web_gl_uniform_location.t option -> v:Float32_list.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1fv} \
     [uniform1fv] on MDN}."]

  val tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    source:Tex_image_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D} \
     [texSubImage2D] on MDN}."]

  val tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pixels:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D} \
     [texSubImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    source:Tex_image_source.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pixels:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D} \
     [texImage2D] on MDN}."]

  val read_pixels :
    x:G_lint.t ->
    y:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    type':G_lenum.t ->
    pixels:Array_buffer_view.t option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels} \
     [readPixels] on MDN}."]

  val compressed_tex_sub_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    xoffset:G_lint.t ->
    yoffset:G_lint.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    format:G_lenum.t ->
    data:Array_buffer_view.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D} \
     [compressedTexSubImage2D] on MDN}."]

  val compressed_tex_image2_d :
    target:G_lenum.t ->
    level:G_lint.t ->
    internalformat:G_lenum.t ->
    width:G_lsizei.t ->
    height:G_lsizei.t ->
    border:G_lint.t ->
    data:Array_buffer_view.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D} \
     [compressedTexImage2D] on MDN}."]

  val buffer_sub_data :
    target:G_lenum.t -> offset:G_lintptr.t -> data:Buffer_source.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData} \
     [bufferSubData] on MDN}."]

  val buffer_data :
    target:G_lenum.t ->
    data:Buffer_source.t option ->
    usage:G_lenum.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} \
     [bufferData] on MDN}."]

  val buffer_data :
    target:G_lenum.t -> size:G_lsizeiptr.t -> usage:G_lenum.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} \
     [bufferData] on MDN}."]
end = struct
  type t = [ `Web_gl_rendering_context ] Js.t

  let t = Js.Ffi.constr "WebGLRenderingContext"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make_xr_compatible this =
    (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "makeXRCompatible" [||])

  let uniform_matrix4fv ~location ~transpose ~value this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let value = Float32_list.to_any value in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix4fv" [| location; transpose; value |])

  let uniform_matrix3fv ~location ~transpose ~value this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let value = Float32_list.to_any value in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix3fv" [| location; transpose; value |])

  let uniform_matrix2fv ~location ~transpose ~value this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let transpose = G_lboolean.to_any transpose in
    let value = Float32_list.to_any value in
    Js.to_unit
      (Js.Ffi.meth_call this "uniformMatrix2fv" [| location; transpose; value |])

  let uniform4iv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Int32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform4iv" [| location; v |])

  let uniform3iv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Int32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform3iv" [| location; v |])

  let uniform2iv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Int32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform2iv" [| location; v |])

  let uniform1iv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Int32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform1iv" [| location; v |])

  let uniform4fv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Float32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform4fv" [| location; v |])

  let uniform3fv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Float32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform3fv" [| location; v |])

  let uniform2fv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Float32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform2fv" [| location; v |])

  let uniform1fv ~location ~v this =
    let location =
      (Js.Any.nullable_of_option Web_gl_uniform_location.to_any) location
    in
    let v = Float32_list.to_any v in
    Js.to_unit (Js.Ffi.meth_call this "uniform1fv" [| location; v |])

  let tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~format ~type' ~source
      this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let source = Tex_image_source.to_any source in
    Js.to_unit
      (Js.Ffi.meth_call this "texSubImage2D"
         [| target; level; xoffset; yoffset; format; type'; source |]
      )

  let tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~width ~height ~format
      ~type' ~pixels this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pixels = (Js.Any.nullable_of_option Array_buffer_view.to_any) pixels in
    Js.to_unit
      (Js.Ffi.meth_call this "texSubImage2D"
         [|
           target; level; xoffset; yoffset; width; height; format; type'; pixels;
         |]
      )

  let tex_image2_d ~target ~level ~internalformat ~format ~type' ~source this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let source = Tex_image_source.to_any source in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [| target; level; internalformat; format; type'; source |]
      )

  let tex_image2_d ~target ~level ~internalformat ~width ~height ~border ~format
      ~type' ~pixels this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lint.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pixels = (Js.Any.nullable_of_option Array_buffer_view.to_any) pixels in
    Js.to_unit
      (Js.Ffi.meth_call this "texImage2D"
         [|
           target;
           level;
           internalformat;
           width;
           height;
           border;
           format;
           type';
           pixels;
         |]
      )

  let read_pixels ~x ~y ~width ~height ~format ~type' ~pixels this =
    let x = G_lint.to_any x in
    let y = G_lint.to_any y in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let type' = G_lenum.to_any type' in
    let pixels = (Js.Any.nullable_of_option Array_buffer_view.to_any) pixels in
    Js.to_unit
      (Js.Ffi.meth_call this "readPixels"
         [| x; y; width; height; format; type'; pixels |]
      )

  let compressed_tex_sub_image2_d ~target ~level ~xoffset ~yoffset ~width
      ~height ~format ~data this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let xoffset = G_lint.to_any xoffset in
    let yoffset = G_lint.to_any yoffset in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let format = G_lenum.to_any format in
    let data = Array_buffer_view.to_any data in
    Js.to_unit
      (Js.Ffi.meth_call this "compressedTexSubImage2D"
         [| target; level; xoffset; yoffset; width; height; format; data |]
      )

  let compressed_tex_image2_d ~target ~level ~internalformat ~width ~height
      ~border ~data this =
    let target = G_lenum.to_any target in
    let level = G_lint.to_any level in
    let internalformat = G_lenum.to_any internalformat in
    let width = G_lsizei.to_any width in
    let height = G_lsizei.to_any height in
    let border = G_lint.to_any border in
    let data = Array_buffer_view.to_any data in
    Js.to_unit
      (Js.Ffi.meth_call this "compressedTexImage2D"
         [| target; level; internalformat; width; height; border; data |]
      )

  let buffer_sub_data ~target ~offset ~data this =
    let target = G_lenum.to_any target in
    let offset = G_lintptr.to_any offset in
    let data = Buffer_source.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "bufferSubData" [| target; offset; data |])

  let buffer_data ~target ~data ~usage this =
    let target = G_lenum.to_any target in
    let data = (Js.Any.nullable_of_option Buffer_source.to_any) data in
    let usage = G_lenum.to_any usage in
    Js.to_unit (Js.Ffi.meth_call this "bufferData" [| target; data; usage |])

  let buffer_data ~target ~size ~usage this =
    let target = G_lenum.to_any target in
    let size = G_lsizeiptr.to_any size in
    let usage = G_lenum.to_any usage in
    Js.to_unit (Js.Ffi.meth_call this "bufferData" [| target; size; usage |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext} \
   [WebGLRenderingContext] on MDN}."]

and Web_gl_sampler : sig
  type t = [ `Web_gl_sampler ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler} \
     [WebGLSampler]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_sampler | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler} \
     [WebGLSampler]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_sampler ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_sampler | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler} \
     [WebGLSampler]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLSampler"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler} \
   [WebGLSampler] on MDN}."]

and Web_gl_shader : sig
  type t = [ `Web_gl_shader ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader} \
     [WebGLShader]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_shader | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader} \
     [WebGLShader]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_shader ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_shader | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader} \
     [WebGLShader]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLShader"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader} \
   [WebGLShader] on MDN}."]

and Web_gl_shader_precision_format : sig
  type t = [ `Web_gl_shader_precision_format ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat} \
     [WebGLShaderPrecisionFormat]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val range_min : t -> G_lint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin} \
     [rangeMin] on MDN}."]

  val range_max : t -> G_lint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax} \
     [rangeMax] on MDN}."]

  val precision : t -> G_lint.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/precision} \
     [precision] on MDN}."]
end = struct
  type t = [ `Web_gl_shader_precision_format ] Js.t

  let t = Js.Ffi.constr "WebGLShaderPrecisionFormat"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let range_min this = G_lint.of_any (Js.Ffi.get this "rangeMin")
  let range_max this = G_lint.of_any (Js.Ffi.get this "rangeMax")
  let precision this = G_lint.of_any (Js.Ffi.get this "precision")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat} \
   [WebGLShaderPrecisionFormat] on MDN}."]

and Web_gl_sync : sig
  type t = [ `Web_gl_sync ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync} [WebGLSync]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_sync | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync} [WebGLSync]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_sync ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_sync | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync} [WebGLSync]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLSync"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync} \
   [WebGLSync] on MDN}."]

and Web_gl_texture : sig
  type t = [ `Web_gl_texture ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture} \
     [WebGLTexture]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_texture | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture} \
     [WebGLTexture]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_texture ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_gl_texture | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture} \
     [WebGLTexture]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebGLTexture"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture} \
   [WebGLTexture] on MDN}."]

and Web_gl_transform_feedback : sig
  type t = [ `Web_gl_transform_feedback ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback} \
     [WebGLTransformFeedback]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_transform_feedback | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback} \
     [WebGLTransformFeedback]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_transform_feedback ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_transform_feedback | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback} \
     [WebGLTransformFeedback]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "WebGLTransformFeedback"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback} \
   [WebGLTransformFeedback] on MDN}."]

and Web_gl_uniform_location : sig
  type t = [ `Web_gl_uniform_location ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation} \
     [WebGLUniformLocation]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_uniform_location ] Js.t

  let t = Js.Ffi.constr "WebGLUniformLocation"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation} \
   [WebGLUniformLocation] on MDN}."]

and Web_gl_vertex_array_object : sig
  type t = [ `Web_gl_vertex_array_object ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject} \
     [WebGLVertexArrayObject]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_vertex_array_object | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject} \
     [WebGLVertexArrayObject]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_vertex_array_object ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_vertex_array_object | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject} \
     [WebGLVertexArrayObject]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "WebGLVertexArrayObject"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject} \
   [WebGLVertexArrayObject] on MDN}."]

and Web_gl_vertex_array_object_oes : sig
  type t = [ `Web_gl_vertex_array_object_oes ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES} \
     [WebGLVertexArrayObjectOES]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_vertex_array_object_oes | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES} \
     [WebGLVertexArrayObjectOES]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Web_gl_vertex_array_object_oes ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Web_gl_vertex_array_object_oes | `Web_gl_object ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES} \
     [WebGLVertexArrayObjectOES]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "WebGLVertexArrayObjectOES"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_web_gl_object this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES} \
   [WebGLVertexArrayObjectOES] on MDN}."]

and Gpu_object_descriptor_base : sig
  type t [@@ocaml.doc "The type for the [GPUObjectDescriptorBase] dictionary."]

  val make : ?label:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val label : t -> string option
end = struct
  type t = Js.any

  let make ?label () =
    let label = (Js.Any.nullable_of_option Js.Any.of_string) label in
    Js.Ffi.obj [| ("label", label) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let label this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "label")
end

and Gpu_supported_limits : sig
  type t = [ `Gpu_supported_limits ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits} \
     [GPUSupportedLimits]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val max_texture_dimension1_d : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxTextureDimension1D} \
     [maxTextureDimension1D] on MDN}."]

  val max_texture_dimension2_d : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxTextureDimension2D} \
     [maxTextureDimension2D] on MDN}."]

  val max_texture_dimension3_d : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxTextureDimension3D} \
     [maxTextureDimension3D] on MDN}."]

  val max_texture_array_layers : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxTextureArrayLayers} \
     [maxTextureArrayLayers] on MDN}."]

  val max_bind_groups : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxBindGroups} \
     [maxBindGroups] on MDN}."]

  val max_bindings_per_bind_group : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxBindingsPerBindGroup} \
     [maxBindingsPerBindGroup] on MDN}."]

  val max_dynamic_uniform_buffers_per_pipeline_layout : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxDynamicUniformBuffersPerPipelineLayout} \
     [maxDynamicUniformBuffersPerPipelineLayout] on MDN}."]

  val max_dynamic_storage_buffers_per_pipeline_layout : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxDynamicStorageBuffersPerPipelineLayout} \
     [maxDynamicStorageBuffersPerPipelineLayout] on MDN}."]

  val max_sampled_textures_per_shader_stage : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxSampledTexturesPerShaderStage} \
     [maxSampledTexturesPerShaderStage] on MDN}."]

  val max_samplers_per_shader_stage : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxSamplersPerShaderStage} \
     [maxSamplersPerShaderStage] on MDN}."]

  val max_storage_buffers_per_shader_stage : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxStorageBuffersPerShaderStage} \
     [maxStorageBuffersPerShaderStage] on MDN}."]

  val max_storage_textures_per_shader_stage : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxStorageTexturesPerShaderStage} \
     [maxStorageTexturesPerShaderStage] on MDN}."]

  val max_uniform_buffers_per_shader_stage : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxUniformBuffersPerShaderStage} \
     [maxUniformBuffersPerShaderStage] on MDN}."]

  val max_uniform_buffer_binding_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxUniformBufferBindingSize} \
     [maxUniformBufferBindingSize] on MDN}."]

  val max_storage_buffer_binding_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxStorageBufferBindingSize} \
     [maxStorageBufferBindingSize] on MDN}."]

  val min_uniform_buffer_offset_alignment : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/minUniformBufferOffsetAlignment} \
     [minUniformBufferOffsetAlignment] on MDN}."]

  val min_storage_buffer_offset_alignment : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/minStorageBufferOffsetAlignment} \
     [minStorageBufferOffsetAlignment] on MDN}."]

  val max_vertex_buffers : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxVertexBuffers} \
     [maxVertexBuffers] on MDN}."]

  val max_buffer_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxBufferSize} \
     [maxBufferSize] on MDN}."]

  val max_vertex_attributes : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxVertexAttributes} \
     [maxVertexAttributes] on MDN}."]

  val max_vertex_buffer_array_stride : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxVertexBufferArrayStride} \
     [maxVertexBufferArrayStride] on MDN}."]

  val max_inter_stage_shader_components : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxInterStageShaderComponents} \
     [maxInterStageShaderComponents] on MDN}."]

  val max_compute_workgroup_storage_size : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeWorkgroupStorageSize} \
     [maxComputeWorkgroupStorageSize] on MDN}."]

  val max_compute_invocations_per_workgroup : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeInvocationsPerWorkgroup} \
     [maxComputeInvocationsPerWorkgroup] on MDN}."]

  val max_compute_workgroup_size_x : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeWorkgroupSizeX} \
     [maxComputeWorkgroupSizeX] on MDN}."]

  val max_compute_workgroup_size_y : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeWorkgroupSizeY} \
     [maxComputeWorkgroupSizeY] on MDN}."]

  val max_compute_workgroup_size_z : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeWorkgroupSizeZ} \
     [maxComputeWorkgroupSizeZ] on MDN}."]

  val max_compute_workgroups_per_dimension : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits/maxComputeWorkgroupsPerDimension} \
     [maxComputeWorkgroupsPerDimension] on MDN}."]
end = struct
  type t = [ `Gpu_supported_limits ] Js.t

  let t = Js.Ffi.constr "GPUSupportedLimits"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let max_texture_dimension1_d this =
    Js.Any.to_int (Js.Ffi.get this "maxTextureDimension1D")

  let max_texture_dimension2_d this =
    Js.Any.to_int (Js.Ffi.get this "maxTextureDimension2D")

  let max_texture_dimension3_d this =
    Js.Any.to_int (Js.Ffi.get this "maxTextureDimension3D")

  let max_texture_array_layers this =
    Js.Any.to_int (Js.Ffi.get this "maxTextureArrayLayers")

  let max_bind_groups this = Js.Any.to_int (Js.Ffi.get this "maxBindGroups")

  let max_bindings_per_bind_group this =
    Js.Any.to_int (Js.Ffi.get this "maxBindingsPerBindGroup")

  let max_dynamic_uniform_buffers_per_pipeline_layout this =
    Js.Any.to_int (Js.Ffi.get this "maxDynamicUniformBuffersPerPipelineLayout")

  let max_dynamic_storage_buffers_per_pipeline_layout this =
    Js.Any.to_int (Js.Ffi.get this "maxDynamicStorageBuffersPerPipelineLayout")

  let max_sampled_textures_per_shader_stage this =
    Js.Any.to_int (Js.Ffi.get this "maxSampledTexturesPerShaderStage")

  let max_samplers_per_shader_stage this =
    Js.Any.to_int (Js.Ffi.get this "maxSamplersPerShaderStage")

  let max_storage_buffers_per_shader_stage this =
    Js.Any.to_int (Js.Ffi.get this "maxStorageBuffersPerShaderStage")

  let max_storage_textures_per_shader_stage this =
    Js.Any.to_int (Js.Ffi.get this "maxStorageTexturesPerShaderStage")

  let max_uniform_buffers_per_shader_stage this =
    Js.Any.to_int (Js.Ffi.get this "maxUniformBuffersPerShaderStage")

  let max_uniform_buffer_binding_size this =
    Js.Any.to_int (Js.Ffi.get this "maxUniformBufferBindingSize")

  let max_storage_buffer_binding_size this =
    Js.Any.to_int (Js.Ffi.get this "maxStorageBufferBindingSize")

  let min_uniform_buffer_offset_alignment this =
    Js.Any.to_int (Js.Ffi.get this "minUniformBufferOffsetAlignment")

  let min_storage_buffer_offset_alignment this =
    Js.Any.to_int (Js.Ffi.get this "minStorageBufferOffsetAlignment")

  let max_vertex_buffers this =
    Js.Any.to_int (Js.Ffi.get this "maxVertexBuffers")

  let max_buffer_size this = Js.Any.to_int (Js.Ffi.get this "maxBufferSize")

  let max_vertex_attributes this =
    Js.Any.to_int (Js.Ffi.get this "maxVertexAttributes")

  let max_vertex_buffer_array_stride this =
    Js.Any.to_int (Js.Ffi.get this "maxVertexBufferArrayStride")

  let max_inter_stage_shader_components this =
    Js.Any.to_int (Js.Ffi.get this "maxInterStageShaderComponents")

  let max_compute_workgroup_storage_size this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeWorkgroupStorageSize")

  let max_compute_invocations_per_workgroup this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeInvocationsPerWorkgroup")

  let max_compute_workgroup_size_x this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeWorkgroupSizeX")

  let max_compute_workgroup_size_y this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeWorkgroupSizeY")

  let max_compute_workgroup_size_z this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeWorkgroupSizeZ")

  let max_compute_workgroups_per_dimension this =
    Js.Any.to_int (Js.Ffi.get this "maxComputeWorkgroupsPerDimension")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits} \
   [GPUSupportedLimits] on MDN}."]

and Gpu_supported_features : sig
  type t = [ `Gpu_supported_features ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedFeatures} \
     [GPUSupportedFeatures]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val setlike : _
end = struct
  type t = [ `Gpu_supported_features ] Js.t

  let t = Js.Ffi.constr "GPUSupportedFeatures"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedFeatures} \
   [GPUSupportedFeatures] on MDN}."]

and Gpu_adapter_info : sig
  type t = [ `Gpu_adapter_info ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo} \
     [GPUAdapterInfo]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val vendor : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo/vendor} \
     [vendor] on MDN}."]

  val architecture : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo/architecture} \
     [architecture] on MDN}."]

  val device : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo/device} \
     [device] on MDN}."]

  val description : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo/description} \
     [description] on MDN}."]
end = struct
  type t = [ `Gpu_adapter_info ] Js.t

  let t = Js.Ffi.constr "GPUAdapterInfo"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vendor this = Js.Any.to_string (Js.Ffi.get this "vendor")
  let architecture this = Js.Any.to_string (Js.Ffi.get this "architecture")
  let device this = Js.Any.to_string (Js.Ffi.get this "device")
  let description this = Js.Any.to_string (Js.Ffi.get this "description")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo} \
   [GPUAdapterInfo] on MDN}."]

and Gpu : sig
  type t = [ `Gpu ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPU} [GPU]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val request_adapter :
    ?options:Gpu_request_adapter_options.t ->
    t ->
    Gpu_adapter.t option Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPU/requestAdapter} \
     [requestAdapter] on MDN}."]

  val get_preferred_canvas_format : t -> Gpu_texture_format.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPU/getPreferredCanvasFormat} \
     [getPreferredCanvasFormat] on MDN}."]
end = struct
  type t = [ `Gpu ] Js.t

  let t = Js.Ffi.constr "GPU"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let request_adapter ?options this =
    let options =
      (Js.Any.undefined_of_option Gpu_request_adapter_options.to_any) options
    in
    (Promise.of_any (Js.Any.nullable_to_option Gpu_adapter.of_any))
      (Js.Ffi.meth_call this "requestAdapter" [| options |])

  let get_preferred_canvas_format this =
    Gpu_texture_format.of_any
      (Js.Ffi.meth_call this "getPreferredCanvasFormat" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPU} [GPU] on MDN}."]

and Gpu_request_adapter_options : sig
  type t [@@ocaml.doc "The type for the [GPURequestAdapterOptions] dictionary."]

  val make :
    ?power_preference:Gpu_power_preference.t ->
    ?force_fallback_adapter:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val power_preference : t -> Gpu_power_preference.t option
  val force_fallback_adapter : t -> bool option
end = struct
  type t = Js.any

  let make ?power_preference ?force_fallback_adapter () =
    let power_preference =
      (Js.Any.nullable_of_option Gpu_power_preference.to_any) power_preference
    in
    let force_fallback_adapter =
      (Js.Any.nullable_of_option Js.Any.of_bool) force_fallback_adapter
    in
    Js.Ffi.obj
      [|
        ("powerPreference", power_preference);
        ("forceFallbackAdapter", force_fallback_adapter);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let power_preference this =
    (Js.Any.nullable_to_option Gpu_power_preference.of_any)
      (Js.Ffi.get this "powerPreference")

  let force_fallback_adapter this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "forceFallbackAdapter")
end

and Gpu_power_preference : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val low_power : t
  val high_performance : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let low_power = Js.of_string "low-power"
  let high_performance = Js.of_string "high-performance"
end

and Gpu_adapter : sig
  type t = [ `Gpu_adapter ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter} \
     [GPUAdapter]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val features : t -> Gpu_supported_features.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter/features} \
     [features] on MDN}."]

  val limits : t -> Gpu_supported_limits.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter/limits} \
     [limits] on MDN}."]

  val is_fallback_adapter : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter/isFallbackAdapter} \
     [isFallbackAdapter] on MDN}."]

  val request_device :
    ?descriptor:Gpu_device_descriptor.t -> t -> Gpu_device.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter/requestDevice} \
     [requestDevice] on MDN}."]

  val request_adapter_info :
    ?unmask_hints:string array -> t -> Gpu_adapter_info.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter/requestAdapterInfo} \
     [requestAdapterInfo] on MDN}."]
end = struct
  type t = [ `Gpu_adapter ] Js.t

  let t = Js.Ffi.constr "GPUAdapter"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let features this = Gpu_supported_features.of_any (Js.Ffi.get this "features")
  let limits this = Gpu_supported_limits.of_any (Js.Ffi.get this "limits")

  let is_fallback_adapter this =
    Js.Any.to_bool (Js.Ffi.get this "isFallbackAdapter")

  let request_device ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_device_descriptor.to_any) descriptor
    in
    (Promise.of_any Gpu_device.of_any)
      (Js.Ffi.meth_call this "requestDevice" [| descriptor |])

  let request_adapter_info ?unmask_hints this =
    let unmask_hints =
      (Js.Any.undefined_of_option (Js.Any.of_array Js.Any.of_string))
        unmask_hints
    in
    (Promise.of_any Gpu_adapter_info.of_any)
      (Js.Ffi.meth_call this "requestAdapterInfo" [| unmask_hints |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter} \
   [GPUAdapter] on MDN}."]

and Gpu_device_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUDeviceDescriptor] dictionary."]

  val make :
    ?required_features:Gpu_feature_name.t array ->
    ?required_limits:'todo_record ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val required_features : t -> Gpu_feature_name.t array option
  val required_limits : t -> 'todo_record option
end = struct
  type t = Js.any

  let make ?required_features ?required_limits () =
    let required_features =
      (Js.Any.nullable_of_option (Js.Any.of_array Gpu_feature_name.to_any))
        required_features
    in
    let required_limits =
      (Js.Any.nullable_of_option Record_todo.to_any) required_limits
    in
    Js.Ffi.obj
      [|
        ("requiredFeatures", required_features);
        ("requiredLimits", required_limits);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let required_features this =
    (Js.Any.nullable_to_option (Js.Any.to_array Gpu_feature_name.of_any))
      (Js.Ffi.get this "requiredFeatures")

  let required_limits this =
    (Js.Any.nullable_to_option Record_todo.of_any)
      (Js.Ffi.get this "requiredLimits")
end

and Gpu_feature_name : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val depth_clip_control : t
  val depth24unorm_stencil8 : t
  val depth32float_stencil8 : t
  val pipeline_statistics_query : t
  val texture_compression_bc : t
  val texture_compression_etc2 : t
  val texture_compression_astc : t
  val timestamp_query : t
  val indirect_first_instance : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let depth_clip_control = Js.of_string "depth-clip-control"
  let depth24unorm_stencil8 = Js.of_string "depth24unorm-stencil8"
  let depth32float_stencil8 = Js.of_string "depth32float-stencil8"
  let pipeline_statistics_query = Js.of_string "pipeline-statistics-query"
  let texture_compression_bc = Js.of_string "texture-compression-bc"
  let texture_compression_etc2 = Js.of_string "texture-compression-etc2"
  let texture_compression_astc = Js.of_string "texture-compression-astc"
  let timestamp_query = Js.of_string "timestamp-query"
  let indirect_first_instance = Js.of_string "indirect-first-instance"
end

and Gpu_device : sig
  type t = [ `Gpu_device ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice} [GPUDevice]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Gpu_device | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice} [GPUDevice]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val features : t -> Gpu_supported_features.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/features} \
     [features] on MDN}."]

  val limits : t -> Gpu_supported_limits.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/limits} \
     [limits] on MDN}."]

  val queue : t -> Gpu_queue.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/queue} \
     [queue] on MDN}."]

  val destroy : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/destroy} \
     [destroy] on MDN}."]

  val create_buffer : descriptor:Gpu_buffer_descriptor.t -> t -> Gpu_buffer.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createBuffer} \
     [createBuffer] on MDN}."]

  val create_texture : descriptor:Gpu_texture_descriptor.t -> t -> Gpu_texture.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createTexture} \
     [createTexture] on MDN}."]

  val create_sampler :
    ?descriptor:Gpu_sampler_descriptor.t -> t -> Gpu_sampler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createSampler} \
     [createSampler] on MDN}."]

  val create_bind_group_layout :
    descriptor:Gpu_bind_group_layout_descriptor.t ->
    t ->
    Gpu_bind_group_layout.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createBindGroupLayout} \
     [createBindGroupLayout] on MDN}."]

  val create_pipeline_layout :
    descriptor:Gpu_pipeline_layout_descriptor.t -> t -> Gpu_pipeline_layout.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createPipelineLayout} \
     [createPipelineLayout] on MDN}."]

  val create_bind_group :
    descriptor:Gpu_bind_group_descriptor.t -> t -> Gpu_bind_group.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createBindGroup} \
     [createBindGroup] on MDN}."]

  val create_shader_module :
    descriptor:Gpu_shader_module_descriptor.t -> t -> Gpu_shader_module.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createShaderModule} \
     [createShaderModule] on MDN}."]

  val create_compute_pipeline :
    descriptor:Gpu_compute_pipeline_descriptor.t -> t -> Gpu_compute_pipeline.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createComputePipeline} \
     [createComputePipeline] on MDN}."]

  val create_render_pipeline :
    descriptor:Gpu_render_pipeline_descriptor.t -> t -> Gpu_render_pipeline.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createRenderPipeline} \
     [createRenderPipeline] on MDN}."]

  val create_compute_pipeline_async :
    descriptor:Gpu_compute_pipeline_descriptor.t ->
    t ->
    Gpu_compute_pipeline.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createComputePipelineAsync} \
     [createComputePipelineAsync] on MDN}."]

  val create_render_pipeline_async :
    descriptor:Gpu_render_pipeline_descriptor.t ->
    t ->
    Gpu_render_pipeline.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createRenderPipelineAsync} \
     [createRenderPipelineAsync] on MDN}."]

  val create_command_encoder :
    ?descriptor:Gpu_command_encoder_descriptor.t -> t -> Gpu_command_encoder.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createCommandEncoder} \
     [createCommandEncoder] on MDN}."]

  val create_render_bundle_encoder :
    descriptor:Gpu_render_bundle_encoder_descriptor.t ->
    t ->
    Gpu_render_bundle_encoder.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createRenderBundleEncoder} \
     [createRenderBundleEncoder] on MDN}."]

  val onuncapturederror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/onuncapturederror} \
     [onuncapturederror] on MDN}."]

  val set_onuncapturederror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/onuncapturederror} \
     [onuncapturederror] on MDN}."]

  val push_error_scope : filter:Gpu_error_filter.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/pushErrorScope} \
     [pushErrorScope] on MDN}."]

  val pop_error_scope : t -> Gpu_error.t option Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/popErrorScope} \
     [popErrorScope] on MDN}."]

  val lost : t -> Gpu_device_lost_info.t Js.promise
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/lost} \
     [lost] on MDN}."]
end = struct
  type t = [ `Gpu_device ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Gpu_device | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice} [GPUDevice]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "GPUDevice"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let features this = Gpu_supported_features.of_any (Js.Ffi.get this "features")
  let limits this = Gpu_supported_limits.of_any (Js.Ffi.get this "limits")
  let queue this = Gpu_queue.of_any (Js.Ffi.get this "queue")
  let destroy this = Js.to_unit (Js.Ffi.meth_call this "destroy" [||])

  let create_buffer ~descriptor this =
    let descriptor = Gpu_buffer_descriptor.to_any descriptor in
    Gpu_buffer.of_any (Js.Ffi.meth_call this "createBuffer" [| descriptor |])

  let create_texture ~descriptor this =
    let descriptor = Gpu_texture_descriptor.to_any descriptor in
    Gpu_texture.of_any (Js.Ffi.meth_call this "createTexture" [| descriptor |])

  let create_sampler ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_sampler_descriptor.to_any) descriptor
    in
    Gpu_sampler.of_any (Js.Ffi.meth_call this "createSampler" [| descriptor |])

  let create_bind_group_layout ~descriptor this =
    let descriptor = Gpu_bind_group_layout_descriptor.to_any descriptor in
    Gpu_bind_group_layout.of_any
      (Js.Ffi.meth_call this "createBindGroupLayout" [| descriptor |])

  let create_pipeline_layout ~descriptor this =
    let descriptor = Gpu_pipeline_layout_descriptor.to_any descriptor in
    Gpu_pipeline_layout.of_any
      (Js.Ffi.meth_call this "createPipelineLayout" [| descriptor |])

  let create_bind_group ~descriptor this =
    let descriptor = Gpu_bind_group_descriptor.to_any descriptor in
    Gpu_bind_group.of_any
      (Js.Ffi.meth_call this "createBindGroup" [| descriptor |])

  let create_shader_module ~descriptor this =
    let descriptor = Gpu_shader_module_descriptor.to_any descriptor in
    Gpu_shader_module.of_any
      (Js.Ffi.meth_call this "createShaderModule" [| descriptor |])

  let create_compute_pipeline ~descriptor this =
    let descriptor = Gpu_compute_pipeline_descriptor.to_any descriptor in
    Gpu_compute_pipeline.of_any
      (Js.Ffi.meth_call this "createComputePipeline" [| descriptor |])

  let create_render_pipeline ~descriptor this =
    let descriptor = Gpu_render_pipeline_descriptor.to_any descriptor in
    Gpu_render_pipeline.of_any
      (Js.Ffi.meth_call this "createRenderPipeline" [| descriptor |])

  let create_compute_pipeline_async ~descriptor this =
    let descriptor = Gpu_compute_pipeline_descriptor.to_any descriptor in
    (Promise.of_any Gpu_compute_pipeline.of_any)
      (Js.Ffi.meth_call this "createComputePipelineAsync" [| descriptor |])

  let create_render_pipeline_async ~descriptor this =
    let descriptor = Gpu_render_pipeline_descriptor.to_any descriptor in
    (Promise.of_any Gpu_render_pipeline.of_any)
      (Js.Ffi.meth_call this "createRenderPipelineAsync" [| descriptor |])

  let create_command_encoder ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_command_encoder_descriptor.to_any)
        descriptor
    in
    Gpu_command_encoder.of_any
      (Js.Ffi.meth_call this "createCommandEncoder" [| descriptor |])

  let create_render_bundle_encoder ~descriptor this =
    let descriptor = Gpu_render_bundle_encoder_descriptor.to_any descriptor in
    Gpu_render_bundle_encoder.of_any
      (Js.Ffi.meth_call this "createRenderBundleEncoder" [| descriptor |])

  let onuncapturederror this =
    Event_handler.of_any (Js.Ffi.get this "onuncapturederror")

  let set_onuncapturederror this x =
    Js.Ffi.set this "onuncapturederror" (Event_handler.to_any x)

  let push_error_scope ~filter this =
    let filter = Gpu_error_filter.to_any filter in
    Js.to_unit (Js.Ffi.meth_call this "pushErrorScope" [| filter |])

  let pop_error_scope this =
    (Promise.of_any (Js.Any.nullable_to_option Gpu_error.of_any))
      (Js.Ffi.meth_call this "popErrorScope" [||])

  let lost this =
    (Promise.of_any Gpu_device_lost_info.of_any) (Js.Ffi.get this "lost")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice} \
   [GPUDevice] on MDN}."]

and Gpu_buffer : sig
  type t = [ `Gpu_buffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer} [GPUBuffer]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val map_async :
    mode:Gpu_map_mode_flags.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer/mapAsync} \
     [mapAsync] on MDN}."]

  val get_mapped_range :
    ?offset:Gpu_size64.t -> ?size:Gpu_size64.t -> t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer/getMappedRange} \
     [getMappedRange] on MDN}."]

  val unmap : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer/unmap} \
     [unmap] on MDN}."]

  val destroy : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer/destroy} \
     [destroy] on MDN}."]
end = struct
  type t = [ `Gpu_buffer ] Js.t

  let t = Js.Ffi.constr "GPUBuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let map_async ~mode ?offset ?size this =
    let mode = Gpu_map_mode_flags.to_any mode in
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "mapAsync" [| mode; offset; size |])

  let get_mapped_range ?offset ?size this =
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Array_buffer.of_any
      (Js.Ffi.meth_call this "getMappedRange" [| offset; size |])

  let unmap this = Js.to_unit (Js.Ffi.meth_call this "unmap" [||])
  let destroy this = Js.to_unit (Js.Ffi.meth_call this "destroy" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer} \
   [GPUBuffer] on MDN}."]

and Gpu_buffer_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUBufferDescriptor] dictionary."]

  val make :
    size:Gpu_size64.t ->
    usage:Gpu_buffer_usage_flags.t ->
    ?mapped_at_creation:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val size : t -> Gpu_size64.t
  val usage : t -> Gpu_buffer_usage_flags.t
  val mapped_at_creation : t -> bool option
end = struct
  type t = Js.any

  let make ~size ~usage ?mapped_at_creation () =
    let size = Gpu_size64.to_any size in
    let usage = Gpu_buffer_usage_flags.to_any usage in
    let mapped_at_creation =
      (Js.Any.nullable_of_option Js.Any.of_bool) mapped_at_creation
    in
    Js.Ffi.obj
      [|
        ("size", size);
        ("usage", usage);
        ("mappedAtCreation", mapped_at_creation);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let size this = Gpu_size64.of_any (Js.Ffi.get this "size")
  let usage this = Gpu_buffer_usage_flags.of_any (Js.Ffi.get this "usage")

  let mapped_at_creation this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "mappedAtCreation")
end

and Gpu_buffer_usage_flags : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_buffer_usage_flags

and Gpu_buffer_usage : sig
  type t = [ `Gpu_buffer_usage ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBufferUsage} \
     [GPUBufferUsage]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val map_read : Gpu_buffer_usage_flags.t
  val map_write : Gpu_buffer_usage_flags.t
  val copy_src : Gpu_buffer_usage_flags.t
  val copy_dst : Gpu_buffer_usage_flags.t
  val index : Gpu_buffer_usage_flags.t
  val vertex : Gpu_buffer_usage_flags.t
  val uniform : Gpu_buffer_usage_flags.t
  val storage : Gpu_buffer_usage_flags.t
  val indirect : Gpu_buffer_usage_flags.t
  val query_resolve : Gpu_buffer_usage_flags.t
end = struct
  type t = [ `Gpu_buffer_usage ] Js.t

  let t = Js.Ffi.constr "GPUBufferUsage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let map_read = 1
  let map_write = 2
  let copy_src = 4
  let copy_dst = 8
  let index = 16
  let vertex = 32
  let uniform = 64
  let storage = 128
  let indirect = 256
  let query_resolve = 512
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUBufferUsage} \
   [GPUBufferUsage] on MDN}."]

and Gpu_map_mode_flags : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_map_mode_flags

and Gpu_map_mode : sig
  type t = [ `Gpu_map_mode ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUMapMode} \
     [GPUMapMode]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val read : Gpu_map_mode_flags.t
  val write : Gpu_map_mode_flags.t
end = struct
  type t = [ `Gpu_map_mode ] Js.t

  let t = Js.Ffi.constr "GPUMapMode"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let read = 1
  let write = 2
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUMapMode} \
   [GPUMapMode] on MDN}."]

and Gpu_texture : sig
  type t = [ `Gpu_texture ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUTexture} \
     [GPUTexture]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val create_view :
    ?descriptor:Gpu_texture_view_descriptor.t -> t -> Gpu_texture_view.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUTexture/createView} \
     [createView] on MDN}."]

  val destroy : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUTexture/destroy} \
     [destroy] on MDN}."]
end = struct
  type t = [ `Gpu_texture ] Js.t

  let t = Js.Ffi.constr "GPUTexture"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let create_view ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_texture_view_descriptor.to_any) descriptor
    in
    Gpu_texture_view.of_any (Js.Ffi.meth_call this "createView" [| descriptor |])

  let destroy this = Js.to_unit (Js.Ffi.meth_call this "destroy" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUTexture} \
   [GPUTexture] on MDN}."]

and Gpu_texture_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUTextureDescriptor] dictionary."]

  val make :
    size:Gpu_extent3_d.t ->
    ?mip_level_count:Gpu_integer_coordinate.t ->
    ?sample_count:Gpu_size32.t ->
    ?dimension:Gpu_texture_dimension.t ->
    format:Gpu_texture_format.t ->
    usage:Gpu_texture_usage_flags.t ->
    ?view_formats:Gpu_texture_format.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val size : t -> Gpu_extent3_d.t
  val mip_level_count : t -> Gpu_integer_coordinate.t option
  val sample_count : t -> Gpu_size32.t option
  val dimension : t -> Gpu_texture_dimension.t option
  val format : t -> Gpu_texture_format.t
  val usage : t -> Gpu_texture_usage_flags.t
  val view_formats : t -> Gpu_texture_format.t array option
end = struct
  type t = Js.any

  let make ~size ?mip_level_count ?sample_count ?dimension ~format ~usage
      ?view_formats () =
    let size = Gpu_extent3_d.to_any size in
    let mip_level_count =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) mip_level_count
    in
    let sample_count =
      (Js.Any.nullable_of_option Gpu_size32.to_any) sample_count
    in
    let dimension =
      (Js.Any.nullable_of_option Gpu_texture_dimension.to_any) dimension
    in
    let format = Gpu_texture_format.to_any format in
    let usage = Gpu_texture_usage_flags.to_any usage in
    let view_formats =
      (Js.Any.nullable_of_option (Js.Any.of_array Gpu_texture_format.to_any))
        view_formats
    in
    Js.Ffi.obj
      [|
        ("size", size);
        ("mipLevelCount", mip_level_count);
        ("sampleCount", sample_count);
        ("dimension", dimension);
        ("format", format);
        ("usage", usage);
        ("viewFormats", view_formats);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let size this = Gpu_extent3_d.of_any (Js.Ffi.get this "size")

  let mip_level_count this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "mipLevelCount")

  let sample_count this =
    (Js.Any.nullable_to_option Gpu_size32.of_any) (Js.Ffi.get this "sampleCount")

  let dimension this =
    (Js.Any.nullable_to_option Gpu_texture_dimension.of_any)
      (Js.Ffi.get this "dimension")

  let format this = Gpu_texture_format.of_any (Js.Ffi.get this "format")
  let usage this = Gpu_texture_usage_flags.of_any (Js.Ffi.get this "usage")

  let view_formats this =
    (Js.Any.nullable_to_option (Js.Any.to_array Gpu_texture_format.of_any))
      (Js.Ffi.get this "viewFormats")
end

and Gpu_texture_dimension : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val _1d : t
  val _2d : t
  val _3d : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let _1d = Js.of_string "1d"
  let _2d = Js.of_string "2d"
  let _3d = Js.of_string "3d"
end

and Gpu_texture_usage_flags : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_texture_usage_flags

and Gpu_texture_usage : sig
  type t = [ `Gpu_texture_usage ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUTextureUsage} \
     [GPUTextureUsage]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val copy_src : Gpu_texture_usage_flags.t
  val copy_dst : Gpu_texture_usage_flags.t
  val texture_binding : Gpu_texture_usage_flags.t
  val storage_binding : Gpu_texture_usage_flags.t
  val render_attachment : Gpu_texture_usage_flags.t
end = struct
  type t = [ `Gpu_texture_usage ] Js.t

  let t = Js.Ffi.constr "GPUTextureUsage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let copy_src = 1
  let copy_dst = 2
  let texture_binding = 4
  let storage_binding = 8
  let render_attachment = 16
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUTextureUsage} \
   [GPUTextureUsage] on MDN}."]

and Gpu_texture_view : sig
  type t = [ `Gpu_texture_view ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUTextureView} \
     [GPUTextureView]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_texture_view ] Js.t

  let t = Js.Ffi.constr "GPUTextureView"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUTextureView} \
   [GPUTextureView] on MDN}."]

and Gpu_texture_view_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUTextureViewDescriptor] dictionary."]

  val make :
    ?format:Gpu_texture_format.t ->
    ?dimension:Gpu_texture_view_dimension.t ->
    ?aspect:Gpu_texture_aspect.t ->
    ?base_mip_level:Gpu_integer_coordinate.t ->
    ?mip_level_count:Gpu_integer_coordinate.t ->
    ?base_array_layer:Gpu_integer_coordinate.t ->
    ?array_layer_count:Gpu_integer_coordinate.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val format : t -> Gpu_texture_format.t option
  val dimension : t -> Gpu_texture_view_dimension.t option
  val aspect : t -> Gpu_texture_aspect.t option
  val base_mip_level : t -> Gpu_integer_coordinate.t option
  val mip_level_count : t -> Gpu_integer_coordinate.t option
  val base_array_layer : t -> Gpu_integer_coordinate.t option
  val array_layer_count : t -> Gpu_integer_coordinate.t option
end = struct
  type t = Js.any

  let make ?format ?dimension ?aspect ?base_mip_level ?mip_level_count
      ?base_array_layer ?array_layer_count () =
    let format = (Js.Any.nullable_of_option Gpu_texture_format.to_any) format in
    let dimension =
      (Js.Any.nullable_of_option Gpu_texture_view_dimension.to_any) dimension
    in
    let aspect = (Js.Any.nullable_of_option Gpu_texture_aspect.to_any) aspect in
    let base_mip_level =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) base_mip_level
    in
    let mip_level_count =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) mip_level_count
    in
    let base_array_layer =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) base_array_layer
    in
    let array_layer_count =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any)
        array_layer_count
    in
    Js.Ffi.obj
      [|
        ("format", format);
        ("dimension", dimension);
        ("aspect", aspect);
        ("baseMipLevel", base_mip_level);
        ("mipLevelCount", mip_level_count);
        ("baseArrayLayer", base_array_layer);
        ("arrayLayerCount", array_layer_count);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let format this =
    (Js.Any.nullable_to_option Gpu_texture_format.of_any)
      (Js.Ffi.get this "format")

  let dimension this =
    (Js.Any.nullable_to_option Gpu_texture_view_dimension.of_any)
      (Js.Ffi.get this "dimension")

  let aspect this =
    (Js.Any.nullable_to_option Gpu_texture_aspect.of_any)
      (Js.Ffi.get this "aspect")

  let base_mip_level this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "baseMipLevel")

  let mip_level_count this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "mipLevelCount")

  let base_array_layer this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "baseArrayLayer")

  let array_layer_count this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "arrayLayerCount")
end

and Gpu_texture_view_dimension : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val _1d : t
  val _2d : t
  val _2d_array : t
  val cube : t
  val cube_array : t
  val _3d : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let _1d = Js.of_string "1d"
  let _2d = Js.of_string "2d"
  let _2d_array = Js.of_string "2d-array"
  let cube = Js.of_string "cube"
  let cube_array = Js.of_string "cube-array"
  let _3d = Js.of_string "3d"
end

and Gpu_texture_aspect : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val all : t
  val stencil_only : t
  val depth_only : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let all = Js.of_string "all"
  let stencil_only = Js.of_string "stencil-only"
  let depth_only = Js.of_string "depth-only"
end

and Gpu_texture_format : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val r8unorm : t
  val r8snorm : t
  val r8uint : t
  val r8sint : t
  val r16uint : t
  val r16sint : t
  val r16float : t
  val rg8unorm : t
  val rg8snorm : t
  val rg8uint : t
  val rg8sint : t
  val r32uint : t
  val r32sint : t
  val r32float : t
  val rg16uint : t
  val rg16sint : t
  val rg16float : t
  val rgba8unorm : t
  val rgba8unorm_srgb : t
  val rgba8snorm : t
  val rgba8uint : t
  val rgba8sint : t
  val bgra8unorm : t
  val bgra8unorm_srgb : t
  val rgb10a2unorm : t
  val rg11b10float : t
  val rg32uint : t
  val rg32sint : t
  val rg32float : t
  val rgba16uint : t
  val rgba16sint : t
  val rgba16float : t
  val rgba32uint : t
  val rgba32sint : t
  val rgba32float : t
  val depth24plus : t
  val depth24plus_stencil8 : t
  val depth32float : t
  val bc1_rgba_unorm : t
  val bc1_rgba_unorm_srgb : t
  val bc2_rgba_unorm : t
  val bc2_rgba_unorm_srgb : t
  val bc3_rgba_unorm : t
  val bc3_rgba_unorm_srgb : t
  val bc4_r_unorm : t
  val bc4_r_snorm : t
  val bc5_rg_unorm : t
  val bc5_rg_snorm : t
  val bc6h_rgb_ufloat : t
  val bc6h_rgb_float : t
  val bc7_rgba_unorm : t
  val bc7_rgba_unorm_srgb : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let r8unorm = Js.of_string "r8unorm"
  let r8snorm = Js.of_string "r8snorm"
  let r8uint = Js.of_string "r8uint"
  let r8sint = Js.of_string "r8sint"
  let r16uint = Js.of_string "r16uint"
  let r16sint = Js.of_string "r16sint"
  let r16float = Js.of_string "r16float"
  let rg8unorm = Js.of_string "rg8unorm"
  let rg8snorm = Js.of_string "rg8snorm"
  let rg8uint = Js.of_string "rg8uint"
  let rg8sint = Js.of_string "rg8sint"
  let r32uint = Js.of_string "r32uint"
  let r32sint = Js.of_string "r32sint"
  let r32float = Js.of_string "r32float"
  let rg16uint = Js.of_string "rg16uint"
  let rg16sint = Js.of_string "rg16sint"
  let rg16float = Js.of_string "rg16float"
  let rgba8unorm = Js.of_string "rgba8unorm"
  let rgba8unorm_srgb = Js.of_string "rgba8unorm-srgb"
  let rgba8snorm = Js.of_string "rgba8snorm"
  let rgba8uint = Js.of_string "rgba8uint"
  let rgba8sint = Js.of_string "rgba8sint"
  let bgra8unorm = Js.of_string "bgra8unorm"
  let bgra8unorm_srgb = Js.of_string "bgra8unorm-srgb"
  let rgb10a2unorm = Js.of_string "rgb10a2unorm"
  let rg11b10float = Js.of_string "rg11b10float"
  let rg32uint = Js.of_string "rg32uint"
  let rg32sint = Js.of_string "rg32sint"
  let rg32float = Js.of_string "rg32float"
  let rgba16uint = Js.of_string "rgba16uint"
  let rgba16sint = Js.of_string "rgba16sint"
  let rgba16float = Js.of_string "rgba16float"
  let rgba32uint = Js.of_string "rgba32uint"
  let rgba32sint = Js.of_string "rgba32sint"
  let rgba32float = Js.of_string "rgba32float"
  let depth24plus = Js.of_string "depth24plus"
  let depth24plus_stencil8 = Js.of_string "depth24plus-stencil8"
  let depth32float = Js.of_string "depth32float"
  let bc1_rgba_unorm = Js.of_string "bc1-rgba-unorm"
  let bc1_rgba_unorm_srgb = Js.of_string "bc1-rgba-unorm-srgb"
  let bc2_rgba_unorm = Js.of_string "bc2-rgba-unorm"
  let bc2_rgba_unorm_srgb = Js.of_string "bc2-rgba-unorm-srgb"
  let bc3_rgba_unorm = Js.of_string "bc3-rgba-unorm"
  let bc3_rgba_unorm_srgb = Js.of_string "bc3-rgba-unorm-srgb"
  let bc4_r_unorm = Js.of_string "bc4-r-unorm"
  let bc4_r_snorm = Js.of_string "bc4-r-snorm"
  let bc5_rg_unorm = Js.of_string "bc5-rg-unorm"
  let bc5_rg_snorm = Js.of_string "bc5-rg-snorm"
  let bc6h_rgb_ufloat = Js.of_string "bc6h-rgb-ufloat"
  let bc6h_rgb_float = Js.of_string "bc6h-rgb-float"
  let bc7_rgba_unorm = Js.of_string "bc7-rgba-unorm"
  let bc7_rgba_unorm_srgb = Js.of_string "bc7-rgba-unorm-srgb"
end

and Gpu_sampler : sig
  type t = [ `Gpu_sampler ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUSampler} \
     [GPUSampler]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_sampler ] Js.t

  let t = Js.Ffi.constr "GPUSampler"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUSampler} \
   [GPUSampler] on MDN}."]

and Gpu_sampler_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUSamplerDescriptor] dictionary."]

  val make :
    ?address_mode_u:Gpu_address_mode.t ->
    ?address_mode_v:Gpu_address_mode.t ->
    ?address_mode_w:Gpu_address_mode.t ->
    ?mag_filter:Gpu_filter_mode.t ->
    ?min_filter:Gpu_filter_mode.t ->
    ?mipmap_filter:Gpu_filter_mode.t ->
    ?lod_min_clamp:float ->
    ?lod_max_clamp:float ->
    ?compare:Gpu_compare_function.t ->
    ?max_anisotropy:int ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val address_mode_u : t -> Gpu_address_mode.t option
  val address_mode_v : t -> Gpu_address_mode.t option
  val address_mode_w : t -> Gpu_address_mode.t option
  val mag_filter : t -> Gpu_filter_mode.t option
  val min_filter : t -> Gpu_filter_mode.t option
  val mipmap_filter : t -> Gpu_filter_mode.t option
  val lod_min_clamp : t -> float option
  val lod_max_clamp : t -> float option
  val compare : t -> Gpu_compare_function.t option
  val max_anisotropy : t -> int option
end = struct
  type t = Js.any

  let make ?address_mode_u ?address_mode_v ?address_mode_w ?mag_filter
      ?min_filter ?mipmap_filter ?lod_min_clamp ?lod_max_clamp ?compare
      ?max_anisotropy () =
    let address_mode_u =
      (Js.Any.nullable_of_option Gpu_address_mode.to_any) address_mode_u
    in
    let address_mode_v =
      (Js.Any.nullable_of_option Gpu_address_mode.to_any) address_mode_v
    in
    let address_mode_w =
      (Js.Any.nullable_of_option Gpu_address_mode.to_any) address_mode_w
    in
    let mag_filter =
      (Js.Any.nullable_of_option Gpu_filter_mode.to_any) mag_filter
    in
    let min_filter =
      (Js.Any.nullable_of_option Gpu_filter_mode.to_any) min_filter
    in
    let mipmap_filter =
      (Js.Any.nullable_of_option Gpu_filter_mode.to_any) mipmap_filter
    in
    let lod_min_clamp =
      (Js.Any.nullable_of_option Js.Any.of_float) lod_min_clamp
    in
    let lod_max_clamp =
      (Js.Any.nullable_of_option Js.Any.of_float) lod_max_clamp
    in
    let compare =
      (Js.Any.nullable_of_option Gpu_compare_function.to_any) compare
    in
    let max_anisotropy =
      (Js.Any.nullable_of_option Js.Any.of_int) max_anisotropy
    in
    Js.Ffi.obj
      [|
        ("addressModeU", address_mode_u);
        ("addressModeV", address_mode_v);
        ("addressModeW", address_mode_w);
        ("magFilter", mag_filter);
        ("minFilter", min_filter);
        ("mipmapFilter", mipmap_filter);
        ("lodMinClamp", lod_min_clamp);
        ("lodMaxClamp", lod_max_clamp);
        ("compare", compare);
        ("maxAnisotropy", max_anisotropy);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let address_mode_u this =
    (Js.Any.nullable_to_option Gpu_address_mode.of_any)
      (Js.Ffi.get this "addressModeU")

  let address_mode_v this =
    (Js.Any.nullable_to_option Gpu_address_mode.of_any)
      (Js.Ffi.get this "addressModeV")

  let address_mode_w this =
    (Js.Any.nullable_to_option Gpu_address_mode.of_any)
      (Js.Ffi.get this "addressModeW")

  let mag_filter this =
    (Js.Any.nullable_to_option Gpu_filter_mode.of_any)
      (Js.Ffi.get this "magFilter")

  let min_filter this =
    (Js.Any.nullable_to_option Gpu_filter_mode.of_any)
      (Js.Ffi.get this "minFilter")

  let mipmap_filter this =
    (Js.Any.nullable_to_option Gpu_filter_mode.of_any)
      (Js.Ffi.get this "mipmapFilter")

  let lod_min_clamp this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "lodMinClamp")

  let lod_max_clamp this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "lodMaxClamp")

  let compare this =
    (Js.Any.nullable_to_option Gpu_compare_function.of_any)
      (Js.Ffi.get this "compare")

  let max_anisotropy this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "maxAnisotropy")
end

and Gpu_address_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val clamp_to_edge : t
  val repeat : t
  val mirror_repeat : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let clamp_to_edge = Js.of_string "clamp-to-edge"
  let repeat = Js.of_string "repeat"
  let mirror_repeat = Js.of_string "mirror-repeat"
end

and Gpu_filter_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val nearest : t
  val linear : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let nearest = Js.of_string "nearest"
  let linear = Js.of_string "linear"
end

and Gpu_compare_function : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val never : t
  val less : t
  val equal : t
  val less_equal : t
  val greater : t
  val not_equal : t
  val greater_equal : t
  val always : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let never = Js.of_string "never"
  let less = Js.of_string "less"
  let equal = Js.of_string "equal"
  let less_equal = Js.of_string "less-equal"
  let greater = Js.of_string "greater"
  let not_equal = Js.of_string "not-equal"
  let greater_equal = Js.of_string "greater-equal"
  let always = Js.of_string "always"
end

and Gpu_bind_group_layout : sig
  type t = [ `Gpu_bind_group_layout ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroupLayout} \
     [GPUBindGroupLayout]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_bind_group_layout ] Js.t

  let t = Js.Ffi.constr "GPUBindGroupLayout"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroupLayout} \
   [GPUBindGroupLayout] on MDN}."]

and Gpu_bind_group_layout_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUBindGroupLayoutDescriptor] dictionary."]

  val make : entries:Gpu_bind_group_layout_entry.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val entries : t -> Gpu_bind_group_layout_entry.t array
end = struct
  type t = Js.any

  let make ~entries () =
    let entries =
      (Js.Any.of_array Gpu_bind_group_layout_entry.to_any) entries
    in
    Js.Ffi.obj [| ("entries", entries) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let entries this =
    (Js.Any.to_array Gpu_bind_group_layout_entry.of_any)
      (Js.Ffi.get this "entries")
end

and Gpu_bind_group_layout_entry : sig
  type t [@@ocaml.doc "The type for the [GPUBindGroupLayoutEntry] dictionary."]

  val make :
    binding:Gpu_index32.t ->
    visibility:Gpu_shader_stage_flags.t ->
    ?buffer:Gpu_buffer_binding_layout.t ->
    ?sampler:Gpu_sampler_binding_layout.t ->
    ?texture:Gpu_texture_binding_layout.t ->
    ?storage_texture:Gpu_storage_texture_binding_layout.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val binding : t -> Gpu_index32.t
  val visibility : t -> Gpu_shader_stage_flags.t
  val buffer : t -> Gpu_buffer_binding_layout.t option
  val sampler : t -> Gpu_sampler_binding_layout.t option
  val texture : t -> Gpu_texture_binding_layout.t option
  val storage_texture : t -> Gpu_storage_texture_binding_layout.t option
end = struct
  type t = Js.any

  let make ~binding ~visibility ?buffer ?sampler ?texture ?storage_texture () =
    let binding = Gpu_index32.to_any binding in
    let visibility = Gpu_shader_stage_flags.to_any visibility in
    let buffer =
      (Js.Any.nullable_of_option Gpu_buffer_binding_layout.to_any) buffer
    in
    let sampler =
      (Js.Any.nullable_of_option Gpu_sampler_binding_layout.to_any) sampler
    in
    let texture =
      (Js.Any.nullable_of_option Gpu_texture_binding_layout.to_any) texture
    in
    let storage_texture =
      (Js.Any.nullable_of_option Gpu_storage_texture_binding_layout.to_any)
        storage_texture
    in
    Js.Ffi.obj
      [|
        ("binding", binding);
        ("visibility", visibility);
        ("buffer", buffer);
        ("sampler", sampler);
        ("texture", texture);
        ("storageTexture", storage_texture);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let binding this = Gpu_index32.of_any (Js.Ffi.get this "binding")

  let visibility this =
    Gpu_shader_stage_flags.of_any (Js.Ffi.get this "visibility")

  let buffer this =
    (Js.Any.nullable_to_option Gpu_buffer_binding_layout.of_any)
      (Js.Ffi.get this "buffer")

  let sampler this =
    (Js.Any.nullable_to_option Gpu_sampler_binding_layout.of_any)
      (Js.Ffi.get this "sampler")

  let texture this =
    (Js.Any.nullable_to_option Gpu_texture_binding_layout.of_any)
      (Js.Ffi.get this "texture")

  let storage_texture this =
    (Js.Any.nullable_to_option Gpu_storage_texture_binding_layout.of_any)
      (Js.Ffi.get this "storageTexture")
end

and Gpu_shader_stage_flags : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_shader_stage_flags

and Gpu_shader_stage : sig
  type t = [ `Gpu_shader_stage ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderStage} \
     [GPUShaderStage]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertex : Gpu_shader_stage_flags.t
  val fragment : Gpu_shader_stage_flags.t
  val compute : Gpu_shader_stage_flags.t
end = struct
  type t = [ `Gpu_shader_stage ] Js.t

  let t = Js.Ffi.constr "GPUShaderStage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex = 1
  let fragment = 2
  let compute = 4
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderStage} \
   [GPUShaderStage] on MDN}."]

and Gpu_buffer_binding_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val uniform : t
  val storage : t
  val read_only_storage : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let uniform = Js.of_string "uniform"
  let storage = Js.of_string "storage"
  let read_only_storage = Js.of_string "read-only-storage"
end

and Gpu_buffer_binding_layout : sig
  type t [@@ocaml.doc "The type for the [GPUBufferBindingLayout] dictionary."]

  val make :
    ?type':Gpu_buffer_binding_type.t ->
    ?has_dynamic_offset:bool ->
    ?min_binding_size:Gpu_size64.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> Gpu_buffer_binding_type.t option
  val has_dynamic_offset : t -> bool option
  val min_binding_size : t -> Gpu_size64.t option
end = struct
  type t = Js.any

  let make ?type' ?has_dynamic_offset ?min_binding_size () =
    let type' =
      (Js.Any.nullable_of_option Gpu_buffer_binding_type.to_any) type'
    in
    let has_dynamic_offset =
      (Js.Any.nullable_of_option Js.Any.of_bool) has_dynamic_offset
    in
    let min_binding_size =
      (Js.Any.nullable_of_option Gpu_size64.to_any) min_binding_size
    in
    Js.Ffi.obj
      [|
        ("type", type');
        ("hasDynamicOffset", has_dynamic_offset);
        ("minBindingSize", min_binding_size);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Gpu_buffer_binding_type.of_any)
      (Js.Ffi.get this "type")

  let has_dynamic_offset this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "hasDynamicOffset")

  let min_binding_size this =
    (Js.Any.nullable_to_option Gpu_size64.of_any)
      (Js.Ffi.get this "minBindingSize")
end

and Gpu_sampler_binding_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val filtering : t
  val non_filtering : t
  val comparison : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let filtering = Js.of_string "filtering"
  let non_filtering = Js.of_string "non-filtering"
  let comparison = Js.of_string "comparison"
end

and Gpu_sampler_binding_layout : sig
  type t [@@ocaml.doc "The type for the [GPUSamplerBindingLayout] dictionary."]

  val make : ?type':Gpu_sampler_binding_type.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> Gpu_sampler_binding_type.t option
end = struct
  type t = Js.any

  let make ?type' () =
    let type' =
      (Js.Any.nullable_of_option Gpu_sampler_binding_type.to_any) type'
    in
    Js.Ffi.obj [| ("type", type') |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Gpu_sampler_binding_type.of_any)
      (Js.Ffi.get this "type")
end

and Gpu_texture_sample_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val float : t
  val unfilterable_float : t
  val depth : t
  val sint : t
  val uint : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let float = Js.of_string "float"
  let unfilterable_float = Js.of_string "unfilterable-float"
  let depth = Js.of_string "depth"
  let sint = Js.of_string "sint"
  let uint = Js.of_string "uint"
end

and Gpu_texture_binding_layout : sig
  type t [@@ocaml.doc "The type for the [GPUTextureBindingLayout] dictionary."]

  val make :
    ?sample_type:Gpu_texture_sample_type.t ->
    ?view_dimension:Gpu_texture_view_dimension.t ->
    ?multisampled:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val sample_type : t -> Gpu_texture_sample_type.t option
  val view_dimension : t -> Gpu_texture_view_dimension.t option
  val multisampled : t -> bool option
end = struct
  type t = Js.any

  let make ?sample_type ?view_dimension ?multisampled () =
    let sample_type =
      (Js.Any.nullable_of_option Gpu_texture_sample_type.to_any) sample_type
    in
    let view_dimension =
      (Js.Any.nullable_of_option Gpu_texture_view_dimension.to_any)
        view_dimension
    in
    let multisampled =
      (Js.Any.nullable_of_option Js.Any.of_bool) multisampled
    in
    Js.Ffi.obj
      [|
        ("sampleType", sample_type);
        ("viewDimension", view_dimension);
        ("multisampled", multisampled);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let sample_type this =
    (Js.Any.nullable_to_option Gpu_texture_sample_type.of_any)
      (Js.Ffi.get this "sampleType")

  let view_dimension this =
    (Js.Any.nullable_to_option Gpu_texture_view_dimension.of_any)
      (Js.Ffi.get this "viewDimension")

  let multisampled this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "multisampled")
end

and Gpu_storage_texture_access : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val write_only : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let write_only = Js.of_string "write-only"
end

and Gpu_storage_texture_binding_layout : sig
  type t
  [@@ocaml.doc "The type for the [GPUStorageTextureBindingLayout] dictionary."]

  val make :
    ?access:Gpu_storage_texture_access.t ->
    format:Gpu_texture_format.t ->
    ?view_dimension:Gpu_texture_view_dimension.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val access : t -> Gpu_storage_texture_access.t option
  val format : t -> Gpu_texture_format.t
  val view_dimension : t -> Gpu_texture_view_dimension.t option
end = struct
  type t = Js.any

  let make ?access ~format ?view_dimension () =
    let access =
      (Js.Any.nullable_of_option Gpu_storage_texture_access.to_any) access
    in
    let format = Gpu_texture_format.to_any format in
    let view_dimension =
      (Js.Any.nullable_of_option Gpu_texture_view_dimension.to_any)
        view_dimension
    in
    Js.Ffi.obj
      [|
        ("access", access); ("format", format); ("viewDimension", view_dimension);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let access this =
    (Js.Any.nullable_to_option Gpu_storage_texture_access.of_any)
      (Js.Ffi.get this "access")

  let format this = Gpu_texture_format.of_any (Js.Ffi.get this "format")

  let view_dimension this =
    (Js.Any.nullable_to_option Gpu_texture_view_dimension.of_any)
      (Js.Ffi.get this "viewDimension")
end

and Gpu_bind_group : sig
  type t = [ `Gpu_bind_group ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroup} \
     [GPUBindGroup]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_bind_group ] Js.t

  let t = Js.Ffi.constr "GPUBindGroup"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroup} \
   [GPUBindGroup] on MDN}."]

and Gpu_bind_group_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUBindGroupDescriptor] dictionary."]

  val make :
    layout:Gpu_bind_group_layout.t ->
    entries:Gpu_bind_group_entry.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val layout : t -> Gpu_bind_group_layout.t
  val entries : t -> Gpu_bind_group_entry.t array
end = struct
  type t = Js.any

  let make ~layout ~entries () =
    let layout = Gpu_bind_group_layout.to_any layout in
    let entries = (Js.Any.of_array Gpu_bind_group_entry.to_any) entries in
    Js.Ffi.obj [| ("layout", layout); ("entries", entries) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let layout this = Gpu_bind_group_layout.of_any (Js.Ffi.get this "layout")

  let entries this =
    (Js.Any.to_array Gpu_bind_group_entry.of_any) (Js.Ffi.get this "entries")
end

and Gpu_binding_resource : sig
  type t

  val with_gpu_sampler : Gpu_sampler.t -> t
  val with_gpu_texture_view : Gpu_texture_view.t -> t
  val with_gpu_buffer_binding : Gpu_buffer_binding.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_gpu_sampler = Js.repr
  let with_gpu_texture_view = Js.repr
  let with_gpu_buffer_binding = Js.repr
end

and Gpu_bind_group_entry : sig
  type t [@@ocaml.doc "The type for the [GPUBindGroupEntry] dictionary."]

  val make :
    binding:Gpu_index32.t -> resource:Gpu_binding_resource.t -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val binding : t -> Gpu_index32.t
  val resource : t -> Gpu_binding_resource.t
end = struct
  type t = Js.any

  let make ~binding ~resource () =
    let binding = Gpu_index32.to_any binding in
    let resource = Gpu_binding_resource.to_any resource in
    Js.Ffi.obj [| ("binding", binding); ("resource", resource) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let binding this = Gpu_index32.of_any (Js.Ffi.get this "binding")
  let resource this = Gpu_binding_resource.of_any (Js.Ffi.get this "resource")
end

and Gpu_buffer_binding : sig
  type t [@@ocaml.doc "The type for the [GPUBufferBinding] dictionary."]

  val make :
    buffer:Gpu_buffer.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val buffer : t -> Gpu_buffer.t
  val offset : t -> Gpu_size64.t option
  val size : t -> Gpu_size64.t option
end = struct
  type t = Js.any

  let make ~buffer ?offset ?size () =
    let buffer = Gpu_buffer.to_any buffer in
    let offset = (Js.Any.nullable_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.nullable_of_option Gpu_size64.to_any) size in
    Js.Ffi.obj [| ("buffer", buffer); ("offset", offset); ("size", size) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let buffer this = Gpu_buffer.of_any (Js.Ffi.get this "buffer")

  let offset this =
    (Js.Any.nullable_to_option Gpu_size64.of_any) (Js.Ffi.get this "offset")

  let size this =
    (Js.Any.nullable_to_option Gpu_size64.of_any) (Js.Ffi.get this "size")
end

and Gpu_pipeline_layout : sig
  type t = [ `Gpu_pipeline_layout ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUPipelineLayout} \
     [GPUPipelineLayout]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_pipeline_layout ] Js.t

  let t = Js.Ffi.constr "GPUPipelineLayout"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUPipelineLayout} \
   [GPUPipelineLayout] on MDN}."]

and Gpu_pipeline_layout_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUPipelineLayoutDescriptor] dictionary."]

  val make : bind_group_layouts:Gpu_bind_group_layout.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val bind_group_layouts : t -> Gpu_bind_group_layout.t array
end = struct
  type t = Js.any

  let make ~bind_group_layouts () =
    let bind_group_layouts =
      (Js.Any.of_array Gpu_bind_group_layout.to_any) bind_group_layouts
    in
    Js.Ffi.obj [| ("bindGroupLayouts", bind_group_layouts) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let bind_group_layouts this =
    (Js.Any.to_array Gpu_bind_group_layout.of_any)
      (Js.Ffi.get this "bindGroupLayouts")
end

and Gpu_shader_module : sig
  type t = [ `Gpu_shader_module ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule} \
     [GPUShaderModule]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_compilation_info : t -> Gpu_compilation_info.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule/getCompilationInfo} \
     [getCompilationInfo] on MDN}."]
end = struct
  type t = [ `Gpu_shader_module ] Js.t

  let t = Js.Ffi.constr "GPUShaderModule"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_compilation_info this =
    (Promise.of_any Gpu_compilation_info.of_any)
      (Js.Ffi.meth_call this "getCompilationInfo" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule} \
   [GPUShaderModule] on MDN}."]

and Gpu_shader_module_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUShaderModuleDescriptor] dictionary."]

  val make : code:string -> ?source_map:'todo_object -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val code : t -> string
  val source_map : t -> 'todo_object option
end = struct
  type t = Js.any

  let make ~code ?source_map () =
    let code = Js.Any.of_string code in
    let source_map = (Js.Any.nullable_of_option Js.object_todo) source_map in
    Js.Ffi.obj [| ("code", code); ("sourceMap", source_map) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let code this = Js.Any.to_string (Js.Ffi.get this "code")

  let source_map this =
    (Js.Any.nullable_to_option Js.object_todo) (Js.Ffi.get this "sourceMap")
end

and Gpu_compilation_message_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val error : t
  val warning : t
  val info : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let error = Js.of_string "error"
  let warning = Js.of_string "warning"
  let info = Js.of_string "info"
end

and Gpu_compilation_message : sig
  type t = [ `Gpu_compilation_message ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage} \
     [GPUCompilationMessage]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/message} \
     [message] on MDN}."]

  val type' : t -> Gpu_compilation_message_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/type} \
     [type] on MDN}."]

  val line_num : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/lineNum} \
     [lineNum] on MDN}."]

  val line_pos : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/linePos} \
     [linePos] on MDN}."]

  val offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/offset} \
     [offset] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage/length} \
     [length] on MDN}."]
end = struct
  type t = [ `Gpu_compilation_message ] Js.t

  let t = Js.Ffi.constr "GPUCompilationMessage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let message this = Js.Any.to_string (Js.Ffi.get this "message")
  let type' this = Gpu_compilation_message_type.of_any (Js.Ffi.get this "type")
  let line_num this = Js.Any.to_int (Js.Ffi.get this "lineNum")
  let line_pos this = Js.Any.to_int (Js.Ffi.get this "linePos")
  let offset this = Js.Any.to_int (Js.Ffi.get this "offset")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage} \
   [GPUCompilationMessage] on MDN}."]

and Gpu_compilation_info : sig
  type t = [ `Gpu_compilation_info ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationInfo} \
     [GPUCompilationInfo]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val messages : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationInfo/messages} \
     [messages] on MDN}."]
end = struct
  type t = [ `Gpu_compilation_info ] Js.t

  let t = Js.Ffi.constr "GPUCompilationInfo"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let messages this = Js.to_any (Js.Ffi.get this "messages")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationInfo} \
   [GPUCompilationInfo] on MDN}."]

and Gpu_auto_layout_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val auto : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let auto = Js.of_string "auto"
end

and Gpu_pipeline_descriptor_base : sig
  type t
  [@@ocaml.doc "The type for the [GPUPipelineDescriptorBase] dictionary."]

  val make :
    layout:[< `Gpu_pipeline_layout | `Gpu_auto_layout_mode ] Js.t -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val layout : t -> [< `Gpu_pipeline_layout | `Gpu_auto_layout_mode ] Js.t
end = struct
  type t = Js.any

  let make ~layout () =
    let layout = Js.to_any layout in
    Js.Ffi.obj [| ("layout", layout) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let layout this = Js.of_any (Js.Ffi.get this "layout")
end

and Gpu_programmable_stage : sig
  type t [@@ocaml.doc "The type for the [GPUProgrammableStage] dictionary."]

  val make : module':Gpu_shader_module.t -> entry_point:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val module' : t -> Gpu_shader_module.t
  val entry_point : t -> string
end = struct
  type t = Js.any

  let make ~module' ~entry_point () =
    let module' = Gpu_shader_module.to_any module' in
    let entry_point = Js.Any.of_string entry_point in
    Js.Ffi.obj [| ("module", module'); ("entryPoint", entry_point) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let module' this = Gpu_shader_module.of_any (Js.Ffi.get this "module")
  let entry_point this = Js.Any.to_string (Js.Ffi.get this "entryPoint")
end

and Gpu_compute_pipeline : sig
  type t = [ `Gpu_compute_pipeline ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePipeline} \
     [GPUComputePipeline]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_bind_group_layout : index:int -> t -> Gpu_bind_group_layout.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePipeline/getBindGroupLayout} \
     [getBindGroupLayout] on MDN}."]
end = struct
  type t = [ `Gpu_compute_pipeline ] Js.t

  let t = Js.Ffi.constr "GPUComputePipeline"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_bind_group_layout ~index this =
    let index = Js.Any.of_int index in
    Gpu_bind_group_layout.of_any
      (Js.Ffi.meth_call this "getBindGroupLayout" [| index |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePipeline} \
   [GPUComputePipeline] on MDN}."]

and Gpu_compute_pipeline_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUComputePipelineDescriptor] dictionary."]

  val make : compute:Gpu_programmable_stage.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_pipeline_descriptor_base : t -> Gpu_pipeline_descriptor_base.t
  val compute : t -> Gpu_programmable_stage.t
end = struct
  type t = Js.any

  let make ~compute () =
    let compute = Gpu_programmable_stage.to_any compute in
    Js.Ffi.obj [| ("compute", compute) |]

  let to_gpu_pipeline_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let compute this = Gpu_programmable_stage.of_any (Js.Ffi.get this "compute")
end

and Gpu_render_pipeline : sig
  type t = [ `Gpu_render_pipeline ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPipeline} \
     [GPURenderPipeline]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_bind_group_layout : index:int -> t -> Gpu_bind_group_layout.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPipeline/getBindGroupLayout} \
     [getBindGroupLayout] on MDN}."]
end = struct
  type t = [ `Gpu_render_pipeline ] Js.t

  let t = Js.Ffi.constr "GPURenderPipeline"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_bind_group_layout ~index this =
    let index = Js.Any.of_int index in
    Gpu_bind_group_layout.of_any
      (Js.Ffi.meth_call this "getBindGroupLayout" [| index |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPipeline} \
   [GPURenderPipeline] on MDN}."]

and Gpu_render_pipeline_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPURenderPipelineDescriptor] dictionary."]

  val make :
    vertex:Gpu_vertex_state.t ->
    ?primitive:Gpu_primitive_state.t ->
    ?depth_stencil:Gpu_depth_stencil_state.t ->
    ?multisample:Gpu_multisample_state.t ->
    ?fragment:Gpu_fragment_state.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_pipeline_descriptor_base : t -> Gpu_pipeline_descriptor_base.t
  val vertex : t -> Gpu_vertex_state.t
  val primitive : t -> Gpu_primitive_state.t option
  val depth_stencil : t -> Gpu_depth_stencil_state.t option
  val multisample : t -> Gpu_multisample_state.t option
  val fragment : t -> Gpu_fragment_state.t option
end = struct
  type t = Js.any

  let make ~vertex ?primitive ?depth_stencil ?multisample ?fragment () =
    let vertex = Gpu_vertex_state.to_any vertex in
    let primitive =
      (Js.Any.nullable_of_option Gpu_primitive_state.to_any) primitive
    in
    let depth_stencil =
      (Js.Any.nullable_of_option Gpu_depth_stencil_state.to_any) depth_stencil
    in
    let multisample =
      (Js.Any.nullable_of_option Gpu_multisample_state.to_any) multisample
    in
    let fragment =
      (Js.Any.nullable_of_option Gpu_fragment_state.to_any) fragment
    in
    Js.Ffi.obj
      [|
        ("vertex", vertex);
        ("primitive", primitive);
        ("depthStencil", depth_stencil);
        ("multisample", multisample);
        ("fragment", fragment);
      |]

  let to_gpu_pipeline_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex this = Gpu_vertex_state.of_any (Js.Ffi.get this "vertex")

  let primitive this =
    (Js.Any.nullable_to_option Gpu_primitive_state.of_any)
      (Js.Ffi.get this "primitive")

  let depth_stencil this =
    (Js.Any.nullable_to_option Gpu_depth_stencil_state.of_any)
      (Js.Ffi.get this "depthStencil")

  let multisample this =
    (Js.Any.nullable_to_option Gpu_multisample_state.of_any)
      (Js.Ffi.get this "multisample")

  let fragment this =
    (Js.Any.nullable_to_option Gpu_fragment_state.of_any)
      (Js.Ffi.get this "fragment")
end

and Gpu_primitive_state : sig
  type t [@@ocaml.doc "The type for the [GPUPrimitiveState] dictionary."]

  val make :
    ?topology:Gpu_primitive_topology.t ->
    ?strip_index_format:Gpu_index_format.t ->
    ?front_face:Gpu_front_face.t ->
    ?cull_mode:Gpu_cull_mode.t ->
    ?clamp_depth:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val topology : t -> Gpu_primitive_topology.t option
  val strip_index_format : t -> Gpu_index_format.t option
  val front_face : t -> Gpu_front_face.t option
  val cull_mode : t -> Gpu_cull_mode.t option
  val clamp_depth : t -> bool option
end = struct
  type t = Js.any

  let make ?topology ?strip_index_format ?front_face ?cull_mode ?clamp_depth ()
      =
    let topology =
      (Js.Any.nullable_of_option Gpu_primitive_topology.to_any) topology
    in
    let strip_index_format =
      (Js.Any.nullable_of_option Gpu_index_format.to_any) strip_index_format
    in
    let front_face =
      (Js.Any.nullable_of_option Gpu_front_face.to_any) front_face
    in
    let cull_mode =
      (Js.Any.nullable_of_option Gpu_cull_mode.to_any) cull_mode
    in
    let clamp_depth = (Js.Any.nullable_of_option Js.Any.of_bool) clamp_depth in
    Js.Ffi.obj
      [|
        ("topology", topology);
        ("stripIndexFormat", strip_index_format);
        ("frontFace", front_face);
        ("cullMode", cull_mode);
        ("clampDepth", clamp_depth);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let topology this =
    (Js.Any.nullable_to_option Gpu_primitive_topology.of_any)
      (Js.Ffi.get this "topology")

  let strip_index_format this =
    (Js.Any.nullable_to_option Gpu_index_format.of_any)
      (Js.Ffi.get this "stripIndexFormat")

  let front_face this =
    (Js.Any.nullable_to_option Gpu_front_face.of_any)
      (Js.Ffi.get this "frontFace")

  let cull_mode this =
    (Js.Any.nullable_to_option Gpu_cull_mode.of_any) (Js.Ffi.get this "cullMode")

  let clamp_depth this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "clampDepth")
end

and Gpu_primitive_topology : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val point_list : t
  val line_list : t
  val line_strip : t
  val triangle_list : t
  val triangle_strip : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let point_list = Js.of_string "point-list"
  let line_list = Js.of_string "line-list"
  let line_strip = Js.of_string "line-strip"
  let triangle_list = Js.of_string "triangle-list"
  let triangle_strip = Js.of_string "triangle-strip"
end

and Gpu_front_face : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val ccw : t
  val cw : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let ccw = Js.of_string "ccw"
  let cw = Js.of_string "cw"
end

and Gpu_cull_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val front : t
  val back : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let front = Js.of_string "front"
  let back = Js.of_string "back"
end

and Gpu_multisample_state : sig
  type t [@@ocaml.doc "The type for the [GPUMultisampleState] dictionary."]

  val make :
    ?count:Gpu_size32.t ->
    ?mask:Gpu_sample_mask.t ->
    ?alpha_to_coverage_enabled:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val count : t -> Gpu_size32.t option
  val mask : t -> Gpu_sample_mask.t option
  val alpha_to_coverage_enabled : t -> bool option
end = struct
  type t = Js.any

  let make ?count ?mask ?alpha_to_coverage_enabled () =
    let count = (Js.Any.nullable_of_option Gpu_size32.to_any) count in
    let mask = (Js.Any.nullable_of_option Gpu_sample_mask.to_any) mask in
    let alpha_to_coverage_enabled =
      (Js.Any.nullable_of_option Js.Any.of_bool) alpha_to_coverage_enabled
    in
    Js.Ffi.obj
      [|
        ("count", count);
        ("mask", mask);
        ("alphaToCoverageEnabled", alpha_to_coverage_enabled);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let count this =
    (Js.Any.nullable_to_option Gpu_size32.of_any) (Js.Ffi.get this "count")

  let mask this =
    (Js.Any.nullable_to_option Gpu_sample_mask.of_any) (Js.Ffi.get this "mask")

  let alpha_to_coverage_enabled this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "alphaToCoverageEnabled")
end

and Gpu_fragment_state : sig
  type t [@@ocaml.doc "The type for the [GPUFragmentState] dictionary."]

  val make : targets:Gpu_color_target_state.t array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_programmable_stage : t -> Gpu_programmable_stage.t
  val targets : t -> Gpu_color_target_state.t array
end = struct
  type t = Js.any

  let make ~targets () =
    let targets = (Js.Any.of_array Gpu_color_target_state.to_any) targets in
    Js.Ffi.obj [| ("targets", targets) |]

  let to_gpu_programmable_stage this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let targets this =
    (Js.Any.to_array Gpu_color_target_state.of_any) (Js.Ffi.get this "targets")
end

and Gpu_color_target_state : sig
  type t [@@ocaml.doc "The type for the [GPUColorTargetState] dictionary."]

  val make :
    format:Gpu_texture_format.t ->
    ?blend:Gpu_blend_state.t ->
    ?write_mask:Gpu_color_write_flags.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val format : t -> Gpu_texture_format.t
  val blend : t -> Gpu_blend_state.t option
  val write_mask : t -> Gpu_color_write_flags.t option
end = struct
  type t = Js.any

  let make ~format ?blend ?write_mask () =
    let format = Gpu_texture_format.to_any format in
    let blend = (Js.Any.nullable_of_option Gpu_blend_state.to_any) blend in
    let write_mask =
      (Js.Any.nullable_of_option Gpu_color_write_flags.to_any) write_mask
    in
    Js.Ffi.obj
      [| ("format", format); ("blend", blend); ("writeMask", write_mask) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let format this = Gpu_texture_format.of_any (Js.Ffi.get this "format")

  let blend this =
    (Js.Any.nullable_to_option Gpu_blend_state.of_any) (Js.Ffi.get this "blend")

  let write_mask this =
    (Js.Any.nullable_to_option Gpu_color_write_flags.of_any)
      (Js.Ffi.get this "writeMask")
end

and Gpu_blend_state : sig
  type t [@@ocaml.doc "The type for the [GPUBlendState] dictionary."]

  val make :
    color:Gpu_blend_component.t -> alpha:Gpu_blend_component.t -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val color : t -> Gpu_blend_component.t
  val alpha : t -> Gpu_blend_component.t
end = struct
  type t = Js.any

  let make ~color ~alpha () =
    let color = Gpu_blend_component.to_any color in
    let alpha = Gpu_blend_component.to_any alpha in
    Js.Ffi.obj [| ("color", color); ("alpha", alpha) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let color this = Gpu_blend_component.of_any (Js.Ffi.get this "color")
  let alpha this = Gpu_blend_component.of_any (Js.Ffi.get this "alpha")
end

and Gpu_color_write_flags : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_color_write_flags

and Gpu_color_write : sig
  type t = [ `Gpu_color_write ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUColorWrite} \
     [GPUColorWrite]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val red : Gpu_color_write_flags.t
  val green : Gpu_color_write_flags.t
  val blue : Gpu_color_write_flags.t
  val alpha : Gpu_color_write_flags.t
  val all : Gpu_color_write_flags.t
end = struct
  type t = [ `Gpu_color_write ] Js.t

  let t = Js.Ffi.constr "GPUColorWrite"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let red = 1
  let green = 2
  let blue = 4
  let alpha = 8
  let all = 15
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUColorWrite} \
   [GPUColorWrite] on MDN}."]

and Gpu_blend_component : sig
  type t [@@ocaml.doc "The type for the [GPUBlendComponent] dictionary."]

  val make :
    ?src_factor:Gpu_blend_factor.t ->
    ?dst_factor:Gpu_blend_factor.t ->
    ?operation:Gpu_blend_operation.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val src_factor : t -> Gpu_blend_factor.t option
  val dst_factor : t -> Gpu_blend_factor.t option
  val operation : t -> Gpu_blend_operation.t option
end = struct
  type t = Js.any

  let make ?src_factor ?dst_factor ?operation () =
    let src_factor =
      (Js.Any.nullable_of_option Gpu_blend_factor.to_any) src_factor
    in
    let dst_factor =
      (Js.Any.nullable_of_option Gpu_blend_factor.to_any) dst_factor
    in
    let operation =
      (Js.Any.nullable_of_option Gpu_blend_operation.to_any) operation
    in
    Js.Ffi.obj
      [|
        ("srcFactor", src_factor);
        ("dstFactor", dst_factor);
        ("operation", operation);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let src_factor this =
    (Js.Any.nullable_to_option Gpu_blend_factor.of_any)
      (Js.Ffi.get this "srcFactor")

  let dst_factor this =
    (Js.Any.nullable_to_option Gpu_blend_factor.of_any)
      (Js.Ffi.get this "dstFactor")

  let operation this =
    (Js.Any.nullable_to_option Gpu_blend_operation.of_any)
      (Js.Ffi.get this "operation")
end

and Gpu_blend_factor : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val zero : t
  val one : t
  val src : t
  val one_minus_src : t
  val src_alpha : t
  val one_minus_src_alpha : t
  val dst : t
  val one_minus_dst : t
  val dst_alpha : t
  val one_minus_dst_alpha : t
  val src_alpha_saturated : t
  val constant : t
  val one_minus_constant : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let zero = Js.of_string "zero"
  let one = Js.of_string "one"
  let src = Js.of_string "src"
  let one_minus_src = Js.of_string "one-minus-src"
  let src_alpha = Js.of_string "src-alpha"
  let one_minus_src_alpha = Js.of_string "one-minus-src-alpha"
  let dst = Js.of_string "dst"
  let one_minus_dst = Js.of_string "one-minus-dst"
  let dst_alpha = Js.of_string "dst-alpha"
  let one_minus_dst_alpha = Js.of_string "one-minus-dst-alpha"
  let src_alpha_saturated = Js.of_string "src-alpha-saturated"
  let constant = Js.of_string "constant"
  let one_minus_constant = Js.of_string "one-minus-constant"
end

and Gpu_blend_operation : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val add : t
  val subtract : t
  val reverse_subtract : t
  val min : t
  val max : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let add = Js.of_string "add"
  let subtract = Js.of_string "subtract"
  let reverse_subtract = Js.of_string "reverse-subtract"
  let min = Js.of_string "min"
  let max = Js.of_string "max"
end

and Gpu_depth_stencil_state : sig
  type t [@@ocaml.doc "The type for the [GPUDepthStencilState] dictionary."]

  val make :
    format:Gpu_texture_format.t ->
    ?depth_write_enabled:bool ->
    ?depth_compare:Gpu_compare_function.t ->
    ?stencil_front:Gpu_stencil_face_state.t ->
    ?stencil_back:Gpu_stencil_face_state.t ->
    ?stencil_read_mask:Gpu_stencil_value.t ->
    ?stencil_write_mask:Gpu_stencil_value.t ->
    ?depth_bias:Gpu_depth_bias.t ->
    ?depth_bias_slope_scale:float ->
    ?depth_bias_clamp:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val format : t -> Gpu_texture_format.t
  val depth_write_enabled : t -> bool option
  val depth_compare : t -> Gpu_compare_function.t option
  val stencil_front : t -> Gpu_stencil_face_state.t option
  val stencil_back : t -> Gpu_stencil_face_state.t option
  val stencil_read_mask : t -> Gpu_stencil_value.t option
  val stencil_write_mask : t -> Gpu_stencil_value.t option
  val depth_bias : t -> Gpu_depth_bias.t option
  val depth_bias_slope_scale : t -> float option
  val depth_bias_clamp : t -> float option
end = struct
  type t = Js.any

  let make ~format ?depth_write_enabled ?depth_compare ?stencil_front
      ?stencil_back ?stencil_read_mask ?stencil_write_mask ?depth_bias
      ?depth_bias_slope_scale ?depth_bias_clamp () =
    let format = Gpu_texture_format.to_any format in
    let depth_write_enabled =
      (Js.Any.nullable_of_option Js.Any.of_bool) depth_write_enabled
    in
    let depth_compare =
      (Js.Any.nullable_of_option Gpu_compare_function.to_any) depth_compare
    in
    let stencil_front =
      (Js.Any.nullable_of_option Gpu_stencil_face_state.to_any) stencil_front
    in
    let stencil_back =
      (Js.Any.nullable_of_option Gpu_stencil_face_state.to_any) stencil_back
    in
    let stencil_read_mask =
      (Js.Any.nullable_of_option Gpu_stencil_value.to_any) stencil_read_mask
    in
    let stencil_write_mask =
      (Js.Any.nullable_of_option Gpu_stencil_value.to_any) stencil_write_mask
    in
    let depth_bias =
      (Js.Any.nullable_of_option Gpu_depth_bias.to_any) depth_bias
    in
    let depth_bias_slope_scale =
      (Js.Any.nullable_of_option Js.Any.of_float) depth_bias_slope_scale
    in
    let depth_bias_clamp =
      (Js.Any.nullable_of_option Js.Any.of_float) depth_bias_clamp
    in
    Js.Ffi.obj
      [|
        ("format", format);
        ("depthWriteEnabled", depth_write_enabled);
        ("depthCompare", depth_compare);
        ("stencilFront", stencil_front);
        ("stencilBack", stencil_back);
        ("stencilReadMask", stencil_read_mask);
        ("stencilWriteMask", stencil_write_mask);
        ("depthBias", depth_bias);
        ("depthBiasSlopeScale", depth_bias_slope_scale);
        ("depthBiasClamp", depth_bias_clamp);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let format this = Gpu_texture_format.of_any (Js.Ffi.get this "format")

  let depth_write_enabled this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "depthWriteEnabled")

  let depth_compare this =
    (Js.Any.nullable_to_option Gpu_compare_function.of_any)
      (Js.Ffi.get this "depthCompare")

  let stencil_front this =
    (Js.Any.nullable_to_option Gpu_stencil_face_state.of_any)
      (Js.Ffi.get this "stencilFront")

  let stencil_back this =
    (Js.Any.nullable_to_option Gpu_stencil_face_state.of_any)
      (Js.Ffi.get this "stencilBack")

  let stencil_read_mask this =
    (Js.Any.nullable_to_option Gpu_stencil_value.of_any)
      (Js.Ffi.get this "stencilReadMask")

  let stencil_write_mask this =
    (Js.Any.nullable_to_option Gpu_stencil_value.of_any)
      (Js.Ffi.get this "stencilWriteMask")

  let depth_bias this =
    (Js.Any.nullable_to_option Gpu_depth_bias.of_any)
      (Js.Ffi.get this "depthBias")

  let depth_bias_slope_scale this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "depthBiasSlopeScale")

  let depth_bias_clamp this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "depthBiasClamp")
end

and Gpu_stencil_face_state : sig
  type t [@@ocaml.doc "The type for the [GPUStencilFaceState] dictionary."]

  val make :
    ?compare:Gpu_compare_function.t ->
    ?fail_op:Gpu_stencil_operation.t ->
    ?depth_fail_op:Gpu_stencil_operation.t ->
    ?pass_op:Gpu_stencil_operation.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val compare : t -> Gpu_compare_function.t option
  val fail_op : t -> Gpu_stencil_operation.t option
  val depth_fail_op : t -> Gpu_stencil_operation.t option
  val pass_op : t -> Gpu_stencil_operation.t option
end = struct
  type t = Js.any

  let make ?compare ?fail_op ?depth_fail_op ?pass_op () =
    let compare =
      (Js.Any.nullable_of_option Gpu_compare_function.to_any) compare
    in
    let fail_op =
      (Js.Any.nullable_of_option Gpu_stencil_operation.to_any) fail_op
    in
    let depth_fail_op =
      (Js.Any.nullable_of_option Gpu_stencil_operation.to_any) depth_fail_op
    in
    let pass_op =
      (Js.Any.nullable_of_option Gpu_stencil_operation.to_any) pass_op
    in
    Js.Ffi.obj
      [|
        ("compare", compare);
        ("failOp", fail_op);
        ("depthFailOp", depth_fail_op);
        ("passOp", pass_op);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let compare this =
    (Js.Any.nullable_to_option Gpu_compare_function.of_any)
      (Js.Ffi.get this "compare")

  let fail_op this =
    (Js.Any.nullable_to_option Gpu_stencil_operation.of_any)
      (Js.Ffi.get this "failOp")

  let depth_fail_op this =
    (Js.Any.nullable_to_option Gpu_stencil_operation.of_any)
      (Js.Ffi.get this "depthFailOp")

  let pass_op this =
    (Js.Any.nullable_to_option Gpu_stencil_operation.of_any)
      (Js.Ffi.get this "passOp")
end

and Gpu_stencil_operation : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val keep : t
  val zero : t
  val replace : t
  val invert : t
  val increment_clamp : t
  val decrement_clamp : t
  val increment_wrap : t
  val decrement_wrap : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let keep = Js.of_string "keep"
  let zero = Js.of_string "zero"
  let replace = Js.of_string "replace"
  let invert = Js.of_string "invert"
  let increment_clamp = Js.of_string "increment-clamp"
  let decrement_clamp = Js.of_string "decrement-clamp"
  let increment_wrap = Js.of_string "increment-wrap"
  let decrement_wrap = Js.of_string "decrement-wrap"
end

and Gpu_index_format : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val uint16 : t
  val uint32 : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let uint16 = Js.of_string "uint16"
  let uint32 = Js.of_string "uint32"
end

and Gpu_vertex_format : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val uint8x2 : t
  val uint8x4 : t
  val sint8x2 : t
  val sint8x4 : t
  val unorm8x2 : t
  val unorm8x4 : t
  val snorm8x2 : t
  val snorm8x4 : t
  val uint16x2 : t
  val uint16x4 : t
  val sint16x2 : t
  val sint16x4 : t
  val unorm16x2 : t
  val unorm16x4 : t
  val snorm16x2 : t
  val snorm16x4 : t
  val float16x2 : t
  val float16x4 : t
  val float32 : t
  val float32x2 : t
  val float32x3 : t
  val float32x4 : t
  val uint32 : t
  val uint32x2 : t
  val uint32x3 : t
  val uint32x4 : t
  val sint32 : t
  val sint32x2 : t
  val sint32x3 : t
  val sint32x4 : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let uint8x2 = Js.of_string "uint8x2"
  let uint8x4 = Js.of_string "uint8x4"
  let sint8x2 = Js.of_string "sint8x2"
  let sint8x4 = Js.of_string "sint8x4"
  let unorm8x2 = Js.of_string "unorm8x2"
  let unorm8x4 = Js.of_string "unorm8x4"
  let snorm8x2 = Js.of_string "snorm8x2"
  let snorm8x4 = Js.of_string "snorm8x4"
  let uint16x2 = Js.of_string "uint16x2"
  let uint16x4 = Js.of_string "uint16x4"
  let sint16x2 = Js.of_string "sint16x2"
  let sint16x4 = Js.of_string "sint16x4"
  let unorm16x2 = Js.of_string "unorm16x2"
  let unorm16x4 = Js.of_string "unorm16x4"
  let snorm16x2 = Js.of_string "snorm16x2"
  let snorm16x4 = Js.of_string "snorm16x4"
  let float16x2 = Js.of_string "float16x2"
  let float16x4 = Js.of_string "float16x4"
  let float32 = Js.of_string "float32"
  let float32x2 = Js.of_string "float32x2"
  let float32x3 = Js.of_string "float32x3"
  let float32x4 = Js.of_string "float32x4"
  let uint32 = Js.of_string "uint32"
  let uint32x2 = Js.of_string "uint32x2"
  let uint32x3 = Js.of_string "uint32x3"
  let uint32x4 = Js.of_string "uint32x4"
  let sint32 = Js.of_string "sint32"
  let sint32x2 = Js.of_string "sint32x2"
  let sint32x3 = Js.of_string "sint32x3"
  let sint32x4 = Js.of_string "sint32x4"
end

and Gpu_vertex_step_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertex : t
  val instance : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex = Js.of_string "vertex"
  let instance = Js.of_string "instance"
end

and Gpu_vertex_state : sig
  type t [@@ocaml.doc "The type for the [GPUVertexState] dictionary."]

  val make : ?buffers:Gpu_vertex_buffer_layout.t option array -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_programmable_stage : t -> Gpu_programmable_stage.t
  val buffers : t -> Gpu_vertex_buffer_layout.t option array option
end = struct
  type t = Js.any

  let make ?buffers () =
    let buffers =
      (Js.Any.nullable_of_option
         (Js.Any.of_array
            (Js.Any.nullable_of_option Gpu_vertex_buffer_layout.to_any)
         )
      )
        buffers
    in
    Js.Ffi.obj [| ("buffers", buffers) |]

  let to_gpu_programmable_stage this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let buffers this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array
          (Js.Any.nullable_to_option Gpu_vertex_buffer_layout.of_any)
       )
    )
      (Js.Ffi.get this "buffers")
end

and Gpu_vertex_buffer_layout : sig
  type t [@@ocaml.doc "The type for the [GPUVertexBufferLayout] dictionary."]

  val make :
    array_stride:Gpu_size64.t ->
    ?step_mode:Gpu_vertex_step_mode.t ->
    attributes:Gpu_vertex_attribute.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val array_stride : t -> Gpu_size64.t
  val step_mode : t -> Gpu_vertex_step_mode.t option
  val attributes : t -> Gpu_vertex_attribute.t array
end = struct
  type t = Js.any

  let make ~array_stride ?step_mode ~attributes () =
    let array_stride = Gpu_size64.to_any array_stride in
    let step_mode =
      (Js.Any.nullable_of_option Gpu_vertex_step_mode.to_any) step_mode
    in
    let attributes = (Js.Any.of_array Gpu_vertex_attribute.to_any) attributes in
    Js.Ffi.obj
      [|
        ("arrayStride", array_stride);
        ("stepMode", step_mode);
        ("attributes", attributes);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let array_stride this = Gpu_size64.of_any (Js.Ffi.get this "arrayStride")

  let step_mode this =
    (Js.Any.nullable_to_option Gpu_vertex_step_mode.of_any)
      (Js.Ffi.get this "stepMode")

  let attributes this =
    (Js.Any.to_array Gpu_vertex_attribute.of_any) (Js.Ffi.get this "attributes")
end

and Gpu_vertex_attribute : sig
  type t [@@ocaml.doc "The type for the [GPUVertexAttribute] dictionary."]

  val make :
    format:Gpu_vertex_format.t ->
    offset:Gpu_size64.t ->
    shader_location:Gpu_index32.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val format : t -> Gpu_vertex_format.t
  val offset : t -> Gpu_size64.t
  val shader_location : t -> Gpu_index32.t
end = struct
  type t = Js.any

  let make ~format ~offset ~shader_location () =
    let format = Gpu_vertex_format.to_any format in
    let offset = Gpu_size64.to_any offset in
    let shader_location = Gpu_index32.to_any shader_location in
    Js.Ffi.obj
      [|
        ("format", format);
        ("offset", offset);
        ("shaderLocation", shader_location);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let format this = Gpu_vertex_format.of_any (Js.Ffi.get this "format")
  let offset this = Gpu_size64.of_any (Js.Ffi.get this "offset")

  let shader_location this =
    Gpu_index32.of_any (Js.Ffi.get this "shaderLocation")
end

and Gpu_image_data_layout : sig
  type t [@@ocaml.doc "The type for the [GPUImageDataLayout] dictionary."]

  val make :
    ?offset:Gpu_size64.t ->
    ?bytes_per_row:Gpu_size32.t ->
    ?rows_per_image:Gpu_size32.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val offset : t -> Gpu_size64.t option
  val bytes_per_row : t -> Gpu_size32.t option
  val rows_per_image : t -> Gpu_size32.t option
end = struct
  type t = Js.any

  let make ?offset ?bytes_per_row ?rows_per_image () =
    let offset = (Js.Any.nullable_of_option Gpu_size64.to_any) offset in
    let bytes_per_row =
      (Js.Any.nullable_of_option Gpu_size32.to_any) bytes_per_row
    in
    let rows_per_image =
      (Js.Any.nullable_of_option Gpu_size32.to_any) rows_per_image
    in
    Js.Ffi.obj
      [|
        ("offset", offset);
        ("bytesPerRow", bytes_per_row);
        ("rowsPerImage", rows_per_image);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let offset this =
    (Js.Any.nullable_to_option Gpu_size64.of_any) (Js.Ffi.get this "offset")

  let bytes_per_row this =
    (Js.Any.nullable_to_option Gpu_size32.of_any) (Js.Ffi.get this "bytesPerRow")

  let rows_per_image this =
    (Js.Any.nullable_to_option Gpu_size32.of_any)
      (Js.Ffi.get this "rowsPerImage")
end

and Gpu_image_copy_buffer : sig
  type t [@@ocaml.doc "The type for the [GPUImageCopyBuffer] dictionary."]

  val make : buffer:Gpu_buffer.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_image_data_layout : t -> Gpu_image_data_layout.t
  val buffer : t -> Gpu_buffer.t
end = struct
  type t = Js.any

  let make ~buffer () =
    let buffer = Gpu_buffer.to_any buffer in
    Js.Ffi.obj [| ("buffer", buffer) |]

  let to_gpu_image_data_layout this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let buffer this = Gpu_buffer.of_any (Js.Ffi.get this "buffer")
end

and Gpu_image_copy_texture : sig
  type t [@@ocaml.doc "The type for the [GPUImageCopyTexture] dictionary."]

  val make :
    texture:Gpu_texture.t ->
    ?mip_level:Gpu_integer_coordinate.t ->
    ?origin:Gpu_origin3_d.t ->
    ?aspect:Gpu_texture_aspect.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val texture : t -> Gpu_texture.t
  val mip_level : t -> Gpu_integer_coordinate.t option
  val origin : t -> Gpu_origin3_d.t option
  val aspect : t -> Gpu_texture_aspect.t option
end = struct
  type t = Js.any

  let make ~texture ?mip_level ?origin ?aspect () =
    let texture = Gpu_texture.to_any texture in
    let mip_level =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) mip_level
    in
    let origin = (Js.Any.nullable_of_option Gpu_origin3_d.to_any) origin in
    let aspect = (Js.Any.nullable_of_option Gpu_texture_aspect.to_any) aspect in
    Js.Ffi.obj
      [|
        ("texture", texture);
        ("mipLevel", mip_level);
        ("origin", origin);
        ("aspect", aspect);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let texture this = Gpu_texture.of_any (Js.Ffi.get this "texture")

  let mip_level this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "mipLevel")

  let origin this =
    (Js.Any.nullable_to_option Gpu_origin3_d.of_any) (Js.Ffi.get this "origin")

  let aspect this =
    (Js.Any.nullable_to_option Gpu_texture_aspect.of_any)
      (Js.Ffi.get this "aspect")
end

and Gpu_image_copy_texture_tagged : sig
  type t
  [@@ocaml.doc "The type for the [GPUImageCopyTextureTagged] dictionary."]

  val make : ?premultiplied_alpha:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_image_copy_texture : t -> Gpu_image_copy_texture.t
  val premultiplied_alpha : t -> bool option
end = struct
  type t = Js.any

  let make ?premultiplied_alpha () =
    let premultiplied_alpha =
      (Js.Any.nullable_of_option Js.Any.of_bool) premultiplied_alpha
    in
    Js.Ffi.obj [| ("premultipliedAlpha", premultiplied_alpha) |]

  let to_gpu_image_copy_texture this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let premultiplied_alpha this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "premultipliedAlpha")
end

and Gpu_image_copy_external_image : sig
  type t
  [@@ocaml.doc "The type for the [GPUImageCopyExternalImage] dictionary."]

  val make :
    source:[< `Image_bitmap | `Html_canvas_element | `Offscreen_canvas ] Js.t ->
    ?origin:Gpu_origin2_d.t ->
    ?flip_y:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val source :
    t -> [< `Image_bitmap | `Html_canvas_element | `Offscreen_canvas ] Js.t

  val origin : t -> Gpu_origin2_d.t option
  val flip_y : t -> bool option
end = struct
  type t = Js.any

  let make ~source ?origin ?flip_y () =
    let source = Js.to_any source in
    let origin = (Js.Any.nullable_of_option Gpu_origin2_d.to_any) origin in
    let flip_y = (Js.Any.nullable_of_option Js.Any.of_bool) flip_y in
    Js.Ffi.obj [| ("source", source); ("origin", origin); ("flipY", flip_y) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let source this = Js.of_any (Js.Ffi.get this "source")

  let origin this =
    (Js.Any.nullable_to_option Gpu_origin2_d.of_any) (Js.Ffi.get this "origin")

  let flip_y this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "flipY")
end

and Gpu_command_buffer : sig
  type t = [ `Gpu_command_buffer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandBuffer} \
     [GPUCommandBuffer]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_command_buffer ] Js.t

  let t = Js.Ffi.constr "GPUCommandBuffer"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandBuffer} \
   [GPUCommandBuffer] on MDN}."]

and Gpu_command_buffer_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUCommandBufferDescriptor] dictionary."]

  val make : unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
end = struct
  type t = Js.any

  let make () = Js.Ffi.obj [||]
  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
end

and Gpu_command_encoder : sig
  type t = [ `Gpu_command_encoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder} \
     [GPUCommandEncoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val begin_compute_pass :
    ?descriptor:Gpu_compute_pass_descriptor.t -> t -> Gpu_compute_pass_encoder.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/beginComputePass} \
     [beginComputePass] on MDN}."]

  val begin_render_pass :
    descriptor:Gpu_render_pass_descriptor.t -> t -> Gpu_render_pass_encoder.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/beginRenderPass} \
     [beginRenderPass] on MDN}."]

  val copy_buffer_to_buffer :
    source:Gpu_buffer.t ->
    source_offset:Gpu_size64.t ->
    destination:Gpu_buffer.t ->
    destination_offset:Gpu_size64.t ->
    size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/copyBufferToBuffer} \
     [copyBufferToBuffer] on MDN}."]

  val copy_buffer_to_texture :
    source:Gpu_image_copy_buffer.t ->
    destination:Gpu_image_copy_texture.t ->
    copy_size:Gpu_extent3_d.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/copyBufferToTexture} \
     [copyBufferToTexture] on MDN}."]

  val copy_texture_to_buffer :
    source:Gpu_image_copy_texture.t ->
    destination:Gpu_image_copy_buffer.t ->
    copy_size:Gpu_extent3_d.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/copyTextureToBuffer} \
     [copyTextureToBuffer] on MDN}."]

  val copy_texture_to_texture :
    source:Gpu_image_copy_texture.t ->
    destination:Gpu_image_copy_texture.t ->
    copy_size:Gpu_extent3_d.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/copyTextureToTexture} \
     [copyTextureToTexture] on MDN}."]

  val finish :
    ?descriptor:Gpu_command_buffer_descriptor.t -> t -> Gpu_command_buffer.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/finish} \
     [finish] on MDN}."]
end = struct
  type t = [ `Gpu_command_encoder ] Js.t

  let t = Js.Ffi.constr "GPUCommandEncoder"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let begin_compute_pass ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_compute_pass_descriptor.to_any) descriptor
    in
    Gpu_compute_pass_encoder.of_any
      (Js.Ffi.meth_call this "beginComputePass" [| descriptor |])

  let begin_render_pass ~descriptor this =
    let descriptor = Gpu_render_pass_descriptor.to_any descriptor in
    Gpu_render_pass_encoder.of_any
      (Js.Ffi.meth_call this "beginRenderPass" [| descriptor |])

  let copy_buffer_to_buffer ~source ~source_offset ~destination
      ~destination_offset ~size this =
    let source = Gpu_buffer.to_any source in
    let source_offset = Gpu_size64.to_any source_offset in
    let destination = Gpu_buffer.to_any destination in
    let destination_offset = Gpu_size64.to_any destination_offset in
    let size = Gpu_size64.to_any size in
    Js.to_unit
      (Js.Ffi.meth_call this "copyBufferToBuffer"
         [| source; source_offset; destination; destination_offset; size |]
      )

  let copy_buffer_to_texture ~source ~destination ~copy_size this =
    let source = Gpu_image_copy_buffer.to_any source in
    let destination = Gpu_image_copy_texture.to_any destination in
    let copy_size = Gpu_extent3_d.to_any copy_size in
    Js.to_unit
      (Js.Ffi.meth_call this "copyBufferToTexture"
         [| source; destination; copy_size |]
      )

  let copy_texture_to_buffer ~source ~destination ~copy_size this =
    let source = Gpu_image_copy_texture.to_any source in
    let destination = Gpu_image_copy_buffer.to_any destination in
    let copy_size = Gpu_extent3_d.to_any copy_size in
    Js.to_unit
      (Js.Ffi.meth_call this "copyTextureToBuffer"
         [| source; destination; copy_size |]
      )

  let copy_texture_to_texture ~source ~destination ~copy_size this =
    let source = Gpu_image_copy_texture.to_any source in
    let destination = Gpu_image_copy_texture.to_any destination in
    let copy_size = Gpu_extent3_d.to_any copy_size in
    Js.to_unit
      (Js.Ffi.meth_call this "copyTextureToTexture"
         [| source; destination; copy_size |]
      )

  let finish ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_command_buffer_descriptor.to_any)
        descriptor
    in
    Gpu_command_buffer.of_any (Js.Ffi.meth_call this "finish" [| descriptor |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder} \
   [GPUCommandEncoder] on MDN}."]

and Gpu_image_bitmap_copy_view : sig
  type t [@@ocaml.doc "The type for the [GPUImageBitmapCopyView] dictionary."]

  val make : ?origin:Gpu_origin2_d.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val origin : t -> Gpu_origin2_d.t option
end = struct
  type t = Js.any

  let make ?origin () =
    let origin = (Js.Any.nullable_of_option Gpu_origin2_d.to_any) origin in
    Js.Ffi.obj [| ("origin", origin) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let origin this =
    (Js.Any.nullable_to_option Gpu_origin2_d.of_any) (Js.Ffi.get this "origin")
end

and Gpu_command_encoder_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPUCommandEncoderDescriptor] dictionary."]

  val make : ?measure_execution_time:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val measure_execution_time : t -> bool option
end = struct
  type t = Js.any

  let make ?measure_execution_time () =
    let measure_execution_time =
      (Js.Any.nullable_of_option Js.Any.of_bool) measure_execution_time
    in
    Js.Ffi.obj [| ("measureExecutionTime", measure_execution_time) |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let measure_execution_time this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "measureExecutionTime")
end

and Gpu_compute_pass_encoder : sig
  type t = [ `Gpu_compute_pass_encoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder} \
     [GPUComputePassEncoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_pipeline : pipeline:Gpu_compute_pipeline.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder/setPipeline} \
     [setPipeline] on MDN}."]

  val dispatch_workgroups :
    x:Gpu_size32.t -> ?y:Gpu_size32.t -> ?z:Gpu_size32.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder/dispatchWorkgroups} \
     [dispatchWorkgroups] on MDN}."]

  val dispatch_workgroups_indirect :
    indirect_buffer:Gpu_buffer.t -> indirect_offset:Gpu_size64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder/dispatchWorkgroupsIndirect} \
     [dispatchWorkgroupsIndirect] on MDN}."]

  val end' : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder/end} \
     [end] on MDN}."]

  val set_bind_group :
    index:Gpu_index32.t ->
    bind_group:Gpu_bind_group.t ->
    ?dynamic_offsets:Gpu_buffer_dynamic_offset.t array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder/setBindGroup} \
     [setBindGroup] on MDN}."]
end = struct
  type t = [ `Gpu_compute_pass_encoder ] Js.t

  let t = Js.Ffi.constr "GPUComputePassEncoder"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_pipeline ~pipeline this =
    let pipeline = Gpu_compute_pipeline.to_any pipeline in
    Js.to_unit (Js.Ffi.meth_call this "setPipeline" [| pipeline |])

  let dispatch_workgroups ~x ?y ?z this =
    let x = Gpu_size32.to_any x in
    let y = (Js.Any.undefined_of_option Gpu_size32.to_any) y in
    let z = (Js.Any.undefined_of_option Gpu_size32.to_any) z in
    Js.to_unit (Js.Ffi.meth_call this "dispatchWorkgroups" [| x; y; z |])

  let dispatch_workgroups_indirect ~indirect_buffer ~indirect_offset this =
    let indirect_buffer = Gpu_buffer.to_any indirect_buffer in
    let indirect_offset = Gpu_size64.to_any indirect_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "dispatchWorkgroupsIndirect"
         [| indirect_buffer; indirect_offset |]
      )

  let end' this = Js.to_unit (Js.Ffi.meth_call this "end" [||])

  let set_bind_group ~index ~bind_group ?dynamic_offsets this =
    let index = Gpu_index32.to_any index in
    let bind_group = Gpu_bind_group.to_any bind_group in
    let dynamic_offsets =
      (Js.Any.undefined_of_option
         (Js.Any.of_array Gpu_buffer_dynamic_offset.to_any)
      )
        dynamic_offsets
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setBindGroup"
         [| index; bind_group; dynamic_offsets |]
      )
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder} \
   [GPUComputePassEncoder] on MDN}."]

and Gpu_compute_pass_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUComputePassDescriptor] dictionary."]

  val make : unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
end = struct
  type t = Js.any

  let make () = Js.Ffi.obj [||]
  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
end

and Gpu_render_pass_encoder : sig
  type t = [ `Gpu_render_pass_encoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder} \
     [GPURenderPassEncoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val set_viewport :
    x:float ->
    y:float ->
    width:float ->
    height:float ->
    min_depth:float ->
    max_depth:float ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setViewport} \
     [setViewport] on MDN}."]

  val set_scissor_rect :
    x:Gpu_integer_coordinate.t ->
    y:Gpu_integer_coordinate.t ->
    width:Gpu_integer_coordinate.t ->
    height:Gpu_integer_coordinate.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setScissorRect} \
     [setScissorRect] on MDN}."]

  val set_blend_constant : color:Gpu_color.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setBlendConstant} \
     [setBlendConstant] on MDN}."]

  val set_stencil_reference : reference:Gpu_stencil_value.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setStencilReference} \
     [setStencilReference] on MDN}."]

  val execute_bundles : bundles:Gpu_render_bundle.t array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/executeBundles} \
     [executeBundles] on MDN}."]

  val end' : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/end} \
     [end] on MDN}."]

  val draw_indexed_indirect :
    indirect_buffer:Gpu_buffer.t -> indirect_offset:Gpu_size64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/drawIndexedIndirect} \
     [drawIndexedIndirect] on MDN}."]

  val draw_indirect :
    indirect_buffer:Gpu_buffer.t -> indirect_offset:Gpu_size64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/drawIndirect} \
     [drawIndirect] on MDN}."]

  val draw_indexed :
    index_count:Gpu_size32.t ->
    ?instance_count:Gpu_size32.t ->
    ?first_index:Gpu_size32.t ->
    ?base_vertex:Gpu_signed_offset32.t ->
    ?first_instance:Gpu_size32.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/drawIndexed} \
     [drawIndexed] on MDN}."]

  val draw :
    vertex_count:Gpu_size32.t ->
    ?instance_count:Gpu_size32.t ->
    ?first_vertex:Gpu_size32.t ->
    ?first_instance:Gpu_size32.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/draw} \
     [draw] on MDN}."]

  val set_vertex_buffer :
    slot:Gpu_index32.t ->
    buffer:Gpu_buffer.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setVertexBuffer} \
     [setVertexBuffer] on MDN}."]

  val set_index_buffer :
    buffer:Gpu_buffer.t ->
    index_format:Gpu_index_format.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setIndexBuffer} \
     [setIndexBuffer] on MDN}."]

  val set_pipeline : pipeline:Gpu_render_pipeline.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setPipeline} \
     [setPipeline] on MDN}."]

  val set_bind_group :
    index:Gpu_index32.t ->
    bind_group:Gpu_bind_group.t ->
    ?dynamic_offsets:Gpu_buffer_dynamic_offset.t array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setBindGroup} \
     [setBindGroup] on MDN}."]
end = struct
  type t = [ `Gpu_render_pass_encoder ] Js.t

  let t = Js.Ffi.constr "GPURenderPassEncoder"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let set_viewport ~x ~y ~width ~height ~min_depth ~max_depth this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    let width = Js.Any.of_float width in
    let height = Js.Any.of_float height in
    let min_depth = Js.Any.of_float min_depth in
    let max_depth = Js.Any.of_float max_depth in
    Js.to_unit
      (Js.Ffi.meth_call this "setViewport"
         [| x; y; width; height; min_depth; max_depth |]
      )

  let set_scissor_rect ~x ~y ~width ~height this =
    let x = Gpu_integer_coordinate.to_any x in
    let y = Gpu_integer_coordinate.to_any y in
    let width = Gpu_integer_coordinate.to_any width in
    let height = Gpu_integer_coordinate.to_any height in
    Js.to_unit (Js.Ffi.meth_call this "setScissorRect" [| x; y; width; height |])

  let set_blend_constant ~color this =
    let color = Gpu_color.to_any color in
    Js.to_unit (Js.Ffi.meth_call this "setBlendConstant" [| color |])

  let set_stencil_reference ~reference this =
    let reference = Gpu_stencil_value.to_any reference in
    Js.to_unit (Js.Ffi.meth_call this "setStencilReference" [| reference |])

  let execute_bundles ~bundles this =
    let bundles = (Js.Any.of_array Gpu_render_bundle.to_any) bundles in
    Js.to_unit (Js.Ffi.meth_call this "executeBundles" [| bundles |])

  let end' this = Js.to_unit (Js.Ffi.meth_call this "end" [||])

  let draw_indexed_indirect ~indirect_buffer ~indirect_offset this =
    let indirect_buffer = Gpu_buffer.to_any indirect_buffer in
    let indirect_offset = Gpu_size64.to_any indirect_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndexedIndirect"
         [| indirect_buffer; indirect_offset |]
      )

  let draw_indirect ~indirect_buffer ~indirect_offset this =
    let indirect_buffer = Gpu_buffer.to_any indirect_buffer in
    let indirect_offset = Gpu_size64.to_any indirect_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndirect"
         [| indirect_buffer; indirect_offset |]
      )

  let draw_indexed ~index_count ?instance_count ?first_index ?base_vertex
      ?first_instance this =
    let index_count = Gpu_size32.to_any index_count in
    let instance_count =
      (Js.Any.undefined_of_option Gpu_size32.to_any) instance_count
    in
    let first_index =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_index
    in
    let base_vertex =
      (Js.Any.undefined_of_option Gpu_signed_offset32.to_any) base_vertex
    in
    let first_instance =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_instance
    in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndexed"
         [|
           index_count; instance_count; first_index; base_vertex; first_instance;
         |]
      )

  let draw ~vertex_count ?instance_count ?first_vertex ?first_instance this =
    let vertex_count = Gpu_size32.to_any vertex_count in
    let instance_count =
      (Js.Any.undefined_of_option Gpu_size32.to_any) instance_count
    in
    let first_vertex =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_vertex
    in
    let first_instance =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_instance
    in
    Js.to_unit
      (Js.Ffi.meth_call this "draw"
         [| vertex_count; instance_count; first_vertex; first_instance |]
      )

  let set_vertex_buffer ~slot ~buffer ?offset ?size this =
    let slot = Gpu_index32.to_any slot in
    let buffer = Gpu_buffer.to_any buffer in
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Js.to_unit
      (Js.Ffi.meth_call this "setVertexBuffer" [| slot; buffer; offset; size |])

  let set_index_buffer ~buffer ~index_format ?offset ?size this =
    let buffer = Gpu_buffer.to_any buffer in
    let index_format = Gpu_index_format.to_any index_format in
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Js.to_unit
      (Js.Ffi.meth_call this "setIndexBuffer"
         [| buffer; index_format; offset; size |]
      )

  let set_pipeline ~pipeline this =
    let pipeline = Gpu_render_pipeline.to_any pipeline in
    Js.to_unit (Js.Ffi.meth_call this "setPipeline" [| pipeline |])

  let set_bind_group ~index ~bind_group ?dynamic_offsets this =
    let index = Gpu_index32.to_any index in
    let bind_group = Gpu_bind_group.to_any bind_group in
    let dynamic_offsets =
      (Js.Any.undefined_of_option
         (Js.Any.of_array Gpu_buffer_dynamic_offset.to_any)
      )
        dynamic_offsets
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setBindGroup"
         [| index; bind_group; dynamic_offsets |]
      )
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder} \
   [GPURenderPassEncoder] on MDN}."]

and Gpu_render_pass_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPURenderPassDescriptor] dictionary."]

  val make :
    color_attachments:Gpu_render_pass_color_attachment.t array ->
    ?depth_stencil_attachment:Gpu_render_pass_depth_stencil_attachment.t ->
    ?occlusion_query_set:Gpu_query_set.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val color_attachments : t -> Gpu_render_pass_color_attachment.t array

  val depth_stencil_attachment :
    t -> Gpu_render_pass_depth_stencil_attachment.t option

  val occlusion_query_set : t -> Gpu_query_set.t option
end = struct
  type t = Js.any

  let make ~color_attachments ?depth_stencil_attachment ?occlusion_query_set ()
      =
    let color_attachments =
      (Js.Any.of_array Gpu_render_pass_color_attachment.to_any)
        color_attachments
    in
    let depth_stencil_attachment =
      (Js.Any.nullable_of_option Gpu_render_pass_depth_stencil_attachment.to_any)
        depth_stencil_attachment
    in
    let occlusion_query_set =
      (Js.Any.nullable_of_option Gpu_query_set.to_any) occlusion_query_set
    in
    Js.Ffi.obj
      [|
        ("colorAttachments", color_attachments);
        ("depthStencilAttachment", depth_stencil_attachment);
        ("occlusionQuerySet", occlusion_query_set);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let color_attachments this =
    (Js.Any.to_array Gpu_render_pass_color_attachment.of_any)
      (Js.Ffi.get this "colorAttachments")

  let depth_stencil_attachment this =
    (Js.Any.nullable_to_option Gpu_render_pass_depth_stencil_attachment.of_any)
      (Js.Ffi.get this "depthStencilAttachment")

  let occlusion_query_set this =
    (Js.Any.nullable_to_option Gpu_query_set.of_any)
      (Js.Ffi.get this "occlusionQuerySet")
end

and Gpu_render_pass_color_attachment : sig
  type t
  [@@ocaml.doc "The type for the [GPURenderPassColorAttachment] dictionary."]

  val make :
    view:Gpu_texture_view.t ->
    ?resolve_target:Gpu_texture_view.t ->
    ?clear_value:Gpu_color.t ->
    load_op:Gpu_load_op.t ->
    store_op:Gpu_store_op.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val view : t -> Gpu_texture_view.t
  val resolve_target : t -> Gpu_texture_view.t option
  val clear_value : t -> Gpu_color.t option
  val load_op : t -> Gpu_load_op.t
  val store_op : t -> Gpu_store_op.t
end = struct
  type t = Js.any

  let make ~view ?resolve_target ?clear_value ~load_op ~store_op () =
    let view = Gpu_texture_view.to_any view in
    let resolve_target =
      (Js.Any.nullable_of_option Gpu_texture_view.to_any) resolve_target
    in
    let clear_value =
      (Js.Any.nullable_of_option Gpu_color.to_any) clear_value
    in
    let load_op = Gpu_load_op.to_any load_op in
    let store_op = Gpu_store_op.to_any store_op in
    Js.Ffi.obj
      [|
        ("view", view);
        ("resolveTarget", resolve_target);
        ("clearValue", clear_value);
        ("loadOp", load_op);
        ("storeOp", store_op);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let view this = Gpu_texture_view.of_any (Js.Ffi.get this "view")

  let resolve_target this =
    (Js.Any.nullable_to_option Gpu_texture_view.of_any)
      (Js.Ffi.get this "resolveTarget")

  let clear_value this =
    (Js.Any.nullable_to_option Gpu_color.of_any) (Js.Ffi.get this "clearValue")

  let load_op this = Gpu_load_op.of_any (Js.Ffi.get this "loadOp")
  let store_op this = Gpu_store_op.of_any (Js.Ffi.get this "storeOp")
end

and Gpu_render_pass_depth_stencil_attachment : sig
  type t
  [@@ocaml.doc
    "The type for the [GPURenderPassDepthStencilAttachment] dictionary."]

  val make :
    view:Gpu_texture_view.t ->
    ?depth_clear_value:float ->
    ?depth_load_op:Gpu_load_op.t ->
    ?depth_store_op:Gpu_store_op.t ->
    ?depth_read_only:bool ->
    ?stencil_clear_value:Gpu_stencil_value.t ->
    ?stencil_load_op:Gpu_load_op.t ->
    ?stencil_store_op:Gpu_store_op.t ->
    ?stencil_read_only:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val view : t -> Gpu_texture_view.t
  val depth_clear_value : t -> float option
  val depth_load_op : t -> Gpu_load_op.t option
  val depth_store_op : t -> Gpu_store_op.t option
  val depth_read_only : t -> bool option
  val stencil_clear_value : t -> Gpu_stencil_value.t option
  val stencil_load_op : t -> Gpu_load_op.t option
  val stencil_store_op : t -> Gpu_store_op.t option
  val stencil_read_only : t -> bool option
end = struct
  type t = Js.any

  let make ~view ?depth_clear_value ?depth_load_op ?depth_store_op
      ?depth_read_only ?stencil_clear_value ?stencil_load_op ?stencil_store_op
      ?stencil_read_only () =
    let view = Gpu_texture_view.to_any view in
    let depth_clear_value =
      (Js.Any.nullable_of_option Js.Any.of_float) depth_clear_value
    in
    let depth_load_op =
      (Js.Any.nullable_of_option Gpu_load_op.to_any) depth_load_op
    in
    let depth_store_op =
      (Js.Any.nullable_of_option Gpu_store_op.to_any) depth_store_op
    in
    let depth_read_only =
      (Js.Any.nullable_of_option Js.Any.of_bool) depth_read_only
    in
    let stencil_clear_value =
      (Js.Any.nullable_of_option Gpu_stencil_value.to_any) stencil_clear_value
    in
    let stencil_load_op =
      (Js.Any.nullable_of_option Gpu_load_op.to_any) stencil_load_op
    in
    let stencil_store_op =
      (Js.Any.nullable_of_option Gpu_store_op.to_any) stencil_store_op
    in
    let stencil_read_only =
      (Js.Any.nullable_of_option Js.Any.of_bool) stencil_read_only
    in
    Js.Ffi.obj
      [|
        ("view", view);
        ("depthClearValue", depth_clear_value);
        ("depthLoadOp", depth_load_op);
        ("depthStoreOp", depth_store_op);
        ("depthReadOnly", depth_read_only);
        ("stencilClearValue", stencil_clear_value);
        ("stencilLoadOp", stencil_load_op);
        ("stencilStoreOp", stencil_store_op);
        ("stencilReadOnly", stencil_read_only);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let view this = Gpu_texture_view.of_any (Js.Ffi.get this "view")

  let depth_clear_value this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "depthClearValue")

  let depth_load_op this =
    (Js.Any.nullable_to_option Gpu_load_op.of_any)
      (Js.Ffi.get this "depthLoadOp")

  let depth_store_op this =
    (Js.Any.nullable_to_option Gpu_store_op.of_any)
      (Js.Ffi.get this "depthStoreOp")

  let depth_read_only this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "depthReadOnly")

  let stencil_clear_value this =
    (Js.Any.nullable_to_option Gpu_stencil_value.of_any)
      (Js.Ffi.get this "stencilClearValue")

  let stencil_load_op this =
    (Js.Any.nullable_to_option Gpu_load_op.of_any)
      (Js.Ffi.get this "stencilLoadOp")

  let stencil_store_op this =
    (Js.Any.nullable_to_option Gpu_store_op.of_any)
      (Js.Ffi.get this "stencilStoreOp")

  let stencil_read_only this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "stencilReadOnly")
end

and Gpu_load_op : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val load : t
  val clear : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let load = Js.of_string "load"
  let clear = Js.of_string "clear"
end

and Gpu_store_op : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val store : t
  val discard : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let store = Js.of_string "store"
  let discard = Js.of_string "discard"
end

and Gpu_render_pass_layout : sig
  type t [@@ocaml.doc "The type for the [GPURenderPassLayout] dictionary."]

  val make :
    color_formats:Gpu_texture_format.t array ->
    ?depth_stencil_format:Gpu_texture_format.t ->
    ?sample_count:Gpu_size32.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val color_formats : t -> Gpu_texture_format.t array
  val depth_stencil_format : t -> Gpu_texture_format.t option
  val sample_count : t -> Gpu_size32.t option
end = struct
  type t = Js.any

  let make ~color_formats ?depth_stencil_format ?sample_count () =
    let color_formats =
      (Js.Any.of_array Gpu_texture_format.to_any) color_formats
    in
    let depth_stencil_format =
      (Js.Any.nullable_of_option Gpu_texture_format.to_any) depth_stencil_format
    in
    let sample_count =
      (Js.Any.nullable_of_option Gpu_size32.to_any) sample_count
    in
    Js.Ffi.obj
      [|
        ("colorFormats", color_formats);
        ("depthStencilFormat", depth_stencil_format);
        ("sampleCount", sample_count);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let color_formats this =
    (Js.Any.to_array Gpu_texture_format.of_any) (Js.Ffi.get this "colorFormats")

  let depth_stencil_format this =
    (Js.Any.nullable_to_option Gpu_texture_format.of_any)
      (Js.Ffi.get this "depthStencilFormat")

  let sample_count this =
    (Js.Any.nullable_to_option Gpu_size32.of_any) (Js.Ffi.get this "sampleCount")
end

and Gpu_render_bundle : sig
  type t = [ `Gpu_render_bundle ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundle} \
     [GPURenderBundle]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Gpu_render_bundle ] Js.t

  let t = Js.Ffi.constr "GPURenderBundle"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundle} \
   [GPURenderBundle] on MDN}."]

and Gpu_render_bundle_descriptor : sig
  type t
  [@@ocaml.doc "The type for the [GPURenderBundleDescriptor] dictionary."]

  val make : unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
end = struct
  type t = Js.any

  let make () = Js.Ffi.obj [||]
  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
end

and Gpu_render_bundle_encoder : sig
  type t = [ `Gpu_render_bundle_encoder ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder} \
     [GPURenderBundleEncoder]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val finish :
    ?descriptor:Gpu_render_bundle_descriptor.t -> t -> Gpu_render_bundle.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/finish} \
     [finish] on MDN}."]

  val draw_indexed_indirect :
    indirect_buffer:Gpu_buffer.t -> indirect_offset:Gpu_size64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/drawIndexedIndirect} \
     [drawIndexedIndirect] on MDN}."]

  val draw_indirect :
    indirect_buffer:Gpu_buffer.t -> indirect_offset:Gpu_size64.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/drawIndirect} \
     [drawIndirect] on MDN}."]

  val draw_indexed :
    index_count:Gpu_size32.t ->
    ?instance_count:Gpu_size32.t ->
    ?first_index:Gpu_size32.t ->
    ?base_vertex:Gpu_signed_offset32.t ->
    ?first_instance:Gpu_size32.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/drawIndexed} \
     [drawIndexed] on MDN}."]

  val draw :
    vertex_count:Gpu_size32.t ->
    ?instance_count:Gpu_size32.t ->
    ?first_vertex:Gpu_size32.t ->
    ?first_instance:Gpu_size32.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/draw} \
     [draw] on MDN}."]

  val set_vertex_buffer :
    slot:Gpu_index32.t ->
    buffer:Gpu_buffer.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/setVertexBuffer} \
     [setVertexBuffer] on MDN}."]

  val set_index_buffer :
    buffer:Gpu_buffer.t ->
    index_format:Gpu_index_format.t ->
    ?offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/setIndexBuffer} \
     [setIndexBuffer] on MDN}."]

  val set_pipeline : pipeline:Gpu_render_pipeline.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/setPipeline} \
     [setPipeline] on MDN}."]

  val set_bind_group :
    index:Gpu_index32.t ->
    bind_group:Gpu_bind_group.t ->
    ?dynamic_offsets:Gpu_buffer_dynamic_offset.t array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder/setBindGroup} \
     [setBindGroup] on MDN}."]
end = struct
  type t = [ `Gpu_render_bundle_encoder ] Js.t

  let t = Js.Ffi.constr "GPURenderBundleEncoder"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let finish ?descriptor this =
    let descriptor =
      (Js.Any.undefined_of_option Gpu_render_bundle_descriptor.to_any)
        descriptor
    in
    Gpu_render_bundle.of_any (Js.Ffi.meth_call this "finish" [| descriptor |])

  let draw_indexed_indirect ~indirect_buffer ~indirect_offset this =
    let indirect_buffer = Gpu_buffer.to_any indirect_buffer in
    let indirect_offset = Gpu_size64.to_any indirect_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndexedIndirect"
         [| indirect_buffer; indirect_offset |]
      )

  let draw_indirect ~indirect_buffer ~indirect_offset this =
    let indirect_buffer = Gpu_buffer.to_any indirect_buffer in
    let indirect_offset = Gpu_size64.to_any indirect_offset in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndirect"
         [| indirect_buffer; indirect_offset |]
      )

  let draw_indexed ~index_count ?instance_count ?first_index ?base_vertex
      ?first_instance this =
    let index_count = Gpu_size32.to_any index_count in
    let instance_count =
      (Js.Any.undefined_of_option Gpu_size32.to_any) instance_count
    in
    let first_index =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_index
    in
    let base_vertex =
      (Js.Any.undefined_of_option Gpu_signed_offset32.to_any) base_vertex
    in
    let first_instance =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_instance
    in
    Js.to_unit
      (Js.Ffi.meth_call this "drawIndexed"
         [|
           index_count; instance_count; first_index; base_vertex; first_instance;
         |]
      )

  let draw ~vertex_count ?instance_count ?first_vertex ?first_instance this =
    let vertex_count = Gpu_size32.to_any vertex_count in
    let instance_count =
      (Js.Any.undefined_of_option Gpu_size32.to_any) instance_count
    in
    let first_vertex =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_vertex
    in
    let first_instance =
      (Js.Any.undefined_of_option Gpu_size32.to_any) first_instance
    in
    Js.to_unit
      (Js.Ffi.meth_call this "draw"
         [| vertex_count; instance_count; first_vertex; first_instance |]
      )

  let set_vertex_buffer ~slot ~buffer ?offset ?size this =
    let slot = Gpu_index32.to_any slot in
    let buffer = Gpu_buffer.to_any buffer in
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Js.to_unit
      (Js.Ffi.meth_call this "setVertexBuffer" [| slot; buffer; offset; size |])

  let set_index_buffer ~buffer ~index_format ?offset ?size this =
    let buffer = Gpu_buffer.to_any buffer in
    let index_format = Gpu_index_format.to_any index_format in
    let offset = (Js.Any.undefined_of_option Gpu_size64.to_any) offset in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Js.to_unit
      (Js.Ffi.meth_call this "setIndexBuffer"
         [| buffer; index_format; offset; size |]
      )

  let set_pipeline ~pipeline this =
    let pipeline = Gpu_render_pipeline.to_any pipeline in
    Js.to_unit (Js.Ffi.meth_call this "setPipeline" [| pipeline |])

  let set_bind_group ~index ~bind_group ?dynamic_offsets this =
    let index = Gpu_index32.to_any index in
    let bind_group = Gpu_bind_group.to_any bind_group in
    let dynamic_offsets =
      (Js.Any.undefined_of_option
         (Js.Any.of_array Gpu_buffer_dynamic_offset.to_any)
      )
        dynamic_offsets
    in
    Js.to_unit
      (Js.Ffi.meth_call this "setBindGroup"
         [| index; bind_group; dynamic_offsets |]
      )
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder} \
   [GPURenderBundleEncoder] on MDN}."]

and Gpu_render_bundle_encoder_descriptor : sig
  type t
  [@@ocaml.doc
    "The type for the [GPURenderBundleEncoderDescriptor] dictionary."]

  val make : ?depth_read_only:bool -> ?stencil_read_only:bool -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_render_pass_layout : t -> Gpu_render_pass_layout.t
  val depth_read_only : t -> bool option
  val stencil_read_only : t -> bool option
end = struct
  type t = Js.any

  let make ?depth_read_only ?stencil_read_only () =
    let depth_read_only =
      (Js.Any.nullable_of_option Js.Any.of_bool) depth_read_only
    in
    let stencil_read_only =
      (Js.Any.nullable_of_option Js.Any.of_bool) stencil_read_only
    in
    Js.Ffi.obj
      [|
        ("depthReadOnly", depth_read_only);
        ("stencilReadOnly", stencil_read_only);
      |]

  let to_gpu_render_pass_layout this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let depth_read_only this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "depthReadOnly")

  let stencil_read_only this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "stencilReadOnly")
end

and Gpu_queue : sig
  type t = [ `Gpu_queue ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue} [GPUQueue]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val submit : buffers:Gpu_command_buffer.t array -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue/submit} \
     [submit] on MDN}."]

  val on_submitted_work_done : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue/onSubmittedWorkDone} \
     [onSubmittedWorkDone] on MDN}."]

  val write_buffer :
    buffer:Gpu_buffer.t ->
    buffer_offset:Gpu_size64.t ->
    data:Buffer_source.t ->
    ?data_offset:Gpu_size64.t ->
    ?size:Gpu_size64.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue/writeBuffer} \
     [writeBuffer] on MDN}."]

  val write_texture :
    destination:Gpu_image_copy_texture.t ->
    data:Buffer_source.t ->
    data_layout:Gpu_image_data_layout.t ->
    size:Gpu_extent3_d.t ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue/writeTexture} \
     [writeTexture] on MDN}."]
end = struct
  type t = [ `Gpu_queue ] Js.t

  let t = Js.Ffi.constr "GPUQueue"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let submit ~buffers this =
    let buffers = (Js.Any.of_array Gpu_command_buffer.to_any) buffers in
    Js.to_unit (Js.Ffi.meth_call this "submit" [| buffers |])

  let on_submitted_work_done this =
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "onSubmittedWorkDone" [||])

  let write_buffer ~buffer ~buffer_offset ~data ?data_offset ?size this =
    let buffer = Gpu_buffer.to_any buffer in
    let buffer_offset = Gpu_size64.to_any buffer_offset in
    let data = Buffer_source.to_any data in
    let data_offset =
      (Js.Any.undefined_of_option Gpu_size64.to_any) data_offset
    in
    let size = (Js.Any.undefined_of_option Gpu_size64.to_any) size in
    Js.to_unit
      (Js.Ffi.meth_call this "writeBuffer"
         [| buffer; buffer_offset; data; data_offset; size |]
      )

  let write_texture ~destination ~data ~data_layout ~size this =
    let destination = Gpu_image_copy_texture.to_any destination in
    let data = Buffer_source.to_any data in
    let data_layout = Gpu_image_data_layout.to_any data_layout in
    let size = Gpu_extent3_d.to_any size in
    Js.to_unit
      (Js.Ffi.meth_call this "writeTexture"
         [| destination; data; data_layout; size |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue} \
   [GPUQueue] on MDN}."]

and Gpu_query_set : sig
  type t = [ `Gpu_query_set ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQuerySet} \
     [GPUQuerySet]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val destroy : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUQuerySet/destroy} \
     [destroy] on MDN}."]
end = struct
  type t = [ `Gpu_query_set ] Js.t

  let t = Js.Ffi.constr "GPUQuerySet"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let destroy this = Js.to_unit (Js.Ffi.meth_call this "destroy" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUQuerySet} \
   [GPUQuerySet] on MDN}."]

and Gpu_query_set_descriptor : sig
  type t [@@ocaml.doc "The type for the [GPUQuerySetDescriptor] dictionary."]

  val make :
    type':Gpu_query_type.t ->
    count:Gpu_size32.t ->
    ?pipeline_statistics:Gpu_pipeline_statistic_name.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_gpu_object_descriptor_base : t -> Gpu_object_descriptor_base.t
  val type' : t -> Gpu_query_type.t
  val count : t -> Gpu_size32.t
  val pipeline_statistics : t -> Gpu_pipeline_statistic_name.t array option
end = struct
  type t = Js.any

  let make ~type' ~count ?pipeline_statistics () =
    let type' = Gpu_query_type.to_any type' in
    let count = Gpu_size32.to_any count in
    let pipeline_statistics =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Gpu_pipeline_statistic_name.to_any)
      )
        pipeline_statistics
    in
    Js.Ffi.obj
      [|
        ("type", type');
        ("count", count);
        ("pipelineStatistics", pipeline_statistics);
      |]

  let to_gpu_object_descriptor_base this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let type' this = Gpu_query_type.of_any (Js.Ffi.get this "type")
  let count this = Gpu_size32.of_any (Js.Ffi.get this "count")

  let pipeline_statistics this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Gpu_pipeline_statistic_name.of_any)
    )
      (Js.Ffi.get this "pipelineStatistics")
end

and Gpu_pipeline_statistic_name : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val vertex_shader_invocations : t
  val clipper_invocations : t
  val clipper_primitives_out : t
  val fragment_shader_invocations : t
  val compute_shader_invocations : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let vertex_shader_invocations = Js.of_string "vertex-shader-invocations"
  let clipper_invocations = Js.of_string "clipper-invocations"
  let clipper_primitives_out = Js.of_string "clipper-primitives-out"
  let fragment_shader_invocations = Js.of_string "fragment-shader-invocations"
  let compute_shader_invocations = Js.of_string "compute-shader-invocations"
end

and Gpu_query_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val occlusion : t
  val pipeline_statistics : t
  val timestamp : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let occlusion = Js.of_string "occlusion"
  let pipeline_statistics = Js.of_string "pipeline-statistics"
  let timestamp = Js.of_string "timestamp"
end

and Gpu_canvas_context : sig
  type t = [ `Gpu_canvas_context ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext} \
     [GPUCanvasContext]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val canvas : t -> [< `Html_canvas_element | `Offscreen_canvas ] Js.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/canvas} \
     [canvas] on MDN}."]

  val configure : descriptor:Gpu_canvas_configuration.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/configure} \
     [configure] on MDN}."]

  val unconfigure : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/unconfigure} \
     [unconfigure] on MDN}."]

  val get_current_texture : t -> Gpu_texture.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/getCurrentTexture} \
     [getCurrentTexture] on MDN}."]
end = struct
  type t = [ `Gpu_canvas_context ] Js.t

  let t = Js.Ffi.constr "GPUCanvasContext"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let canvas this = Js.of_any (Js.Ffi.get this "canvas")

  let configure ~descriptor this =
    let descriptor = Gpu_canvas_configuration.to_any descriptor in
    Js.to_unit (Js.Ffi.meth_call this "configure" [| descriptor |])

  let unconfigure this = Js.to_unit (Js.Ffi.meth_call this "unconfigure" [||])

  let get_current_texture this =
    Gpu_texture.of_any (Js.Ffi.meth_call this "getCurrentTexture" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext} \
   [GPUCanvasContext] on MDN}."]

and Gpu_canvas_alpha_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val opaque : t
  val premultiplied : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let opaque = Js.of_string "opaque"
  let premultiplied = Js.of_string "premultiplied"
end

and Gpu_canvas_configuration : sig
  type t [@@ocaml.doc "The type for the [GPUCanvasConfiguration] dictionary."]

  val make :
    device:Gpu_device.t ->
    format:Gpu_texture_format.t ->
    ?usage:Gpu_texture_usage_flags.t ->
    ?view_formats:Gpu_texture_format.t array ->
    ?alpha_mode:Gpu_canvas_alpha_mode.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val device : t -> Gpu_device.t
  val format : t -> Gpu_texture_format.t
  val usage : t -> Gpu_texture_usage_flags.t option
  val view_formats : t -> Gpu_texture_format.t array option
  val alpha_mode : t -> Gpu_canvas_alpha_mode.t option
end = struct
  type t = Js.any

  let make ~device ~format ?usage ?view_formats ?alpha_mode () =
    let device = Gpu_device.to_any device in
    let format = Gpu_texture_format.to_any format in
    let usage =
      (Js.Any.nullable_of_option Gpu_texture_usage_flags.to_any) usage
    in
    let view_formats =
      (Js.Any.nullable_of_option (Js.Any.of_array Gpu_texture_format.to_any))
        view_formats
    in
    let alpha_mode =
      (Js.Any.nullable_of_option Gpu_canvas_alpha_mode.to_any) alpha_mode
    in
    Js.Ffi.obj
      [|
        ("device", device);
        ("format", format);
        ("usage", usage);
        ("viewFormats", view_formats);
        ("alphaMode", alpha_mode);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let device this = Gpu_device.of_any (Js.Ffi.get this "device")
  let format this = Gpu_texture_format.of_any (Js.Ffi.get this "format")

  let usage this =
    (Js.Any.nullable_to_option Gpu_texture_usage_flags.of_any)
      (Js.Ffi.get this "usage")

  let view_formats this =
    (Js.Any.nullable_to_option (Js.Any.to_array Gpu_texture_format.of_any))
      (Js.Ffi.get this "viewFormats")

  let alpha_mode this =
    (Js.Any.nullable_to_option Gpu_canvas_alpha_mode.of_any)
      (Js.Ffi.get this "alphaMode")
end

and Gpu_device_lost_reason : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val unknown : t
  val destroyed : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let unknown = Js.of_string "unknown"
  let destroyed = Js.of_string "destroyed"
end

and Gpu_device_lost_info : sig
  type t = [ `Gpu_device_lost_info ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDeviceLostInfo} \
     [GPUDeviceLostInfo]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val reason : t -> Gpu_device_lost_reason.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDeviceLostInfo/reason} \
     [reason] on MDN}."]

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUDeviceLostInfo/message} \
     [message] on MDN}."]
end = struct
  type t = [ `Gpu_device_lost_info ] Js.t

  let t = Js.Ffi.constr "GPUDeviceLostInfo"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let reason this = Gpu_device_lost_reason.of_any (Js.Ffi.get this "reason")
  let message this = Js.Any.to_string (Js.Ffi.get this "message")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/GPUDeviceLostInfo} \
   [GPUDeviceLostInfo] on MDN}."]

and Gpu_validation_error : sig
  type t = [ `Gpu_validation_error ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUValidationError} \
     [GPUValidationError]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : message:string -> unit -> t

  val message : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUValidationError/message} \
     [message] on MDN}."]
end = struct
  type t = [ `Gpu_validation_error ] Js.t

  let t = Js.Ffi.constr "GPUValidationError"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~message () =
    let message = Js.Any.of_string message in
    Js.Ffi.obj_new t [| message |]

  let message this = Js.Any.to_string (Js.Ffi.get this "message")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUValidationError} \
   [GPUValidationError] on MDN}."]

and Gpu_out_of_memory_error : sig
  type t = [ `Gpu_out_of_memory_error ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUOutOfMemoryError} \
     [GPUOutOfMemoryError]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t
end = struct
  type t = [ `Gpu_out_of_memory_error ] Js.t

  let t = Js.Ffi.constr "GPUOutOfMemoryError"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUOutOfMemoryError} \
   [GPUOutOfMemoryError] on MDN}."]

and Gpu_error : sig
  type t

  val with_gpu_out_of_memory_error : Gpu_out_of_memory_error.t -> t
  val with_gpu_validation_error : Gpu_validation_error.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_gpu_out_of_memory_error = Js.repr
  let with_gpu_validation_error = Js.repr
end

and Gpu_error_filter : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val validation : t
  val out_of_memory : t
  val internal : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let validation = Js.of_string "validation"
  let out_of_memory = Js.of_string "out-of-memory"
  let internal = Js.of_string "internal"
end

and Gpu_uncaptured_error_event : sig
  type t = [ `Gpu_uncaptured_error_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent} \
     [GPUUncapturedErrorEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Gpu_uncaptured_error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent} \
     [GPUUncapturedErrorEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_gpu_uncaptured_error_event_init_dict :
    type':string ->
    gpu_uncaptured_error_event_init_dict:Gpu_uncaptured_error_event_init.t ->
    unit ->
    'a super

  val error : t -> Gpu_error.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent/error} \
     [error] on MDN}."]
end = struct
  type t = [ `Gpu_uncaptured_error_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Gpu_uncaptured_error_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent} \
     [GPUUncapturedErrorEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "GPUUncapturedErrorEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_gpu_uncaptured_error_event_init_dict ~type'
      ~gpu_uncaptured_error_event_init_dict () =
    let type' = Js.Any.of_string type' in
    let gpu_uncaptured_error_event_init_dict =
      Gpu_uncaptured_error_event_init.to_any
        gpu_uncaptured_error_event_init_dict
    in
    Js.Ffi.obj_new t [| type'; gpu_uncaptured_error_event_init_dict |]

  let error this = Gpu_error.of_any (Js.Ffi.get this "error")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent} \
   [GPUUncapturedErrorEvent] on MDN}."]

and Gpu_uncaptured_error_event_init : sig
  type t
  [@@ocaml.doc "The type for the [GPUUncapturedErrorEventInit] dictionary."]

  val make : error:Gpu_error.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val error : t -> Gpu_error.t
end = struct
  type t = Js.any

  let make ~error () =
    let error = Gpu_error.to_any error in
    Js.Ffi.obj [| ("error", error) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let error this = Gpu_error.of_any (Js.Ffi.get this "error")
end

and Gpu_buffer_dynamic_offset : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_buffer_dynamic_offset

and Gpu_stencil_value : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_stencil_value

and Gpu_sample_mask : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_sample_mask

and Gpu_depth_bias : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_depth_bias

and Gpu_size64 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_size64

and Gpu_integer_coordinate : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_integer_coordinate

and Gpu_index32 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_index32

and Gpu_size32 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_size32

and Gpu_signed_offset32 : sig
  type nonrec t = int

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Gpu_signed_offset32

and Gpu_color_dict : sig
  type t [@@ocaml.doc "The type for the [GPUColorDict] dictionary."]

  val make : r:float -> g:float -> b:float -> a:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val r : t -> float
  val g : t -> float
  val b : t -> float
  val a : t -> float
end = struct
  type t = Js.any

  let make ~r ~g ~b ~a () =
    let r = Js.Any.of_float r in
    let g = Js.Any.of_float g in
    let b = Js.Any.of_float b in
    let a = Js.Any.of_float a in
    Js.Ffi.obj [| ("r", r); ("g", g); ("b", b); ("a", a) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let r this = Js.Any.to_float (Js.Ffi.get this "r")
  let g this = Js.Any.to_float (Js.Ffi.get this "g")
  let b this = Js.Any.to_float (Js.Ffi.get this "b")
  let a this = Js.Any.to_float (Js.Ffi.get this "a")
end

and Gpu_color : sig
  type t

  val with_sequence : float array -> t
  val with_gpu_color_dict : Gpu_color_dict.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_sequence = Js.repr
  let with_gpu_color_dict = Js.repr
end

and Gpu_origin2_d_dict : sig
  type t [@@ocaml.doc "The type for the [GPUOrigin2DDict] dictionary."]

  val make :
    ?x:Gpu_integer_coordinate.t -> ?y:Gpu_integer_coordinate.t -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> Gpu_integer_coordinate.t option
  val y : t -> Gpu_integer_coordinate.t option
end = struct
  type t = Js.any

  let make ?x ?y () =
    let x = (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) x in
    let y = (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) y in
    Js.Ffi.obj [| ("x", x); ("y", y) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let x this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "x")

  let y this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "y")
end

and Gpu_origin2_d : sig
  type t

  val with_sequence : Gpu_integer_coordinate.t array -> t
  val with_gpu_origin2_d_dict : Gpu_origin2_d_dict.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_sequence = Js.repr
  let with_gpu_origin2_d_dict = Js.repr
end

and Gpu_origin3_d_dict : sig
  type t [@@ocaml.doc "The type for the [GPUOrigin3DDict] dictionary."]

  val make :
    ?x:Gpu_integer_coordinate.t ->
    ?y:Gpu_integer_coordinate.t ->
    ?z:Gpu_integer_coordinate.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> Gpu_integer_coordinate.t option
  val y : t -> Gpu_integer_coordinate.t option
  val z : t -> Gpu_integer_coordinate.t option
end = struct
  type t = Js.any

  let make ?x ?y ?z () =
    let x = (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) x in
    let y = (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) y in
    let z = (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) z in
    Js.Ffi.obj [| ("x", x); ("y", y); ("z", z) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let x this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "x")

  let y this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "y")

  let z this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "z")
end

and Gpu_origin3_d : sig
  type t

  val with_sequence : Gpu_integer_coordinate.t array -> t
  val with_gpu_origin3_d_dict : Gpu_origin3_d_dict.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_sequence = Js.repr
  let with_gpu_origin3_d_dict = Js.repr
end

and Gpu_extent3_d_dict : sig
  type t [@@ocaml.doc "The type for the [GPUExtent3DDict] dictionary."]

  val make :
    width:Gpu_integer_coordinate.t ->
    ?height:Gpu_integer_coordinate.t ->
    ?depth_or_array_layers:Gpu_integer_coordinate.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val width : t -> Gpu_integer_coordinate.t
  val height : t -> Gpu_integer_coordinate.t option
  val depth_or_array_layers : t -> Gpu_integer_coordinate.t option
end = struct
  type t = Js.any

  let make ~width ?height ?depth_or_array_layers () =
    let width = Gpu_integer_coordinate.to_any width in
    let height =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any) height
    in
    let depth_or_array_layers =
      (Js.Any.nullable_of_option Gpu_integer_coordinate.to_any)
        depth_or_array_layers
    in
    Js.Ffi.obj
      [|
        ("width", width);
        ("height", height);
        ("depthOrArrayLayers", depth_or_array_layers);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let width this = Gpu_integer_coordinate.of_any (Js.Ffi.get this "width")

  let height this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "height")

  let depth_or_array_layers this =
    (Js.Any.nullable_to_option Gpu_integer_coordinate.of_any)
      (Js.Ffi.get this "depthOrArrayLayers")
end

and Gpu_extent3_d : sig
  type t

  val with_sequence : Gpu_integer_coordinate.t array -> t
  val with_gpu_extent3_d_dict : Gpu_extent3_d_dict.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_sequence = Js.repr
  let with_gpu_extent3_d_dict = Js.repr
end

and Binary_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val blob : t
  val arraybuffer : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let blob = Js.of_string "blob"
  let arraybuffer = Js.of_string "arraybuffer"
end

and Web_socket : sig
  type t = [ `Web_socket ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket} [WebSocket]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Web_socket | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket} [WebSocket]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_url_and_protocols :
    url:string -> ?protocols:[< `String | `Sequence ] Js.t -> unit -> 'a super

  val url : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url} \
     [url] on MDN}."]

  val connecting : int
  val open' : int
  val closing : int
  val closed : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState} \
     [readyState] on MDN}."]

  val buffered_amount : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount} \
     [bufferedAmount] on MDN}."]

  val onopen : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen} \
     [onopen] on MDN}."]

  val set_onopen : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen} \
     [onopen] on MDN}."]

  val onerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror} \
     [onerror] on MDN}."]

  val onclose : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose} \
     [onclose] on MDN}."]

  val set_onclose : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose} \
     [onclose] on MDN}."]

  val protocol : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol} \
     [protocol] on MDN}."]

  val close : ?code:int -> ?reason:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close} \
     [close] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage} \
     [onmessage] on MDN}."]

  val binary_type : t -> Binary_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType} \
     [binaryType] on MDN}."]

  val set_binary_type : t -> Binary_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType} \
     [binaryType] on MDN}."]

  val send : data:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send} \
     [send] on MDN}."]

  val send : data:Blob.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send} \
     [send] on MDN}."]

  val send : data:'todo_buffer -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send} \
     [send] on MDN}."]

  val send : data:Array_buffer_view.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send} \
     [send] on MDN}."]
end = struct
  type t = [ `Web_socket ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Web_socket | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WebSocket} [WebSocket]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WebSocket"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let with_url_and_protocols ~url ?protocols () =
    let url = Js.Any.of_string url in
    let protocols = (Js.Any.undefined_of_option Js.to_any) protocols in
    Js.Ffi.obj_new t [| url; protocols |]

  let url this = Js.Any.to_string (Js.Ffi.get this "url")
  let connecting = 0
  let open' = 1
  let closing = 2
  let closed = 3
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")
  let buffered_amount this = Js.Any.to_int (Js.Ffi.get this "bufferedAmount")
  let onopen this = Event_handler.of_any (Js.Ffi.get this "onopen")
  let set_onopen this x = Js.Ffi.set this "onopen" (Event_handler.to_any x)
  let onerror this = Event_handler.of_any (Js.Ffi.get this "onerror")
  let set_onerror this x = Js.Ffi.set this "onerror" (Event_handler.to_any x)
  let onclose this = Event_handler.of_any (Js.Ffi.get this "onclose")
  let set_onclose this x = Js.Ffi.set this "onclose" (Event_handler.to_any x)
  let protocol this = Js.Any.to_string (Js.Ffi.get this "protocol")

  let close ?code ?reason this =
    let code = (Js.Any.undefined_of_option Js.Any.of_int) code in
    let reason = (Js.Any.undefined_of_option Js.Any.of_string) reason in
    Js.to_unit (Js.Ffi.meth_call this "close" [| code; reason |])

  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)
  let binary_type this = Binary_type.of_any (Js.Ffi.get this "binaryType")

  let set_binary_type this x =
    Js.Ffi.set this "binaryType" (Binary_type.to_any x)

  let send ~data this =
    let data = Js.Any.of_string data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Blob.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Array_buffer.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let send ~data this =
    let data = Array_buffer_view.to_any data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket} \
   [WebSocket] on MDN}."]

and Wheel_event : sig
  type t = [ `Wheel_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent} \
     [WheelEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Wheel_event | `Mouse_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent} \
     [WheelEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_arg_and_wheel_event_init_dict :
    type_arg:string ->
    ?wheel_event_init_dict:Wheel_event_init.t ->
    unit ->
    'a super

  val dom_delta_pixel : int
  val dom_delta_line : int
  val dom_delta_page : int

  val delta_x : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX} \
     [deltaX] on MDN}."]

  val delta_y : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY} \
     [deltaY] on MDN}."]

  val delta_z : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ} \
     [deltaZ] on MDN}."]

  val delta_mode : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode} \
     [deltaMode] on MDN}."]

  val init_wheel_event :
    type_arg:string ->
    bubbles_arg:bool ->
    cancelable_arg:bool ->
    view_arg:Window.t option ->
    detail_arg:int ->
    delta_x:float ->
    delta_y:float ->
    delta_z:float ->
    delta_mode:int ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/initWheelEvent} \
     [initWheelEvent] on MDN}."]
end = struct
  type t = [ `Wheel_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Wheel_event | `Mouse_event | `Ui_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent} \
     [WheelEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WheelEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_mouse_event this = Js.Ffi.magic this

  let with_type_arg_and_wheel_event_init_dict ~type_arg ?wheel_event_init_dict
      () =
    let type_arg = Js.Any.of_string type_arg in
    let wheel_event_init_dict =
      (Js.Any.undefined_of_option Wheel_event_init.to_any) wheel_event_init_dict
    in
    Js.Ffi.obj_new t [| type_arg; wheel_event_init_dict |]

  let dom_delta_pixel = 0
  let dom_delta_line = 1
  let dom_delta_page = 2
  let delta_x this = Js.Any.to_float (Js.Ffi.get this "deltaX")
  let delta_y this = Js.Any.to_float (Js.Ffi.get this "deltaY")
  let delta_z this = Js.Any.to_float (Js.Ffi.get this "deltaZ")
  let delta_mode this = Js.Any.to_int (Js.Ffi.get this "deltaMode")

  let init_wheel_event ~type_arg ~bubbles_arg ~cancelable_arg ~view_arg
      ~detail_arg ~delta_x ~delta_y ~delta_z ~delta_mode this =
    let type_arg = Js.Any.of_string type_arg in
    let bubbles_arg = Js.Any.of_bool bubbles_arg in
    let cancelable_arg = Js.Any.of_bool cancelable_arg in
    let view_arg = (Js.Any.nullable_of_option Window.to_any) view_arg in
    let detail_arg = Js.Any.of_int detail_arg in
    let delta_x = Js.Any.of_float delta_x in
    let delta_y = Js.Any.of_float delta_y in
    let delta_z = Js.Any.of_float delta_z in
    let delta_mode = Js.Any.of_int delta_mode in
    Js.to_unit
      (Js.Ffi.meth_call this "initWheelEvent"
         [|
           type_arg;
           bubbles_arg;
           cancelable_arg;
           view_arg;
           detail_arg;
           delta_x;
           delta_y;
           delta_z;
           delta_mode;
         |]
      )
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent} \
   [WheelEvent] on MDN}."]

and Wheel_event_init : sig
  type t [@@ocaml.doc "The type for the [WheelEventInit] dictionary."]

  val make :
    ?delta_x:float ->
    ?delta_y:float ->
    ?delta_z:float ->
    ?delta_mode:int ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_mouse_event_init : t -> Mouse_event_init.t
  val delta_x : t -> float option
  val delta_y : t -> float option
  val delta_z : t -> float option
  val delta_mode : t -> int option
end = struct
  type t = Js.any

  let make ?delta_x ?delta_y ?delta_z ?delta_mode () =
    let delta_x = (Js.Any.nullable_of_option Js.Any.of_float) delta_x in
    let delta_y = (Js.Any.nullable_of_option Js.Any.of_float) delta_y in
    let delta_z = (Js.Any.nullable_of_option Js.Any.of_float) delta_z in
    let delta_mode = (Js.Any.nullable_of_option Js.Any.of_int) delta_mode in
    Js.Ffi.obj
      [|
        ("deltaX", delta_x);
        ("deltaY", delta_y);
        ("deltaZ", delta_z);
        ("deltaMode", delta_mode);
      |]

  let to_mouse_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let delta_x this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "deltaX")

  let delta_y this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "deltaY")

  let delta_z this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "deltaZ")

  let delta_mode this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "deltaMode")
end

and Window : sig
  type t = [ `Window ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window} [Window]} \
     interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Window | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window} [Window]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val window : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/window} \
     [window] on MDN}."]

  val self : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/self} \
     [self] on MDN}."]

  val document : t -> 'a Document.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/document} \
     [document] on MDN}."]

  val name : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/name} \
     [name] on MDN}."]

  val set_name : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/name} \
     [name] on MDN}."]

  val location : t -> Location.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/location} \
     [location] on MDN}."]

  val history : t -> History.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/history} \
     [history] on MDN}."]

  val custom_elements : t -> Custom_element_registry.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements} \
     [customElements] on MDN}."]

  val status : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/status} \
     [status] on MDN}."]

  val set_status : t -> string -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/status} \
     [status] on MDN}."]

  val close : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/close} \
     [close] on MDN}."]

  val closed : t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/closed} \
     [closed] on MDN}."]

  val stop : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/stop} \
     [stop] on MDN}."]

  val frames : t -> Window_proxy.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/frames} \
     [frames] on MDN}."]

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/length} \
     [length] on MDN}."]

  val top : t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/top} \
     [top] on MDN}."]

  val opener : t -> Js.any
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/opener} \
     [opener] on MDN}."]

  val set_opener : t -> Js.any -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/opener} \
     [opener] on MDN}."]

  val parent : t -> Window_proxy.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/parent} \
     [parent] on MDN}."]

  val frame_element : t -> 'a Element.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement} \
     [frameElement] on MDN}."]

  val open' :
    ?url:string ->
    ?target:string ->
    ?features:string ->
    t ->
    Window_proxy.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/open} \
     [open] on MDN}."]

  val get : name:string -> t -> 'todo_object
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/get} \
     [get] on MDN}."]

  val navigator : t -> Navigator.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator} \
     [navigator] on MDN}."]

  val alert : message:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/alert} \
     [alert] on MDN}."]

  val alert : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/alert} \
     [alert] on MDN}."]

  val confirm : ?message:string -> t -> bool
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm} \
     [confirm] on MDN}."]

  val prompt : ?message:string -> ?default:string -> t -> string option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt} \
     [prompt] on MDN}."]

  val request_animation_frame : callback:Frame_request_callback.t -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame} \
     [requestAnimationFrame] on MDN}."]

  val cancel_animation_frame : handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame} \
     [cancelAnimationFrame] on MDN}."]

  val post_message :
    message:Js.any ->
    target_origin:string ->
    ?transfer:'todo_object array ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Window_post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage} \
     [postMessage] on MDN}."]

  val event : t -> Js.any
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/event} \
     [event] on MDN}."]

  val get_selection : t -> Selection.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection} \
     [getSelection] on MDN}."]

  val running_animation_count : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/runningAnimationCount} \
     [runningAnimationCount] on MDN}."]

  val test_runner : t -> Test_runner.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/testRunner} \
     [testRunner] on MDN}."]

  val webdriver_callback : ?result:Js.any -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/webdriverCallback} \
     [webdriverCallback] on MDN}."]

  val webdriver_timeout : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/webdriverTimeout} \
     [webdriverTimeout] on MDN}."]

  val debug : arg:string -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/debug} \
     [debug] on MDN}."]

  val gc : t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/gc} [gc] \
     on MDN}."]

  val js_backtrace : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/js_backtrace} \
     [js_backtrace] on MDN}."]

  val match_media : query:string -> t -> 'a Media_query_list.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia} \
     [matchMedia] on MDN}."]

  val screen : t -> Screen.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/screen} \
     [screen] on MDN}."]

  val move_to : x:int -> y:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo} \
     [moveTo] on MDN}."]

  val move_by : x:int -> y:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy} \
     [moveBy] on MDN}."]

  val resize_to : x:int -> y:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo} \
     [resizeTo] on MDN}."]

  val resize_by : x:int -> y:int -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy} \
     [resizeBy] on MDN}."]

  val inner_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth} \
     [innerWidth] on MDN}."]

  val inner_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight} \
     [innerHeight] on MDN}."]

  val scroll_x : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX} \
     [scrollX] on MDN}."]

  val page_x_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset} \
     [pageXOffset] on MDN}."]

  val scroll_y : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY} \
     [scrollY] on MDN}."]

  val page_y_offset : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset} \
     [pageYOffset] on MDN}."]

  val scroll : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll} \
     [scroll] on MDN}."]

  val scroll : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll} \
     [scroll] on MDN}."]

  val scroll_to : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo} \
     [scrollTo] on MDN}."]

  val scroll_to : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo} \
     [scrollTo] on MDN}."]

  val scroll_by : ?options:Scroll_to_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy} \
     [scrollBy] on MDN}."]

  val scroll_by : x:float -> y:float -> t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy} \
     [scrollBy] on MDN}."]

  val screen_x : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX} \
     [screenX] on MDN}."]

  val screen_y : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY} \
     [screenY] on MDN}."]

  val outer_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth} \
     [outerWidth] on MDN}."]

  val outer_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight} \
     [outerHeight] on MDN}."]

  val device_pixel_ratio : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio} \
     [devicePixelRatio] on MDN}."]

  val get_computed_style :
    elt:Element.t -> ?pseudo_elt:string -> t -> Css_style_declaration.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle} \
     [getComputedStyle] on MDN}."]

  val capture_events : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents} \
     [captureEvents] on MDN}."]

  val release_events : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents} \
     [releaseEvents] on MDN}."]

  val session_storage : t -> Storage.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage} \
     [sessionStorage] on MDN}."]

  val create_image_bitmap :
    image:Image_bitmap_source.t ->
    ?options:Image_bitmap_options.t ->
    t ->
    Image_bitmap.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap} \
     [createImageBitmap] on MDN}."]

  val queue_microtask : callback:Void_function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/queueMicrotask} \
     [queueMicrotask] on MDN}."]

  val clear_interval : ?handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval} \
     [clearInterval] on MDN}."]

  val set_interval :
    handler:Timer_handler.t ->
    ?timeout:int ->
    arguments:Js.any array ->
    t ->
    int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval} \
     [setInterval] on MDN}."]

  val clear_timeout : ?handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout} \
     [clearTimeout] on MDN}."]

  val set_timeout :
    handler:Timer_handler.t ->
    ?timeout:int ->
    arguments:Js.any array ->
    t ->
    int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout} \
     [setTimeout] on MDN}."]

  val atob : data:string -> t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/atob} \
     [atob] on MDN}."]

  val btoa : data:string -> t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa} \
     [btoa] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/origin} \
     [origin] on MDN}."]

  val local_storage : t -> Storage.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage} \
     [localStorage] on MDN}."]

  val onunload : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload} \
     [onunload] on MDN}."]

  val set_onunload : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload} \
     [onunload] on MDN}."]

  val onunhandledrejection : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onunhandledrejection} \
     [onunhandledrejection] on MDN}."]

  val set_onunhandledrejection : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onunhandledrejection} \
     [onunhandledrejection] on MDN}."]

  val onstorage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage} \
     [onstorage] on MDN}."]

  val set_onstorage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage} \
     [onstorage] on MDN}."]

  val onrejectionhandled : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onrejectionhandled} \
     [onrejectionhandled] on MDN}."]

  val set_onrejectionhandled : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onrejectionhandled} \
     [onrejectionhandled] on MDN}."]

  val onpopstate : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate} \
     [onpopstate] on MDN}."]

  val set_onpopstate : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate} \
     [onpopstate] on MDN}."]

  val onpageshow : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow} \
     [onpageshow] on MDN}."]

  val set_onpageshow : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow} \
     [onpageshow] on MDN}."]

  val onpagehide : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide} \
     [onpagehide] on MDN}."]

  val set_onpagehide : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide} \
     [onpagehide] on MDN}."]

  val ononline : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline} \
     [ononline] on MDN}."]

  val set_ononline : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline} \
     [ononline] on MDN}."]

  val onoffline : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline} \
     [onoffline] on MDN}."]

  val set_onoffline : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline} \
     [onoffline] on MDN}."]

  val onmessageerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror} \
     [onmessageerror] on MDN}."]

  val set_onmessageerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror} \
     [onmessageerror] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage} \
     [onmessage] on MDN}."]

  val onlanguagechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange} \
     [onlanguagechange] on MDN}."]

  val set_onlanguagechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange} \
     [onlanguagechange] on MDN}."]

  val onhashchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange} \
     [onhashchange] on MDN}."]

  val set_onhashchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange} \
     [onhashchange] on MDN}."]

  val onbeforeunload : t -> On_before_unload_event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload} \
     [onbeforeunload] on MDN}."]

  val set_onbeforeunload : t -> On_before_unload_event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload} \
     [onbeforeunload] on MDN}."]

  val onbeforeprint : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint} \
     [onbeforeprint] on MDN}."]

  val set_onbeforeprint : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint} \
     [onbeforeprint] on MDN}."]

  val onafterprint : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint} \
     [onafterprint] on MDN}."]

  val set_onafterprint : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint} \
     [onafterprint] on MDN}."]

  val onwaiting : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting} \
     [onwaiting] on MDN}."]

  val set_onwaiting : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting} \
     [onwaiting] on MDN}."]

  val onvolumechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange} \
     [onvolumechange] on MDN}."]

  val set_onvolumechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange} \
     [onvolumechange] on MDN}."]

  val ontoggle : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle} \
     [ontoggle] on MDN}."]

  val set_ontoggle : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle} \
     [ontoggle] on MDN}."]

  val ontimeupdate : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate} \
     [ontimeupdate] on MDN}."]

  val set_ontimeupdate : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate} \
     [ontimeupdate] on MDN}."]

  val onsuspend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend} \
     [onsuspend] on MDN}."]

  val set_onsuspend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend} \
     [onsuspend] on MDN}."]

  val onsubmit : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit} \
     [onsubmit] on MDN}."]

  val set_onsubmit : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit} \
     [onsubmit] on MDN}."]

  val onstalled : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled} \
     [onstalled] on MDN}."]

  val set_onstalled : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled} \
     [onstalled] on MDN}."]

  val onshow : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow} \
     [onshow] on MDN}."]

  val set_onshow : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow} \
     [onshow] on MDN}."]

  val onselect : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect} \
     [onselect] on MDN}."]

  val set_onselect : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect} \
     [onselect] on MDN}."]

  val onseeking : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking} \
     [onseeking] on MDN}."]

  val set_onseeking : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking} \
     [onseeking] on MDN}."]

  val onseeked : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked} \
     [onseeked] on MDN}."]

  val set_onseeked : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked} \
     [onseeked] on MDN}."]

  val onscroll : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll} \
     [onscroll] on MDN}."]

  val set_onscroll : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll} \
     [onscroll] on MDN}."]

  val onresize : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize} \
     [onresize] on MDN}."]

  val set_onresize : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize} \
     [onresize] on MDN}."]

  val onreset : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset} \
     [onreset] on MDN}."]

  val set_onreset : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset} \
     [onreset] on MDN}."]

  val onratechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange} \
     [onratechange] on MDN}."]

  val set_onratechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange} \
     [onratechange] on MDN}."]

  val onprogress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress} \
     [onprogress] on MDN}."]

  val set_onprogress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress} \
     [onprogress] on MDN}."]

  val onplaying : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying} \
     [onplaying] on MDN}."]

  val set_onplaying : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying} \
     [onplaying] on MDN}."]

  val onplay : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay} \
     [onplay] on MDN}."]

  val set_onplay : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay} \
     [onplay] on MDN}."]

  val onpause : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause} \
     [onpause] on MDN}."]

  val set_onpause : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause} \
     [onpause] on MDN}."]

  val onwheel : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel} \
     [onwheel] on MDN}."]

  val set_onwheel : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel} \
     [onwheel] on MDN}."]

  val onmouseup : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup} \
     [onmouseup] on MDN}."]

  val set_onmouseup : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup} \
     [onmouseup] on MDN}."]

  val onmouseover : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover} \
     [onmouseover] on MDN}."]

  val set_onmouseover : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover} \
     [onmouseover] on MDN}."]

  val onmouseout : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout} \
     [onmouseout] on MDN}."]

  val set_onmouseout : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout} \
     [onmouseout] on MDN}."]

  val onmousemove : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove} \
     [onmousemove] on MDN}."]

  val set_onmousemove : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove} \
     [onmousemove] on MDN}."]

  val onmouseleave : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave} \
     [onmouseleave] on MDN}."]

  val set_onmouseleave : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave} \
     [onmouseleave] on MDN}."]

  val onmouseenter : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter} \
     [onmouseenter] on MDN}."]

  val set_onmouseenter : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter} \
     [onmouseenter] on MDN}."]

  val onmousedown : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown} \
     [onmousedown] on MDN}."]

  val set_onmousedown : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown} \
     [onmousedown] on MDN}."]

  val onloadstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart} \
     [onloadstart] on MDN}."]

  val set_onloadstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart} \
     [onloadstart] on MDN}."]

  val onloadedmetadata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata} \
     [onloadedmetadata] on MDN}."]

  val set_onloadedmetadata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata} \
     [onloadedmetadata] on MDN}."]

  val onloadeddata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata} \
     [onloadeddata] on MDN}."]

  val set_onloadeddata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata} \
     [onloadeddata] on MDN}."]

  val onload : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onload} \
     [onload] on MDN}."]

  val set_onload : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onload} \
     [onload] on MDN}."]

  val onkeyup : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup} \
     [onkeyup] on MDN}."]

  val set_onkeyup : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup} \
     [onkeyup] on MDN}."]

  val onkeypress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress} \
     [onkeypress] on MDN}."]

  val set_onkeypress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress} \
     [onkeypress] on MDN}."]

  val onkeydown : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown} \
     [onkeydown] on MDN}."]

  val set_onkeydown : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown} \
     [onkeydown] on MDN}."]

  val oninvalid : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid} \
     [oninvalid] on MDN}."]

  val set_oninvalid : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid} \
     [oninvalid] on MDN}."]

  val oninput : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput} \
     [oninput] on MDN}."]

  val set_oninput : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput} \
     [oninput] on MDN}."]

  val onformdata : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onformdata} \
     [onformdata] on MDN}."]

  val set_onformdata : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onformdata} \
     [onformdata] on MDN}."]

  val onfocus : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus} \
     [onfocus] on MDN}."]

  val set_onfocus : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus} \
     [onfocus] on MDN}."]

  val onerror : t -> On_error_event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> On_error_event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror} \
     [onerror] on MDN}."]

  val onended : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onended} \
     [onended] on MDN}."]

  val set_onended : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onended} \
     [onended] on MDN}."]

  val onemptied : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied} \
     [onemptied] on MDN}."]

  val set_onemptied : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied} \
     [onemptied] on MDN}."]

  val ondurationchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange} \
     [ondurationchange] on MDN}."]

  val set_ondurationchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange} \
     [ondurationchange] on MDN}."]

  val ondrop : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop} \
     [ondrop] on MDN}."]

  val set_ondrop : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop} \
     [ondrop] on MDN}."]

  val ondragstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart} \
     [ondragstart] on MDN}."]

  val set_ondragstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart} \
     [ondragstart] on MDN}."]

  val ondragover : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover} \
     [ondragover] on MDN}."]

  val set_ondragover : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover} \
     [ondragover] on MDN}."]

  val ondragleave : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave} \
     [ondragleave] on MDN}."]

  val set_ondragleave : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave} \
     [ondragleave] on MDN}."]

  val ondragexit : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit} \
     [ondragexit] on MDN}."]

  val set_ondragexit : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit} \
     [ondragexit] on MDN}."]

  val ondragenter : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter} \
     [ondragenter] on MDN}."]

  val set_ondragenter : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter} \
     [ondragenter] on MDN}."]

  val ondragend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend} \
     [ondragend] on MDN}."]

  val set_ondragend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend} \
     [ondragend] on MDN}."]

  val ondrag : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag} \
     [ondrag] on MDN}."]

  val set_ondrag : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag} \
     [ondrag] on MDN}."]

  val ondblclick : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick} \
     [ondblclick] on MDN}."]

  val set_ondblclick : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick} \
     [ondblclick] on MDN}."]

  val oncuechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncuechange} \
     [oncuechange] on MDN}."]

  val set_oncuechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncuechange} \
     [oncuechange] on MDN}."]

  val oncontextmenu : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu} \
     [oncontextmenu] on MDN}."]

  val set_oncontextmenu : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu} \
     [oncontextmenu] on MDN}."]

  val onclose : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose} \
     [onclose] on MDN}."]

  val set_onclose : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose} \
     [onclose] on MDN}."]

  val onclick : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick} \
     [onclick] on MDN}."]

  val set_onclick : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick} \
     [onclick] on MDN}."]

  val onchange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange} \
     [onchange] on MDN}."]

  val set_onchange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange} \
     [onchange] on MDN}."]

  val oncanplaythrough : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough} \
     [oncanplaythrough] on MDN}."]

  val set_oncanplaythrough : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough} \
     [oncanplaythrough] on MDN}."]

  val oncanplay : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay} \
     [oncanplay] on MDN}."]

  val set_oncanplay : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay} \
     [oncanplay] on MDN}."]

  val oncancel : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/oncancel} \
     [oncancel] on MDN}."]

  val set_oncancel : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/oncancel} \
     [oncancel] on MDN}."]

  val onblur : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur} \
     [onblur] on MDN}."]

  val set_onblur : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur} \
     [onblur] on MDN}."]

  val onabort : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort} \
     [onabort] on MDN}."]

  val set_onabort : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort} \
     [onabort] on MDN}."]
end = struct
  type t = [ `Window ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Window | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Window} [Window]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Window"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_global_scope this = Js.Ffi.magic this
  let window this = Window_proxy.of_any (Js.Ffi.get this "window")
  let self this = Window_proxy.of_any (Js.Ffi.get this "self")
  let document this = Document.of_any (Js.Ffi.get this "document")
  let name this = Js.Any.to_string (Js.Ffi.get this "name")
  let set_name this x = Js.Ffi.set this "name" (Js.Any.of_string x)
  let location this = Location.of_any (Js.Ffi.get this "location")
  let history this = History.of_any (Js.Ffi.get this "history")

  let custom_elements this =
    Custom_element_registry.of_any (Js.Ffi.get this "customElements")

  let status this = Js.Any.to_string (Js.Ffi.get this "status")
  let set_status this x = Js.Ffi.set this "status" (Js.Any.of_string x)
  let close this = Js.to_unit (Js.Ffi.meth_call this "close" [||])
  let closed this = Js.Any.to_bool (Js.Ffi.get this "closed")
  let stop this = Js.to_unit (Js.Ffi.meth_call this "stop" [||])
  let frames this = Window_proxy.of_any (Js.Ffi.get this "frames")
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let top this =
    (Js.Any.nullable_to_option Window_proxy.of_any) (Js.Ffi.get this "top")

  let opener this = Js.to_any (Js.Ffi.get this "opener")
  let set_opener this x = Js.Ffi.set this "opener" (Js.of_any x)

  let parent this =
    (Js.Any.nullable_to_option Window_proxy.of_any) (Js.Ffi.get this "parent")

  let frame_element this =
    (Js.Any.nullable_to_option Element.of_any) (Js.Ffi.get this "frameElement")

  let open' ?url ?target ?features this =
    let url = (Js.Any.undefined_of_option Js.Any.of_string) url in
    let target = (Js.Any.undefined_of_option Js.Any.of_string) target in
    let features = (Js.Any.undefined_of_option Js.Any.of_string) features in
    (Js.Any.nullable_to_option Window_proxy.of_any)
      (Js.Ffi.meth_call this "open" [| url; target; features |])

  let get ~name this =
    let name = Js.Any.of_string name in
    Js.object_todo (Js.Ffi.meth_call this "get" [| name |])

  let navigator this = Navigator.of_any (Js.Ffi.get this "navigator")

  let alert ~message this =
    let message = Js.Any.of_string message in
    Js.to_unit (Js.Ffi.meth_call this "alert" [| message |])

  let alert this = Js.to_unit (Js.Ffi.meth_call this "alert" [||])

  let confirm ?message this =
    let message = (Js.Any.undefined_of_option Js.Any.of_string) message in
    Js.Any.to_bool (Js.Ffi.meth_call this "confirm" [| message |])

  let prompt ?message ?default this =
    let message = (Js.Any.undefined_of_option Js.Any.of_string) message in
    let default = (Js.Any.undefined_of_option Js.Any.of_string) default in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "prompt" [| message; default |])

  let request_animation_frame ~callback this =
    let callback = Frame_request_callback.to_any callback in
    Js.Any.to_int (Js.Ffi.meth_call this "requestAnimationFrame" [| callback |])

  let cancel_animation_frame ~handle this =
    let handle = Js.Any.of_int handle in
    Js.to_unit (Js.Ffi.meth_call this "cancelAnimationFrame" [| handle |])

  let post_message ~message ~target_origin ?transfer this =
    let message = Js.of_any message in
    let target_origin = Js.Any.of_string target_origin in
    let transfer =
      (Js.Any.undefined_of_option (Js.Any.of_array Js.object_todo)) transfer
    in
    Js.to_unit
      (Js.Ffi.meth_call this "postMessage"
         [| message; target_origin; transfer |]
      )

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Window_post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let event this = Js.to_any (Js.Ffi.get this "event")

  let get_selection this =
    (Js.Any.nullable_to_option Selection.of_any)
      (Js.Ffi.meth_call this "getSelection" [||])

  let running_animation_count this =
    Js.Any.to_int (Js.Ffi.get this "runningAnimationCount")

  let test_runner this = Test_runner.of_any (Js.Ffi.get this "testRunner")

  let webdriver_callback ?result this =
    let result = (Js.Any.undefined_of_option Js.of_any) result in
    Js.to_unit (Js.Ffi.meth_call this "webdriverCallback" [| result |])

  let webdriver_timeout this =
    Js.to_unit (Js.Ffi.meth_call this "webdriverTimeout" [||])

  let debug ~arg this =
    let arg = Js.Any.of_string arg in
    Js.to_unit (Js.Ffi.meth_call this "debug" [| arg |])

  let gc this = Js.to_unit (Js.Ffi.meth_call this "gc" [||])
  let js_backtrace this = Js.to_unit (Js.Ffi.meth_call this "js_backtrace" [||])

  let match_media ~query this =
    let query = Js.Any.of_string query in
    Media_query_list.of_any (Js.Ffi.meth_call this "matchMedia" [| query |])

  let screen this = Screen.of_any (Js.Ffi.get this "screen")

  let move_to ~x ~y this =
    let x = Js.Any.of_int x in
    let y = Js.Any.of_int y in
    Js.to_unit (Js.Ffi.meth_call this "moveTo" [| x; y |])

  let move_by ~x ~y this =
    let x = Js.Any.of_int x in
    let y = Js.Any.of_int y in
    Js.to_unit (Js.Ffi.meth_call this "moveBy" [| x; y |])

  let resize_to ~x ~y this =
    let x = Js.Any.of_int x in
    let y = Js.Any.of_int y in
    Js.to_unit (Js.Ffi.meth_call this "resizeTo" [| x; y |])

  let resize_by ~x ~y this =
    let x = Js.Any.of_int x in
    let y = Js.Any.of_int y in
    Js.to_unit (Js.Ffi.meth_call this "resizeBy" [| x; y |])

  let inner_width this = Js.Any.to_int (Js.Ffi.get this "innerWidth")
  let inner_height this = Js.Any.to_int (Js.Ffi.get this "innerHeight")
  let scroll_x this = Js.Any.to_int (Js.Ffi.get this "scrollX")
  let page_x_offset this = Js.Any.to_int (Js.Ffi.get this "pageXOffset")
  let scroll_y this = Js.Any.to_int (Js.Ffi.get this "scrollY")
  let page_y_offset this = Js.Any.to_int (Js.Ffi.get this "pageYOffset")

  let scroll ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scroll" [| options |])

  let scroll ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scroll" [| x; y |])

  let scroll_to ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scrollTo" [| options |])

  let scroll_to ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scrollTo" [| x; y |])

  let scroll_by ?options this =
    let options =
      (Js.Any.undefined_of_option Scroll_to_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "scrollBy" [| options |])

  let scroll_by ~x ~y this =
    let x = Js.Any.of_float x in
    let y = Js.Any.of_float y in
    Js.to_unit (Js.Ffi.meth_call this "scrollBy" [| x; y |])

  let screen_x this = Js.Any.to_int (Js.Ffi.get this "screenX")
  let screen_y this = Js.Any.to_int (Js.Ffi.get this "screenY")
  let outer_width this = Js.Any.to_int (Js.Ffi.get this "outerWidth")
  let outer_height this = Js.Any.to_int (Js.Ffi.get this "outerHeight")

  let device_pixel_ratio this =
    Js.Any.to_float (Js.Ffi.get this "devicePixelRatio")

  let get_computed_style ~elt ?pseudo_elt this =
    let elt = Element.to_any elt in
    let pseudo_elt = (Js.Any.undefined_of_option Js.Any.of_string) pseudo_elt in
    Css_style_declaration.of_any
      (Js.Ffi.meth_call this "getComputedStyle" [| elt; pseudo_elt |])

  let capture_events this =
    Js.to_unit (Js.Ffi.meth_call this "captureEvents" [||])

  let release_events this =
    Js.to_unit (Js.Ffi.meth_call this "releaseEvents" [||])

  let session_storage this = Storage.of_any (Js.Ffi.get this "sessionStorage")

  let create_image_bitmap ~image ?options this =
    let image = Image_bitmap_source.to_any image in
    let options =
      (Js.Any.undefined_of_option Image_bitmap_options.to_any) options
    in
    (Promise.of_any Image_bitmap.of_any)
      (Js.Ffi.meth_call this "createImageBitmap" [| image; options |])

  let queue_microtask ~callback this =
    let callback = Void_function.to_any callback in
    Js.to_unit (Js.Ffi.meth_call this "queueMicrotask" [| callback |])

  let clear_interval ?handle this =
    let handle = (Js.Any.undefined_of_option Js.Any.of_int) handle in
    Js.to_unit (Js.Ffi.meth_call this "clearInterval" [| handle |])

  let set_interval ~handler ?timeout ~arguments this =
    let handler = Timer_handler.to_any handler in
    let timeout = (Js.Any.undefined_of_option Js.Any.of_int) timeout in
    let arguments = (Js.Any.of_array Js.of_any) arguments in
    Js.Any.to_int
      (Js.Ffi.meth_call this "setInterval" [| handler; timeout; arguments |])

  let clear_timeout ?handle this =
    let handle = (Js.Any.undefined_of_option Js.Any.of_int) handle in
    Js.to_unit (Js.Ffi.meth_call this "clearTimeout" [| handle |])

  let set_timeout ~handler ?timeout ~arguments this =
    let handler = Timer_handler.to_any handler in
    let timeout = (Js.Any.undefined_of_option Js.Any.of_int) timeout in
    let arguments = (Js.Any.of_array Js.of_any) arguments in
    Js.Any.to_int
      (Js.Ffi.meth_call this "setTimeout" [| handler; timeout; arguments |])

  let atob ~data this =
    let data = Js.Any.of_string data in
    Js.Any.to_string (Js.Ffi.meth_call this "atob" [| data |])

  let btoa ~data this =
    let data = Js.Any.of_string data in
    Js.Any.to_string (Js.Ffi.meth_call this "btoa" [| data |])

  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let local_storage this = Storage.of_any (Js.Ffi.get this "localStorage")
  let onunload this = Event_handler.of_any (Js.Ffi.get this "onunload")
  let set_onunload this x = Js.Ffi.set this "onunload" (Event_handler.to_any x)

  let onunhandledrejection this =
    Event_handler.of_any (Js.Ffi.get this "onunhandledrejection")

  let set_onunhandledrejection this x =
    Js.Ffi.set this "onunhandledrejection" (Event_handler.to_any x)

  let onstorage this = Event_handler.of_any (Js.Ffi.get this "onstorage")
  let set_onstorage this x = Js.Ffi.set this "onstorage" (Event_handler.to_any x)

  let onrejectionhandled this =
    Event_handler.of_any (Js.Ffi.get this "onrejectionhandled")

  let set_onrejectionhandled this x =
    Js.Ffi.set this "onrejectionhandled" (Event_handler.to_any x)

  let onpopstate this = Event_handler.of_any (Js.Ffi.get this "onpopstate")

  let set_onpopstate this x =
    Js.Ffi.set this "onpopstate" (Event_handler.to_any x)

  let onpageshow this = Event_handler.of_any (Js.Ffi.get this "onpageshow")

  let set_onpageshow this x =
    Js.Ffi.set this "onpageshow" (Event_handler.to_any x)

  let onpagehide this = Event_handler.of_any (Js.Ffi.get this "onpagehide")

  let set_onpagehide this x =
    Js.Ffi.set this "onpagehide" (Event_handler.to_any x)

  let ononline this = Event_handler.of_any (Js.Ffi.get this "ononline")
  let set_ononline this x = Js.Ffi.set this "ononline" (Event_handler.to_any x)
  let onoffline this = Event_handler.of_any (Js.Ffi.get this "onoffline")
  let set_onoffline this x = Js.Ffi.set this "onoffline" (Event_handler.to_any x)

  let onmessageerror this =
    Event_handler.of_any (Js.Ffi.get this "onmessageerror")

  let set_onmessageerror this x =
    Js.Ffi.set this "onmessageerror" (Event_handler.to_any x)

  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)

  let onlanguagechange this =
    Event_handler.of_any (Js.Ffi.get this "onlanguagechange")

  let set_onlanguagechange this x =
    Js.Ffi.set this "onlanguagechange" (Event_handler.to_any x)

  let onhashchange this = Event_handler.of_any (Js.Ffi.get this "onhashchange")

  let set_onhashchange this x =
    Js.Ffi.set this "onhashchange" (Event_handler.to_any x)

  let onbeforeunload this =
    On_before_unload_event_handler.of_any (Js.Ffi.get this "onbeforeunload")

  let set_onbeforeunload this x =
    Js.Ffi.set this "onbeforeunload" (On_before_unload_event_handler.to_any x)

  let onbeforeprint this = Event_handler.of_any (Js.Ffi.get this "onbeforeprint")

  let set_onbeforeprint this x =
    Js.Ffi.set this "onbeforeprint" (Event_handler.to_any x)

  let onafterprint this = Event_handler.of_any (Js.Ffi.get this "onafterprint")

  let set_onafterprint this x =
    Js.Ffi.set this "onafterprint" (Event_handler.to_any x)

  let onwaiting this = Event_handler.of_any (Js.Ffi.get this "onwaiting")
  let set_onwaiting this x = Js.Ffi.set this "onwaiting" (Event_handler.to_any x)

  let onvolumechange this =
    Event_handler.of_any (Js.Ffi.get this "onvolumechange")

  let set_onvolumechange this x =
    Js.Ffi.set this "onvolumechange" (Event_handler.to_any x)

  let ontoggle this = Event_handler.of_any (Js.Ffi.get this "ontoggle")
  let set_ontoggle this x = Js.Ffi.set this "ontoggle" (Event_handler.to_any x)
  let ontimeupdate this = Event_handler.of_any (Js.Ffi.get this "ontimeupdate")

  let set_ontimeupdate this x =
    Js.Ffi.set this "ontimeupdate" (Event_handler.to_any x)

  let onsuspend this = Event_handler.of_any (Js.Ffi.get this "onsuspend")
  let set_onsuspend this x = Js.Ffi.set this "onsuspend" (Event_handler.to_any x)
  let onsubmit this = Event_handler.of_any (Js.Ffi.get this "onsubmit")
  let set_onsubmit this x = Js.Ffi.set this "onsubmit" (Event_handler.to_any x)
  let onstalled this = Event_handler.of_any (Js.Ffi.get this "onstalled")
  let set_onstalled this x = Js.Ffi.set this "onstalled" (Event_handler.to_any x)
  let onshow this = Event_handler.of_any (Js.Ffi.get this "onshow")
  let set_onshow this x = Js.Ffi.set this "onshow" (Event_handler.to_any x)
  let onselect this = Event_handler.of_any (Js.Ffi.get this "onselect")
  let set_onselect this x = Js.Ffi.set this "onselect" (Event_handler.to_any x)
  let onseeking this = Event_handler.of_any (Js.Ffi.get this "onseeking")
  let set_onseeking this x = Js.Ffi.set this "onseeking" (Event_handler.to_any x)
  let onseeked this = Event_handler.of_any (Js.Ffi.get this "onseeked")
  let set_onseeked this x = Js.Ffi.set this "onseeked" (Event_handler.to_any x)
  let onscroll this = Event_handler.of_any (Js.Ffi.get this "onscroll")
  let set_onscroll this x = Js.Ffi.set this "onscroll" (Event_handler.to_any x)
  let onresize this = Event_handler.of_any (Js.Ffi.get this "onresize")
  let set_onresize this x = Js.Ffi.set this "onresize" (Event_handler.to_any x)
  let onreset this = Event_handler.of_any (Js.Ffi.get this "onreset")
  let set_onreset this x = Js.Ffi.set this "onreset" (Event_handler.to_any x)
  let onratechange this = Event_handler.of_any (Js.Ffi.get this "onratechange")

  let set_onratechange this x =
    Js.Ffi.set this "onratechange" (Event_handler.to_any x)

  let onprogress this = Event_handler.of_any (Js.Ffi.get this "onprogress")

  let set_onprogress this x =
    Js.Ffi.set this "onprogress" (Event_handler.to_any x)

  let onplaying this = Event_handler.of_any (Js.Ffi.get this "onplaying")
  let set_onplaying this x = Js.Ffi.set this "onplaying" (Event_handler.to_any x)
  let onplay this = Event_handler.of_any (Js.Ffi.get this "onplay")
  let set_onplay this x = Js.Ffi.set this "onplay" (Event_handler.to_any x)
  let onpause this = Event_handler.of_any (Js.Ffi.get this "onpause")
  let set_onpause this x = Js.Ffi.set this "onpause" (Event_handler.to_any x)
  let onwheel this = Event_handler.of_any (Js.Ffi.get this "onwheel")
  let set_onwheel this x = Js.Ffi.set this "onwheel" (Event_handler.to_any x)
  let onmouseup this = Event_handler.of_any (Js.Ffi.get this "onmouseup")
  let set_onmouseup this x = Js.Ffi.set this "onmouseup" (Event_handler.to_any x)
  let onmouseover this = Event_handler.of_any (Js.Ffi.get this "onmouseover")

  let set_onmouseover this x =
    Js.Ffi.set this "onmouseover" (Event_handler.to_any x)

  let onmouseout this = Event_handler.of_any (Js.Ffi.get this "onmouseout")

  let set_onmouseout this x =
    Js.Ffi.set this "onmouseout" (Event_handler.to_any x)

  let onmousemove this = Event_handler.of_any (Js.Ffi.get this "onmousemove")

  let set_onmousemove this x =
    Js.Ffi.set this "onmousemove" (Event_handler.to_any x)

  let onmouseleave this = Event_handler.of_any (Js.Ffi.get this "onmouseleave")

  let set_onmouseleave this x =
    Js.Ffi.set this "onmouseleave" (Event_handler.to_any x)

  let onmouseenter this = Event_handler.of_any (Js.Ffi.get this "onmouseenter")

  let set_onmouseenter this x =
    Js.Ffi.set this "onmouseenter" (Event_handler.to_any x)

  let onmousedown this = Event_handler.of_any (Js.Ffi.get this "onmousedown")

  let set_onmousedown this x =
    Js.Ffi.set this "onmousedown" (Event_handler.to_any x)

  let onloadstart this = Event_handler.of_any (Js.Ffi.get this "onloadstart")

  let set_onloadstart this x =
    Js.Ffi.set this "onloadstart" (Event_handler.to_any x)

  let onloadedmetadata this =
    Event_handler.of_any (Js.Ffi.get this "onloadedmetadata")

  let set_onloadedmetadata this x =
    Js.Ffi.set this "onloadedmetadata" (Event_handler.to_any x)

  let onloadeddata this = Event_handler.of_any (Js.Ffi.get this "onloadeddata")

  let set_onloadeddata this x =
    Js.Ffi.set this "onloadeddata" (Event_handler.to_any x)

  let onload this = Event_handler.of_any (Js.Ffi.get this "onload")
  let set_onload this x = Js.Ffi.set this "onload" (Event_handler.to_any x)
  let onkeyup this = Event_handler.of_any (Js.Ffi.get this "onkeyup")
  let set_onkeyup this x = Js.Ffi.set this "onkeyup" (Event_handler.to_any x)
  let onkeypress this = Event_handler.of_any (Js.Ffi.get this "onkeypress")

  let set_onkeypress this x =
    Js.Ffi.set this "onkeypress" (Event_handler.to_any x)

  let onkeydown this = Event_handler.of_any (Js.Ffi.get this "onkeydown")
  let set_onkeydown this x = Js.Ffi.set this "onkeydown" (Event_handler.to_any x)
  let oninvalid this = Event_handler.of_any (Js.Ffi.get this "oninvalid")
  let set_oninvalid this x = Js.Ffi.set this "oninvalid" (Event_handler.to_any x)
  let oninput this = Event_handler.of_any (Js.Ffi.get this "oninput")
  let set_oninput this x = Js.Ffi.set this "oninput" (Event_handler.to_any x)
  let onformdata this = Event_handler.of_any (Js.Ffi.get this "onformdata")

  let set_onformdata this x =
    Js.Ffi.set this "onformdata" (Event_handler.to_any x)

  let onfocus this = Event_handler.of_any (Js.Ffi.get this "onfocus")
  let set_onfocus this x = Js.Ffi.set this "onfocus" (Event_handler.to_any x)
  let onerror this = On_error_event_handler.of_any (Js.Ffi.get this "onerror")

  let set_onerror this x =
    Js.Ffi.set this "onerror" (On_error_event_handler.to_any x)

  let onended this = Event_handler.of_any (Js.Ffi.get this "onended")
  let set_onended this x = Js.Ffi.set this "onended" (Event_handler.to_any x)
  let onemptied this = Event_handler.of_any (Js.Ffi.get this "onemptied")
  let set_onemptied this x = Js.Ffi.set this "onemptied" (Event_handler.to_any x)

  let ondurationchange this =
    Event_handler.of_any (Js.Ffi.get this "ondurationchange")

  let set_ondurationchange this x =
    Js.Ffi.set this "ondurationchange" (Event_handler.to_any x)

  let ondrop this = Event_handler.of_any (Js.Ffi.get this "ondrop")
  let set_ondrop this x = Js.Ffi.set this "ondrop" (Event_handler.to_any x)
  let ondragstart this = Event_handler.of_any (Js.Ffi.get this "ondragstart")

  let set_ondragstart this x =
    Js.Ffi.set this "ondragstart" (Event_handler.to_any x)

  let ondragover this = Event_handler.of_any (Js.Ffi.get this "ondragover")

  let set_ondragover this x =
    Js.Ffi.set this "ondragover" (Event_handler.to_any x)

  let ondragleave this = Event_handler.of_any (Js.Ffi.get this "ondragleave")

  let set_ondragleave this x =
    Js.Ffi.set this "ondragleave" (Event_handler.to_any x)

  let ondragexit this = Event_handler.of_any (Js.Ffi.get this "ondragexit")

  let set_ondragexit this x =
    Js.Ffi.set this "ondragexit" (Event_handler.to_any x)

  let ondragenter this = Event_handler.of_any (Js.Ffi.get this "ondragenter")

  let set_ondragenter this x =
    Js.Ffi.set this "ondragenter" (Event_handler.to_any x)

  let ondragend this = Event_handler.of_any (Js.Ffi.get this "ondragend")
  let set_ondragend this x = Js.Ffi.set this "ondragend" (Event_handler.to_any x)
  let ondrag this = Event_handler.of_any (Js.Ffi.get this "ondrag")
  let set_ondrag this x = Js.Ffi.set this "ondrag" (Event_handler.to_any x)
  let ondblclick this = Event_handler.of_any (Js.Ffi.get this "ondblclick")

  let set_ondblclick this x =
    Js.Ffi.set this "ondblclick" (Event_handler.to_any x)

  let oncuechange this = Event_handler.of_any (Js.Ffi.get this "oncuechange")

  let set_oncuechange this x =
    Js.Ffi.set this "oncuechange" (Event_handler.to_any x)

  let oncontextmenu this = Event_handler.of_any (Js.Ffi.get this "oncontextmenu")

  let set_oncontextmenu this x =
    Js.Ffi.set this "oncontextmenu" (Event_handler.to_any x)

  let onclose this = Event_handler.of_any (Js.Ffi.get this "onclose")
  let set_onclose this x = Js.Ffi.set this "onclose" (Event_handler.to_any x)
  let onclick this = Event_handler.of_any (Js.Ffi.get this "onclick")
  let set_onclick this x = Js.Ffi.set this "onclick" (Event_handler.to_any x)
  let onchange this = Event_handler.of_any (Js.Ffi.get this "onchange")
  let set_onchange this x = Js.Ffi.set this "onchange" (Event_handler.to_any x)

  let oncanplaythrough this =
    Event_handler.of_any (Js.Ffi.get this "oncanplaythrough")

  let set_oncanplaythrough this x =
    Js.Ffi.set this "oncanplaythrough" (Event_handler.to_any x)

  let oncanplay this = Event_handler.of_any (Js.Ffi.get this "oncanplay")
  let set_oncanplay this x = Js.Ffi.set this "oncanplay" (Event_handler.to_any x)
  let oncancel this = Event_handler.of_any (Js.Ffi.get this "oncancel")
  let set_oncancel this x = Js.Ffi.set this "oncancel" (Event_handler.to_any x)
  let onblur this = Event_handler.of_any (Js.Ffi.get this "onblur")
  let set_onblur this x = Js.Ffi.set this "onblur" (Event_handler.to_any x)
  let onabort this = Event_handler.of_any (Js.Ffi.get this "onabort")
  let set_onabort this x = Js.Ffi.set this "onabort" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Window} [Window] \
   on MDN}."]

and Scroll_behavior : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val auto : t
  val instant : t
  val smooth : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let auto = Js.of_string "auto"
  let instant = Js.of_string "instant"
  let smooth = Js.of_string "smooth"
end

and Scroll_options : sig
  type t [@@ocaml.doc "The type for the [ScrollOptions] dictionary."]

  val make : ?behavior:Scroll_behavior.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val behavior : t -> Scroll_behavior.t option
end = struct
  type t = Js.any

  let make ?behavior () =
    let behavior =
      (Js.Any.nullable_of_option Scroll_behavior.to_any) behavior
    in
    Js.Ffi.obj [| ("behavior", behavior) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let behavior this =
    (Js.Any.nullable_to_option Scroll_behavior.of_any)
      (Js.Ffi.get this "behavior")
end

and Scroll_to_options : sig
  type t [@@ocaml.doc "The type for the [ScrollToOptions] dictionary."]

  val make : ?left:float -> ?top:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_scroll_options : t -> Scroll_options.t
  val left : t -> float option
  val top : t -> float option
end = struct
  type t = Js.any

  let make ?left ?top () =
    let left = (Js.Any.nullable_of_option Js.Any.of_float) left in
    let top = (Js.Any.nullable_of_option Js.Any.of_float) top in
    Js.Ffi.obj [| ("left", left); ("top", top) |]

  let to_scroll_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let left this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "left")

  let top this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "top")
end

and Frame_request_callback : sig
  type t = Dom_high_res_time_stamp.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Frame_request_callback

and Window_post_message_options : sig
  type t [@@ocaml.doc "The type for the [WindowPostMessageOptions] dictionary."]

  val make : ?target_origin:string -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_post_message_options : t -> Post_message_options.t
  val target_origin : t -> string option
end = struct
  type t = Js.any

  let make ?target_origin () =
    let target_origin =
      (Js.Any.nullable_of_option Js.Any.of_string) target_origin
    in
    Js.Ffi.obj [| ("targetOrigin", target_origin) |]

  let to_post_message_options this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let target_origin this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "targetOrigin")
end

and Timer_handler : sig
  type t

  val with_string : string -> t
  val with_function : Function.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_string = Js.repr
  let with_function = Js.repr
end

and Window_proxy : sig
  type t = [ `Window_proxy ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WindowProxy} \
     [WindowProxy]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = [ `Window_proxy ] Js.t

  let t = Js.Ffi.constr "WindowProxy"
  let to_any = Js.to_any
  let of_any = Js.of_any
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WindowProxy} \
   [WindowProxy] on MDN}."]

and Worker : sig
  type t = [ `Worker ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker} [Worker]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Worker | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker} [Worker]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_script_url_and_options :
    script_url:string -> ?options:Worker_options.t -> unit -> 'a super

  val terminate : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate} \
     [terminate] on MDN}."]

  val post_message : message:Js.any -> transfer:'todo_object array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage} \
     [postMessage] on MDN}."]

  val post_message :
    message:Js.any -> ?options:Post_message_options.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage} \
     [postMessage] on MDN}."]

  val onmessage : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage} \
     [onmessage] on MDN}."]

  val set_onmessage : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage} \
     [onmessage] on MDN}."]

  val onmessageerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror} \
     [onmessageerror] on MDN}."]

  val set_onmessageerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror} \
     [onmessageerror] on MDN}."]
end = struct
  type t = [ `Worker ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Worker | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worker} [Worker]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "Worker"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let with_script_url_and_options ~script_url ?options () =
    let script_url = Js.Any.of_string script_url in
    let options = (Js.Any.undefined_of_option Worker_options.to_any) options in
    Js.Ffi.obj_new t [| script_url; options |]

  let terminate this = Js.to_unit (Js.Ffi.meth_call this "terminate" [||])

  let post_message ~message ~transfer this =
    let message = Js.of_any message in
    let transfer = (Js.Any.of_array Js.object_todo) transfer in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; transfer |])

  let post_message ~message ?options this =
    let message = Js.of_any message in
    let options =
      (Js.Any.undefined_of_option Post_message_options.to_any) options
    in
    Js.to_unit (Js.Ffi.meth_call this "postMessage" [| message; options |])

  let onmessage this = Event_handler.of_any (Js.Ffi.get this "onmessage")
  let set_onmessage this x = Js.Ffi.set this "onmessage" (Event_handler.to_any x)

  let onmessageerror this =
    Event_handler.of_any (Js.Ffi.get this "onmessageerror")

  let set_onmessageerror this x =
    Js.Ffi.set this "onmessageerror" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Worker} [Worker] \
   on MDN}."]

and Worker_options : sig
  type t [@@ocaml.doc "The type for the [WorkerOptions] dictionary."]

  val make :
    ?type':Worker_type.t ->
    ?credentials:Request_credentials.t ->
    ?name:string ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val type' : t -> Worker_type.t option
  val credentials : t -> Request_credentials.t option
  val name : t -> string option
end = struct
  type t = Js.any

  let make ?type' ?credentials ?name () =
    let type' = (Js.Any.nullable_of_option Worker_type.to_any) type' in
    let credentials =
      (Js.Any.nullable_of_option Request_credentials.to_any) credentials
    in
    let name = (Js.Any.nullable_of_option Js.Any.of_string) name in
    Js.Ffi.obj
      [| ("type", type'); ("credentials", credentials); ("name", name) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let type' this =
    (Js.Any.nullable_to_option Worker_type.of_any) (Js.Ffi.get this "type")

  let credentials this =
    (Js.Any.nullable_to_option Request_credentials.of_any)
      (Js.Ffi.get this "credentials")

  let name this =
    (Js.Any.nullable_to_option Js.Any.to_string) (Js.Ffi.get this "name")
end

and Worker_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val classic : t
  val module' : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let classic = Js.of_string "classic"
  let module' = Js.of_string "module"
end

and Worker_global_scope : sig
  type t = [ `Worker_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope} \
     [WorkerGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Worker_global_scope | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope} \
     [WorkerGlobalScope]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val self : t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self} \
     [self] on MDN}."]

  val location : t -> Worker_location.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location} \
     [location] on MDN}."]

  val onerror : t -> On_error_event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> On_error_event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror} \
     [onerror] on MDN}."]

  val import_scripts : urls:string array -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts} \
     [importScripts] on MDN}."]

  val navigator : t -> Worker_navigator.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator} \
     [navigator] on MDN}."]

  val create_image_bitmap :
    image:Image_bitmap_source.t ->
    ?options:Image_bitmap_options.t ->
    t ->
    Image_bitmap.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/createImageBitmap} \
     [createImageBitmap] on MDN}."]

  val queue_microtask : callback:Void_function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/queueMicrotask} \
     [queueMicrotask] on MDN}."]

  val clear_interval : ?handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/clearInterval} \
     [clearInterval] on MDN}."]

  val set_interval :
    handler:Timer_handler.t ->
    ?timeout:int ->
    arguments:Js.any array ->
    t ->
    int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/setInterval} \
     [setInterval] on MDN}."]

  val clear_timeout : ?handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/clearTimeout} \
     [clearTimeout] on MDN}."]

  val set_timeout :
    handler:Timer_handler.t ->
    ?timeout:int ->
    arguments:Js.any array ->
    t ->
    int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/setTimeout} \
     [setTimeout] on MDN}."]

  val atob : data:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/atob} \
     [atob] on MDN}."]

  val btoa : data:string -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/btoa} \
     [btoa] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/origin} \
     [origin] on MDN}."]
end = struct
  type t = [ `Worker_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Worker_global_scope | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope} \
     [WorkerGlobalScope]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WorkerGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_global_scope this = Js.Ffi.magic this
  let self this = of_any (Js.Ffi.get this "self")
  let location this = Worker_location.of_any (Js.Ffi.get this "location")
  let onerror this = On_error_event_handler.of_any (Js.Ffi.get this "onerror")

  let set_onerror this x =
    Js.Ffi.set this "onerror" (On_error_event_handler.to_any x)

  let import_scripts ~urls this =
    let urls = (Js.Any.of_array Js.Any.of_string) urls in
    Js.to_unit (Js.Ffi.meth_call this "importScripts" [| urls |])

  let navigator this = Worker_navigator.of_any (Js.Ffi.get this "navigator")

  let create_image_bitmap ~image ?options this =
    let image = Image_bitmap_source.to_any image in
    let options =
      (Js.Any.undefined_of_option Image_bitmap_options.to_any) options
    in
    (Promise.of_any Image_bitmap.of_any)
      (Js.Ffi.meth_call this "createImageBitmap" [| image; options |])

  let queue_microtask ~callback this =
    let callback = Void_function.to_any callback in
    Js.to_unit (Js.Ffi.meth_call this "queueMicrotask" [| callback |])

  let clear_interval ?handle this =
    let handle = (Js.Any.undefined_of_option Js.Any.of_int) handle in
    Js.to_unit (Js.Ffi.meth_call this "clearInterval" [| handle |])

  let set_interval ~handler ?timeout ~arguments this =
    let handler = Timer_handler.to_any handler in
    let timeout = (Js.Any.undefined_of_option Js.Any.of_int) timeout in
    let arguments = (Js.Any.of_array Js.of_any) arguments in
    Js.Any.to_int
      (Js.Ffi.meth_call this "setInterval" [| handler; timeout; arguments |])

  let clear_timeout ?handle this =
    let handle = (Js.Any.undefined_of_option Js.Any.of_int) handle in
    Js.to_unit (Js.Ffi.meth_call this "clearTimeout" [| handle |])

  let set_timeout ~handler ?timeout ~arguments this =
    let handler = Timer_handler.to_any handler in
    let timeout = (Js.Any.undefined_of_option Js.Any.of_int) timeout in
    let arguments = (Js.Any.of_array Js.of_any) arguments in
    Js.Any.to_int
      (Js.Ffi.meth_call this "setTimeout" [| handler; timeout; arguments |])

  let atob ~data this =
    let data = Js.Any.of_string data in
    Js.Any.to_string (Js.Ffi.meth_call this "atob" [| data |])

  let btoa ~data this =
    let data = Js.Any.of_string data in
    Js.Any.to_string (Js.Ffi.meth_call this "btoa" [| data |])

  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope} \
   [WorkerGlobalScope] on MDN}."]

and Worker_location : sig
  type t = [ `Worker_location ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation} \
     [WorkerLocation]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val to_string : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/to_string} \
     [to_string] on MDN}."]

  val href : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/href} \
     [href] on MDN}."]

  val origin : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/origin} \
     [origin] on MDN}."]

  val protocol : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/protocol} \
     [protocol] on MDN}."]

  val host : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/host} \
     [host] on MDN}."]

  val hostname : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/hostname} \
     [hostname] on MDN}."]

  val port : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/port} \
     [port] on MDN}."]

  val pathname : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/pathname} \
     [pathname] on MDN}."]

  val search : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/search} \
     [search] on MDN}."]

  val hash : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/hash} \
     [hash] on MDN}."]
end = struct
  type t = [ `Worker_location ] Js.t

  let t = Js.Ffi.constr "WorkerLocation"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let href this = Js.Any.to_string (Js.Ffi.get this "href")
  let to_string = href
  let origin this = Js.Any.to_string (Js.Ffi.get this "origin")
  let protocol this = Js.Any.to_string (Js.Ffi.get this "protocol")
  let host this = Js.Any.to_string (Js.Ffi.get this "host")
  let hostname this = Js.Any.to_string (Js.Ffi.get this "hostname")
  let port this = Js.Any.to_string (Js.Ffi.get this "port")
  let pathname this = Js.Any.to_string (Js.Ffi.get this "pathname")
  let search this = Js.Any.to_string (Js.Ffi.get this "search")
  let hash this = Js.Any.to_string (Js.Ffi.get this "hash")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation} \
   [WorkerLocation] on MDN}."]

and Worker_navigator : sig
  type t = [ `Worker_navigator ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator} \
     [WorkerNavigator]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val gpu : t -> Gpu.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/gpu} \
     [gpu] on MDN}."]

  val permissions : t -> Permissions.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions} \
     [permissions] on MDN}."]

  val languages : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/languages} \
     [languages] on MDN}."]

  val language : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/language} \
     [language] on MDN}."]

  val hardware_concurrency : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/hardwareConcurrency} \
     [hardwareConcurrency] on MDN}."]
end = struct
  type t = [ `Worker_navigator ] Js.t

  let t = Js.Ffi.constr "WorkerNavigator"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let gpu this = Gpu.of_any (Js.Ffi.get this "gpu")
  let permissions this = Permissions.of_any (Js.Ffi.get this "permissions")
  let languages this = Js.to_any (Js.Ffi.get this "languages")
  let language this = Js.Any.to_string (Js.Ffi.get this "language")

  let hardware_concurrency this =
    Js.Any.to_int (Js.Ffi.get this "hardwareConcurrency")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator} \
   [WorkerNavigator] on MDN}."]

and Worklet : sig
  type t = [ `Worklet ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worklet} [Worklet]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val add_module :
    module_url:string -> ?options:Worklet_options.t -> t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule} \
     [addModule] on MDN}."]
end = struct
  type t = [ `Worklet ] Js.t

  let t = Js.Ffi.constr "Worklet"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let add_module ~module_url ?options this =
    let module_url = Js.Any.of_string module_url in
    let options = (Js.Any.undefined_of_option Worklet_options.to_any) options in
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "addModule" [| module_url; options |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/Worklet} [Worklet] \
   on MDN}."]

and Worklet_options : sig
  type t [@@ocaml.doc "The type for the [WorkletOptions] dictionary."]

  val make : ?credentials:Request_credentials.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val credentials : t -> Request_credentials.t option
end = struct
  type t = Js.any

  let make ?credentials () =
    let credentials =
      (Js.Any.nullable_of_option Request_credentials.to_any) credentials
    in
    Js.Ffi.obj [| ("credentials", credentials) |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let credentials this =
    (Js.Any.nullable_to_option Request_credentials.of_any)
      (Js.Ffi.get this "credentials")
end

and Worklet_global_scope : sig
  type t = [ `Worklet_global_scope ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkletGlobalScope} \
     [WorkletGlobalScope]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Worklet_global_scope | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkletGlobalScope} \
     [WorkletGlobalScope]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Worklet_global_scope ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Worklet_global_scope | `Global_scope | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/WorkletGlobalScope} \
     [WorkletGlobalScope]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "WorkletGlobalScope"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_global_scope this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/WorkletGlobalScope} \
   [WorkletGlobalScope] on MDN}."]

and Xml_document : sig
  type t = [ `Xml_document ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument} \
     [XMLDocument]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xml_document | `Document | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument} \
     [XMLDocument]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xml_document ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xml_document | `Document | `Node | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument} \
     [XMLDocument]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XMLDocument"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_document this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument} \
   [XMLDocument] on MDN}."]

and Xml_http_request_body_init : sig
  type t

  val with_blob : Blob.t -> t
  val with_buffer_source : Buffer_source.t -> t
  val with_form_data : Form_data.t -> t
  val with_string : string -> t
  val with_url_search_params : Url_search_params.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_blob = Js.repr
  let with_buffer_source = Js.repr
  let with_form_data = Js.repr
  let with_string = Js.repr
  let with_url_search_params = Js.repr
end

and Body_init : sig
  type t

  val with_readable_stream : Readable_stream.t -> t
  val with_xml_http_request_body_init : Xml_http_request_body_init.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_readable_stream = Js.repr
  let with_xml_http_request_body_init = Js.repr
end

and Xml_http_request_response_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val empty : t
  val arraybuffer : t
  val blob : t
  val document : t
  val json : t
  val text : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let empty = Js.of_string ""
  let arraybuffer = Js.of_string "arraybuffer"
  let blob = Js.of_string "blob"
  let document = Js.of_string "document"
  let json = Js.of_string "json"
  let text = Js.of_string "text"
end

and Xml_http_request : sig
  type t = [ `Xml_http_request ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest} \
     [XMLHttpRequest]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xml_http_request | `Xml_http_request_event_target | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest} \
     [XMLHttpRequest]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
  val make : unit -> 'a super

  val onreadystatechange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange} \
     [onreadystatechange] on MDN}."]

  val set_onreadystatechange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange} \
     [onreadystatechange] on MDN}."]

  val unsent : int
  val opened : int
  val headers_received : int
  val loading : int
  val done' : int

  val ready_state : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState} \
     [readyState] on MDN}."]

  val open' : method':string -> url:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open} \
     [open] on MDN}."]

  val open' :
    method':string ->
    url:string ->
    async:bool ->
    ?username:string option ->
    ?password:string option ->
    t ->
    unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open} \
     [open] on MDN}."]

  val set_request_header : name:string -> value:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader} \
     [setRequestHeader] on MDN}."]

  val timeout : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout} \
     [timeout] on MDN}."]

  val set_timeout : t -> int -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout} \
     [timeout] on MDN}."]

  val with_credentials : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} \
     [withCredentials] on MDN}."]

  val set_with_credentials : t -> bool -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} \
     [withCredentials] on MDN}."]

  val upload : t -> 'a Xml_http_request_upload.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload} \
     [upload] on MDN}."]

  val send :
    ?data:[< `Document | `Xml_http_request_body_init ] Js.nullable -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send} \
     [send] on MDN}."]

  val abort : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort} \
     [abort] on MDN}."]

  val response_url : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL} \
     [responseURL] on MDN}."]

  val status : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status} \
     [status] on MDN}."]

  val status_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText} \
     [statusText] on MDN}."]

  val get_response_header : name:string -> t -> string option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader} \
     [getResponseHeader] on MDN}."]

  val get_all_response_headers : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders} \
     [getAllResponseHeaders] on MDN}."]

  val override_mime_type : mime:string -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType} \
     [overrideMimeType] on MDN}."]

  val response_type : t -> Xml_http_request_response_type.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} \
     [responseType] on MDN}."]

  val set_response_type : t -> Xml_http_request_response_type.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} \
     [responseType] on MDN}."]

  val response : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response} \
     [response] on MDN}."]

  val response_text : t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText} \
     [responseText] on MDN}."]

  val response_xml : t -> 'a Document.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML} \
     [responseXML] on MDN}."]
end = struct
  type t = [ `Xml_http_request ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xml_http_request | `Xml_http_request_event_target | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest} \
     [XMLHttpRequest]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XMLHttpRequest"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xml_http_request_event_target this = Js.Ffi.magic this
  let make () = Js.Ffi.obj_new t [||]

  let onreadystatechange this =
    Event_handler.of_any (Js.Ffi.get this "onreadystatechange")

  let set_onreadystatechange this x =
    Js.Ffi.set this "onreadystatechange" (Event_handler.to_any x)

  let unsent = 0
  let opened = 1
  let headers_received = 2
  let loading = 3
  let done' = 4
  let ready_state this = Js.Any.to_int (Js.Ffi.get this "readyState")

  let open' ~method' ~url this =
    let method' = Js.Any.of_string method' in
    let url = Js.Any.of_string url in
    Js.to_unit (Js.Ffi.meth_call this "open" [| method'; url |])

  let open' ~method' ~url ~async ?username ?password this =
    let method' = Js.Any.of_string method' in
    let url = Js.Any.of_string url in
    let async = Js.Any.of_bool async in
    let username =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        username
    in
    let password =
      (Js.Any.undefined_of_option (Js.Any.nullable_of_option Js.Any.of_string))
        password
    in
    Js.to_unit
      (Js.Ffi.meth_call this "open"
         [| method'; url; async; username; password |]
      )

  let set_request_header ~name ~value this =
    let name = Js.Any.of_string name in
    let value = Js.Any.of_string value in
    Js.to_unit (Js.Ffi.meth_call this "setRequestHeader" [| name; value |])

  let timeout this = Js.Any.to_int (Js.Ffi.get this "timeout")
  let set_timeout this x = Js.Ffi.set this "timeout" (Js.Any.of_int x)
  let with_credentials this = Js.Any.to_bool (Js.Ffi.get this "withCredentials")

  let set_with_credentials this x =
    Js.Ffi.set this "withCredentials" (Js.Any.of_bool x)

  let upload this = Xml_http_request_upload.of_any (Js.Ffi.get this "upload")

  let send ?data this =
    let data = (Js.Any.undefined_of_option Js.to_any) data in
    Js.to_unit (Js.Ffi.meth_call this "send" [| data |])

  let abort this = Js.to_unit (Js.Ffi.meth_call this "abort" [||])
  let response_url this = Js.Any.to_string (Js.Ffi.get this "responseURL")
  let status this = Js.Any.to_int (Js.Ffi.get this "status")
  let status_text this = Js.Any.to_string (Js.Ffi.get this "statusText")

  let get_response_header ~name this =
    let name = Js.Any.of_string name in
    (Js.Any.nullable_to_option Js.Any.to_string)
      (Js.Ffi.meth_call this "getResponseHeader" [| name |])

  let get_all_response_headers this =
    Js.Any.to_string (Js.Ffi.meth_call this "getAllResponseHeaders" [||])

  let override_mime_type ~mime this =
    let mime = Js.Any.of_string mime in
    Js.to_unit (Js.Ffi.meth_call this "overrideMimeType" [| mime |])

  let response_type this =
    Xml_http_request_response_type.of_any (Js.Ffi.get this "responseType")

  let set_response_type this x =
    Js.Ffi.set this "responseType" (Xml_http_request_response_type.to_any x)

  let response this = Js.to_any (Js.Ffi.get this "response")
  let response_text this = Js.Any.to_string (Js.Ffi.get this "responseText")

  let response_xml this =
    (Js.Any.nullable_to_option Document.of_any) (Js.Ffi.get this "responseXML")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest} \
   [XMLHttpRequest] on MDN}."]

and Xml_http_request_event_target : sig
  type t = [ `Xml_http_request_event_target ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget} \
     [XMLHttpRequestEventTarget]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xml_http_request_event_target | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget} \
     [XMLHttpRequestEventTarget]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val onloadstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadstart} \
     [onloadstart] on MDN}."]

  val set_onloadstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadstart} \
     [onloadstart] on MDN}."]

  val onprogress : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress} \
     [onprogress] on MDN}."]

  val set_onprogress : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress} \
     [onprogress] on MDN}."]

  val onabort : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onabort} \
     [onabort] on MDN}."]

  val set_onabort : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onabort} \
     [onabort] on MDN}."]

  val onerror : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror} \
     [onerror] on MDN}."]

  val set_onerror : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror} \
     [onerror] on MDN}."]

  val onload : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload} \
     [onload] on MDN}."]

  val set_onload : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload} \
     [onload] on MDN}."]

  val ontimeout : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/ontimeout} \
     [ontimeout] on MDN}."]

  val set_ontimeout : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/ontimeout} \
     [ontimeout] on MDN}."]

  val onloadend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadend} \
     [onloadend] on MDN}."]

  val set_onloadend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadend} \
     [onloadend] on MDN}."]
end = struct
  type t = [ `Xml_http_request_event_target ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xml_http_request_event_target | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget} \
     [XMLHttpRequestEventTarget]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "XMLHttpRequestEventTarget"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
  let onloadstart this = Event_handler.of_any (Js.Ffi.get this "onloadstart")

  let set_onloadstart this x =
    Js.Ffi.set this "onloadstart" (Event_handler.to_any x)

  let onprogress this = Event_handler.of_any (Js.Ffi.get this "onprogress")

  let set_onprogress this x =
    Js.Ffi.set this "onprogress" (Event_handler.to_any x)

  let onabort this = Event_handler.of_any (Js.Ffi.get this "onabort")
  let set_onabort this x = Js.Ffi.set this "onabort" (Event_handler.to_any x)
  let onerror this = Event_handler.of_any (Js.Ffi.get this "onerror")
  let set_onerror this x = Js.Ffi.set this "onerror" (Event_handler.to_any x)
  let onload this = Event_handler.of_any (Js.Ffi.get this "onload")
  let set_onload this x = Js.Ffi.set this "onload" (Event_handler.to_any x)
  let ontimeout this = Event_handler.of_any (Js.Ffi.get this "ontimeout")
  let set_ontimeout this x = Js.Ffi.set this "ontimeout" (Event_handler.to_any x)
  let onloadend this = Event_handler.of_any (Js.Ffi.get this "onloadend")
  let set_onloadend this x = Js.Ffi.set this "onloadend" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget} \
   [XMLHttpRequestEventTarget] on MDN}."]

and Xml_http_request_upload : sig
  type t = [ `Xml_http_request_upload ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload} \
     [XMLHttpRequestUpload]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xml_http_request_upload
      | `Xml_http_request_event_target
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload} \
     [XMLHttpRequestUpload]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xml_http_request_upload ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xml_http_request_upload
      | `Xml_http_request_event_target
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload} \
     [XMLHttpRequestUpload]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XMLHttpRequestUpload"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xml_http_request_event_target this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload} \
   [XMLHttpRequestUpload] on MDN}."]

and Xml_serializer : sig
  type t = [ `Xml_serializer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer} \
     [XMLSerializer]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : unit -> t

  val serialize_to_string : root:Node.t -> t -> string
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer/serializeToString} \
     [serializeToString] on MDN}."]
end = struct
  type t = [ `Xml_serializer ] Js.t

  let t = Js.Ffi.constr "XMLSerializer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let make () = Js.Ffi.obj_new t [||]

  let serialize_to_string ~root this =
    let root = Node.to_any root in
    Js.Any.to_string (Js.Ffi.meth_call this "serializeToString" [| root |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer} \
   [XMLSerializer] on MDN}."]

and Xr_composition_layer : sig
  type t = [ `Xr_composition_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer} \
     [XRCompositionLayer]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer} \
     [XRCompositionLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_composition_layer ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer} \
     [XRCompositionLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRCompositionLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer} \
   [XRCompositionLayer] on MDN}."]

and Xr_cube_layer : sig
  type t = [ `Xr_cube_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer} \
     [XRCubeLayer]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_cube_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer} \
     [XRCubeLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_cube_layer ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_cube_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer} \
     [XRCubeLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRCubeLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_composition_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer} \
   [XRCubeLayer] on MDN}."]

and Xr_cylinder_layer : sig
  type t = [ `Xr_cylinder_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer} \
     [XRCylinderLayer]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_cylinder_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer} \
     [XRCylinderLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_cylinder_layer ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_cylinder_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer} \
     [XRCylinderLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRCylinderLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_composition_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer} \
   [XRCylinderLayer] on MDN}."]

and Xr_equirect_layer : sig
  type t = [ `Xr_equirect_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer} \
     [XREquirectLayer]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_equirect_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer} \
     [XREquirectLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_equirect_layer ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_equirect_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer} \
     [XREquirectLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XREquirectLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_composition_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer} \
   [XREquirectLayer] on MDN}."]

and Xr_frame : sig
  type t = [ `Xr_frame ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRFrame} [XRFrame]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val session : t -> 'a Xr_session.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/session} \
     [session] on MDN}."]

  val get_viewer_pose :
    reference_space:Xr_reference_space.t -> t -> 'a Xr_viewer_pose.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getViewerPose} \
     [getViewerPose] on MDN}."]

  val get_pose :
    space:Xr_space.t -> relative_to:Xr_space.t -> t -> Xr_pose.t option
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getPose} \
     [getPose] on MDN}."]

  val get_joint_pose :
    space:Xr_joint_space.t ->
    relative_to:Xr_space.t ->
    t ->
    'a Xr_joint_pose.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getJointPose} \
     [getJointPose] on MDN}."]

  val get_hit_test_results :
    hit_test_source:Xr_hit_test_source.t -> t -> Xr_hit_test_result.t array
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getHitTestResults} \
     [getHitTestResults] on MDN}."]
end = struct
  type t = [ `Xr_frame ] Js.t

  let t = Js.Ffi.constr "XRFrame"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let session this = Xr_session.of_any (Js.Ffi.get this "session")

  let get_viewer_pose ~reference_space this =
    let reference_space = Xr_reference_space.to_any reference_space in
    (Js.Any.nullable_to_option Xr_viewer_pose.of_any)
      (Js.Ffi.meth_call this "getViewerPose" [| reference_space |])

  let get_pose ~space ~relative_to this =
    let space = Xr_space.to_any space in
    let relative_to = Xr_space.to_any relative_to in
    (Js.Any.nullable_to_option Xr_pose.of_any)
      (Js.Ffi.meth_call this "getPose" [| space; relative_to |])

  let get_joint_pose ~space ~relative_to this =
    let space = Xr_joint_space.to_any space in
    let relative_to = Xr_space.to_any relative_to in
    (Js.Any.nullable_to_option Xr_joint_pose.of_any)
      (Js.Ffi.meth_call this "getJointPose" [| space; relative_to |])

  let get_hit_test_results ~hit_test_source this =
    let hit_test_source = Xr_hit_test_source.to_any hit_test_source in
    (Js.Any.to_array Xr_hit_test_result.of_any)
      (Js.Ffi.meth_call this "getHitTestResults" [| hit_test_source |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRFrame} [XRFrame] \
   on MDN}."]

and Xr_hand : sig
  type t = [ `Xr_hand ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRHand} [XRHand]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRHand/length} \
     [length] on MDN}."]

  val get : index:int -> t -> 'a Xr_joint_space.super
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRHand/get} \
     [get] on MDN}."]

  val wrist : int
  val thumb_metacarpal : int
  val thumb_phalanx_proximal : int
  val thumb_phalanx_distal : int
  val thumb_phalanx_tip : int
  val index_metacarpal : int
  val index_phalanx_proximal : int
  val index_phalanx_intermediate : int
  val index_phalanx_distal : int
  val index_phalanx_tip : int
  val middle_metacarpal : int
  val middle_phalanx_proximal : int
  val middle_phalanx_intermediate : int
  val middle_phalanx_distal : int
  val middle_phalanx_tip : int
  val ring_metacarpal : int
  val ring_phalanx_proximal : int
  val ring_phalanx_intermediate : int
  val ring_phalanx_distal : int
  val ring_phalanx_tip : int
  val little_metacarpal : int
  val little_phalanx_proximal : int
  val little_phalanx_intermediate : int
  val little_phalanx_distal : int
  val little_phalanx_tip : int
end = struct
  type t = [ `Xr_hand ] Js.t

  let t = Js.Ffi.constr "XRHand"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Xr_joint_space.of_any (Js.Ffi.meth_call this "get" [| index |])

  let wrist = 0
  let thumb_metacarpal = 1
  let thumb_phalanx_proximal = 2
  let thumb_phalanx_distal = 3
  let thumb_phalanx_tip = 4
  let index_metacarpal = 5
  let index_phalanx_proximal = 6
  let index_phalanx_intermediate = 7
  let index_phalanx_distal = 8
  let index_phalanx_tip = 9
  let middle_metacarpal = 10
  let middle_phalanx_proximal = 11
  let middle_phalanx_intermediate = 12
  let middle_phalanx_distal = 13
  let middle_phalanx_tip = 14
  let ring_metacarpal = 15
  let ring_phalanx_proximal = 16
  let ring_phalanx_intermediate = 17
  let ring_phalanx_distal = 18
  let ring_phalanx_tip = 19
  let little_metacarpal = 20
  let little_phalanx_proximal = 21
  let little_phalanx_intermediate = 22
  let little_phalanx_distal = 23
  let little_phalanx_tip = 24
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRHand} [XRHand] \
   on MDN}."]

and Xr_hit_test_result : sig
  type t = [ `Xr_hit_test_result ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestResult} \
     [XRHitTestResult]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val get_pose : base_space:Xr_space.t -> t -> Xr_pose.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestResult/getPose} \
     [getPose] on MDN}."]
end = struct
  type t = [ `Xr_hit_test_result ] Js.t

  let t = Js.Ffi.constr "XRHitTestResult"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let get_pose ~base_space this =
    let base_space = Xr_space.to_any base_space in
    (Js.Any.nullable_to_option Xr_pose.of_any)
      (Js.Ffi.meth_call this "getPose" [| base_space |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestResult} \
   [XRHitTestResult] on MDN}."]

and Xr_hit_test_trackable_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val point : t
  val plane : t
  val mesh : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let point = Js.of_string "point"
  let plane = Js.of_string "plane"
  let mesh = Js.of_string "mesh"
end

and Xr_hit_test_options_init : sig
  type t [@@ocaml.doc "The type for the [XRHitTestOptionsInit] dictionary."]

  val make :
    space:Xr_space.t ->
    ?entity_types:Xr_hit_test_trackable_type.t array ->
    ?offset_ray:Xr_ray.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val space : t -> Xr_space.t
  val entity_types : t -> Xr_hit_test_trackable_type.t array option
  val offset_ray : t -> Xr_ray.t option
end = struct
  type t = Js.any

  let make ~space ?entity_types ?offset_ray () =
    let space = Xr_space.to_any space in
    let entity_types =
      (Js.Any.nullable_of_option
         (Js.Any.of_array Xr_hit_test_trackable_type.to_any)
      )
        entity_types
    in
    let offset_ray = (Js.Any.nullable_of_option Xr_ray.to_any) offset_ray in
    Js.Ffi.obj
      [|
        ("space", space);
        ("entityTypes", entity_types);
        ("offsetRay", offset_ray);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let space this = Xr_space.of_any (Js.Ffi.get this "space")

  let entity_types this =
    (Js.Any.nullable_to_option
       (Js.Any.to_array Xr_hit_test_trackable_type.of_any)
    )
      (Js.Ffi.get this "entityTypes")

  let offset_ray this =
    (Js.Any.nullable_to_option Xr_ray.of_any) (Js.Ffi.get this "offsetRay")
end

and Xr_hit_test_source : sig
  type t = [ `Xr_hit_test_source ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestSource} \
     [XRHitTestSource]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val cancel : t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestSource/cancel} \
     [cancel] on MDN}."]
end = struct
  type t = [ `Xr_hit_test_source ] Js.t

  let t = Js.Ffi.constr "XRHitTestSource"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let cancel this = Js.to_unit (Js.Ffi.meth_call this "cancel" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestSource} \
   [XRHitTestSource] on MDN}."]

and Xr_handedness : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val none : t
  val left : t
  val right : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let none = Js.of_string "none"
  let left = Js.of_string "left"
  let right = Js.of_string "right"
end

and Xr_target_ray_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val gaze : t
  val tracked_pointer : t
  val screen : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let gaze = Js.of_string "gaze"
  let tracked_pointer = Js.of_string "tracked-pointer"
  let screen = Js.of_string "screen"
end

and Xr_input_source : sig
  type t = [ `Xr_input_source ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource} \
     [XRInputSource]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val handedness : t -> Xr_handedness.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/handedness} \
     [handedness] on MDN}."]

  val target_ray_mode : t -> Xr_target_ray_mode.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/targetRayMode} \
     [targetRayMode] on MDN}."]

  val target_ray_space : t -> 'a Xr_space.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/targetRaySpace} \
     [targetRaySpace] on MDN}."]

  val grip_space : t -> 'a Xr_space.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gripSpace} \
     [gripSpace] on MDN}."]

  val profiles : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/profiles} \
     [profiles] on MDN}."]

  val hand : t -> Xr_hand.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/hand} \
     [hand] on MDN}."]
end = struct
  type t = [ `Xr_input_source ] Js.t

  let t = Js.Ffi.constr "XRInputSource"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let handedness this = Xr_handedness.of_any (Js.Ffi.get this "handedness")

  let target_ray_mode this =
    Xr_target_ray_mode.of_any (Js.Ffi.get this "targetRayMode")

  let target_ray_space this = Xr_space.of_any (Js.Ffi.get this "targetRaySpace")

  let grip_space this =
    (Js.Any.nullable_to_option Xr_space.of_any) (Js.Ffi.get this "gripSpace")

  let profiles this = Js.to_any (Js.Ffi.get this "profiles")

  let hand this =
    (Js.Any.nullable_to_option Xr_hand.of_any) (Js.Ffi.get this "hand")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource} \
   [XRInputSource] on MDN}."]

and Xr_input_source_array : sig
  type t = [ `Xr_input_source_array ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray} \
     [XRInputSourceArray]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val length : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/length} \
     [length] on MDN}."]

  val get : index:int -> t -> Xr_input_source.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/get} \
     [get] on MDN}."]
end = struct
  type t = [ `Xr_input_source_array ] Js.t

  let t = Js.Ffi.constr "XRInputSourceArray"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let length this = Js.Any.to_int (Js.Ffi.get this "length")

  let get ~index this =
    let index = Js.Any.of_int index in
    Xr_input_source.of_any (Js.Ffi.meth_call this "get" [| index |])
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray} \
   [XRInputSourceArray] on MDN}."]

and Xr_input_source_event : sig
  type t = [ `Xr_input_source_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent} \
     [XRInputSourceEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_input_source_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent} \
     [XRInputSourceEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    event_init_dict:Xr_input_source_event_init.t ->
    unit ->
    'a super

  val frame : t -> Xr_frame.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/frame} \
     [frame] on MDN}."]

  val input_source : t -> Xr_input_source.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/inputSource} \
     [inputSource] on MDN}."]
end = struct
  type t = [ `Xr_input_source_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_input_source_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent} \
     [XRInputSourceEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRInputSourceEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Xr_input_source_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let frame this = Xr_frame.of_any (Js.Ffi.get this "frame")
  let input_source this = Xr_input_source.of_any (Js.Ffi.get this "inputSource")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent} \
   [XRInputSourceEvent] on MDN}."]

and Xr_input_source_event_init : sig
  type t [@@ocaml.doc "The type for the [XRInputSourceEventInit] dictionary."]

  val make : frame:Xr_frame.t -> input_source:Xr_input_source.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val frame : t -> Xr_frame.t
  val input_source : t -> Xr_input_source.t
end = struct
  type t = Js.any

  let make ~frame ~input_source () =
    let frame = Xr_frame.to_any frame in
    let input_source = Xr_input_source.to_any input_source in
    Js.Ffi.obj [| ("frame", frame); ("inputSource", input_source) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let frame this = Xr_frame.of_any (Js.Ffi.get this "frame")
  let input_source this = Xr_input_source.of_any (Js.Ffi.get this "inputSource")
end

and Xr_input_sources_change_event : sig
  type t = [ `Xr_input_sources_change_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent} \
     [XRInputSourcesChangeEvent]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_input_sources_change_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent} \
     [XRInputSourcesChangeEvent]} interface or any base interface that it \
     inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string ->
    event_init_dict:Xr_input_sources_change_event_init.t ->
    unit ->
    'a super

  val session : t -> 'a Xr_session.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/session} \
     [session] on MDN}."]

  val added : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/added} \
     [added] on MDN}."]

  val removed : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/removed} \
     [removed] on MDN}."]
end = struct
  type t = [ `Xr_input_sources_change_event ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_input_sources_change_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent} \
     [XRInputSourcesChangeEvent]} interface or any base interface that it \
     inherits."]

  let t = Js.Ffi.constr "XRInputSourcesChangeEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict =
      Xr_input_sources_change_event_init.to_any event_init_dict
    in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let session this = Xr_session.of_any (Js.Ffi.get this "session")
  let added this = Js.to_any (Js.Ffi.get this "added")
  let removed this = Js.to_any (Js.Ffi.get this "removed")
end
[@@ocaml.doc
  "See {{: \
   https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent} \
   [XRInputSourcesChangeEvent] on MDN}."]

and Xr_input_sources_change_event_init : sig
  type t
  [@@ocaml.doc "The type for the [XRInputSourcesChangeEventInit] dictionary."]

  val make :
    session:Xr_session.t ->
    added:Xr_input_source.t array ->
    removed:Xr_input_source.t array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val session : t -> Xr_session.t
  val added : t -> Xr_input_source.t array
  val removed : t -> Xr_input_source.t array
end = struct
  type t = Js.any

  let make ~session ~added ~removed () =
    let session = Xr_session.to_any session in
    let added = (Js.Any.of_array Xr_input_source.to_any) added in
    let removed = (Js.Any.of_array Xr_input_source.to_any) removed in
    Js.Ffi.obj
      [| ("session", session); ("added", added); ("removed", removed) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let session this = Xr_session.of_any (Js.Ffi.get this "session")

  let added this =
    (Js.Any.to_array Xr_input_source.of_any) (Js.Ffi.get this "added")

  let removed this =
    (Js.Any.to_array Xr_input_source.of_any) (Js.Ffi.get this "removed")
end

and Xr_joint_pose : sig
  type t = [ `Xr_joint_pose ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose} \
     [XRJointPose]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_joint_pose | `Xr_pose ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose} \
     [XRJointPose]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val radius : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose/radius} \
     [radius] on MDN}."]
end = struct
  type t = [ `Xr_joint_pose ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_joint_pose | `Xr_pose ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose} \
     [XRJointPose]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRJointPose"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_pose this = Js.Ffi.magic this

  let radius this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "radius")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose} \
   [XRJointPose] on MDN}."]

and Xr_joint_space : sig
  type t = [ `Xr_joint_space ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace} \
     [XRJointSpace]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_joint_space | `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace} \
     [XRJointSpace]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_joint_space ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_joint_space | `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace} \
     [XRJointSpace]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRJointSpace"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_space this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace} \
   [XRJointSpace] on MDN}."]

and Xr_layer : sig
  type t = [ `Xr_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayer} [XRLayer]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayer} [XRLayer]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_layer ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayer} [XRLayer]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRLayer} [XRLayer] \
   on MDN}."]

and Xr_layer_event : sig
  type t = [ `Xr_layer_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent} \
     [XRLayerEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_layer_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent} \
     [XRLayerEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Xr_layer_event_init.t -> unit -> 'a super

  val layer : t -> 'a Xr_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent/layer} \
     [layer] on MDN}."]
end = struct
  type t = [ `Xr_layer_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_layer_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent} \
     [XRLayerEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRLayerEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Xr_layer_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let layer this = Xr_layer.of_any (Js.Ffi.get this "layer")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent} \
   [XRLayerEvent] on MDN}."]

and Xr_layer_event_init : sig
  type t [@@ocaml.doc "The type for the [XRLayerEventInit] dictionary."]

  val make : layer:Xr_layer.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val layer : t -> Xr_layer.t
end = struct
  type t = Js.any

  let make ~layer () =
    let layer = Xr_layer.to_any layer in
    Js.Ffi.obj [| ("layer", layer) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let layer this = Xr_layer.of_any (Js.Ffi.get this "layer")
end

and Xr_media_binding : sig
  type t = [ `Xr_media_binding ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding} \
     [XRMediaBinding]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val make : session:Xr_session.t -> unit -> t

  val create_quad_layer :
    video:Html_video_element.t ->
    init:Xr_media_layer_init.t ->
    t ->
    'a Xr_quad_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding/createQuadLayer} \
     [createQuadLayer] on MDN}."]

  val create_cylinder_layer :
    video:Html_video_element.t ->
    init:Xr_media_layer_init.t ->
    t ->
    'a Xr_cylinder_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding/createCylinderLayer} \
     [createCylinderLayer] on MDN}."]

  val create_equirect_layer :
    video:Html_video_element.t ->
    init:Xr_media_layer_init.t ->
    t ->
    'a Xr_equirect_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding/createEquirectLayer} \
     [createEquirectLayer] on MDN}."]
end = struct
  type t = [ `Xr_media_binding ] Js.t

  let t = Js.Ffi.constr "XRMediaBinding"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let make ~session () =
    let session = Xr_session.to_any session in
    Js.Ffi.obj_new t [| session |]

  let create_quad_layer ~video ~init this =
    let video = Html_video_element.to_any video in
    let init = Xr_media_layer_init.to_any init in
    Xr_quad_layer.of_any
      (Js.Ffi.meth_call this "createQuadLayer" [| video; init |])

  let create_cylinder_layer ~video ~init this =
    let video = Html_video_element.to_any video in
    let init = Xr_media_layer_init.to_any init in
    Xr_cylinder_layer.of_any
      (Js.Ffi.meth_call this "createCylinderLayer" [| video; init |])

  let create_equirect_layer ~video ~init this =
    let video = Html_video_element.to_any video in
    let init = Xr_media_layer_init.to_any init in
    Xr_equirect_layer.of_any
      (Js.Ffi.meth_call this "createEquirectLayer" [| video; init |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding} \
   [XRMediaBinding] on MDN}."]

and Xr_media_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRMediaLayerInit] dictionary."]

  val make :
    space:Xr_space.t ->
    ?layout:Xr_layer_layout.t ->
    ?invert_stereo:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val space : t -> Xr_space.t
  val layout : t -> Xr_layer_layout.t option
  val invert_stereo : t -> bool option
end = struct
  type t = Js.any

  let make ~space ?layout ?invert_stereo () =
    let space = Xr_space.to_any space in
    let layout = (Js.Any.nullable_of_option Xr_layer_layout.to_any) layout in
    let invert_stereo =
      (Js.Any.nullable_of_option Js.Any.of_bool) invert_stereo
    in
    Js.Ffi.obj
      [|
        ("space", space); ("layout", layout); ("invertStereo", invert_stereo);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let space this = Xr_space.of_any (Js.Ffi.get this "space")

  let layout this =
    (Js.Any.nullable_to_option Xr_layer_layout.of_any) (Js.Ffi.get this "layout")

  let invert_stereo this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "invertStereo")
end

and Xr_pose : sig
  type t = [ `Xr_pose ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRPose} [XRPose]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val transform : t -> Xr_rigid_transform.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRPose/transform} \
     [transform] on MDN}."]
end = struct
  type t = [ `Xr_pose ] Js.t

  let t = Js.Ffi.constr "XRPose"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let transform this = Xr_rigid_transform.of_any (Js.Ffi.get this "transform")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRPose} [XRPose] \
   on MDN}."]

and Xr_projection_layer : sig
  type t = [ `Xr_projection_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer} \
     [XRProjectionLayer]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_projection_layer
      | `Xr_composition_layer
      | `Xr_layer
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer} \
     [XRProjectionLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_projection_layer ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_projection_layer
      | `Xr_composition_layer
      | `Xr_layer
      | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer} \
     [XRProjectionLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRProjectionLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_composition_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer} \
   [XRProjectionLayer] on MDN}."]

and Xr_quad_layer : sig
  type t = [ `Xr_quad_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer} \
     [XRQuadLayer]} interface."]

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_quad_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer} \
     [XRQuadLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_quad_layer ] Js.t

  type 'a super = 'a Js.t
    constraint
      'a =
      [< `Xr_quad_layer | `Xr_composition_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer} \
     [XRQuadLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRQuadLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_composition_layer this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer} \
   [XRQuadLayer] on MDN}."]

and Xr_ray_direction_init : sig
  type t [@@ocaml.doc "The type for the [XRRayDirectionInit] dictionary."]

  val make : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val x : t -> float option
  val y : t -> float option
  val z : t -> float option
  val w : t -> float option
end = struct
  type t = Js.any

  let make ?x ?y ?z ?w () =
    let x = (Js.Any.nullable_of_option Js.Any.of_float) x in
    let y = (Js.Any.nullable_of_option Js.Any.of_float) y in
    let z = (Js.Any.nullable_of_option Js.Any.of_float) z in
    let w = (Js.Any.nullable_of_option Js.Any.of_float) w in
    Js.Ffi.obj [| ("x", x); ("y", y); ("z", z); ("w", w) |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let x this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "x")
  let y this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "y")
  let z this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "z")
  let w this = (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "w")
end

and Xr_ray : sig
  type t = [ `Xr_ray ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRay} [XRRay]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_origin_and_direction :
    ?origin:Dom_point_init.t -> ?direction:Xr_ray_direction_init.t -> unit -> t

  val make : transform:Xr_rigid_transform.t -> unit -> t

  val origin : t -> Dom_point_read_only.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRay/origin} \
     [origin] on MDN}."]

  val direction : t -> Dom_point_read_only.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRay/direction} \
     [direction] on MDN}."]

  val matrix : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRay/matrix} \
     [matrix] on MDN}."]
end = struct
  type t = [ `Xr_ray ] Js.t

  let t = Js.Ffi.constr "XRRay"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_origin_and_direction ?origin ?direction () =
    let origin = (Js.Any.undefined_of_option Dom_point_init.to_any) origin in
    let direction =
      (Js.Any.undefined_of_option Xr_ray_direction_init.to_any) direction
    in
    Js.Ffi.obj_new t [| origin; direction |]

  let make ~transform () =
    let transform = Xr_rigid_transform.to_any transform in
    Js.Ffi.obj_new t [| transform |]

  let origin this = Dom_point_read_only.of_any (Js.Ffi.get this "origin")
  let direction this = Dom_point_read_only.of_any (Js.Ffi.get this "direction")
  let matrix this = Float32_array.of_any (Js.Ffi.get this "matrix")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRay} [XRRay] on \
   MDN}."]

and Xr_reference_space_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val viewer : t
  val local : t
  val local_floor : t
  val bounded_floor : t
  val unbounded : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let viewer = Js.of_string "viewer"
  let local = Js.of_string "local"
  let local_floor = Js.of_string "local-floor"
  let bounded_floor = Js.of_string "bounded-floor"
  let unbounded = Js.of_string "unbounded"
end

and Xr_reference_space : sig
  type t = [ `Xr_reference_space ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace} \
     [XRReferenceSpace]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_reference_space | `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace} \
     [XRReferenceSpace]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val get_offset_reference_space :
    origin_offset:Xr_rigid_transform.t -> t -> 'a super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/getOffsetReferenceSpace} \
     [getOffsetReferenceSpace] on MDN}."]
end = struct
  type t = [ `Xr_reference_space ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_reference_space | `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace} \
     [XRReferenceSpace]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRReferenceSpace"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_space this = Js.Ffi.magic this

  let get_offset_reference_space ~origin_offset this =
    let origin_offset = Xr_rigid_transform.to_any origin_offset in
    of_any (Js.Ffi.meth_call this "getOffsetReferenceSpace" [| origin_offset |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace} \
   [XRReferenceSpace] on MDN}."]

and Xr_render_state_init : sig
  type t [@@ocaml.doc "The type for the [XRRenderStateInit] dictionary."]

  val make :
    ?depth_near:float ->
    ?depth_far:float ->
    ?inline_vertical_field_of_view:float ->
    ?base_layer:Xr_web_gl_layer.t option ->
    ?layers:Xr_layer.t array option ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val depth_near : t -> float option
  val depth_far : t -> float option
  val inline_vertical_field_of_view : t -> float option
  val base_layer : t -> Xr_web_gl_layer.t option option
  val layers : t -> Xr_layer.t array option option
end = struct
  type t = Js.any

  let make ?depth_near ?depth_far ?inline_vertical_field_of_view ?base_layer
      ?layers () =
    let depth_near = (Js.Any.nullable_of_option Js.Any.of_float) depth_near in
    let depth_far = (Js.Any.nullable_of_option Js.Any.of_float) depth_far in
    let inline_vertical_field_of_view =
      (Js.Any.nullable_of_option Js.Any.of_float) inline_vertical_field_of_view
    in
    let base_layer =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Xr_web_gl_layer.to_any)
      )
        base_layer
    in
    let layers =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option (Js.Any.of_array Xr_layer.to_any))
      )
        layers
    in
    Js.Ffi.obj
      [|
        ("depthNear", depth_near);
        ("depthFar", depth_far);
        ("inlineVerticalFieldOfView", inline_vertical_field_of_view);
        ("baseLayer", base_layer);
        ("layers", layers);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let depth_near this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "depthNear")

  let depth_far this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "depthFar")

  let inline_vertical_field_of_view this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "inlineVerticalFieldOfView")

  let base_layer this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Xr_web_gl_layer.of_any)
    )
      (Js.Ffi.get this "baseLayer")

  let layers this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option (Js.Any.to_array Xr_layer.of_any))
    )
      (Js.Ffi.get this "layers")
end

and Xr_render_state : sig
  type t = [ `Xr_render_state ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState} \
     [XRRenderState]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val depth_near : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/depthNear} \
     [depthNear] on MDN}."]

  val depth_far : t -> float
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/depthFar} \
     [depthFar] on MDN}."]

  val inline_vertical_field_of_view : t -> float option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/inlineVerticalFieldOfView} \
     [inlineVerticalFieldOfView] on MDN}."]

  val base_layer : t -> 'a Xr_web_gl_layer.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/baseLayer} \
     [baseLayer] on MDN}."]

  val layers : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/layers} \
     [layers] on MDN}."]
end = struct
  type t = [ `Xr_render_state ] Js.t

  let t = Js.Ffi.constr "XRRenderState"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let depth_near this = Js.Any.to_float (Js.Ffi.get this "depthNear")
  let depth_far this = Js.Any.to_float (Js.Ffi.get this "depthFar")

  let inline_vertical_field_of_view this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "inlineVerticalFieldOfView")

  let base_layer this =
    (Js.Any.nullable_to_option Xr_web_gl_layer.of_any)
      (Js.Ffi.get this "baseLayer")

  let layers this = Js.to_any (Js.Ffi.get this "layers")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState} \
   [XRRenderState] on MDN}."]

and Xr_rigid_transform : sig
  type t = [ `Xr_rigid_transform ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform} \
     [XRRigidTransform]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_position_and_orientation :
    ?position:Dom_point_init.t -> ?orientation:Dom_point_init.t -> unit -> t

  val position : t -> Dom_point_read_only.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/position} \
     [position] on MDN}."]

  val orientation : t -> Dom_point_read_only.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/orientation} \
     [orientation] on MDN}."]

  val matrix : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/matrix} \
     [matrix] on MDN}."]

  val inverse : t -> t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/inverse} \
     [inverse] on MDN}."]
end = struct
  type t = [ `Xr_rigid_transform ] Js.t

  let t = Js.Ffi.constr "XRRigidTransform"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_position_and_orientation ?position ?orientation () =
    let position =
      (Js.Any.undefined_of_option Dom_point_init.to_any) position
    in
    let orientation =
      (Js.Any.undefined_of_option Dom_point_init.to_any) orientation
    in
    Js.Ffi.obj_new t [| position; orientation |]

  let position this = Dom_point_read_only.of_any (Js.Ffi.get this "position")

  let orientation this =
    Dom_point_read_only.of_any (Js.Ffi.get this "orientation")

  let matrix this = Float32_array.of_any (Js.Ffi.get this "matrix")
  let inverse this = of_any (Js.Ffi.get this "inverse")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform} \
   [XRRigidTransform] on MDN}."]

and Xr_environment_blend_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val opaque : t
  val additive : t
  val alpha_blend : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let opaque = Js.of_string "opaque"
  let additive = Js.of_string "additive"
  let alpha_blend = Js.of_string "alpha-blend"
end

and Xr_visibility_state : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val visible : t
  val visible_blurred : t
  val hidden : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let visible = Js.of_string "visible"
  let visible_blurred = Js.of_string "visible-blurred"
  let hidden = Js.of_string "hidden"
end

and Xr_frame_request_callback : sig
  type t = Dom_high_res_time_stamp.t -> Xr_frame.t -> unit

  val of_any : Js.any -> t
  val to_any : t -> Js.any
end =
  Xr_frame_request_callback

and Xr_session : sig
  type t = [ `Xr_session ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession} [XRSession]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_session | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession} [XRSession]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val environment_blend_mode : t -> Xr_environment_blend_mode.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/environmentBlendMode} \
     [environmentBlendMode] on MDN}."]

  val visibility_state : t -> Xr_visibility_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/visibilityState} \
     [visibilityState] on MDN}."]

  val render_state : t -> Xr_render_state.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/renderState} \
     [renderState] on MDN}."]

  val input_sources : t -> Xr_input_source_array.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/inputSources} \
     [inputSources] on MDN}."]

  val update_render_state : ?state:Xr_render_state_init.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/updateRenderState} \
     [updateRenderState] on MDN}."]

  val request_reference_space :
    type':Xr_reference_space_type.t -> t -> Xr_reference_space.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace} \
     [requestReferenceSpace] on MDN}."]

  val request_animation_frame : callback:Xr_frame_request_callback.t -> t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestAnimationFrame} \
     [requestAnimationFrame] on MDN}."]

  val cancel_animation_frame : handle:int -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/cancelAnimationFrame} \
     [cancelAnimationFrame] on MDN}."]

  val end' : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSession/end} \
     [end] on MDN}."]

  val request_hit_test_source :
    options:Xr_hit_test_options_init.t -> t -> Xr_hit_test_source.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestHitTestSource} \
     [requestHitTestSource] on MDN}."]

  val onend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onend} \
     [onend] on MDN}."]

  val set_onend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onend} \
     [onend] on MDN}."]

  val onselect : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselect} \
     [onselect] on MDN}."]

  val set_onselect : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselect} \
     [onselect] on MDN}."]

  val onsqueeze : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueeze} \
     [onsqueeze] on MDN}."]

  val set_onsqueeze : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueeze} \
     [onsqueeze] on MDN}."]

  val oninputsourceschange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/oninputsourceschange} \
     [oninputsourceschange] on MDN}."]

  val set_oninputsourceschange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/oninputsourceschange} \
     [oninputsourceschange] on MDN}."]

  val onselectstart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselectstart} \
     [onselectstart] on MDN}."]

  val set_onselectstart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselectstart} \
     [onselectstart] on MDN}."]

  val onselectend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselectend} \
     [onselectend] on MDN}."]

  val set_onselectend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onselectend} \
     [onselectend] on MDN}."]

  val onsqueezestart : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueezestart} \
     [onsqueezestart] on MDN}."]

  val set_onsqueezestart : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueezestart} \
     [onsqueezestart] on MDN}."]

  val onsqueezeend : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueezeend} \
     [onsqueezeend] on MDN}."]

  val set_onsqueezeend : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onsqueezeend} \
     [onsqueezeend] on MDN}."]

  val onvisibilitychange : t -> Event_handler.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onvisibilitychange} \
     [onvisibilitychange] on MDN}."]

  val set_onvisibilitychange : t -> Event_handler.t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession/onvisibilitychange} \
     [onvisibilitychange] on MDN}."]
end = struct
  type t = [ `Xr_session ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_session | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSession} [XRSession]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRSession"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let environment_blend_mode this =
    Xr_environment_blend_mode.of_any (Js.Ffi.get this "environmentBlendMode")

  let visibility_state this =
    Xr_visibility_state.of_any (Js.Ffi.get this "visibilityState")

  let render_state this = Xr_render_state.of_any (Js.Ffi.get this "renderState")

  let input_sources this =
    Xr_input_source_array.of_any (Js.Ffi.get this "inputSources")

  let update_render_state ?state this =
    let state =
      (Js.Any.undefined_of_option Xr_render_state_init.to_any) state
    in
    Js.to_unit (Js.Ffi.meth_call this "updateRenderState" [| state |])

  let request_reference_space ~type' this =
    let type' = Xr_reference_space_type.to_any type' in
    (Promise.of_any Xr_reference_space.of_any)
      (Js.Ffi.meth_call this "requestReferenceSpace" [| type' |])

  let request_animation_frame ~callback this =
    let callback = Xr_frame_request_callback.to_any callback in
    Js.Any.to_int (Js.Ffi.meth_call this "requestAnimationFrame" [| callback |])

  let cancel_animation_frame ~handle this =
    let handle = Js.Any.of_int handle in
    Js.to_unit (Js.Ffi.meth_call this "cancelAnimationFrame" [| handle |])

  let end' this = (Promise.of_any Js.to_unit) (Js.Ffi.meth_call this "end" [||])

  let request_hit_test_source ~options this =
    let options = Xr_hit_test_options_init.to_any options in
    (Promise.of_any Xr_hit_test_source.of_any)
      (Js.Ffi.meth_call this "requestHitTestSource" [| options |])

  let onend this = Event_handler.of_any (Js.Ffi.get this "onend")
  let set_onend this x = Js.Ffi.set this "onend" (Event_handler.to_any x)
  let onselect this = Event_handler.of_any (Js.Ffi.get this "onselect")
  let set_onselect this x = Js.Ffi.set this "onselect" (Event_handler.to_any x)
  let onsqueeze this = Event_handler.of_any (Js.Ffi.get this "onsqueeze")
  let set_onsqueeze this x = Js.Ffi.set this "onsqueeze" (Event_handler.to_any x)

  let oninputsourceschange this =
    Event_handler.of_any (Js.Ffi.get this "oninputsourceschange")

  let set_oninputsourceschange this x =
    Js.Ffi.set this "oninputsourceschange" (Event_handler.to_any x)

  let onselectstart this = Event_handler.of_any (Js.Ffi.get this "onselectstart")

  let set_onselectstart this x =
    Js.Ffi.set this "onselectstart" (Event_handler.to_any x)

  let onselectend this = Event_handler.of_any (Js.Ffi.get this "onselectend")

  let set_onselectend this x =
    Js.Ffi.set this "onselectend" (Event_handler.to_any x)

  let onsqueezestart this =
    Event_handler.of_any (Js.Ffi.get this "onsqueezestart")

  let set_onsqueezestart this x =
    Js.Ffi.set this "onsqueezestart" (Event_handler.to_any x)

  let onsqueezeend this = Event_handler.of_any (Js.Ffi.get this "onsqueezeend")

  let set_onsqueezeend this x =
    Js.Ffi.set this "onsqueezeend" (Event_handler.to_any x)

  let onvisibilitychange this =
    Event_handler.of_any (Js.Ffi.get this "onvisibilitychange")

  let set_onvisibilitychange this x =
    Js.Ffi.set this "onvisibilitychange" (Event_handler.to_any x)
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSession} \
   [XRSession] on MDN}."]

and Xr_session_event : sig
  type t = [ `Xr_session_event ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent} \
     [XRSessionEvent]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_session_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent} \
     [XRSessionEvent]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_type_and_event_init_dict :
    type':string -> event_init_dict:Xr_session_event_init.t -> unit -> 'a super

  val session : t -> 'a Xr_session.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent/session} \
     [session] on MDN}."]
end = struct
  type t = [ `Xr_session_event ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_session_event | `Event ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent} \
     [XRSessionEvent]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRSessionEvent"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event this = Js.Ffi.magic this

  let with_type_and_event_init_dict ~type' ~event_init_dict () =
    let type' = Js.Any.of_string type' in
    let event_init_dict = Xr_session_event_init.to_any event_init_dict in
    Js.Ffi.obj_new t [| type'; event_init_dict |]

  let session this = Xr_session.of_any (Js.Ffi.get this "session")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent} \
   [XRSessionEvent] on MDN}."]

and Xr_session_event_init : sig
  type t [@@ocaml.doc "The type for the [XRSessionEventInit] dictionary."]

  val make : session:Xr_session.t -> unit -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_event_init : t -> Event_init.t
  val session : t -> Xr_session.t
end = struct
  type t = Js.any

  let make ~session () =
    let session = Xr_session.to_any session in
    Js.Ffi.obj [| ("session", session) |]

  let to_event_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any
  let session this = Xr_session.of_any (Js.Ffi.get this "session")
end

and Xr_space : sig
  type t = [ `Xr_space ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSpace} [XRSpace]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSpace} [XRSpace]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any
end = struct
  type t = [ `Xr_space ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_space | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSpace} [XRSpace]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRSpace"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSpace} [XRSpace] \
   on MDN}."]

and Xr_sub_image : sig
  type t = [ `Xr_sub_image ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSubImage} \
     [XRSubImage]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val viewport : t -> Xr_viewport.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSubImage/viewport} \
     [viewport] on MDN}."]
end = struct
  type t = [ `Xr_sub_image ] Js.t

  let t = Js.Ffi.constr "XRSubImage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let viewport this = Xr_viewport.of_any (Js.Ffi.get this "viewport")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSubImage} \
   [XRSubImage] on MDN}."]

and Xr_system : sig
  type t = [ `Xr_system ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSystem} [XRSystem]} \
     interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_system | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSystem} [XRSystem]} \
     interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val is_session_supported : mode:Xr_session_mode.t -> t -> bool Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/isSessionSupported} \
     [isSessionSupported] on MDN}."]

  val request_session :
    mode:Xr_session_mode.t ->
    ?parameters:Xr_session_init.t ->
    t ->
    Xr_session.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/requestSession} \
     [requestSession] on MDN}."]

  val test : t -> Xr_test.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/test} \
     [test] on MDN}."]
end = struct
  type t = [ `Xr_system ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_system | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRSystem} [XRSystem]} \
     interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRSystem"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_event_target this = Js.Ffi.magic this

  let is_session_supported ~mode this =
    let mode = Xr_session_mode.to_any mode in
    (Promise.of_any Js.Any.to_bool)
      (Js.Ffi.meth_call this "isSessionSupported" [| mode |])

  let request_session ~mode ?parameters this =
    let mode = Xr_session_mode.to_any mode in
    let parameters =
      (Js.Any.undefined_of_option Xr_session_init.to_any) parameters
    in
    (Promise.of_any Xr_session.of_any)
      (Js.Ffi.meth_call this "requestSession" [| mode; parameters |])

  let test this = Xr_test.of_any (Js.Ffi.get this "test")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRSystem} \
   [XRSystem] on MDN}."]

and Xr_session_mode : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val inline : t
  val immersive_vr : t
  val immersive_ar : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let inline = Js.of_string "inline"
  let immersive_vr = Js.of_string "immersive-vr"
  let immersive_ar = Js.of_string "immersive-ar"
end

and Xr_session_init : sig
  type t [@@ocaml.doc "The type for the [XRSessionInit] dictionary."]

  val make :
    ?required_features:Js.any array ->
    ?optional_features:Js.any array ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val required_features : t -> Js.any array option
  val optional_features : t -> Js.any array option
end = struct
  type t = Js.any

  let make ?required_features ?optional_features () =
    let required_features =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.of_any)) required_features
    in
    let optional_features =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.of_any)) optional_features
    in
    Js.Ffi.obj
      [|
        ("requiredFeatures", required_features);
        ("optionalFeatures", optional_features);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let required_features this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.to_any))
      (Js.Ffi.get this "requiredFeatures")

  let optional_features this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.to_any))
      (Js.Ffi.get this "optionalFeatures")
end

and Xr_test : sig
  type t = [ `Xr_test ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRTest} [XRTest]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val simulate_device_connection :
    init:Fake_xr_device_init.t -> t -> Fake_xr_device.t Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRTest/simulateDeviceConnection} \
     [simulateDeviceConnection] on MDN}."]

  val simulate_user_activation : f:Function.t -> t -> unit
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRTest/simulateUserActivation} \
     [simulateUserActivation] on MDN}."]

  val disconnect_all_devices : t -> unit Js.promise
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRTest/disconnectAllDevices} \
     [disconnectAllDevices] on MDN}."]
end = struct
  type t = [ `Xr_test ] Js.t

  let t = Js.Ffi.constr "XRTest"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let simulate_device_connection ~init this =
    let init = Fake_xr_device_init.to_any init in
    (Promise.of_any Fake_xr_device.of_any)
      (Js.Ffi.meth_call this "simulateDeviceConnection" [| init |])

  let simulate_user_activation ~f this =
    let f = Function.to_any f in
    Js.to_unit (Js.Ffi.meth_call this "simulateUserActivation" [| f |])

  let disconnect_all_devices this =
    (Promise.of_any Js.to_unit)
      (Js.Ffi.meth_call this "disconnectAllDevices" [||])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRTest} [XRTest] \
   on MDN}."]

and Fake_xr_device_init : sig
  type t [@@ocaml.doc "The type for the [FakeXRDeviceInit] dictionary."]

  val make :
    ?supports_immersive:bool ->
    ?supported_modes:Xr_session_mode.t array ->
    views:Fake_xr_view_init.t array ->
    ?supported_features:string array ->
    ?supports_tracking_in_inline:bool ->
    ?bounds_coodinates:Fake_xr_bounds_point.t array ->
    ?floor_origin:Fake_xr_rigid_transform_init.t ->
    ?viewer_origin:Fake_xr_rigid_transform_init.t ->
    ?world:Fake_xr_world_init.t ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val supports_immersive : t -> bool option
  val supported_modes : t -> Xr_session_mode.t array option
  val views : t -> Fake_xr_view_init.t array
  val supported_features : t -> string array option
  val supports_tracking_in_inline : t -> bool option
  val bounds_coodinates : t -> Fake_xr_bounds_point.t array option
  val floor_origin : t -> Fake_xr_rigid_transform_init.t option
  val viewer_origin : t -> Fake_xr_rigid_transform_init.t option
  val world : t -> Fake_xr_world_init.t option
end = struct
  type t = Js.any

  let make ?supports_immersive ?supported_modes ~views ?supported_features
      ?supports_tracking_in_inline ?bounds_coodinates ?floor_origin
      ?viewer_origin ?world () =
    let supports_immersive =
      (Js.Any.nullable_of_option Js.Any.of_bool) supports_immersive
    in
    let supported_modes =
      (Js.Any.nullable_of_option (Js.Any.of_array Xr_session_mode.to_any))
        supported_modes
    in
    let views = (Js.Any.of_array Fake_xr_view_init.to_any) views in
    let supported_features =
      (Js.Any.nullable_of_option (Js.Any.of_array Js.Any.of_string))
        supported_features
    in
    let supports_tracking_in_inline =
      (Js.Any.nullable_of_option Js.Any.of_bool) supports_tracking_in_inline
    in
    let bounds_coodinates =
      (Js.Any.nullable_of_option (Js.Any.of_array Fake_xr_bounds_point.to_any))
        bounds_coodinates
    in
    let floor_origin =
      (Js.Any.nullable_of_option Fake_xr_rigid_transform_init.to_any)
        floor_origin
    in
    let viewer_origin =
      (Js.Any.nullable_of_option Fake_xr_rigid_transform_init.to_any)
        viewer_origin
    in
    let world = (Js.Any.nullable_of_option Fake_xr_world_init.to_any) world in
    Js.Ffi.obj
      [|
        ("supportsImmersive", supports_immersive);
        ("supportedModes", supported_modes);
        ("views", views);
        ("supportedFeatures", supported_features);
        ("supportsTrackingInInline", supports_tracking_in_inline);
        ("boundsCoodinates", bounds_coodinates);
        ("floorOrigin", floor_origin);
        ("viewerOrigin", viewer_origin);
        ("world", world);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let supports_immersive this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "supportsImmersive")

  let supported_modes this =
    (Js.Any.nullable_to_option (Js.Any.to_array Xr_session_mode.of_any))
      (Js.Ffi.get this "supportedModes")

  let views this =
    (Js.Any.to_array Fake_xr_view_init.of_any) (Js.Ffi.get this "views")

  let supported_features this =
    (Js.Any.nullable_to_option (Js.Any.to_array Js.Any.to_string))
      (Js.Ffi.get this "supportedFeatures")

  let supports_tracking_in_inline this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "supportsTrackingInInline")

  let bounds_coodinates this =
    (Js.Any.nullable_to_option (Js.Any.to_array Fake_xr_bounds_point.of_any))
      (Js.Ffi.get this "boundsCoodinates")

  let floor_origin this =
    (Js.Any.nullable_to_option Fake_xr_rigid_transform_init.of_any)
      (Js.Ffi.get this "floorOrigin")

  let viewer_origin this =
    (Js.Any.nullable_to_option Fake_xr_rigid_transform_init.of_any)
      (Js.Ffi.get this "viewerOrigin")

  let world this =
    (Js.Any.nullable_to_option Fake_xr_world_init.of_any)
      (Js.Ffi.get this "world")
end

and Xr_eye : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val left : t
  val right : t
  val none : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let left = Js.of_string "left"
  let right = Js.of_string "right"
  let none = Js.of_string "none"
end

and Xr_view : sig
  type t = [ `Xr_view ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRView} [XRView]} \
     interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val eye : t -> Xr_eye.t
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRView/eye} \
     [eye] on MDN}."]

  val projection_matrix : t -> 'todo_buffer
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRView/projectionMatrix} \
     [projectionMatrix] on MDN}."]

  val transform : t -> Xr_rigid_transform.t
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRView/transform} \
     [transform] on MDN}."]
end = struct
  type t = [ `Xr_view ] Js.t

  let t = Js.Ffi.constr "XRView"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let eye this = Xr_eye.of_any (Js.Ffi.get this "eye")

  let projection_matrix this =
    Float32_array.of_any (Js.Ffi.get this "projectionMatrix")

  let transform this = Xr_rigid_transform.of_any (Js.Ffi.get this "transform")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRView} [XRView] \
   on MDN}."]

and Xr_viewer_pose : sig
  type t = [ `Xr_viewer_pose ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose} \
     [XRViewerPose]} interface."]

  type 'a super = 'a Js.t constraint 'a = [< `Xr_viewer_pose | `Xr_pose ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose} \
     [XRViewerPose]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val views : t -> Js.any
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose/views} \
     [views] on MDN}."]
end = struct
  type t = [ `Xr_viewer_pose ] Js.t

  type 'a super = 'a Js.t constraint 'a = [< `Xr_viewer_pose | `Xr_pose ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose} \
     [XRViewerPose]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRViewerPose"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_pose this = Js.Ffi.magic this
  let views this = Js.to_any (Js.Ffi.get this "views")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose} \
   [XRViewerPose] on MDN}."]

and Xr_viewport : sig
  type t = [ `Xr_viewport ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewport} \
     [XRViewport]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val x : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/x} \
     [x] on MDN}."]

  val y : t -> int
  [@@ocaml.doc
    "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/y} \
     [y] on MDN}."]

  val width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/width} \
     [width] on MDN}."]

  val height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/height} \
     [height] on MDN}."]
end = struct
  type t = [ `Xr_viewport ] Js.t

  let t = Js.Ffi.constr "XRViewport"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let x this = Js.Any.to_int (Js.Ffi.get this "x")
  let y this = Js.Any.to_int (Js.Ffi.get this "y")
  let width this = Js.Any.to_int (Js.Ffi.get this "width")
  let height this = Js.Any.to_int (Js.Ffi.get this "height")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRViewport} \
   [XRViewport] on MDN}."]

and Xr_web_gl_binding : sig
  type t = [ `Xr_web_gl_binding ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding} \
     [XRWebGLBinding]} interface."]

  val of_any : Js.any -> t
  val to_any : t -> Js.any

  val with_session_and_context :
    session:Xr_session.t -> context:Xr_web_gl_rendering_context.t -> unit -> t

  val create_projection_layer :
    texture_type:Xr_texture_type.t ->
    ?init:Xr_projection_layer_init.t ->
    t ->
    'a Xr_projection_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/createProjectionLayer} \
     [createProjectionLayer] on MDN}."]

  val create_quad_layer :
    texture_type:Xr_texture_type.t ->
    ?init:Xr_quad_layer_init.t ->
    t ->
    'a Xr_quad_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/createQuadLayer} \
     [createQuadLayer] on MDN}."]

  val create_cylinder_layer :
    texture_type:Xr_texture_type.t ->
    ?init:Xr_cylinder_layer_init.t ->
    t ->
    'a Xr_cylinder_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/createCylinderLayer} \
     [createCylinderLayer] on MDN}."]

  val create_equirect_layer :
    texture_type:Xr_texture_type.t ->
    ?init:Xr_equirect_layer_init.t ->
    t ->
    'a Xr_equirect_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/createEquirectLayer} \
     [createEquirectLayer] on MDN}."]

  val create_cube_layer :
    ?init:Xr_cube_layer_init.t -> t -> 'a Xr_cube_layer.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/createCubeLayer} \
     [createCubeLayer] on MDN}."]

  val get_sub_image :
    layer:Xr_composition_layer.t ->
    frame:Xr_frame.t ->
    ?eye:Xr_eye.t ->
    t ->
    'a Xr_web_gl_sub_image.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/getSubImage} \
     [getSubImage] on MDN}."]

  val get_view_sub_image :
    layer:Xr_projection_layer.t ->
    view:Xr_view.t ->
    t ->
    'a Xr_web_gl_sub_image.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding/getViewSubImage} \
     [getViewSubImage] on MDN}."]
end = struct
  type t = [ `Xr_web_gl_binding ] Js.t

  let t = Js.Ffi.constr "XRWebGLBinding"
  let to_any = Js.to_any
  let of_any = Js.of_any

  let with_session_and_context ~session ~context () =
    let session = Xr_session.to_any session in
    let context = Xr_web_gl_rendering_context.to_any context in
    Js.Ffi.obj_new t [| session; context |]

  let create_projection_layer ~texture_type ?init this =
    let texture_type = Xr_texture_type.to_any texture_type in
    let init =
      (Js.Any.undefined_of_option Xr_projection_layer_init.to_any) init
    in
    Xr_projection_layer.of_any
      (Js.Ffi.meth_call this "createProjectionLayer" [| texture_type; init |])

  let create_quad_layer ~texture_type ?init this =
    let texture_type = Xr_texture_type.to_any texture_type in
    let init = (Js.Any.undefined_of_option Xr_quad_layer_init.to_any) init in
    Xr_quad_layer.of_any
      (Js.Ffi.meth_call this "createQuadLayer" [| texture_type; init |])

  let create_cylinder_layer ~texture_type ?init this =
    let texture_type = Xr_texture_type.to_any texture_type in
    let init =
      (Js.Any.undefined_of_option Xr_cylinder_layer_init.to_any) init
    in
    Xr_cylinder_layer.of_any
      (Js.Ffi.meth_call this "createCylinderLayer" [| texture_type; init |])

  let create_equirect_layer ~texture_type ?init this =
    let texture_type = Xr_texture_type.to_any texture_type in
    let init =
      (Js.Any.undefined_of_option Xr_equirect_layer_init.to_any) init
    in
    Xr_equirect_layer.of_any
      (Js.Ffi.meth_call this "createEquirectLayer" [| texture_type; init |])

  let create_cube_layer ?init this =
    let init = (Js.Any.undefined_of_option Xr_cube_layer_init.to_any) init in
    Xr_cube_layer.of_any (Js.Ffi.meth_call this "createCubeLayer" [| init |])

  let get_sub_image ~layer ~frame ?eye this =
    let layer = Xr_composition_layer.to_any layer in
    let frame = Xr_frame.to_any frame in
    let eye = (Js.Any.undefined_of_option Xr_eye.to_any) eye in
    Xr_web_gl_sub_image.of_any
      (Js.Ffi.meth_call this "getSubImage" [| layer; frame; eye |])

  let get_view_sub_image ~layer ~view this =
    let layer = Xr_projection_layer.to_any layer in
    let view = Xr_view.to_any view in
    Xr_web_gl_sub_image.of_any
      (Js.Ffi.meth_call this "getViewSubImage" [| layer; view |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding} \
   [XRWebGLBinding] on MDN}."]

and Xr_projection_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRProjectionLayerInit] dictionary."]

  val make :
    ?depth:bool ->
    ?stencil:bool ->
    ?alpha:bool ->
    ?scale_factor:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val depth : t -> bool option
  val stencil : t -> bool option
  val alpha : t -> bool option
  val scale_factor : t -> float option
end = struct
  type t = Js.any

  let make ?depth ?stencil ?alpha ?scale_factor () =
    let depth = (Js.Any.nullable_of_option Js.Any.of_bool) depth in
    let stencil = (Js.Any.nullable_of_option Js.Any.of_bool) stencil in
    let alpha = (Js.Any.nullable_of_option Js.Any.of_bool) alpha in
    let scale_factor =
      (Js.Any.nullable_of_option Js.Any.of_float) scale_factor
    in
    Js.Ffi.obj
      [|
        ("depth", depth);
        ("stencil", stencil);
        ("alpha", alpha);
        ("scaleFactor", scale_factor);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let depth this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "depth")

  let stencil this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "stencil")

  let alpha this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "alpha")

  let scale_factor this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "scaleFactor")
end

and Xr_quad_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRQuadLayerInit] dictionary."]

  val make :
    ?transform:Xr_rigid_transform.t option ->
    ?width:float ->
    ?height:float ->
    ?is_static:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_xr_layer_init : t -> Xr_layer_init.t
  val transform : t -> Xr_rigid_transform.t option option
  val width : t -> float option
  val height : t -> float option
  val is_static : t -> bool option
end = struct
  type t = Js.any

  let make ?transform ?width ?height ?is_static () =
    let transform =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Xr_rigid_transform.to_any)
      )
        transform
    in
    let width = (Js.Any.nullable_of_option Js.Any.of_float) width in
    let height = (Js.Any.nullable_of_option Js.Any.of_float) height in
    let is_static = (Js.Any.nullable_of_option Js.Any.of_bool) is_static in
    Js.Ffi.obj
      [|
        ("transform", transform);
        ("width", width);
        ("height", height);
        ("isStatic", is_static);
      |]

  let to_xr_layer_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let transform this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Xr_rigid_transform.of_any)
    )
      (Js.Ffi.get this "transform")

  let width this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "width")

  let height this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "height")

  let is_static this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isStatic")
end

and Xr_cylinder_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRCylinderLayerInit] dictionary."]

  val make :
    ?transform:Xr_rigid_transform.t option ->
    ?radius:float ->
    ?central_angle:float ->
    ?aspect_ratio:float ->
    ?is_static:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_xr_layer_init : t -> Xr_layer_init.t
  val transform : t -> Xr_rigid_transform.t option option
  val radius : t -> float option
  val central_angle : t -> float option
  val aspect_ratio : t -> float option
  val is_static : t -> bool option
end = struct
  type t = Js.any

  let make ?transform ?radius ?central_angle ?aspect_ratio ?is_static () =
    let transform =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Xr_rigid_transform.to_any)
      )
        transform
    in
    let radius = (Js.Any.nullable_of_option Js.Any.of_float) radius in
    let central_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) central_angle
    in
    let aspect_ratio =
      (Js.Any.nullable_of_option Js.Any.of_float) aspect_ratio
    in
    let is_static = (Js.Any.nullable_of_option Js.Any.of_bool) is_static in
    Js.Ffi.obj
      [|
        ("transform", transform);
        ("radius", radius);
        ("centralAngle", central_angle);
        ("aspectRatio", aspect_ratio);
        ("isStatic", is_static);
      |]

  let to_xr_layer_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let transform this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Xr_rigid_transform.of_any)
    )
      (Js.Ffi.get this "transform")

  let radius this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "radius")

  let central_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "centralAngle")

  let aspect_ratio this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "aspectRatio")

  let is_static this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isStatic")
end

and Xr_equirect_layer_init : sig
  type t [@@ocaml.doc "The type for the [XREquirectLayerInit] dictionary."]

  val make :
    ?transform:Xr_rigid_transform.t option ->
    ?radius:float ->
    ?central_horizontal_angle:float ->
    ?upper_vertical_angle:float ->
    ?lower_vertical_angle:float ->
    ?is_static:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_xr_layer_init : t -> Xr_layer_init.t
  val transform : t -> Xr_rigid_transform.t option option
  val radius : t -> float option
  val central_horizontal_angle : t -> float option
  val upper_vertical_angle : t -> float option
  val lower_vertical_angle : t -> float option
  val is_static : t -> bool option
end = struct
  type t = Js.any

  let make ?transform ?radius ?central_horizontal_angle ?upper_vertical_angle
      ?lower_vertical_angle ?is_static () =
    let transform =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Xr_rigid_transform.to_any)
      )
        transform
    in
    let radius = (Js.Any.nullable_of_option Js.Any.of_float) radius in
    let central_horizontal_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) central_horizontal_angle
    in
    let upper_vertical_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) upper_vertical_angle
    in
    let lower_vertical_angle =
      (Js.Any.nullable_of_option Js.Any.of_float) lower_vertical_angle
    in
    let is_static = (Js.Any.nullable_of_option Js.Any.of_bool) is_static in
    Js.Ffi.obj
      [|
        ("transform", transform);
        ("radius", radius);
        ("centralHorizontalAngle", central_horizontal_angle);
        ("upperVerticalAngle", upper_vertical_angle);
        ("lowerVerticalAngle", lower_vertical_angle);
        ("isStatic", is_static);
      |]

  let to_xr_layer_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let transform this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Xr_rigid_transform.of_any)
    )
      (Js.Ffi.get this "transform")

  let radius this =
    (Js.Any.nullable_to_option Js.Any.to_float) (Js.Ffi.get this "radius")

  let central_horizontal_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "centralHorizontalAngle")

  let upper_vertical_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "upperVerticalAngle")

  let lower_vertical_angle this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "lowerVerticalAngle")

  let is_static this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isStatic")
end

and Xr_cube_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRCubeLayerInit] dictionary."]

  val make :
    ?orientation:Dom_point_read_only.t option -> ?is_static:bool -> unit -> t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val to_xr_layer_init : t -> Xr_layer_init.t
  val orientation : t -> Dom_point_read_only.t option option
  val is_static : t -> bool option
end = struct
  type t = Js.any

  let make ?orientation ?is_static () =
    let orientation =
      (Js.Any.nullable_of_option
         (Js.Any.nullable_of_option Dom_point_read_only.to_any)
      )
        orientation
    in
    let is_static = (Js.Any.nullable_of_option Js.Any.of_bool) is_static in
    Js.Ffi.obj [| ("orientation", orientation); ("isStatic", is_static) |]

  let to_xr_layer_init this = Js.Ffi.magic this
  let to_any = Js.to_any
  let of_any = Js.of_any

  let orientation this =
    (Js.Any.nullable_to_option
       (Js.Any.nullable_to_option Dom_point_read_only.of_any)
    )
      (Js.Ffi.get this "orientation")

  let is_static this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "isStatic")
end

and Xr_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRLayerInit] dictionary."]

  val make :
    space:Xr_space.t ->
    view_pixel_width:int ->
    view_pixel_height:int ->
    ?layout:Xr_layer_layout.t ->
    ?depth:bool ->
    ?stencil:bool ->
    ?alpha:bool ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val space : t -> Xr_space.t
  val view_pixel_width : t -> int
  val view_pixel_height : t -> int
  val layout : t -> Xr_layer_layout.t option
  val depth : t -> bool option
  val stencil : t -> bool option
  val alpha : t -> bool option
end = struct
  type t = Js.any

  let make ~space ~view_pixel_width ~view_pixel_height ?layout ?depth ?stencil
      ?alpha () =
    let space = Xr_space.to_any space in
    let view_pixel_width = Js.Any.of_int view_pixel_width in
    let view_pixel_height = Js.Any.of_int view_pixel_height in
    let layout = (Js.Any.nullable_of_option Xr_layer_layout.to_any) layout in
    let depth = (Js.Any.nullable_of_option Js.Any.of_bool) depth in
    let stencil = (Js.Any.nullable_of_option Js.Any.of_bool) stencil in
    let alpha = (Js.Any.nullable_of_option Js.Any.of_bool) alpha in
    Js.Ffi.obj
      [|
        ("space", space);
        ("viewPixelWidth", view_pixel_width);
        ("viewPixelHeight", view_pixel_height);
        ("layout", layout);
        ("depth", depth);
        ("stencil", stencil);
        ("alpha", alpha);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any
  let space this = Xr_space.of_any (Js.Ffi.get this "space")
  let view_pixel_width this = Js.Any.to_int (Js.Ffi.get this "viewPixelWidth")
  let view_pixel_height this = Js.Any.to_int (Js.Ffi.get this "viewPixelHeight")

  let layout this =
    (Js.Any.nullable_to_option Xr_layer_layout.of_any) (Js.Ffi.get this "layout")

  let depth this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "depth")

  let stencil this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "stencil")

  let alpha this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "alpha")
end

and Xr_texture_type : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val texture : t
  val texture_array : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let texture = Js.of_string "texture"
  let texture_array = Js.of_string "texture-array"
end

and Xr_layer_layout : sig
  type t

  val to_string : t -> string
  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val default : t
  val mono : t
  val stereo : t
  val stereo_left_right : t
  val stereo_top_bottom : t
end = struct
  type t = Js.string

  let to_string = Js.to_string
  let to_any = Js.to_any
  let of_any = Js.of_any
  let default = Js.of_string "default"
  let mono = Js.of_string "mono"
  let stereo = Js.of_string "stereo"
  let stereo_left_right = Js.of_string "stereo-left-right"
  let stereo_top_bottom = Js.of_string "stereo-top-bottom"
end

and Xr_web_gl_rendering_context : sig
  type t

  val with_web_gl_rendering_context : Web_gl_rendering_context.t -> t
  val with_web_gl2_rendering_context : Web_gl2_rendering_context.t -> t
  val of_any : Js.any -> t
  val to_any : t -> Js.any
end = struct
  type t = Js.t

  let to_any this = Js.Any.of_fun 42 this
  let of_any this = Js.Any.of_fun 42 this
  let with_web_gl_rendering_context = Js.repr
  let with_web_gl2_rendering_context = Js.repr
end

and Xr_web_gl_layer_init : sig
  type t [@@ocaml.doc "The type for the [XRWebGLLayerInit] dictionary."]

  val make :
    ?antialias:bool ->
    ?depth:bool ->
    ?stencil:bool ->
    ?alpha:bool ->
    ?ignore_depth_values:bool ->
    ?framebuffer_scale_factor:float ->
    unit ->
    t

  val of_any : Js.any -> t
  val to_any : t -> Js.any
  val antialias : t -> bool option
  val depth : t -> bool option
  val stencil : t -> bool option
  val alpha : t -> bool option
  val ignore_depth_values : t -> bool option
  val framebuffer_scale_factor : t -> float option
end = struct
  type t = Js.any

  let make ?antialias ?depth ?stencil ?alpha ?ignore_depth_values
      ?framebuffer_scale_factor () =
    let antialias = (Js.Any.nullable_of_option Js.Any.of_bool) antialias in
    let depth = (Js.Any.nullable_of_option Js.Any.of_bool) depth in
    let stencil = (Js.Any.nullable_of_option Js.Any.of_bool) stencil in
    let alpha = (Js.Any.nullable_of_option Js.Any.of_bool) alpha in
    let ignore_depth_values =
      (Js.Any.nullable_of_option Js.Any.of_bool) ignore_depth_values
    in
    let framebuffer_scale_factor =
      (Js.Any.nullable_of_option Js.Any.of_float) framebuffer_scale_factor
    in
    Js.Ffi.obj
      [|
        ("antialias", antialias);
        ("depth", depth);
        ("stencil", stencil);
        ("alpha", alpha);
        ("ignoreDepthValues", ignore_depth_values);
        ("framebufferScaleFactor", framebuffer_scale_factor);
      |]

  let to_any = Js.to_any
  let of_any = Js.of_any

  let antialias this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "antialias")

  let depth this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "depth")

  let stencil this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "stencil")

  let alpha this =
    (Js.Any.nullable_to_option Js.Any.to_bool) (Js.Ffi.get this "alpha")

  let ignore_depth_values this =
    (Js.Any.nullable_to_option Js.Any.to_bool)
      (Js.Ffi.get this "ignoreDepthValues")

  let framebuffer_scale_factor this =
    (Js.Any.nullable_to_option Js.Any.to_float)
      (Js.Ffi.get this "framebufferScaleFactor")
end

and Xr_web_gl_layer : sig
  type t = [ `Xr_web_gl_layer ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer} \
     [XRWebGLLayer]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_web_gl_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer} \
     [XRWebGLLayer]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val with_session_and_context_and_layer_init :
    session:Xr_session.t ->
    context:Xr_web_gl_rendering_context.t ->
    ?layer_init:Xr_web_gl_layer_init.t ->
    unit ->
    'a super

  val antialias : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/antialias} \
     [antialias] on MDN}."]

  val ignore_depth_values : t -> bool
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/ignoreDepthValues} \
     [ignoreDepthValues] on MDN}."]

  val framebuffer : t -> 'a Web_gl_framebuffer.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebuffer} \
     [framebuffer] on MDN}."]

  val framebuffer_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebufferWidth} \
     [framebufferWidth] on MDN}."]

  val framebuffer_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebufferHeight} \
     [framebufferHeight] on MDN}."]

  val get_viewport : view:Xr_view.t -> t -> Xr_viewport.t option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/getViewport} \
     [getViewport] on MDN}."]
end = struct
  type t = [ `Xr_web_gl_layer ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_web_gl_layer | `Xr_layer | `Event_target ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer} \
     [XRWebGLLayer]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRWebGLLayer"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_layer this = Js.Ffi.magic this

  let with_session_and_context_and_layer_init ~session ~context ?layer_init () =
    let session = Xr_session.to_any session in
    let context = Xr_web_gl_rendering_context.to_any context in
    let layer_init =
      (Js.Any.undefined_of_option Xr_web_gl_layer_init.to_any) layer_init
    in
    Js.Ffi.obj_new t [| session; context; layer_init |]

  let antialias this = Js.Any.to_bool (Js.Ffi.get this "antialias")

  let ignore_depth_values this =
    Js.Any.to_bool (Js.Ffi.get this "ignoreDepthValues")

  let framebuffer this =
    (Js.Any.nullable_to_option Web_gl_framebuffer.of_any)
      (Js.Ffi.get this "framebuffer")

  let framebuffer_width this = Js.Any.to_int (Js.Ffi.get this "framebufferWidth")

  let framebuffer_height this =
    Js.Any.to_int (Js.Ffi.get this "framebufferHeight")

  let get_viewport ~view this =
    let view = Xr_view.to_any view in
    (Js.Any.nullable_to_option Xr_viewport.of_any)
      (Js.Ffi.meth_call this "getViewport" [| view |])
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer} \
   [XRWebGLLayer] on MDN}."]

and Xr_web_gl_sub_image : sig
  type t = [ `Xr_web_gl_sub_image ] Js.t
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage} \
     [XRWebGLSubImage]} interface."]

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_web_gl_sub_image | `Xr_sub_image ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage} \
     [XRWebGLSubImage]} interface or any base interface that it inherits."]

  val of_any : Js.any -> 'a super
  val to_any : t -> Js.any

  val color_texture : t -> 'a Web_gl_texture.super
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage/colorTexture} \
     [colorTexture] on MDN}."]

  val depth_stencil_texture : t -> 'a Web_gl_texture.super option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage/depthStencilTexture} \
     [depthStencilTexture] on MDN}."]

  val image_index : t -> int option
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage/imageIndex} \
     [imageIndex] on MDN}."]

  val texture_width : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage/textureWidth} \
     [textureWidth] on MDN}."]

  val texture_height : t -> int
  [@@ocaml.doc
    "See {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage/textureHeight} \
     [textureHeight] on MDN}."]
end = struct
  type t = [ `Xr_web_gl_sub_image ] Js.t

  type 'a super = 'a Js.t
    constraint 'a = [< `Xr_web_gl_sub_image | `Xr_sub_image ]
  [@@ocaml.doc
    "The type for the {{: \
     https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage} \
     [XRWebGLSubImage]} interface or any base interface that it inherits."]

  let t = Js.Ffi.constr "XRWebGLSubImage"
  let to_any = Js.to_any
  let of_any = Js.of_any
  let to_xr_sub_image this = Js.Ffi.magic this
  let color_texture this = Web_gl_texture.of_any (Js.Ffi.get this "colorTexture")

  let depth_stencil_texture this =
    (Js.Any.nullable_to_option Web_gl_texture.of_any)
      (Js.Ffi.get this "depthStencilTexture")

  let image_index this =
    (Js.Any.nullable_to_option Js.Any.to_int) (Js.Ffi.get this "imageIndex")

  let texture_width this = Js.Any.to_int (Js.Ffi.get this "textureWidth")
  let texture_height this = Js.Any.to_int (Js.Ffi.get this "textureHeight")
end
[@@ocaml.doc
  "See {{: https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage} \
   [XRWebGLSubImage] on MDN}."]
